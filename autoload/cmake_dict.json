{
    "add_compile_definitions": [
        "Add preprocessor definitions to the compilation of source files.\\n add_compile_definitions(<definition> ...)\\nAdds preprocessor definitions to the compiler command line for targets in the\\ncurrent directory and below (whether added before or after this command is\\ninvoked). See documentation of the ``directory``\\n",
        "command"
    ],
    "add_compile_options": [
        "Add options to the compilation of source files.\\n add_compile_options(<option> ...)\\nAdds options to the ``COMPILE_OPTIONS`` directory property.\\nThese options are used when compiling targets from the current\\ndirectory and below.\\n",
        "command"
    ],
    "add_custom_command": [
        "Add a custom build rule to the generated build system.\\nThere are two main signatures for ``add_custom_command``.\\nGenerating Files\\n^^^^^^^^^^^^^^^^\\nThe first signature is for adding a custom command to produce an output:\\n",
        "command"
    ],
    "add_custom_target": [
        "Add a target with no output so it will always be built.\\n add_custom_target(Name [ALL] [command1 [args1...]]\\n                   [COMMAND command2 [args2...] ...]\\n                   [DEPENDS depend depend depend ... ]\\n                   [BYPRODUCTS [files...]]\\n",
        "command"
    ],
    "add_definitions": [
        "Add -D define flags to the compilation of source files.\\n add_definitions(-DFOO -DBAR ...)\\nAdds definitions to the compiler command line for targets in the current\\ndirectory and below (whether added before or after this command is invoked).\\nThis command can be used to add any flags, but it is intended to add\\n",
        "command"
    ],
    "add_dependencies": [
        "Add a dependency between top-level targets.\\n add_dependencies(<target> [<target-dependency>]...)\\nMakes a top-level ``<target>`` depend on other top-level targets to\\nensure that they build before ``<target>`` does.  A top-level target\\nis one created by one of the ``add_executable()``,\\n",
        "command"
    ],
    "add_executable": [
        "Add an executable to the project using the specified source files.\\n add_executable(<name> [WIN32] [MACOSX_BUNDLE]\\n                [EXCLUDE_FROM_ALL]\\n                [source1] [source2 ...])\\nAdds an executable target called ``<name>`` to be built from the source\\n",
        "command"
    ],
    "add_library": [
        "Add a library to the project using the specified source files.\\nNormal Libraries\\n^^^^^^^^^^^^^^^^\\n add_library(<name> [STATIC | SHARED | MODULE]\\n             [EXCLUDE_FROM_ALL]\\n",
        "command"
    ],
    "add_link_options": [
        "Add options to the link step for executable, shared library or module\\nlibrary targets in the current directory and below that are added after\\nthis command is invoked.\\n add_link_options(<option> ...)\\nThis command can be used to add any link options, but alternative commands\\n",
        "command"
    ],
    "add_subdirectory": [
        "Add a subdirectory to the build.\\n add_subdirectory(source_dir [binary_dir] [EXCLUDE_FROM_ALL])\\nAdds a subdirectory to the build.  The source_dir specifies the\\ndirectory in which the source CMakeLists.txt and code files are\\nlocated.  If it is a relative path it will be evaluated with respect\\n",
        "command"
    ],
    "add_test": [
        "Add a test to the project to be run by ``ctest(1)``.\\n add_test(NAME <name> COMMAND <command> [<arg>...]\\n          [CONFIGURATIONS <config>...]\\n          [WORKING_DIRECTORY <dir>]\\n          [COMMAND_EXPAND_LISTS])\\n",
        "command"
    ],
    "aux_source_directory": [
        "Find all source files in a directory.\\n aux_source_directory(<dir> <variable>)\\nCollects the names of all the source files in the specified directory\\nand stores the list in the ``<variable>`` provided.  This command is\\nintended to be used by projects that use explicit template\\n",
        "command"
    ],
    "break": [
        "Break from an enclosing foreach or while loop.\\n break()\\nBreaks from an enclosing ``foreach()`` or ``while()`` loop.\\nSee also the ``continue()`` command.\\n",
        "command"
    ],
    "build_command": [
        "Get a command line to build the current project.\\nThis is mainly intended for internal use by the ``CTest`` module.\\n build_command(<variable>\\n               [CONFIGURATION <config>]\\n               [TARGET <target>]\\n",
        "command"
    ],
    "build_name": [
        "Disallowed since version 3.0.  See CMake Policy ``CMP0036``.\\nUse ``${CMAKE_SYSTEM}`` and ``${CMAKE_CXX_COMPILER}`` instead.\\n::\\n build_name(variable)\\nSets the specified variable to a string representing the platform and\\n",
        "command"
    ],
    "cmake_host_system_information": [
        "Query host system specific information.\\n cmake_host_system_information(RESULT <variable> QUERY <key> ...)\\nQueries system information of the host system on which cmake runs.\\nOne or more ``<key>`` can be provided to select the information to be\\nqueried.  The list of queried values is stored in ``<variable>``.\\n",
        "command"
    ],
    "cmake_minimum_required": [
        "Require a minimum version of cmake.\\n cmake_minimum_required(VERSION <min>[...<max>] [FATAL_ERROR])\\nSets the minimum required version of cmake for a project.\\nAlso updates the policy settings as explained below.\\n``<min>`` and the optional ``<max>`` are each CMake versions of the form\\n",
        "command"
    ],
    "cmake_parse_arguments": [
        "Parse function or macro arguments.\\n cmake_parse_arguments(<prefix> <options> <one_value_keywords>\\n                       <multi_value_keywords> <args>...)\\n cmake_parse_arguments(PARSE_ARGV <N> <prefix> <options>\\n                       <one_value_keywords> <multi_value_keywords>)\\n",
        "command"
    ],
    "cmake_policy": [
        "Manage CMake Policy settings.  See the ``cmake-policies(7)``\\nmanual for defined policies.\\nAs CMake evolves it is sometimes necessary to change existing behavior\\nin order to fix bugs or improve implementations of existing features.\\nThe CMake Policy mechanism is designed to help keep existing projects\\n",
        "command"
    ],
    "configure_file": [
        "Copy a file to another location and modify its contents.\\n configure_file(<input> <output>\\n                [COPYONLY] [ESCAPE_QUOTES] [@ONLY]\\n                [NEWLINE_STYLE [UNIX|DOS|WIN32|LF|CRLF] ])\\nCopies an ``<input>`` file to an ``<output>`` file and substitutes\\n",
        "command"
    ],
    "continue": [
        "Continue to the top of enclosing foreach or while loop.\\n continue()\\nThe ``continue`` command allows a cmake script to abort the rest of a block\\nin a ``foreach()`` or ``while()`` loop, and start at the top of\\nthe next iteration.\\n",
        "command"
    ],
    "create_test_sourcelist": [
        "Create a test driver and source list for building test programs.\\n create_test_sourcelist(sourceListName driverName\\n                        test1 test2 test3\\n                        EXTRA_INCLUDE include.h\\n                        FUNCTION function)\\n",
        "command"
    ],
    "ctest_build": [
        "Perform the :ref:`CTest Build Step` as a :ref:`Dashboard Client`.\\n::\\n ctest_build([BUILD <build-dir>] [APPEND]\\n             [CONFIGURATION <config>]\\n             [FLAGS <flags>]\\n",
        "command"
    ],
    "ctest_configure": [
        "Perform the :ref:`CTest Configure Step` as a :ref:`Dashboard Client`.\\n::\\n ctest_configure([BUILD <build-dir>] [SOURCE <source-dir>] [APPEND]\\n                 [OPTIONS <options>] [RETURN_VALUE <result-var>] [QUIET]\\n                 [CAPTURE_CMAKE_ERROR <result-var>])\\n",
        "command"
    ],
    "ctest_coverage": [
        "Perform the :ref:`CTest Coverage Step` as a :ref:`Dashboard Client`.\\n::\\n ctest_coverage([BUILD <build-dir>] [APPEND]\\n                [LABELS <label>...]\\n                [RETURN_VALUE <result-var>]\\n",
        "command"
    ],
    "ctest_empty_binary_directory": [
        "empties the binary directory\\n::\\n ctest_empty_binary_directory( directory )\\nRemoves a binary directory.  This command will perform some checks\\nprior to deleting the directory in an attempt to avoid malicious or\\n",
        "command"
    ],
    "ctest_memcheck": [
        "Perform the :ref:`CTest MemCheck Step` as a :ref:`Dashboard Client`.\\n::\\n ctest_memcheck([BUILD <build-dir>] [APPEND]\\n                [START <start-number>]\\n                [END <end-number>]\\n",
        "command"
    ],
    "ctest_read_custom_files": [
        "read CTestCustom files.\\n::\\n ctest_read_custom_files( directory ... )\\nRead all the CTestCustom.ctest or CTestCustom.cmake files from the\\ngiven directory.\\n",
        "command"
    ],
    "ctest_run_script": [
        "runs a ctest -S script\\n::\\n ctest_run_script([NEW_PROCESS] script_file_name script_file_name1\\n             script_file_name2 ... [RETURN_VALUE var])\\nRuns a script or scripts much like if it was run from ctest -S.  If no\\n",
        "command"
    ],
    "ctest_sleep": [
        "sleeps for some amount of time\\n::\\n ctest_sleep(<seconds>)\\nSleep for given number of seconds.\\n::\\n",
        "command"
    ],
    "ctest_start": [
        "Starts the testing for a given model\\n::\\n ctest_start(<model> [<source> [<binary>]] [GROUP <group>] [QUIET])\\n ctest_start([<model> [<source> [<binary>]]] [GROUP <group>] APPEND [QUIET])\\nStarts the testing for a given model.  The command should be called\\n",
        "command"
    ],
    "ctest_submit": [
        "Perform the :ref:`CTest Submit Step` as a :ref:`Dashboard Client`.\\n::\\n ctest_submit([PARTS <part>...] [FILES <file>...]\\n              [SUBMIT_URL <url>]\\n              [BUILD_ID <result-var>]\\n",
        "command"
    ],
    "ctest_test": [
        "Perform the :ref:`CTest Test Step` as a :ref:`Dashboard Client`.\\n::\\n ctest_test([BUILD <build-dir>] [APPEND]\\n            [START <start-number>]\\n            [END <end-number>]\\n",
        "command"
    ],
    "ctest_update": [
        "Perform the :ref:`CTest Update Step` as a :ref:`Dashboard Client`.\\n::\\n ctest_update([SOURCE <source-dir>]\\n              [RETURN_VALUE <result-var>]\\n              [CAPTURE_CMAKE_ERROR <result-var>]\\n",
        "command"
    ],
    "ctest_upload": [
        "Upload files to a dashboard server as a :ref:`Dashboard Client`.\\n::\\n ctest_upload(FILES <file>... [QUIET] [CAPTURE_CMAKE_ERROR <result-var>])\\nThe options are:\\n``FILES <file>...``\\n",
        "command"
    ],
    "define_property": [
        "Define and document custom properties.\\n define_property(<GLOBAL | DIRECTORY | TARGET | SOURCE |\\n                  TEST | VARIABLE | CACHED_VARIABLE>\\n                  PROPERTY <name> [INHERITED]\\n                  BRIEF_DOCS <brief-doc> [docs...]\\n",
        "command"
    ],
    "else": [
        "Starts the else portion of an if block.\\n else([<condition>])\\nSee the ``if()`` command.\\n",
        "command"
    ],
    "elseif": [
        "Starts an elseif portion of an if block.\\n elseif(<condition>)\\nSee the ``if()`` command, especially for the syntax and logic\\nof the ``<condition>``.\\n",
        "command"
    ],
    "enable_language": [
        "Enable a language (CXX/C/OBJC/OBJCXX/Fortran/etc)\\n enable_language(<lang> [OPTIONAL] )\\nEnables support for the named language in CMake.  This is\\nthe same as the ``project()`` command but does not create any of the extra\\nvariables that are created by the project command.  Example languages\\n",
        "command"
    ],
    "enable_testing": [
        "Enable testing for current directory and below.\\n enable_testing()\\nEnables testing for this directory and below.\\nThis command should be in the source directory root\\nbecause ctest expects to find a test file in the build\\n",
        "command"
    ],
    "endforeach": [
        "Ends a list of commands in a foreach block.\\n endforeach([<loop_var>])\\nSee the ``foreach()`` command.\\nThe optional ``<loop_var>`` argument is supported for backward compatibility\\nonly. If used it must be a verbatim repeat of the ``<loop_var>`` argument of\\n",
        "command"
    ],
    "endfunction": [
        "Ends a list of commands in a function block.\\n endfunction([<name>])\\nSee the ``function()`` command.\\nThe optional ``<name>`` argument is supported for backward compatibility\\nonly. If used it must be a verbatim repeat of the ``<name>`` argument\\n",
        "command"
    ],
    "endif": [
        "Ends a list of commands in an if block.\\n endif([<condition>])\\nSee the ``if()`` command.\\nThe optional ``<condition>`` argument is supported for backward compatibility\\nonly. If used it must be a verbatim repeat of the argument of the opening\\n",
        "command"
    ],
    "endmacro": [
        "Ends a list of commands in a macro block.\\n endmacro([<name>])\\nSee the ``macro()`` command.\\nThe optional ``<name>`` argument is supported for backward compatibility\\nonly. If used it must be a verbatim repeat of the ``<name>`` argument\\n",
        "command"
    ],
    "endwhile": [
        "Ends a list of commands in a while block.\\n endwhile([<condition>])\\nSee the ``while()`` command.\\nThe optional ``<condition>`` argument is supported for backward compatibility\\nonly. If used it must be a verbatim repeat of the argument of the opening\\n",
        "command"
    ],
    "exec_program": [
        "Run an executable program during the processing of the CMakeList.txt\\nfile.\\n::\\n exec_program(Executable [directory in which to run]\\n              [ARGS <arguments to executable>]\\n",
        "command"
    ],
    "execute_process": [
        "Execute one or more child processes.\\n execute_process(COMMAND <cmd1> [<arguments>]\\n                 [COMMAND <cmd2> [<arguments>]]...\\n                 [WORKING_DIRECTORY <directory>]\\n                 [TIMEOUT <seconds>]\\n",
        "command"
    ],
    "export": [
        "Export targets from the build tree for use by outside projects.\\n export(EXPORT <export-name> [NAMESPACE <namespace>] [FILE <filename>])\\nCreates a file ``<filename>`` that may be included by outside projects to\\nimport targets from the current project's build tree.  This is useful\\nduring cross-compiling to build utility executables that can run on\\n",
        "command"
    ],
    "export_library_dependencies": [
        "Disallowed since version 3.0.  See CMake Policy ``CMP0033``.\\nUse ``install(EXPORT)`` or ``export()`` command.\\nThis command generates an old-style library dependencies file.\\nProjects requiring CMake 2.6 or later should not use the command.  Use\\ninstead the ``install(EXPORT)`` command to help export targets from an\\n",
        "command"
    ],
    "file": [
        "File manipulation command.\\nSynopsis\\n^^^^^^^^\\n Reading\\n   file(READ <filename> <out-var> [...])\\n",
        "command"
    ],
    "find_file": [
        "A short-hand signature is:\\n find_file (<VAR> name1 [path1 path2 ...])\\nThe general signature is:\\n find_file (\\n           <VAR>\\n",
        "command"
    ],
    "find_library": [
        "A short-hand signature is:\\n find_library (<VAR> name1 [path1 path2 ...])\\nThe general signature is:\\n find_library (\\n           <VAR>\\n",
        "command"
    ],
    "find_package": [
        "Find an external project, and load its settings.\\nBasic Signature and Module Mode\\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n find_package(<PackageName> [version] [EXACT] [QUIET] [MODULE]\\n              [REQUIRED] [[COMPONENTS] [components...]]\\n",
        "command"
    ],
    "find_path": [
        "A short-hand signature is:\\n find_path (<VAR> name1 [path1 path2 ...])\\nThe general signature is:\\n find_path (\\n           <VAR>\\n",
        "command"
    ],
    "find_program": [
        "A short-hand signature is:\\n find_program (<VAR> name1 [path1 path2 ...])\\nThe general signature is:\\n find_program (\\n           <VAR>\\n",
        "command"
    ],
    "fltk_wrap_ui": [
        "Create FLTK user interfaces Wrappers.\\n fltk_wrap_ui(resultingLibraryName source1\\n              source2 ... sourceN )\\nProduce .h and .cxx files for all the .fl and .fld files listed.  The\\nresulting .h and .cxx files will be added to a variable named\\n",
        "command"
    ],
    "foreach": [
        "Evaluate a group of commands for each value in a list.\\n foreach(<loop_var> <items>)\\n   <commands>\\n endforeach()\\nwhere ``<items>`` is a list of items that are separated by\\n",
        "command"
    ],
    "function": [
        "Start recording a function for later invocation as a command.\\n function(<name> [<arg1> ...])\\n   <commands>\\n endfunction()\\nDefines a function named ``<name>`` that takes arguments named\\n",
        "command"
    ],
    "get_cmake_property": [
        "Get a global property of the CMake instance.\\n get_cmake_property(<var> <property>)\\nGets a global property from the CMake instance.  The value of\\nthe ``<property>`` is stored in the variable ``<var>``.\\nIf the property is not found, ``<var>`` will be set to ``NOTFOUND``.\\n",
        "command"
    ],
    "get_directory_property": [
        "Get a property of ``DIRECTORY`` scope.\\n get_directory_property(<variable> [DIRECTORY <dir>] <prop-name>)\\nStores a property of directory scope in the named ``<variable>``.\\nThe ``DIRECTORY`` argument specifies another directory from which\\nto retrieve the property value instead of the current directory.\\n",
        "command"
    ],
    "get_filename_component": [
        "Get a specific component of a full filename.\\n get_filename_component(<var> <FileName> <mode> [CACHE])\\nSets ``<var>`` to a component of ``<FileName>``, where ``<mode>`` is one of:\\n::\\n DIRECTORY = Directory without file name\\n",
        "command"
    ],
    "get_property": [
        "Get a property.\\n get_property(<variable>\\n              <GLOBAL             |\\n               DIRECTORY [<dir>]  |\\n               TARGET    <target> |\\n",
        "command"
    ],
    "get_source_file_property": [
        "Get a property for a source file.\\n get_source_file_property(VAR file property)\\nGets a property from a source file.  The value of the property is\\nstored in the variable ``VAR``.  If the source property is not found, the\\nbehavior depends on whether it has been defined to be an ``INHERITED`` property\\n",
        "command"
    ],
    "get_target_property": [
        "Get a property from a target.\\n get_target_property(VAR target property)\\nGet a property from a target.  The value of the property is stored in\\nthe variable ``VAR``.  If the target property is not found, the behavior\\ndepends on whether it has been defined to be an ``INHERITED`` property\\n",
        "command"
    ],
    "get_test_property": [
        "Get a property of the test.\\n get_test_property(test property VAR)\\nGet a property from the test.  The value of the property is stored in\\nthe variable ``VAR``.  If the test property is not found, the behavior\\ndepends on whether it has been defined to be an ``INHERITED`` property\\n",
        "command"
    ],
    "if": [
        "Conditionally execute a group of commands.\\nSynopsis\\n^^^^^^^^\\n if(<condition>)\\n   <commands>\\n",
        "command"
    ],
    "include": [
        "Load and run CMake code from a file or module.\\n include(<file|module> [OPTIONAL] [RESULT_VARIABLE <var>]\\n                       [NO_POLICY_SCOPE])\\nLoads and runs CMake code from the file given.  Variable reads and\\nwrites access the scope of the caller (dynamic scoping).  If ``OPTIONAL``\\n",
        "command"
    ],
    "include_directories": [
        "Add include directories to the build.\\n include_directories([AFTER|BEFORE] [SYSTEM] dir1 [dir2 ...])\\nAdd the given directories to those the compiler uses to search for\\ninclude files.  Relative paths are interpreted as relative to the\\ncurrent source directory.\\n",
        "command"
    ],
    "include_external_msproject": [
        "Include an external Microsoft project file in a workspace.\\n include_external_msproject(projectname location\\n                            [TYPE projectTypeGUID]\\n                            [GUID projectGUID]\\n                            [PLATFORM platformName]\\n",
        "command"
    ],
    "include_guard": [
        "Provides an include guard for the file currently being processed by CMake.\\n include_guard([DIRECTORY|GLOBAL])\\nSets up an include guard for the current CMake file (see the\\n``CMAKE_CURRENT_LIST_FILE`` variable documentation).\\nCMake will end its processing of the current file at the location of the\\n",
        "command"
    ],
    "include_regular_expression": [
        "Set the regular expression used for dependency checking.\\n include_regular_expression(regex_match [regex_complain])\\nSets the regular expressions used in dependency checking.  Only files\\nmatching ``regex_match`` will be traced as dependencies.  Only files\\nmatching ``regex_complain`` will generate warnings if they cannot be found\\n",
        "command"
    ],
    "install": [
        "Specify rules to run at install time.\\nSynopsis\\n^^^^^^^^\\n install(TARGETS <target>... [...])\\n install({FILES | PROGRAMS} <file>... [...])\\n",
        "command"
    ],
    "install_files": [
        "This command has been superceded by the ``install()`` command.  It is\\nprovided for compatibility with older CMake code.  The ``FILES`` form is\\ndirectly replaced by the ``FILES`` form of the ``install()``\\ncommand.  The regexp form can be expressed more clearly using the ``GLOB``\\nform of the ``file()`` command.\\n",
        "command"
    ],
    "install_programs": [
        "This command has been superceded by the ``install()`` command.  It is\\nprovided for compatibility with older CMake code.  The ``FILES`` form is\\ndirectly replaced by the ``PROGRAMS`` form of the ``install()``\\ncommand.  The regexp form can be expressed more clearly using the ``GLOB``\\nform of the ``file()`` command.\\n",
        "command"
    ],
    "install_targets": [
        "This command has been superceded by the ``install()`` command.  It is\\nprovided for compatibility with older CMake code.\\n::\\n install_targets(<dir> [RUNTIME_DIRECTORY dir] target target)\\nCreate rules to install the listed targets into the given directory.\\n",
        "command"
    ],
    "link_directories": [
        "Add directories in which the linker will look for libraries.\\n link_directories([AFTER|BEFORE] directory1 [directory2 ...])\\nAdds the paths in which the linker should search for libraries.\\nRelative paths given to this command are interpreted as relative to\\nthe current source directory, see ``CMP0015``.\\n",
        "command"
    ],
    "link_libraries": [
        "Link libraries to all targets added later.\\n link_libraries([item1 [item2 [...]]]\\n                [[debug|optimized|general] <item>] ...)\\nSpecify libraries or flags to use when linking any targets created later in\\nthe current directory or below by commands such as ``add_executable()``\\n",
        "command"
    ],
    "list": [
        "List operations.\\nSynopsis\\n^^^^^^^^\\n Reading\\n   list(LENGTH <list> <out-var>)\\n",
        "command"
    ],
    "load_cache": [
        "Load in the values from another project's CMake cache.\\n load_cache(pathToBuildDirectory READ_WITH_PREFIX prefix entry1...)\\nReads the cache and store the requested entries in variables with their\\nname prefixed with the given prefix.  This only reads the values, and\\ndoes not create entries in the local project's cache.\\n",
        "command"
    ],
    "load_command": [
        "Disallowed since version 3.0.  See CMake Policy ``CMP0031``.\\nLoad a command into a running CMake.\\n::\\n load_command(COMMAND_NAME <loc1> [loc2 ...])\\nThe given locations are searched for a library whose name is\\n",
        "command"
    ],
    "macro": [
        "Start recording a macro for later invocation as a command\\n macro(<name> [<arg1> ...])\\n   <commands>\\n endmacro()\\nDefines a macro named ``<name>`` that takes arguments named\\n",
        "command"
    ],
    "make_directory": [
        "::\\n make_directory(directory)\\nCreates the specified directory.  Full paths should be given.  Any\\nparent directories that do not exist will also be created.  Use with\\ncare.\\n",
        "command"
    ],
    "mark_as_advanced": [
        "Mark cmake cached variables as advanced.\\n mark_as_advanced([CLEAR|FORCE] <var1> ...)\\nSets the advanced/non-advanced state of the named\\ncached variables.\\nAn advanced variable will not be displayed in any\\n",
        "command"
    ],
    "math": [
        "Evaluate a mathematical expression.\\n math(EXPR <variable> \\\"<expression>\\\" [OUTPUT_FORMAT <format>])\\nEvaluates a mathematical ``<expression>`` and sets ``<variable>`` to the\\nresulting value.  The result of the expression must be representable as a\\n64-bit signed integer.\\n",
        "command"
    ],
    "message": [
        "Display a message to the user.\\n message([<mode>] \\\"message to display\\\" ...)\\nThe optional ``<mode>`` keyword determines the type of message:\\n``FATAL_ERROR``\\n  CMake Error, stop processing and generation.\\n",
        "command"
    ],
    "option": [
        "Provide an option that the user can optionally select.\\n option(<variable> \\\"<help_text>\\\" [value])\\nProvides an option for the user to select as ``ON`` or ``OFF``.\\nIf no initial ``<value>`` is provided, ``OFF`` is used.\\nIf ``<variable>`` is already set as a normal variable\\n",
        "command"
    ],
    "output_required_files": [
        "Disallowed since version 3.0.  See CMake Policy ``CMP0032``.\\nApproximate C preprocessor dependency scanning.\\nThis command exists only because ancient CMake versions provided it.\\nCMake handles preprocessor dependency scanning automatically using a\\nmore advanced scanner.\\n",
        "command"
    ],
    "project": [
        "Set the name of the project.\\nSynopsis\\n^^^^^^^^\\n project(<PROJECT-NAME> [<language-name>...])\\n project(<PROJECT-NAME>\\n",
        "command"
    ],
    "qt_wrap_cpp": [
        "Manually create Qt Wrappers.\\n qt_wrap_cpp(resultingLibraryName DestName SourceLists ...)\\nProduces moc files for all the .h files listed in the SourceLists.  The\\nmoc files will be added to the library using the ``DestName`` source list.\\nConsider updating the project to use the ``AUTOMOC`` target property\\n",
        "command"
    ],
    "qt_wrap_ui": [
        "Manually create Qt user interfaces Wrappers.\\n qt_wrap_ui(resultingLibraryName HeadersDestName\\n            SourcesDestName SourceLists ...)\\nProduces .h and .cxx files for all the .ui files listed in the\\n``SourceLists``.  The .h files will be added to the library using the\\n",
        "command"
    ],
    "remove": [
        "::\\n remove(VAR VALUE VALUE ...)\\nRemoves ``VALUE`` from the variable ``VAR``.  This is typically used to\\nremove entries from a vector (e.g.  semicolon separated list).  ``VALUE``\\nis expanded.\\n",
        "command"
    ],
    "remove_definitions": [
        "Remove -D define flags added by ``add_definitions()``.\\n remove_definitions(-DFOO -DBAR ...)\\nRemoves flags (added by ``add_definitions()``) from the compiler\\ncommand line for sources in the current directory and below.\\n",
        "command"
    ],
    "return": [
        "Return from a file, directory or function.\\n return()\\nReturns from a file, directory or function.  When this command is\\nencountered in an included file (via ``include()`` or\\n``find_package()``), it causes processing of the current file to stop\\n",
        "command"
    ],
    "separate_arguments": [
        "Parse command-line arguments into a semicolon-separated list.\\n separate_arguments(<variable> <mode> <args>)\\nParses a space-separated string ``<args>`` into a list of items,\\nand stores this list in semicolon-separated standard form in ``<variable>``.\\nThis function is intended for parsing command-line arguments.\\n",
        "command"
    ],
    "set": [
        "Set a normal, cache, or environment variable to a given value.\\nSee the :ref:`cmake-language(7) variables <CMake Language Variables>`\\ndocumentation for the scopes and interaction of normal variables\\nand cache entries.\\nSignatures of this command that specify a ``<value>...`` placeholder\\n",
        "command"
    ],
    "set_directory_properties": [
        "Set properties of the current directory and subdirectories.\\n set_directory_properties(PROPERTIES prop1 value1 [prop2 value2] ...)\\nSets properties of the current directory and its subdirectories in key-value pairs.\\nSee also the ``set_property(DIRECTORY)`` command.\\nSee :ref:`Directory Properties` for the list of properties known to CMake\\n",
        "command"
    ],
    "set_property": [
        "Set a named property in a given scope.\\n set_property(<GLOBAL                      |\\n               DIRECTORY [<dir>]           |\\n               TARGET    [<target1> ...]   |\\n               SOURCE    [<src1> ...]      |\\n",
        "command"
    ],
    "set_source_files_properties": [
        "Source files can have properties that affect how they are built.\\n set_source_files_properties([file1 [file2 [...]]]\\n                             PROPERTIES prop1 value1\\n                             [prop2 value2 [...]])\\nSets properties associated with source files using a key/value paired\\n",
        "command"
    ],
    "set_target_properties": [
        "Targets can have properties that affect how they are built.\\n set_target_properties(target1 target2 ...\\n                       PROPERTIES prop1 value1\\n                       prop2 value2 ...)\\nSets properties on targets.  The syntax for the command is to list all\\n",
        "command"
    ],
    "set_tests_properties": [
        "Set a property of the tests.\\n set_tests_properties(test1 [test2...] PROPERTIES prop1 value1 prop2 value2)\\nSets a property for the tests.  If the test is not found, CMake\\nwill report an error.\\n``Generator expressions`` will be\\n",
        "command"
    ],
    "site_name": [
        "Set the given variable to the name of the computer.\\n site_name(variable)\\n",
        "command"
    ],
    "source_group": [
        "Define a grouping for source files in IDE project generation.\\nThere are two different signatures to create source groups.\\n source_group(<name> [FILES <src>...] [REGULAR_EXPRESSION <regex>])\\n source_group(TREE <root> [PREFIX <prefix>] [FILES <src>...])\\nDefines a group into which sources will be placed in project files.\\n",
        "command"
    ],
    "string": [
        "String operations.\\nSynopsis\\n^^^^^^^^\\n Search and Replace\\n   string(FIND <string> <substring> <out-var> [...])\\n",
        "command"
    ],
    "subdir_depends": [
        "Disallowed since version 3.0.  See CMake Policy ``CMP0029``.\\nDoes nothing.\\n::\\n subdir_depends(subdir dep1 dep2 ...)\\nDoes not do anything.  This command used to help projects order\\n",
        "command"
    ],
    "subdirs": [
        "Add a list of subdirectories to the build.\\n::\\n subdirs(dir1 dir2 ...[EXCLUDE_FROM_ALL exclude_dir1 exclude_dir2 ...]\\n         [PREORDER] )\\nAdd a list of subdirectories to the build.  The ``add_subdirectory()``\\n",
        "command"
    ],
    "target_compile_definitions": [
        "Add compile definitions to a target.\\n target_compile_definitions(<target>\\n   <INTERFACE|PUBLIC|PRIVATE> [items1...]\\n   [<INTERFACE|PUBLIC|PRIVATE> [items2...] ...])\\nSpecifies compile definitions to use when compiling a given ``<target>``.  The\\n",
        "command"
    ],
    "target_compile_features": [
        "Add expected compiler features to a target.\\n target_compile_features(<target> <PRIVATE|PUBLIC|INTERFACE> <feature> [...])\\nSpecifies compiler features required when compiling a given target.  If the\\nfeature is not listed in the ``CMAKE_C_COMPILE_FEATURES`` variable\\nor ``CMAKE_CXX_COMPILE_FEATURES`` variable,\\n",
        "command"
    ],
    "target_compile_options": [
        "Add compile options to a target.\\n target_compile_options(<target> [BEFORE]\\n   <INTERFACE|PUBLIC|PRIVATE> [items1...]\\n   [<INTERFACE|PUBLIC|PRIVATE> [items2...] ...])\\nAdds options to the ``COMPILE_OPTIONS`` or\\n",
        "command"
    ],
    "target_include_directories": [
        "Add include directories to a target.\\n target_include_directories(<target> [SYSTEM] [BEFORE]\\n   <INTERFACE|PUBLIC|PRIVATE> [items1...]\\n   [<INTERFACE|PUBLIC|PRIVATE> [items2...] ...])\\nSpecifies include directories to use when compiling a given target.\\n",
        "command"
    ],
    "target_link_directories": [
        "Add link directories to a target.\\n target_link_directories(<target> [BEFORE]\\n   <INTERFACE|PUBLIC|PRIVATE> [items1...]\\n   [<INTERFACE|PUBLIC|PRIVATE> [items2...] ...])\\nSpecifies the paths in which the linker should search for libraries when\\n",
        "command"
    ],
    "target_link_libraries": [
        "Specify libraries or flags to use when linking a given target and/or\\nits dependents.  :ref:`Usage requirements <Target Usage Requirements>`\\nfrom linked library targets will be propagated.  Usage requirements\\nof a target's dependencies affect compilation of its own sources.\\nOverview\\n",
        "command"
    ],
    "target_link_options": [
        "Add options to the link step for an executable, shared library or module\\nlibrary target.\\n target_link_options(<target> [BEFORE]\\n   <INTERFACE|PUBLIC|PRIVATE> [items1...]\\n   [<INTERFACE|PUBLIC|PRIVATE> [items2...] ...])\\n",
        "command"
    ],
    "target_precompile_headers": [
        "Add a list of header files to precompile.\\nPrecompiling header files can speed up compilation by creating a partially\\nprocessed version of some header files, and then using that version during\\ncompilations rather than repeatedly parsing the original headers.\\nMain Form\\n",
        "command"
    ],
    "target_sources": [
        "Add sources to a target.\\n target_sources(<target>\\n   <INTERFACE|PUBLIC|PRIVATE> [items1...]\\n   [<INTERFACE|PUBLIC|PRIVATE> [items2...] ...])\\nSpecifies sources to use when compiling a given target.  Relative\\n",
        "command"
    ],
    "try_compile": [
        "Try building some code.\\nTry Compiling Whole Projects\\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n try_compile(<resultVar> <bindir> <srcdir>\\n             <projectName> [<targetName>] [CMAKE_FLAGS <flags>...]\\n",
        "command"
    ],
    "try_run": [
        "Try compiling and then running some code.\\nTry Compiling and Running Source Files\\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n try_run(<runResultVar> <compileResultVar>\\n         <bindir> <srcfile> [CMAKE_FLAGS <flags>...]\\n",
        "command"
    ],
    "unset": [
        "Unset a variable, cache variable, or environment variable.\\nUnset Normal Variable or Cache Entry\\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n unset(<variable> [CACHE | PARENT_SCOPE])\\nRemoves a normal variable from the current scope, causing it\\n",
        "command"
    ],
    "use_mangled_mesa": [
        "Disallowed since version 3.0.  See CMake Policy ``CMP0030``.\\nCopy mesa headers for use in combination with system GL.\\n::\\n use_mangled_mesa(PATH_TO_MESA OUTPUT_DIRECTORY)\\nThe path to mesa includes, should contain ``gl_mangle.h``.  The mesa\\n",
        "command"
    ],
    "utility_source": [
        "Disallowed since version 3.0.  See CMake Policy ``CMP0034``.\\nSpecify the source tree of a third-party utility.\\n::\\n utility_source(cache_entry executable_name\\n                path_to_source [file1 file2 ...])\\n",
        "command"
    ],
    "variable_requires": [
        "Disallowed since version 3.0.  See CMake Policy ``CMP0035``.\\nUse the ``if()`` command instead.\\nAssert satisfaction of an option's required variables.\\n::\\n variable_requires(TEST_VARIABLE RESULT_VARIABLE\\n",
        "command"
    ],
    "variable_watch": [
        "Watch the CMake variable for change.\\n variable_watch(<variable> [<command>])\\nIf the specified ``<variable>`` changes, a message will be printed\\nto inform about the change.\\nAdditionally, if ``<command>`` is given, this command will be executed.\\n",
        "command"
    ],
    "while": [
        "Evaluate a group of commands while a condition is true\\n while(<condition>)\\n   <commands>\\n endwhile()\\nAll commands between while and the matching ``endwhile()`` are recorded\\n",
        "command"
    ],
    "write_file": [
        "::\\n write_file(filename \\\"message to write\\\"... [APPEND])\\nThe first argument is the file name, the rest of the arguments are\\nmessages to write.  If the argument ``APPEND`` is specified, then the\\nmessage will be appended.\\n",
        "command"
    ],
    "DEBUG_OUTPUT_NAME": [
        "Old per-configuration target file base name.\\nUse ``OUTPUT_NAME_<CONFIG>`` instead.\\nThis is a configuration-specific version of the ``OUTPUT_NAME``\\ntarget property.\\n",
        "property"
    ],
    "RELEASE_OUTPUT_NAME": [
        "Old per-configuration target file base name.\\nUse ``OUTPUT_NAME_<CONFIG>`` instead.\\nThis is a configuration-specific version of the ``OUTPUT_NAME``\\ntarget property.\\n",
        "property"
    ],
    "DEBUG_POSTFIX": [
        "See target property ``<CONFIG>_POSTFIX``.\\nThis property is a special case of the more-general ``<CONFIG>_POSTFIX``\\nproperty for the ``DEBUG`` configuration.\\n",
        "property"
    ],
    "RELEASE_POSTFIX": [
        "Postfix to append to the target file name for configuration <CONFIG>.\\nWhen building with configuration <CONFIG> the value of this property\\nis appended to the target file name built on disk.  For non-executable\\ntargets, this property is initialized by the value of the variable\\nCMAKE_<CONFIG>_POSTFIX if it is set when a target is created.  This\\n",
        "property"
    ],
    "C_CLANG_TIDY": [
        "This property is implemented only when ``<LANG>`` is ``C`` or ``CXX``.\\nSpecify a :ref:`semicolon-separated list <CMake Language Lists>` containing a command\\nline for the ``clang-tidy`` tool.  The :ref:`Makefile Generators`\\nand the ``Ninja`` generator will run this tool along with the\\ncompiler and report a warning if the tool reports any problems.\\n",
        "property"
    ],
    "CXX_CLANG_TIDY": [
        "This property is implemented only when ``<LANG>`` is ``C`` or ``CXX``.\\nSpecify a :ref:`semicolon-separated list <CMake Language Lists>` containing a command\\nline for the ``clang-tidy`` tool.  The :ref:`Makefile Generators`\\nand the ``Ninja`` generator will run this tool along with the\\ncompiler and report a warning if the tool reports any problems.\\n",
        "property"
    ],
    "C_COMPILER_LAUNCHER": [
        "This property is implemented only when ``<LANG>`` is ``C``, ``CXX``,\\n``Fortran``, ``OBJC``, ``OBJCXX``, or ``CUDA``.\\nSpecify a :ref:`semicolon-separated list <CMake Language Lists>` containing a command line\\nfor a compiler launching tool. The :ref:`Makefile Generators` and the\\n``Ninja`` generator will run this tool and pass the compiler and\\n",
        "property"
    ],
    "CXX_COMPILER_LAUNCHER": [
        "This property is implemented only when ``<LANG>`` is ``C``, ``CXX``,\\n``Fortran``, ``OBJC``, ``OBJCXX``, or ``CUDA``.\\nSpecify a :ref:`semicolon-separated list <CMake Language Lists>` containing a command line\\nfor a compiler launching tool. The :ref:`Makefile Generators` and the\\n``Ninja`` generator will run this tool and pass the compiler and\\n",
        "property"
    ],
    "C_CPPCHECK": [
        "This property is supported only when ``<LANG>`` is ``C`` or ``CXX``.\\nSpecify a :ref:`semicolon-separated list <CMake Language Lists>` containing a command line\\nfor the ``cppcheck`` static analysis tool.  The :ref:`Makefile Generators`\\nand the ``Ninja`` generator will run ``cppcheck`` along with the\\ncompiler and report any problems.  If the command-line specifies the\\n",
        "property"
    ],
    "CXX_CPPCHECK": [
        "This property is supported only when ``<LANG>`` is ``C`` or ``CXX``.\\nSpecify a :ref:`semicolon-separated list <CMake Language Lists>` containing a command line\\nfor the ``cppcheck`` static analysis tool.  The :ref:`Makefile Generators`\\nand the ``Ninja`` generator will run ``cppcheck`` along with the\\ncompiler and report any problems.  If the command-line specifies the\\n",
        "property"
    ],
    "C_CPPLINT": [
        "This property is supported only when ``<LANG>`` is ``C`` or ``CXX``.\\nSpecify a :ref:`semicolon-separated list <CMake Language Lists>` containing a command line\\nfor the ``cpplint`` style checker.  The :ref:`Makefile Generators` and the\\n``Ninja`` generator will run ``cpplint`` along with the compiler\\nand report any problems.\\n",
        "property"
    ],
    "CXX_CPPLINT": [
        "This property is supported only when ``<LANG>`` is ``C`` or ``CXX``.\\nSpecify a :ref:`semicolon-separated list <CMake Language Lists>` containing a command line\\nfor the ``cpplint`` style checker.  The :ref:`Makefile Generators` and the\\n``Ninja`` generator will run ``cpplint`` along with the compiler\\nand report any problems.\\n",
        "property"
    ],
    "C_INCLUDE_WHAT_YOU_USE": [
        "This property is implemented only when ``<LANG>`` is ``C`` or ``CXX``.\\nSpecify a :ref:`semicolon-separated list <CMake Language Lists>` containing a command\\nline for the ``include-what-you-use`` tool.  The :ref:`Makefile Generators`\\nand the ``Ninja`` generator will run this tool along with the\\ncompiler and report a warning if the tool reports any problems.\\n",
        "property"
    ],
    "CXX_INCLUDE_WHAT_YOU_USE": [
        "This property is implemented only when ``<LANG>`` is ``C`` or ``CXX``.\\nSpecify a :ref:`semicolon-separated list <CMake Language Lists>` containing a command\\nline for the ``include-what-you-use`` tool.  The :ref:`Makefile Generators`\\nand the ``Ninja`` generator will run this tool along with the\\ncompiler and report a warning if the tool reports any problems.\\n",
        "property"
    ],
    "C_VISIBILITY_PRESET": [
        "Value for symbol visibility compile flags\\nThe ``<LANG>_VISIBILITY_PRESET`` property determines the value passed in a\\nvisibility related compile option, such as ``-fvisibility=`` for ``<LANG>``.\\nThis property affects compilation in sources of all types of targets\\n(subject to policy ``CMP0063``).\\n",
        "property"
    ],
    "CXX_VISIBILITY_PRESET": [
        "Value for symbol visibility compile flags\\nThe ``<LANG>_VISIBILITY_PRESET`` property determines the value passed in a\\nvisibility related compile option, such as ``-fvisibility=`` for ``<LANG>``.\\nThis property affects compilation in sources of all types of targets\\n(subject to policy ``CMP0063``).\\n",
        "property"
    ],
    "ABSTRACT": [
        "Is this source file an abstract class.\\nA property on a source file that indicates if the source file\\nrepresents a class that is abstract.  This only makes sense for\\nlanguages that have a notion of an abstract class and it is only used\\nby some tools that wrap classes into other languages.\\n",
        "property"
    ],
    "ADDITIONAL_CLEAN_FILES": [
        "A :ref:`;-list <CMake Language Lists>` of files or directories that will be\\nremoved as a part of the global ``clean`` target.  It is useful for\\nspecifying generated files or directories that are used by multiple targets\\nor by CMake itself, or that are generated in ways which cannot be captured as\\noutputs or byproducts of custom commands.\\n",
        "property"
    ],
    "ADDITIONAL_MAKE_CLEAN_FILES": [
        "Additional files to remove during the clean stage.\\nA :ref:`;-list <CMake Language Lists>` of files that will be removed as a\\npart of the ``make clean`` target.\\nArguments to ``ADDITIONAL_MAKE_CLEAN_FILES`` may use\\n``generator expressions``.\\n",
        "property"
    ],
    "ADVANCED": [
        "True if entry should be hidden by default in GUIs.\\nThis is a boolean value indicating whether the entry is considered\\ninteresting only for advanced configuration.  The ``mark_as_advanced()``\\ncommand modifies this property.\\n",
        "property"
    ],
    "ALIASED_TARGET": [
        "Name of target aliased by this target.\\nIf this is an :ref:`Alias Target <Alias Targets>`, this property contains\\nthe name of the target aliased.\\n",
        "property"
    ],
    "ALLOW_DUPLICATE_CUSTOM_TARGETS": [
        "Allow duplicate custom targets to be created.\\nNormally CMake requires that all targets built in a project have\\nglobally unique logical names (see policy ``CMP0002``).\\nThis is necessary to generate meaningful project file names in\\n``Xcode`` and :ref:`Visual Studio Generators` IDE\\n",
        "property"
    ],
    "ANDROID_ANT_ADDITIONAL_OPTIONS": [
        "Set the additional options for Android Ant build system. This is\\na string value containing all command line options for the Ant build.\\nThis property is initialized by the value of the\\n``CMAKE_ANDROID_ANT_ADDITIONAL_OPTIONS`` variable if it is\\nset when a target is created.\\n",
        "property"
    ],
    "ANDROID_API": [
        "When :ref:`Cross Compiling for Android with NVIDIA Nsight Tegra Visual Studio\\nEdition`, this property sets the Android target API version (e.g. ``15``).\\nThe version number must be a positive decimal integer.  This property is\\ninitialized by the value of the ``CMAKE_ANDROID_API`` variable if\\nit is set when a target is created.\\n",
        "property"
    ],
    "ANDROID_API_MIN": [
        "Set the Android MIN API version (e.g. ``9``).  The version number\\nmust be a positive decimal integer.  This property is initialized by\\nthe value of the ``CMAKE_ANDROID_API_MIN`` variable if it is set\\nwhen a target is created.  Native code builds using this API version.\\n",
        "property"
    ],
    "ANDROID_ARCH": [
        "When :ref:`Cross Compiling for Android with NVIDIA Nsight Tegra Visual Studio\\nEdition`, this property sets the Android target architecture.\\nThis is a string property that could be set to the one of\\nthe following values:\\n* ``armv7-a``: \\\"ARMv7-A (armv7-a)\\\"\\n",
        "property"
    ],
    "ANDROID_ASSETS_DIRECTORIES": [
        "Set the Android assets directories to copy into the main assets\\nfolder before build. This a string property that contains the\\ndirectory paths separated by semicolon.\\nThis property is initialized by the value of the\\n``CMAKE_ANDROID_ASSETS_DIRECTORIES`` variable if it is set when\\n",
        "property"
    ],
    "ANDROID_GUI": [
        "When :ref:`Cross Compiling for Android with NVIDIA Nsight Tegra Visual Studio\\nEdition`, this property specifies whether to build an executable as an\\napplication package on Android.\\nWhen this property is set to true the executable when built for Android\\nwill be created as an application package.  This property is initialized\\n",
        "property"
    ],
    "ANDROID_JAR_DEPENDENCIES": [
        "Set the Android property that specifies JAR dependencies.\\nThis is a string value property. This property is initialized\\nby the value of the ``CMAKE_ANDROID_JAR_DEPENDENCIES``\\nvariable if it is set when a target is created.\\n",
        "property"
    ],
    "ANDROID_JAR_DIRECTORIES": [
        "Set the Android property that specifies directories to search for\\nthe JAR libraries.\\nThis a string property that contains the directory paths separated by\\nsemicolons. This property is initialized by the value of the\\n``CMAKE_ANDROID_JAR_DIRECTORIES`` variable if it is set when\\n",
        "property"
    ],
    "ANDROID_JAVA_SOURCE_DIR": [
        "Set the Android property that defines the Java source code root directories.\\nThis a string property that contains the directory paths separated by semicolon.\\nThis property is initialized by the value of the\\n``CMAKE_ANDROID_JAVA_SOURCE_DIR`` variable if it is set\\nwhen a target is created.\\n",
        "property"
    ],
    "ANDROID_NATIVE_LIB_DEPENDENCIES": [
        "Set the Android property that specifies the .so dependencies.\\nThis is a string property.\\nThis property is initialized by the value of the\\n``CMAKE_ANDROID_NATIVE_LIB_DEPENDENCIES`` variable if it is set\\nwhen a target is created.\\n",
        "property"
    ],
    "ANDROID_NATIVE_LIB_DIRECTORIES": [
        "Set the Android property that specifies directories to search for the ``.so``\\nlibraries.\\nThis a string property that contains the directory paths separated\\nby semicolons.\\nThis property is initialized by the value of the\\n",
        "property"
    ],
    "ANDROID_PROCESS_MAX": [
        "Set the Android property that defines the maximum number of a\\nparallel Android NDK compiler processes (e.g. ``4``).\\nThis property is initialized by the value of the\\n``CMAKE_ANDROID_PROCESS_MAX`` variable if it is set\\nwhen a target is created.\\n",
        "property"
    ],
    "ANDROID_PROGUARD": [
        "When this property is set to true that enables the ProGuard tool to shrink,\\noptimize, and obfuscate the code by removing unused code and renaming\\nclasses, fields, and methods with semantically obscure names.\\nThis property is initialized by the value of the\\n``CMAKE_ANDROID_PROGUARD`` variable if it is set\\n",
        "property"
    ],
    "ANDROID_PROGUARD_CONFIG_PATH": [
        "Set the Android property that specifies the location of the ProGuard\\nconfig file. Leave empty to use the default one.\\nThis a string property that contains the path to ProGuard config file.\\nThis property is initialized by the value of the\\n``CMAKE_ANDROID_PROGUARD_CONFIG_PATH`` variable if it is set\\n",
        "property"
    ],
    "ANDROID_SECURE_PROPS_PATH": [
        "Set the Android property that states the location of the secure properties file.\\nThis is a string property that contains the file path.\\nThis property is initialized by the value of the\\n``CMAKE_ANDROID_SECURE_PROPS_PATH`` variable\\nif it is set when a target is created.\\n",
        "property"
    ],
    "ANDROID_SKIP_ANT_STEP": [
        "Set the Android property that defines whether or not to skip the Ant build step.\\nThis is a boolean property initialized by the value of the\\n``CMAKE_ANDROID_SKIP_ANT_STEP`` variable if it is set when a target is created.\\n",
        "property"
    ],
    "ANDROID_STL_TYPE": [
        "When :ref:`Cross Compiling for Android with NVIDIA Nsight Tegra Visual Studio\\nEdition`, this property specifies the type of STL support for the project.\\nThis is a string property that could set to the one of the following values:\\n``none``\\n  No C++ Support\\n",
        "property"
    ],
    "ARCHIVE_OUTPUT_DIRECTORY": [
        "Output directory in which to build :ref:`ARCHIVE <Archive Output Artifacts>` target files.\\nThis property specifies the directory into which archive target files\\nshould be built.  The property value may use\\n``generator expressions``.\\nMulti-configuration generators (VS, Xcode) append a per-configuration\\n",
        "property"
    ],
    "ARCHIVE_OUTPUT_DIRECTORY_DEBUG": [
        "Per-configuration output directory for\\n:ref:`ARCHIVE <Archive Output Artifacts>` target files.\\nThis is a per-configuration version of the\\n``ARCHIVE_OUTPUT_DIRECTORY`` target property, but\\nmulti-configuration generators (VS, Xcode) do NOT append a\\n",
        "property"
    ],
    "ARCHIVE_OUTPUT_DIRECTORY_RELEASE": [
        "Per-configuration output directory for\\n:ref:`ARCHIVE <Archive Output Artifacts>` target files.\\nThis is a per-configuration version of the\\n``ARCHIVE_OUTPUT_DIRECTORY`` target property, but\\nmulti-configuration generators (VS, Xcode) do NOT append a\\n",
        "property"
    ],
    "ARCHIVE_OUTPUT_NAME": [
        "Output name for :ref:`ARCHIVE <Archive Output Artifacts>` target files.\\nThis property specifies the base name for archive target files.  It\\noverrides ``OUTPUT_NAME`` and ``OUTPUT_NAME_<CONFIG>``\\nproperties.\\nSee also the ``ARCHIVE_OUTPUT_NAME_<CONFIG>`` target property.\\n",
        "property"
    ],
    "ARCHIVE_OUTPUT_NAME_DEBUG": [
        "Per-configuration output name for\\n:ref:`ARCHIVE <Archive Output Artifacts>` target files.\\nThis is the configuration-specific version of the\\n``ARCHIVE_OUTPUT_NAME`` target property.\\n",
        "property"
    ],
    "ARCHIVE_OUTPUT_NAME_RELEASE": [
        "Per-configuration output name for\\n:ref:`ARCHIVE <Archive Output Artifacts>` target files.\\nThis is the configuration-specific version of the\\n``ARCHIVE_OUTPUT_NAME`` target property.\\n",
        "property"
    ],
    "ATTACHED_FILES": [
        "Attach a list of files to a dashboard submission.\\nSet this property to a list of files that will be encoded and\\nsubmitted to the dashboard as an addition to the test result.\\n",
        "property"
    ],
    "ATTACHED_FILES_ON_FAIL": [
        "Attach a list of files to a dashboard submission if the test fails.\\nSame as ``ATTACHED_FILES``, but these files will only be\\nincluded if the test does not pass.\\n",
        "property"
    ],
    "AUTOGEN_BUILD_DIR": [
        "Directory where ``AUTOMOC``, ``AUTOUIC`` and ``AUTORCC``\\ngenerate files for the target.\\nThe directory is created on demand and automatically added to the\\n``ADDITIONAL_CLEAN_FILES`` target property.\\nWhen unset or empty the directory ``<dir>/<target-name>_autogen`` is used where\\n",
        "property"
    ],
    "AUTOGEN_ORIGIN_DEPENDS": [
        "Switch for forwarding origin target dependencies to the corresponding\\n``_autogen`` target.\\nTargets which have their ``AUTOMOC`` or ``AUTOUIC`` property\\n``ON`` have a corresponding ``_autogen`` target which generates\\n``moc`` and ``uic`` files.  As this ``_autogen`` target is created at\\n",
        "property"
    ],
    "AUTOGEN_PARALLEL": [
        "Number of parallel ``moc`` or ``uic`` processes to start when using\\n``AUTOMOC`` and ``AUTOUIC``.\\nThe custom `<origin>_autogen` target starts a number of threads of which\\neach one parses a source file and on demand starts a ``moc`` or ``uic``\\nprocess.  ``AUTOGEN_PARALLEL`` controls how many parallel threads\\n",
        "property"
    ],
    "AUTOGEN_SOURCE_GROUP": [
        "Name of the  ``source_group()`` for ``AUTOMOC`` and\\n``AUTORCC`` generated files.\\nFiles generated by ``AUTOMOC`` and ``AUTORCC`` are not always\\nknown at configure time and therefore can't be passed to\\n``source_group()``.\\n",
        "property"
    ],
    "AUTOGEN_TARGETS_FOLDER": [
        "Name of ``FOLDER`` for ``*_autogen`` targets that are added\\nautomatically by CMake for targets for which ``AUTOMOC`` is enabled.\\nIf not set, CMake uses the ``FOLDER`` property of the parent target as a\\ndefault value for this property.  See also the documentation for the\\n``FOLDER`` target property and the ``AUTOMOC`` target property.\\n",
        "property"
    ],
    "AUTOGEN_TARGET_DEPENDS": [
        "Additional target dependencies of the corresponding ``_autogen`` target.\\nTargets which have their ``AUTOMOC`` or ``AUTOUIC`` property\\n``ON`` have a corresponding ``_autogen`` target which generates\\n``moc`` and ``uic`` files.  As this ``_autogen`` target is created at\\ngenerate-time, it is not possible to define dependencies of it using\\n",
        "property"
    ],
    "AUTOMOC": [
        "Should the target be processed with auto-moc (for Qt projects).\\n``AUTOMOC`` is a boolean specifying whether CMake will handle the Qt\\n``moc`` preprocessor automatically, i.e.  without having to use the\\n``QT4_WRAP_CPP()`` or ``QT5_WRAP_CPP()`` macro.\\nCurrently Qt4 and Qt5 are supported.\\n",
        "property"
    ],
    "AUTOMOC_COMPILER_PREDEFINES": [
        "Boolean value used by ``AUTOMOC`` to determine if the\\ncompiler pre definitions file ``moc_predefs.h`` should be generated.\\nCMake generates a ``moc_predefs.h`` file with compiler pre definitions\\nfrom the output of the command defined in\\n``CMAKE_CXX_COMPILER_PREDEFINES_COMMAND``\\n",
        "property"
    ],
    "AUTOMOC_DEPEND_FILTERS": [
        "Filter definitions used by ``AUTOMOC`` to extract file names from a\\nsource file that are registered as additional dependencies for the\\n``moc`` file of the source file.\\nFilters are defined as ``KEYWORD;REGULAR_EXPRESSION`` pairs. First the file\\ncontent is searched for ``KEYWORD``. If it is found at least once, then file\\n",
        "property"
    ],
    "AUTOMOC_EXECUTABLE": [
        "``AUTOMOC_EXECUTABLE`` is file path pointing to the ``moc``\\nexecutable to use for ``AUTOMOC`` enabled files. Setting\\nthis property will make CMake skip the automatic detection of the\\n``moc`` binary as well as the sanity-tests normally run to ensure\\nthat the binary is available and working as expected.\\n",
        "property"
    ],
    "AUTOMOC_MACRO_NAMES": [
        "A :ref:`semicolon-separated list <CMake Language Lists>` list of macro names used by\\n``AUTOMOC`` to determine if a C++ file needs to be processed by ``moc``.\\nThis property is only used if the ``AUTOMOC`` property is ``ON``\\nfor this target.\\nWhen running ``AUTOMOC``, CMake searches for the strings listed in\\n",
        "property"
    ],
    "AUTOMOC_MOC_OPTIONS": [
        "Additional options for moc when using ``AUTOMOC``\\nThis property is only used if the ``AUTOMOC`` property is ``ON``\\nfor this target.  In this case, it holds additional command line\\noptions which will be used when ``moc`` is executed during the build, i.e.\\nit is equivalent to the optional ``OPTIONS`` argument of the\\n",
        "property"
    ],
    "AUTOMOC_PATH_PREFIX": [
        "When this property is ``ON``, CMake will generate the ``-p`` path prefix\\noption for ``moc`` on ``AUTOMOC`` enabled Qt targets.\\nTo generate the path prefix, CMake tests if the header compiled by ``moc``\\nis in any of the target\\n``include directories``.  If so, CMake will\\n",
        "property"
    ],
    "AUTOMOC_SOURCE_GROUP": [
        "Name of the  ``source_group()`` for ``AUTOMOC`` generated files.\\nWhen set this is used instead of ``AUTOGEN_SOURCE_GROUP`` for\\nfiles generated by ``AUTOMOC``.\\n",
        "property"
    ],
    "AUTOMOC_TARGETS_FOLDER": [
        "Name of ``FOLDER`` for ``*_autogen`` targets that are added automatically by\\nCMake for targets for which ``AUTOMOC`` is enabled.\\nThis property is obsolete.  Use ``AUTOGEN_TARGETS_FOLDER`` instead.\\nIf not set, CMake uses the ``FOLDER`` property of the parent target as a\\ndefault value for this property.  See also the documentation for the\\n",
        "property"
    ],
    "AUTORCC": [
        "Should the target be processed with auto-rcc (for Qt projects).\\n``AUTORCC`` is a boolean specifying whether CMake will handle\\nthe Qt ``rcc`` code generator automatically, i.e. without having to use\\nthe ``QT4_ADD_RESOURCES()`` or ``QT5_ADD_RESOURCES()``\\nmacro.  Currently Qt4 and Qt5 are supported.\\n",
        "property"
    ],
    "AUTORCC_EXECUTABLE": [
        "``AUTORCC_EXECUTABLE`` is file path pointing to the ``rcc``\\nexecutable to use for ``AUTORCC`` enabled files. Setting\\nthis property will make CMake skip the automatic detection of the\\n``rcc`` binary as well as the sanity-tests normally run to ensure\\nthat the binary is available and working as expected.\\n",
        "property"
    ],
    "AUTORCC_OPTIONS": [
        "Additional options for ``rcc`` when using ``AUTORCC``\\nThis property holds additional command line options which will be used when\\n``rcc`` is executed during the build via ``AUTORCC``, i.e. it is equivalent to the\\noptional ``OPTIONS`` argument of the ``qt4_add_resources()`` macro.\\nBy default it is empty.\\n",
        "property"
    ],
    "AUTORCC_SOURCE_GROUP": [
        "Name of the  ``source_group()`` for ``AUTORCC`` generated files.\\nWhen set this is used instead of ``AUTOGEN_SOURCE_GROUP`` for\\nfiles generated by ``AUTORCC``.\\n",
        "property"
    ],
    "AUTOUIC": [
        "Should the target be processed with auto-uic (for Qt projects).\\n``AUTOUIC`` is a boolean specifying whether CMake will handle\\nthe Qt ``uic`` code generator automatically, i.e. without having to use\\nthe ``QT4_WRAP_UI()`` or ``QT5_WRAP_UI()`` macro. Currently\\nQt4 and Qt5 are supported.\\n",
        "property"
    ],
    "AUTOUIC_EXECUTABLE": [
        "``AUTOUIC_EXECUTABLE`` is file path pointing to the ``uic``\\nexecutable to use for ``AUTOUIC`` enabled files. Setting\\nthis property will make CMake skip the automatic detection of the\\n``uic`` binary as well as the sanity-tests normally run to ensure\\nthat the binary is available and working as expected.\\n",
        "property"
    ],
    "AUTOUIC_OPTIONS": [
        "Additional options for ``uic`` when using ``AUTOUIC``\\nThis property holds additional command line options\\nwhich will be used when ``uic`` is executed during the build via\\n``AUTOUIC``, i.e. it is equivalent to the optional ``OPTIONS``\\nargument of the ``qt4_wrap_ui()`` macro.\\n",
        "property"
    ],
    "AUTOUIC_SEARCH_PATHS": [
        "Search path list used by ``AUTOUIC`` to find included\\n``.ui`` files.\\nThis property is initialized by the value of the\\n``CMAKE_AUTOUIC_SEARCH_PATHS`` variable if it is set\\nwhen a target is created. Otherwise it is empty.\\n",
        "property"
    ],
    "BINARY_DIR": [
        "This read-only directory property reports absolute path to the binary\\ndirectory corresponding to the source on which it is read.\\nBINARY_DIR\\n----------\\nThis read-only property reports the value of the\\n",
        "property"
    ],
    "BUILDSYSTEM_TARGETS": [
        "This read-only directory property contains a\\n:ref:`semicolon-separated list <CMake Language Lists>` of buildsystem targets added in the\\ndirectory by calls to the ``add_library()``, ``add_executable()``,\\nand ``add_custom_target()`` commands.  The list does not include any\\n:ref:`Imported Targets` or :ref:`Alias Targets`, but does include\\n",
        "property"
    ],
    "BUILD_RPATH": [
        "A :ref:`semicolon-separated list <CMake Language Lists>` specifying runtime path (``RPATH``)\\nentries to add to binaries linked in the build tree (for platforms that\\nsupport it).  The entries will *not* be used for binaries in the install\\ntree.  See also the ``INSTALL_RPATH`` target property.\\nThis property is initialized by the value of the variable\\n",
        "property"
    ],
    "BUILD_RPATH_USE_ORIGIN": [
        "Whether to use relative paths for the build ``RPATH``.\\nThis property is initialized by the value of the variable\\n``CMAKE_BUILD_RPATH_USE_ORIGIN``.\\nOn platforms that support runtime paths (``RPATH``) with the\\n``$ORIGIN`` token, setting this property to ``TRUE`` enables relative\\n",
        "property"
    ],
    "BUILD_WITH_INSTALL_NAME_DIR": [
        "``BUILD_WITH_INSTALL_NAME_DIR`` is a boolean specifying whether the macOS\\n``install_name`` of a target in the build tree uses the directory given by\\n``INSTALL_NAME_DIR``.  This setting only applies to targets on macOS.\\nThis property is initialized by the value of the variable\\n``CMAKE_BUILD_WITH_INSTALL_NAME_DIR`` if it is set when a target is\\n",
        "property"
    ],
    "BUILD_WITH_INSTALL_RPATH": [
        "``BUILD_WITH_INSTALL_RPATH`` is a boolean specifying whether to link the target\\nin the build tree with the ``INSTALL_RPATH``.  This takes precedence\\nover ``SKIP_BUILD_RPATH`` and avoids the need for relinking before\\ninstallation.\\nThis property is initialized by the value of the\\n",
        "property"
    ],
    "BUNDLE": [
        "This target is a ``CFBundle`` on the macOS.\\nIf a module library target has this property set to true it will be\\nbuilt as a ``CFBundle`` when built on the mac.  It will have the directory\\nstructure required for a ``CFBundle`` and will be suitable to be used for\\ncreating Browser Plugins or other application resources.\\n",
        "property"
    ],
    "BUNDLE_EXTENSION": [
        "The file extension used to name a ``BUNDLE``, a ``FRAMEWORK``,\\nor a ``MACOSX_BUNDLE`` target on the macOS and iOS.\\nThe default value is ``bundle``, ``framework``, or ``app`` for the respective\\ntarget types.\\n",
        "property"
    ],
    "CACHE_VARIABLES": [
        "List of cache variables available in the current directory.\\nThis read-only property specifies the list of CMake cache variables\\ncurrently defined.  It is intended for debugging purposes.\\n",
        "property"
    ],
    "CLEAN_NO_CUSTOM": [
        "Set to true to tell :ref:`Makefile Generators` not to remove the outputs of\\ncustom commands for this directory during the ``make clean`` operation.\\nThis is ignored on other generators because it is not possible to implement.\\n",
        "property"
    ],
    "CMAKE_CONFIGURE_DEPENDS": [
        "Tell CMake about additional input files to the configuration process.\\nIf any named file is modified the build system will re-run CMake to\\nre-configure the file and generate the build system again.\\nSpecify files as a semicolon-separated list of paths.  Relative paths\\nare interpreted as relative to the current source directory.\\n",
        "property"
    ],
    "CMAKE_CXX_KNOWN_FEATURES": [
        "List of C++ features known to this version of CMake.\\nThe features listed in this global property may be known to be available to the\\nC++ compiler.  If the feature is available with the C++ compiler, it will\\nbe listed in the ``CMAKE_CXX_COMPILE_FEATURES`` variable.\\nThe features listed here may be used with the ``target_compile_features()``\\n",
        "property"
    ],
    "CMAKE_C_KNOWN_FEATURES": [
        "List of C features known to this version of CMake.\\nThe features listed in this global property may be known to be available to the\\nC compiler.  If the feature is available with the C compiler, it will\\nbe listed in the ``CMAKE_C_COMPILE_FEATURES`` variable.\\nThe features listed here may be used with the ``target_compile_features()``\\n",
        "property"
    ],
    "CMAKE_ROLE": [
        "Tells what mode the current running script is in. Could be one of several\\nvalues:\\n``PROJECT``\\n  Running in project mode (processing a ``CMakeLists.txt`` file).\\n``SCRIPT``\\n",
        "property"
    ],
    "COMMON_LANGUAGE_RUNTIME": [
        "By setting this target property, the target is configured to build with\\n``C++/CLI`` support.\\nThe Visual Studio generator defines the ``clr`` parameter depending on\\nthe value of ``COMMON_LANGUAGE_RUNTIME``:\\n* property not set: native C++ (i.e. default)\\n",
        "property"
    ],
    "COMPATIBLE_INTERFACE_BOOL": [
        "Properties which must be compatible with their link interface\\nThe ``COMPATIBLE_INTERFACE_BOOL`` property may contain a list of\\nproperties for this target which must be consistent when evaluated as a\\nboolean with the ``INTERFACE`` variant of the property in all linked\\ndependees.  For example, if a property ``FOO`` appears in the list, then\\n",
        "property"
    ],
    "COMPATIBLE_INTERFACE_NUMBER_MAX": [
        "Properties whose maximum value from the link interface will be used.\\nThe ``COMPATIBLE_INTERFACE_NUMBER_MAX`` property may contain a list of\\nproperties for this target whose maximum value may be read at generate\\ntime when evaluated in the ``INTERFACE`` variant of the property in all\\nlinked dependees.  For example, if a property ``FOO`` appears in the list,\\n",
        "property"
    ],
    "COMPATIBLE_INTERFACE_NUMBER_MIN": [
        "Properties whose maximum value from the link interface will be used.\\nThe ``COMPATIBLE_INTERFACE_NUMBER_MIN`` property may contain a list of\\nproperties for this target whose minimum value may be read at generate\\ntime when evaluated in the ``INTERFACE`` variant of the property of all\\nlinked dependees.  For example, if a\\n",
        "property"
    ],
    "COMPATIBLE_INTERFACE_STRING": [
        "Properties which must be string-compatible with their link interface\\nThe ``COMPATIBLE_INTERFACE_STRING`` property may contain a list of\\nproperties for this target which must be the same when evaluated as a\\nstring in the ``INTERFACE`` variant of the property all linked dependees.\\nFor example, if a property ``FOO`` appears in the list, then for each\\n",
        "property"
    ],
    "COMPILE_DEFINITIONS": [
        "Preprocessor definitions for compiling a directory's sources.\\nThis property specifies the list of options given so far to the\\n``add_compile_definitions()`` (or ``add_definitions()``) command.\\nThe ``COMPILE_DEFINITIONS`` property may be set to a semicolon-separated\\nlist of preprocessor definitions using the syntax ``VAR`` or ``VAR=value``.\\n",
        "property"
    ],
    "COMPILE_DEFINITIONS_DEBUG": [
        "Ignored.  See CMake Policy ``CMP0043``.\\nPer-configuration preprocessor definitions in a directory.\\nThis is the configuration-specific version of ``COMPILE_DEFINITIONS``\\nwhere ``<CONFIG>`` is an upper-case name (ex. ``COMPILE_DEFINITIONS_DEBUG``).\\nThis property will be initialized in each directory by its value in\\n",
        "property"
    ],
    "COMPILE_DEFINITIONS_RELEASE": [
        "Ignored.  See CMake Policy ``CMP0043``.\\nPer-configuration preprocessor definitions in a directory.\\nThis is the configuration-specific version of ``COMPILE_DEFINITIONS``\\nwhere ``<CONFIG>`` is an upper-case name (ex. ``COMPILE_DEFINITIONS_DEBUG``).\\nThis property will be initialized in each directory by its value in\\n",
        "property"
    ],
    "COMPILE_FEATURES": [
        "Compiler features enabled for this target.\\nThe list of features in this property are a subset of the features listed\\nin the ``CMAKE_CXX_COMPILE_FEATURES`` variable.\\nContents of ``COMPILE_FEATURES`` may use \\\"generator expressions\\\" with the\\nsyntax ``$<...>``.  See the ``cmake-generator-expressions(7)`` manual for\\n",
        "property"
    ],
    "COMPILE_FLAGS": [
        "Additional flags to be added when compiling this source file.\\nThe ``COMPILE_FLAGS`` property, managed as a string, sets additional compiler\\nflags used to build source files.  Use ``COMPILE_DEFINITIONS`` to pass\\nadditional preprocessor definitions.\\nContents of ``COMPILE_FLAGS`` may use \\\"generator expressions\\\"\\n",
        "property"
    ],
    "COMPILE_OPTIONS": [
        "List of options to pass to the compiler.\\nThis property holds a :ref:`semicolon-separated list <CMake Language Lists>` of options\\ngiven so far to the ``add_compile_options()`` command.\\nThis property is used to initialize the ``COMPILE_OPTIONS`` target\\nproperty when a target is created, which is used by the generators to set\\n",
        "property"
    ],
    "COMPILE_PDB_NAME": [
        "Output name for the MS debug symbol ``.pdb`` file generated by the\\ncompiler while building source files.\\nThis property specifies the base name for the debug symbols file.\\nIf not set, the default is unspecified.\\n.. note::\\n",
        "property"
    ],
    "COMPILE_PDB_NAME_DEBUG": [
        "Per-configuration output name for the MS debug symbol ``.pdb`` file\\ngenerated by the compiler while building source files.\\nThis is the configuration-specific version of ``COMPILE_PDB_NAME``.\\n.. note::\\n The compiler-generated program database files are specified by the\\n",
        "property"
    ],
    "COMPILE_PDB_NAME_RELEASE": [
        "Per-configuration output name for the MS debug symbol ``.pdb`` file\\ngenerated by the compiler while building source files.\\nThis is the configuration-specific version of ``COMPILE_PDB_NAME``.\\n.. note::\\n The compiler-generated program database files are specified by the\\n",
        "property"
    ],
    "COMPILE_PDB_OUTPUT_DIRECTORY": [
        "Output directory for the MS debug symbol ``.pdb`` file\\ngenerated by the compiler while building source files.\\nThis property specifies the directory into which the MS debug symbols\\nwill be placed by the compiler.  This property is initialized by the\\nvalue of the ``CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY`` variable\\n",
        "property"
    ],
    "COMPILE_PDB_OUTPUT_DIRECTORY_DEBUG": [
        "Per-configuration output directory for the MS debug symbol ``.pdb`` file\\ngenerated by the compiler while building source files.\\nThis is a per-configuration version of\\n``COMPILE_PDB_OUTPUT_DIRECTORY``,\\nbut multi-configuration generators (Visual Studio, Xcode) do NOT append a\\n",
        "property"
    ],
    "COMPILE_PDB_OUTPUT_DIRECTORY_RELEASE": [
        "Per-configuration output directory for the MS debug symbol ``.pdb`` file\\ngenerated by the compiler while building source files.\\nThis is a per-configuration version of\\n``COMPILE_PDB_OUTPUT_DIRECTORY``,\\nbut multi-configuration generators (Visual Studio, Xcode) do NOT append a\\n",
        "property"
    ],
    "COST": [
        "This property describes the cost of a test.  When parallel testing is\\nenabled, tests in the test set will be run in descending order of cost.\\nProjects can explicitly define the cost of a test by setting this property\\nto a floating point value.\\nWhen the cost of a test is not defined by the project,\\n",
        "property"
    ],
    "CPACK_DESKTOP_SHORTCUTS": [
        "Species a list of shortcut names that should be created on the `Desktop`\\nfor this file.\\nThe property is currently only supported by the ``CPack WIX Generator``.\\n",
        "property"
    ],
    "CPACK_NEVER_OVERWRITE": [
        "Request that this file not be overwritten on install or reinstall.\\nThe property is currently only supported by the ``CPack WIX Generator``.\\n",
        "property"
    ],
    "CPACK_PERMANENT": [
        "Request that this file not be removed on uninstall.\\nThe property is currently only supported by the ``CPack WIX Generator``.\\n",
        "property"
    ],
    "CPACK_STARTUP_SHORTCUTS": [
        "Species a list of shortcut names that should be created in the `Startup` folder\\nfor this file.\\nThe property is currently only supported by the ``CPack WIX Generator``.\\n",
        "property"
    ],
    "CPACK_START_MENU_SHORTCUTS": [
        "Species a list of shortcut names that should be created in the `Start Menu`\\nfor this file.\\nThe property is currently only supported by the ``CPack WIX Generator``.\\n",
        "property"
    ],
    "CPACK_WIX_ACL": [
        "Specifies access permissions for files or directories\\ninstalled by a WiX installer.\\nThe property can contain multiple list entries,\\neach of which has to match the following format.\\n::\\n",
        "property"
    ],
    "CROSSCOMPILING_EMULATOR": [
        "Use the given emulator to run executables created when crosscompiling.\\nThis command will be added as a prefix to ``add_test()``,\\n``add_custom_command()``, and ``add_custom_target()`` commands\\nfor built target system executables.\\nIf this property contains a :ref:`semicolon-separated list <CMake Language\\n",
        "property"
    ],
    "CUDA_EXTENSIONS": [
        "Boolean specifying whether compiler specific extensions are requested.\\nThis property specifies whether compiler specific extensions should be\\nused.  For some compilers, this results in adding a flag such\\nas ``-std=gnu++11`` instead of ``-std=c++11`` to the compile line.  This\\nproperty is ``ON`` by default. The basic CUDA/C++ standard level is\\n",
        "property"
    ],
    "CUDA_PTX_COMPILATION": [
        "Compile CUDA sources to ``.ptx`` files instead of ``.obj`` files\\nwithin :ref:`Object Libraries`.\\nFor example:\\n add_library(myptx OBJECT a.cu b.cu)\\n set_property(TARGET myptx PROPERTY CUDA_PTX_COMPILATION ON)\\n",
        "property"
    ],
    "CUDA_RESOLVE_DEVICE_SYMBOLS": [
        "CUDA only: Enables device linking for the specific library target where\\nrequired.\\nIf set, this will tell the required compilers to enable device linking\\non the library target. Device linking is an additional link step\\nrequired by some CUDA compilers when ``CUDA_SEPARABLE_COMPILATION`` is\\n",
        "property"
    ],
    "CUDA_SEPARABLE_COMPILATION": [
        "CUDA only: Enables separate compilation of device code\\nIf set this will enable separable compilation for all CUDA files for\\nthe given target.\\nFor instance:\\n set_property(TARGET myexe PROPERTY CUDA_SEPARABLE_COMPILATION ON)\\n",
        "property"
    ],
    "CUDA_STANDARD": [
        "The CUDA/C++ standard whose features are requested to build this target.\\nThis property specifies the CUDA/C++ standard whose features are requested\\nto build this target.  For some compilers, this results in adding a\\nflag such as ``-std=gnu++11`` to the compile line.\\nSupported values are ``98``, ``11``, ``14``.\\n",
        "property"
    ],
    "CUDA_STANDARD_REQUIRED": [
        "Boolean describing whether the value of ``CUDA_STANDARD`` is a requirement.\\nIf this property is set to ``ON``, then the value of the\\n``CUDA_STANDARD`` target property is treated as a requirement.  If this\\nproperty is ``OFF`` or unset, the ``CUDA_STANDARD`` target property is\\ntreated as optional and may \\\"decay\\\" to a previous standard if the requested is\\n",
        "property"
    ],
    "CXX_EXTENSIONS": [
        "Boolean specifying whether compiler specific extensions are requested.\\nThis property specifies whether compiler specific extensions should be\\nused.  For some compilers, this results in adding a flag such\\nas ``-std=gnu++11`` instead of ``-std=c++11`` to the compile line.  This\\nproperty is ``ON`` by default. The basic C++ standard level is\\n",
        "property"
    ],
    "CXX_STANDARD": [
        "The C++ standard whose features are requested to build this target.\\nThis property specifies the C++ standard whose features are requested\\nto build this target.  For some compilers, this results in adding a\\nflag such as ``-std=gnu++11`` to the compile line.  For compilers that\\nhave no notion of a standard level, such as Microsoft Visual C++ before\\n",
        "property"
    ],
    "CXX_STANDARD_REQUIRED": [
        "Boolean describing whether the value of ``CXX_STANDARD`` is a requirement.\\nIf this property is set to ``ON``, then the value of the\\n``CXX_STANDARD`` target property is treated as a requirement.  If this\\nproperty is ``OFF`` or unset, the ``CXX_STANDARD`` target property is\\ntreated as optional and may \\\"decay\\\" to a previous standard if the requested is\\n",
        "property"
    ],
    "C_EXTENSIONS": [
        "Boolean specifying whether compiler specific extensions are requested.\\nThis property specifies whether compiler specific extensions should be\\nused.  For some compilers, this results in adding a flag such\\nas ``-std=gnu11`` instead of ``-std=c11`` to the compile line.  This\\nproperty is ``ON`` by default. The basic C standard level is\\n",
        "property"
    ],
    "C_STANDARD": [
        "The C standard whose features are requested to build this target.\\nThis property specifies the C standard whose features are requested\\nto build this target.  For some compilers, this results in adding a\\nflag such as ``-std=gnu11`` to the compile line.  For compilers that\\nhave no notion of a standard level, such as Microsoft Visual C++ before\\n",
        "property"
    ],
    "C_STANDARD_REQUIRED": [
        "Boolean describing whether the value of ``C_STANDARD`` is a requirement.\\nIf this property is set to ``ON``, then the value of the\\n``C_STANDARD`` target property is treated as a requirement.  If this\\nproperty is ``OFF`` or unset, the ``C_STANDARD`` target property is\\ntreated as optional and may \\\"decay\\\" to a previous standard if the requested is\\n",
        "property"
    ],
    "DEBUG_CONFIGURATIONS": [
        "Specify which configurations are for debugging.\\nThe value must be a semi-colon separated list of configuration names.\\nCurrently this property is used only by the ``target_link_libraries()``\\ncommand.  Additional uses may be defined in the future.\\nThis property must be set at the top level of the project and before\\n",
        "property"
    ],
    "DEFINE_SYMBOL": [
        "Define a symbol when compiling this target's sources.\\n``DEFINE_SYMBOL`` sets the name of the preprocessor symbol defined when\\ncompiling sources in a shared library.  If not set here then it is set\\nto ``target_EXPORTS`` by default (with some substitutions if the target is\\nnot a valid C identifier).  This is useful for headers to know whether\\n",
        "property"
    ],
    "DEFINITIONS": [
        "For CMake 2.4 compatibility only.  Use ``COMPILE_DEFINITIONS``\\ninstead.\\nThis read-only property specifies the list of flags given so far to\\nthe ``add_definitions()`` command.  It is intended for debugging\\npurposes.  Use the ``COMPILE_DEFINITIONS`` directory property\\n",
        "property"
    ],
    "DEPENDS": [
        "Specifies that this test should only be run after the specified list of tests.\\nSet this to a list of tests that must finish before this test is run. The\\nresults of those tests are not considered, the dependency relationship is\\npurely for order of execution (i.e. it is really just a *run after*\\nrelationship). Consider using test fixtures with setup tests if a dependency\\n",
        "property"
    ],
    "DEPLOYMENT_ADDITIONAL_FILES": [
        "Set the WinCE project ``AdditionalFiles`` in ``DeploymentTool`` in ``.vcproj``\\nfiles generated by the ``Visual Studio 9 2008`` generator.\\nThis is useful when you want to debug on remote WinCE device.\\nSpecify additional files that will be copied to the device.\\nFor example:\\n",
        "property"
    ],
    "DEPLOYMENT_REMOTE_DIRECTORY": [
        "Set the WinCE project ``RemoteDirectory`` in ``DeploymentTool`` and\\n``RemoteExecutable`` in ``DebuggerTool`` in ``.vcproj`` files generated\\nby the ``Visual Studio 9 2008`` generator.\\nThis is useful when you want to debug on remote WinCE device.\\nFor example:\\n",
        "property"
    ],
    "DISABLED": [
        "If set to ``True``, the test will be skipped and its status will be 'Not Run'. A\\n``DISABLED`` test will not be counted in the total number of tests and its\\ncompletion status will be reported to CDash as ``Disabled``.\\nA ``DISABLED`` test does not participate in test fixture dependency resolution.\\nIf a ``DISABLED`` test has fixture requirements defined in its\\n",
        "property"
    ],
    "DISABLED_FEATURES": [
        "List of features which are disabled during the CMake run.\\nList of features which are disabled during the CMake run.  By default\\nit contains the names of all packages which were not found.  This is\\ndetermined using the ``<NAME>_FOUND`` variables.  Packages which are\\nsearched ``QUIET`` are not listed.  A project can add its own features to\\n",
        "property"
    ],
    "DISABLE_PRECOMPILE_HEADERS": [
        "Disables the precompilation of header files specified by\\n``PRECOMPILE_HEADERS`` property.\\nIf the property is not set, CMake will use the value provided\\nby ``CMAKE_DISABLE_PRECOMPILE_HEADERS``.\\n",
        "property"
    ],
    "DOTNET_TARGET_FRAMEWORK_VERSION": [
        "Specify the .NET target framework version.\\nUsed to specify the .NET target framework version for C++/CLI.  For\\nexample: ``v4.5``.\\nThis property is only evaluated for :ref:`Visual Studio Generators`\\nVS 2010 and above.\\n",
        "property"
    ],
    "ECLIPSE_EXTRA_CPROJECT_CONTENTS": [
        "Additional contents to be inserted into the generated Eclipse cproject file.\\nThe cproject file defines the CDT specific information. Some third party IDE's\\nare based on Eclipse with the addition of other information specific to that IDE.\\nThrough this property, it is possible to add this additional contents to\\nthe generated project.\\n",
        "property"
    ],
    "ECLIPSE_EXTRA_NATURES": [
        "List of natures to add to the generated Eclipse project file.\\nEclipse projects specify language plugins by using natures. This property\\nshould be set to the unique identifier for a nature (which looks like a Java\\npackage name).\\nAlso see the ``ECLIPSE_EXTRA_CPROJECT_CONTENTS`` property.\\n",
        "property"
    ],
    "ENABLED_FEATURES": [
        "List of features which are enabled during the CMake run.\\nList of features which are enabled during the CMake run.  By default\\nit contains the names of all packages which were found.  This is\\ndetermined using the ``<NAME>_FOUND`` variables.  Packages which are\\nsearched ``QUIET`` are not listed.  A project can add its own features to\\n",
        "property"
    ],
    "ENABLED_LANGUAGES": [
        "Read-only property that contains the list of currently enabled languages\\nSet to list of currently enabled languages.\\n",
        "property"
    ],
    "ENABLE_EXPORTS": [
        "Specify whether an executable exports symbols for loadable modules.\\nNormally an executable does not export any symbols because it is the\\nfinal program.  It is possible for an executable to export symbols to\\nbe used by loadable modules.  When this property is set to true CMake\\nwill allow other targets to \\\"link\\\" to the executable with the\\n",
        "property"
    ],
    "ENVIRONMENT": [
        "Specify environment variables that should be defined for running a test.\\nIf set to a list of environment variables and values of the form\\n``MYVAR=value`` those environment variables will be defined while running\\nthe test.  The environment is restored to its previous state after the\\ntest is done.\\n",
        "property"
    ],
    "EXCLUDE_FROM_ALL": [
        "Set this directory property to a true value on a subdirectory to exclude\\nits targets from the \\\"all\\\" target of its ancestors.  If excluded, running\\ne.g. ``make`` in the parent directory will not build targets the\\nsubdirectory by default.  This does not affect the \\\"all\\\" target of the\\nsubdirectory itself.  Running e.g. ``make`` inside the subdirectory will\\n",
        "property"
    ],
    "EXCLUDE_FROM_DEFAULT_BUILD": [
        "Exclude target from ``Build Solution``.\\nThis property is only used by Visual Studio generators.\\nWhen set to ``TRUE``, the target will not be built when you press\\n``Build Solution``.\\n",
        "property"
    ],
    "EXCLUDE_FROM_DEFAULT_BUILD_DEBUG": [
        "Per-configuration version of target exclusion from ``Build Solution``.\\nThis is the configuration-specific version of\\n``EXCLUDE_FROM_DEFAULT_BUILD``.  If the generic\\n``EXCLUDE_FROM_DEFAULT_BUILD`` is also set on a target,\\n``EXCLUDE_FROM_DEFAULT_BUILD_<CONFIG>`` takes\\n",
        "property"
    ],
    "EXCLUDE_FROM_DEFAULT_BUILD_RELEASE": [
        "Per-configuration version of target exclusion from ``Build Solution``.\\nThis is the configuration-specific version of\\n``EXCLUDE_FROM_DEFAULT_BUILD``.  If the generic\\n``EXCLUDE_FROM_DEFAULT_BUILD`` is also set on a target,\\n``EXCLUDE_FROM_DEFAULT_BUILD_<CONFIG>`` takes\\n",
        "property"
    ],
    "EXPORT_NAME": [
        "Exported name for target files.\\nThis sets the name for the ``IMPORTED`` target generated by the\\n``install(EXPORT)`` and ``export()`` commands.\\nIf not set, the logical target name is used by default.\\n",
        "property"
    ],
    "EXPORT_PROPERTIES": [
        "List additional properties to export for a target.\\nThis property contains a list of property names that should be exported by\\nthe ``install(EXPORT)`` and ``export()`` commands.  By default\\nonly a limited number of properties are exported. This property can be used\\nto additionally export other properties as well.\\n",
        "property"
    ],
    "EXTERNAL_OBJECT": [
        "If set to true then this is an object file.\\nIf this property is set to ``True`` then the source file is really an\\nobject file and should not be compiled.  It will still be linked into\\nthe target though.\\n",
        "property"
    ],
    "EchoString": [
        "A message to be displayed when the target is built.\\nA message to display on some generators (such as :ref:`Makefile Generators`)\\nwhen the target is built.\\n",
        "property"
    ],
    "FAIL_REGULAR_EXPRESSION": [
        "If the output matches this regular expression the test will fail.\\nIf set, if the output matches one of specified regular expressions,\\nthe test will fail.  Example:\\n set_tests_properties(mytest PROPERTIES\\n   FAIL_REGULAR_EXPRESSION \\\"[^a-z]Error;ERROR;Failed\\\"\\n",
        "property"
    ],
    "FIND_LIBRARY_USE_LIB32_PATHS": [
        "Whether the ``find_library()`` command should automatically search\\n``lib32`` directories.\\n``FIND_LIBRARY_USE_LIB32_PATHS`` is a boolean specifying whether the\\n``find_library()`` command should automatically search the ``lib32``\\nvariant of directories called ``lib`` in the search path when building 32-bit\\n",
        "property"
    ],
    "FIND_LIBRARY_USE_LIB64_PATHS": [
        "Whether ``find_library()`` should automatically search lib64\\ndirectories.\\nFIND_LIBRARY_USE_LIB64_PATHS is a boolean specifying whether the\\n``find_library()`` command should automatically search the lib64\\nvariant of directories called lib in the search path when building\\n",
        "property"
    ],
    "FIND_LIBRARY_USE_LIBX32_PATHS": [
        "Whether the ``find_library()`` command should automatically search\\n``libx32`` directories.\\n``FIND_LIBRARY_USE_LIBX32_PATHS`` is a boolean specifying whether the\\n``find_library()`` command should automatically search the ``libx32``\\nvariant of directories called ``lib`` in the search path when building\\n",
        "property"
    ],
    "FIND_LIBRARY_USE_OPENBSD_VERSIONING": [
        "Whether ``find_library()`` should find OpenBSD-style shared\\nlibraries.\\nThis property is a boolean specifying whether the\\n``find_library()`` command should find shared libraries with\\nOpenBSD-style versioned extension: \\\".so.<major>.<minor>\\\".  The\\n",
        "property"
    ],
    "FIXTURES_CLEANUP": [
        "Specifies a list of fixtures for which the test is to be treated as a cleanup\\ntest. These fixture names are distinct from test case names and are not\\nrequired to have any similarity to the names of tests associated with them.\\nFixture cleanup tests are ordinary tests with all of the usual test\\nfunctionality. Setting the ``FIXTURES_CLEANUP`` property for a test has two\\n",
        "property"
    ],
    "FIXTURES_REQUIRED": [
        "Specifies a list of fixtures the test requires. Fixture names are case\\nsensitive and they are not required to have any similarity to test names.\\nFixtures are a way to attach setup and cleanup tasks to a set of tests. If a\\ntest requires a given fixture, then all tests marked as setup tasks for that\\nfixture will be executed first (once for the whole set of tests, not once per\\n",
        "property"
    ],
    "FIXTURES_SETUP": [
        "Specifies a list of fixtures for which the test is to be treated as a setup\\ntest. These fixture names are distinct from test case names and are not\\nrequired to have any similarity to the names of tests associated with them.\\nFixture setup tests are ordinary tests with all of the usual test\\nfunctionality. Setting the ``FIXTURES_SETUP`` property for a test has two\\n",
        "property"
    ],
    "FOLDER": [
        "Set the folder name. Use to organize targets in an IDE.\\nTargets with no ``FOLDER`` property will appear as top level entities in\\nIDEs like Visual Studio.  Targets with the same ``FOLDER`` property value\\nwill appear next to each other in a folder of that name.  To nest\\nfolders, use ``FOLDER`` values such as 'GUI/Dialogs' with '/' characters\\n",
        "property"
    ],
    "FRAMEWORK": [
        "Build ``SHARED`` or ``STATIC`` library as Framework Bundle on the macOS and iOS.\\nIf such a library target has this property set to ``TRUE`` it will be\\nbuilt as a framework when built on the macOS and iOS.  It will have the\\ndirectory structure required for a framework and will be suitable to\\nbe used with the ``-framework`` option.  This property is initialized by the\\n",
        "property"
    ],
    "FRAMEWORK_VERSION": [
        "Version of a framework created using the ``FRAMEWORK`` target\\nproperty (e.g. ``A``).\\nThis property only affects macOS, as iOS doesn't have versioned\\ndirectory structure.\\n",
        "property"
    ],
    "Fortran_FORMAT": [
        "Set to ``FIXED`` or ``FREE`` to indicate the Fortran source layout.\\nThis property tells CMake whether a given Fortran source file uses\\nfixed-format or free-format.  CMake will pass the corresponding format\\nflag to the compiler.  Consider using the target-wide\\n``Fortran_FORMAT`` property if all source files in a target\\n",
        "property"
    ],
    "Fortran_MODULE_DIRECTORY": [
        "Specify output directory for Fortran modules provided by the target.\\nIf the target contains Fortran source files that provide modules and\\nthe compiler supports a module output directory this specifies the\\ndirectory in which the modules will be placed.  When this property is\\nnot set the modules will be placed in the build directory\\n",
        "property"
    ],
    "GENERATED": [
        "Is this source file generated as part of the build or CMake process.\\nTells the internal CMake engine that a source file is generated by an outside\\nprocess such as another build step, or the execution of CMake itself. This\\ninformation is then used to exempt the file from any existence or validity\\nchecks. Generated files are created by the execution of commands such as\\n",
        "property"
    ],
    "GENERATOR_FILE_NAME": [
        "Generator's file for this target.\\nAn internal property used by some generators to record the name of the\\nproject or dsp file associated with this target.  Note that at\\nconfigure time, this property is only set for targets created by\\n``include_external_msproject()``.\\n",
        "property"
    ],
    "GENERATOR_IS_MULTI_CONFIG": [
        "Read-only property that is true on multi-configuration generators.\\nTrue when using a multi-configuration generator\\n(such as :ref:`Visual Studio Generators` or ``Xcode``).\\nMulti-config generators use ``CMAKE_CONFIGURATION_TYPES``\\nas the set of configurations and ignore ``CMAKE_BUILD_TYPE``.\\n",
        "property"
    ],
    "GHS_INTEGRITY_APP": [
        "``ON`` / ``OFF`` boolean to determine if an executable target should\\nbe treated as an `Integrity Application`.\\nIf no value is set and if a ``.int`` file is added as a source file to the\\nexecutable target it will be treated as an `Integrity Application`.\\nSupported on ``Green Hills MULTI``.\\n",
        "property"
    ],
    "GHS_NO_SOURCE_GROUP_FILE": [
        "``ON`` / ``OFF`` boolean to control if the project file for a target should\\nbe one single file or multiple files.\\nThe default behavior or when the property is ``OFF`` is to generate a project\\nfile for the target and then a sub-project file for each source group.\\nWhen this property is ``ON`` or if ``CMAKE_GHS_NO_SOURCE_GROUP_FILE``\\n",
        "property"
    ],
    "GLOBAL_DEPENDS_DEBUG_MODE": [
        "Enable global target dependency graph debug mode.\\nCMake automatically analyzes the global inter-target dependency graph\\nat the beginning of native build system generation.  This property\\ncauses it to display details of its analysis to stderr.\\n",
        "property"
    ],
    "GLOBAL_DEPENDS_NO_CYCLES": [
        "Disallow global target dependency graph cycles.\\nCMake automatically analyzes the global inter-target dependency graph\\nat the beginning of native build system generation.  It reports an\\nerror if the dependency graph contains a cycle that does not consist\\nof all STATIC library targets.  This property tells CMake to disallow\\n",
        "property"
    ],
    "GNUtoMS": [
        "Convert GNU import library (``.dll.a``) to MS format (``.lib``).\\nWhen linking a shared library or executable that exports symbols using\\nGNU tools on Windows (MinGW/MSYS) with Visual Studio installed convert\\nthe import library (``.dll.a``) from GNU to MS format (``.lib``).  Both import\\nlibraries will be installed by ``install(TARGETS)`` and exported by\\n",
        "property"
    ],
    "HAS_CXX": [
        "Link the target using the C++ linker tool (obsolete).\\nThis is equivalent to setting the ``LINKER_LANGUAGE``\\nproperty to ``CXX``.\\n",
        "property"
    ],
    "HEADER_FILE_ONLY": [
        "Is this source file only a header file.\\nA property on a source file that indicates if the source file is a\\nheader file with no associated implementation.  This is set\\nautomatically based on the file extension and is used by CMake to\\ndetermine if certain dependency information should be computed.\\n",
        "property"
    ],
    "HELPSTRING": [
        "Help associated with entry in GUIs.\\nThis string summarizes the purpose of an entry to help users set it\\nthrough a CMake GUI.\\n",
        "property"
    ],
    "IMPLICIT_DEPENDS_INCLUDE_TRANSFORM": [
        "Specify ``#include`` line transforms for dependencies in a directory.\\nThis property specifies rules to transform macro-like ``#include`` lines\\nduring implicit dependency scanning of C and C++ source files.  The\\nlist of rules must be semicolon-separated with each entry of the form\\n``A_MACRO(%)=value-with-%`` (the ``%`` must be literal).  During dependency\\n",
        "property"
    ],
    "IMPORTED": [
        "Read-only indication of whether a target is ``IMPORTED``.\\nThe boolean value of this property is ``True`` for targets created with\\nthe ``IMPORTED`` option to ``add_executable()`` or ``add_library()``.\\nIt is ``False`` for targets built within the project.\\n",
        "property"
    ],
    "IMPORTED_COMMON_LANGUAGE_RUNTIME": [
        "Property to define if the target uses ``C++/CLI``.\\nIgnored for non-imported targets.\\nSee also the ``COMMON_LANGUAGE_RUNTIME`` target property.\\n",
        "property"
    ],
    "IMPORTED_CONFIGURATIONS": [
        "Configurations provided for an IMPORTED target.\\nSet this to the list of configuration names available for an IMPORTED\\ntarget.  The names correspond to configurations defined in the project\\nfrom which the target is imported.  If the importing project uses a\\ndifferent set of configurations the names may be mapped using the\\n",
        "property"
    ],
    "IMPORTED_GLOBAL": [
        "Indication of whether an :ref:`IMPORTED target <Imported Targets>` is\\nglobally visible.\\nThe boolean value of this property is True for targets created with the\\n``IMPORTED`` ``GLOBAL`` options to ``add_executable()`` or\\n``add_library()``. It is always False for targets built within the\\n",
        "property"
    ],
    "IMPORTED_IMPLIB": [
        "Full path to the import library for an ``IMPORTED`` target.\\nSet this to the location of the ``.lib`` part of a Windows DLL, or on\\nAIX set it to an import file created for executables that export symbols\\n(see the ``ENABLE_EXPORTS`` target property).\\nIgnored for non-imported targets.\\n",
        "property"
    ],
    "IMPORTED_IMPLIB_DEBUG": [
        "<CONFIG>-specific version of ``IMPORTED_IMPLIB`` property.\\nConfiguration names correspond to those provided by the project from\\nwhich the target is imported.\\n",
        "property"
    ],
    "IMPORTED_IMPLIB_RELEASE": [
        "<CONFIG>-specific version of ``IMPORTED_IMPLIB`` property.\\nConfiguration names correspond to those provided by the project from\\nwhich the target is imported.\\n",
        "property"
    ],
    "IMPORTED_LIBNAME": [
        "Specify the link library name for an :ref:`imported <Imported Targets>`\\n:ref:`Interface Library <Interface Libraries>`.\\nAn interface library builds no library file itself but does specify\\nusage requirements for its consumers.  The ``IMPORTED_LIBNAME``\\nproperty may be set to specify a single library name to be placed\\n",
        "property"
    ],
    "IMPORTED_LIBNAME_DEBUG": [
        "<CONFIG>-specific version of ``IMPORTED_LIBNAME`` property.\\nConfiguration names correspond to those provided by the project from\\nwhich the target is imported.\\n",
        "property"
    ],
    "IMPORTED_LIBNAME_RELEASE": [
        "<CONFIG>-specific version of ``IMPORTED_LIBNAME`` property.\\nConfiguration names correspond to those provided by the project from\\nwhich the target is imported.\\n",
        "property"
    ],
    "IMPORTED_LINK_DEPENDENT_LIBRARIES": [
        "Dependent shared libraries of an imported shared library.\\nShared libraries may be linked to other shared libraries as part of\\ntheir implementation.  On some platforms the linker searches for the\\ndependent libraries of shared libraries they are including in the\\nlink.  Set this property to the list of dependent shared libraries of\\n",
        "property"
    ],
    "IMPORTED_LINK_DEPENDENT_LIBRARIES_DEBUG": [
        "<CONFIG>-specific version of ``IMPORTED_LINK_DEPENDENT_LIBRARIES``.\\nConfiguration names correspond to those provided by the project from\\nwhich the target is imported.  If set, this property completely\\noverrides the generic property for the named configuration.\\n",
        "property"
    ],
    "IMPORTED_LINK_DEPENDENT_LIBRARIES_RELEASE": [
        "<CONFIG>-specific version of ``IMPORTED_LINK_DEPENDENT_LIBRARIES``.\\nConfiguration names correspond to those provided by the project from\\nwhich the target is imported.  If set, this property completely\\noverrides the generic property for the named configuration.\\n",
        "property"
    ],
    "IMPORTED_LINK_INTERFACE_LANGUAGES": [
        "Languages compiled into an ``IMPORTED`` static library.\\nSet this to the list of languages of source files compiled to produce\\na ``STATIC IMPORTED`` library (such as ``C`` or ``CXX``).  CMake accounts for\\nthese languages when computing how to link a target to the imported\\nlibrary.  For example, when a C executable links to an imported C++\\n",
        "property"
    ],
    "IMPORTED_LINK_INTERFACE_LANGUAGES_DEBUG": [
        "<CONFIG>-specific version of ``IMPORTED_LINK_INTERFACE_LANGUAGES``.\\nConfiguration names correspond to those provided by the project from\\nwhich the target is imported.  If set, this property completely\\noverrides the generic property for the named configuration.\\n",
        "property"
    ],
    "IMPORTED_LINK_INTERFACE_LANGUAGES_RELEASE": [
        "<CONFIG>-specific version of ``IMPORTED_LINK_INTERFACE_LANGUAGES``.\\nConfiguration names correspond to those provided by the project from\\nwhich the target is imported.  If set, this property completely\\noverrides the generic property for the named configuration.\\n",
        "property"
    ],
    "IMPORTED_LINK_INTERFACE_LIBRARIES": [
        "Transitive link interface of an ``IMPORTED`` target.\\nSet this to the list of libraries whose interface is included when an\\n``IMPORTED`` library target is linked to another target.  The libraries\\nwill be included on the link line for the target.  Unlike the\\n``LINK_INTERFACE_LIBRARIES`` property, this property applies to all\\n",
        "property"
    ],
    "IMPORTED_LINK_INTERFACE_LIBRARIES_DEBUG": [
        "<CONFIG>-specific version of ``IMPORTED_LINK_INTERFACE_LIBRARIES``.\\nConfiguration names correspond to those provided by the project from\\nwhich the target is imported.  If set, this property completely\\noverrides the generic property for the named configuration.\\nThis property is ignored if the target also has a non-empty\\n",
        "property"
    ],
    "IMPORTED_LINK_INTERFACE_LIBRARIES_RELEASE": [
        "<CONFIG>-specific version of ``IMPORTED_LINK_INTERFACE_LIBRARIES``.\\nConfiguration names correspond to those provided by the project from\\nwhich the target is imported.  If set, this property completely\\noverrides the generic property for the named configuration.\\nThis property is ignored if the target also has a non-empty\\n",
        "property"
    ],
    "IMPORTED_LINK_INTERFACE_MULTIPLICITY": [
        "Repetition count for cycles of ``IMPORTED`` static libraries.\\nThis is ``LINK_INTERFACE_MULTIPLICITY`` for ``IMPORTED`` targets.\\n",
        "property"
    ],
    "IMPORTED_LINK_INTERFACE_MULTIPLICITY_DEBUG": [
        "<CONFIG>-specific version of ``IMPORTED_LINK_INTERFACE_MULTIPLICITY``.\\nIf set, this property completely overrides the generic property for\\nthe named configuration.\\n",
        "property"
    ],
    "IMPORTED_LINK_INTERFACE_MULTIPLICITY_RELEASE": [
        "<CONFIG>-specific version of ``IMPORTED_LINK_INTERFACE_MULTIPLICITY``.\\nIf set, this property completely overrides the generic property for\\nthe named configuration.\\n",
        "property"
    ],
    "IMPORTED_LOCATION": [
        "Full path to the main file on disk for an ``IMPORTED`` target.\\nSet this to the location of an ``IMPORTED`` target file on disk.  For\\nexecutables this is the location of the executable file.  For bundles\\non macOS this is the location of the executable file inside\\n``Contents/MacOS`` under the application bundle folder.  For ``STATIC``\\n",
        "property"
    ],
    "IMPORTED_LOCATION_DEBUG": [
        "<CONFIG>-specific version of ``IMPORTED_LOCATION`` property.\\nConfiguration names correspond to those provided by the project from\\nwhich the target is imported.\\n",
        "property"
    ],
    "IMPORTED_LOCATION_RELEASE": [
        "<CONFIG>-specific version of ``IMPORTED_LOCATION`` property.\\nConfiguration names correspond to those provided by the project from\\nwhich the target is imported.\\n",
        "property"
    ],
    "IMPORTED_NO_SONAME": [
        "Specifies that an ``IMPORTED`` shared library target has no ``soname``.\\nSet this property to true for an imported shared library file that has\\nno ``soname`` field.  CMake may adjust generated link commands for some\\nplatforms to prevent the linker from using the path to the library in\\nplace of its missing ``soname``.  Ignored for non-imported targets.\\n",
        "property"
    ],
    "IMPORTED_NO_SONAME_DEBUG": [
        "<CONFIG>-specific version of ``IMPORTED_NO_SONAME`` property.\\nConfiguration names correspond to those provided by the project from\\nwhich the target is imported.\\n",
        "property"
    ],
    "IMPORTED_NO_SONAME_RELEASE": [
        "<CONFIG>-specific version of ``IMPORTED_NO_SONAME`` property.\\nConfiguration names correspond to those provided by the project from\\nwhich the target is imported.\\n",
        "property"
    ],
    "IMPORTED_OBJECTS": [
        "A :ref:`semicolon-separated list <CMake Language Lists>` of absolute paths to the object\\nfiles on disk for an :ref:`imported <Imported targets>`\\n:ref:`object library <object libraries>`.\\nIgnored for non-imported targets.\\nProjects may skip ``IMPORTED_OBJECTS`` if the configuration-specific\\n",
        "property"
    ],
    "IMPORTED_OBJECTS_DEBUG": [
        "<CONFIG>-specific version of ``IMPORTED_OBJECTS`` property.\\nConfiguration names correspond to those provided by the project from\\nwhich the target is imported.\\n",
        "property"
    ],
    "IMPORTED_OBJECTS_RELEASE": [
        "<CONFIG>-specific version of ``IMPORTED_OBJECTS`` property.\\nConfiguration names correspond to those provided by the project from\\nwhich the target is imported.\\n",
        "property"
    ],
    "IMPORTED_SONAME": [
        "The ``soname`` of an ``IMPORTED`` target of shared library type.\\nSet this to the ``soname`` embedded in an imported shared library.  This\\nis meaningful only on platforms supporting the feature.  Ignored for\\nnon-imported targets.\\n",
        "property"
    ],
    "IMPORTED_SONAME_DEBUG": [
        "<CONFIG>-specific version of ``IMPORTED_SONAME`` property.\\nConfiguration names correspond to those provided by the project from\\nwhich the target is imported.\\n",
        "property"
    ],
    "IMPORTED_SONAME_RELEASE": [
        "<CONFIG>-specific version of ``IMPORTED_SONAME`` property.\\nConfiguration names correspond to those provided by the project from\\nwhich the target is imported.\\n",
        "property"
    ],
    "IMPORT_PREFIX": [
        "What comes before the import library name.\\nSimilar to the target property ``PREFIX``, but used for import libraries\\n(typically corresponding to a ``DLL``) instead of regular libraries.  A\\ntarget property that can be set to override the prefix (such as ``lib``)\\non an import library name.\\n",
        "property"
    ],
    "IMPORT_SUFFIX": [
        "What comes after the import library name.\\nSimilar to the target property ``SUFFIX``, but used\\nfor import libraries (typically corresponding to a ``DLL``) instead of\\nregular libraries.  A target property that can be set to override\\nthe suffix (such as ``.lib``) on an import library name.\\n",
        "property"
    ],
    "INCLUDE_DIRECTORIES": [
        "List of preprocessor include file search directories.\\nThis property specifies the list of directories given so far to the\\n``include_directories()`` command.\\nThis property is used to populate the ``INCLUDE_DIRECTORIES``\\ntarget property, which is used by the generators to set the include\\n",
        "property"
    ],
    "INCLUDE_REGULAR_EXPRESSION": [
        "Include file scanning regular expression.\\nThis property specifies the regular expression used during\\ndependency scanning to match include files that should be followed.\\nSee the ``include_regular_expression()`` command for a high-level\\ninterface to set this property.\\n",
        "property"
    ],
    "INSTALL_NAME_DIR": [
        "macOS directory name for installed targets.\\n``INSTALL_NAME_DIR`` is a string specifying the directory portion of the\\n\\\"install_name\\\" field of shared libraries on macOS to use in the\\ninstalled targets.\\nThis property is initialized by the value of the variable\\n",
        "property"
    ],
    "INSTALL_REMOVE_ENVIRONMENT_RPATH": [
        "Controls whether toolchain-defined rpaths should be removed during installation.\\nWhen a target is being installed, CMake may need to rewrite its rpath\\ninformation.  This occurs when the install rpath (as specified by the\\n``INSTALL_RPATH`` target property) has different contents to the rpath\\nthat the target was built with.  Some toolchains insert their own rpath\\n",
        "property"
    ],
    "INSTALL_RPATH": [
        "The rpath to use for installed targets.\\nA semicolon-separated list specifying the rpath to use in installed\\ntargets (for platforms that support it).  This property is initialized\\nby the value of the variable ``CMAKE_INSTALL_RPATH`` if it is set when\\na target is created.\\n",
        "property"
    ],
    "INSTALL_RPATH_USE_LINK_PATH": [
        "Add paths to linker search and installed rpath.\\n``INSTALL_RPATH_USE_LINK_PATH`` is a boolean that if set to ``True`` will\\nappend directories in the linker search path and outside the project\\nto the ``INSTALL_RPATH``.  This property is initialized by the value of\\nthe variable ``CMAKE_INSTALL_RPATH_USE_LINK_PATH`` if it is set when a\\n",
        "property"
    ],
    "INTERFACE_AUTOUIC_OPTIONS": [
        "List of interface options to pass to uic.\\nTargets may populate this property to publish the options\\nrequired to use when invoking ``uic``.  Consuming targets can add entries to their\\nown ``AUTOUIC_OPTIONS`` property such as\\n``$<TARGET_PROPERTY:foo,INTERFACE_AUTOUIC_OPTIONS>`` to use the uic options\\n",
        "property"
    ],
    "INTERFACE_COMPILE_DEFINITIONS": [
        "List of public compile definitions requirements for a library.\\nTargets may populate this property to publish the compile definitions\\nrequired to compile against the headers for the target.  The ``target_compile_definitions()``\\ncommand populates this property with values given to the ``PUBLIC`` and\\n``INTERFACE`` keywords.  Projects may also get and set the property directly.\\n",
        "property"
    ],
    "INTERFACE_COMPILE_FEATURES": [
        "List of public compile features requirements for a library.\\nTargets may populate this property to publish the compile features\\nrequired to compile against the headers for the target.  The ``target_compile_features()``\\ncommand populates this property with values given to the ``PUBLIC`` and\\n``INTERFACE`` keywords.  Projects may also get and set the property directly.\\n",
        "property"
    ],
    "INTERFACE_COMPILE_OPTIONS": [
        "List of public compile options requirements for a library.\\nTargets may populate this property to publish the compile options\\nrequired to compile against the headers for the target.  The ``target_compile_options()``\\ncommand populates this property with values given to the ``PUBLIC`` and\\n``INTERFACE`` keywords.  Projects may also get and set the property directly.\\n",
        "property"
    ],
    "INTERFACE_INCLUDE_DIRECTORIES": [
        "List of public include directories requirements for a library.\\nTargets may populate this property to publish the include directories\\nrequired to compile against the headers for the target.  The ``target_include_directories()``\\ncommand populates this property with values given to the ``PUBLIC`` and\\n``INTERFACE`` keywords.  Projects may also get and set the property directly.\\n",
        "property"
    ],
    "INTERFACE_LINK_DEPENDS": [
        "Additional public interface files on which a target binary depends for linking.\\nThis property is supported only by ``Ninja`` and\\n:ref:`Makefile Generators`.\\nIt is intended to specify dependencies on \\\"linker scripts\\\" for\\ncustom Makefile link rules.\\n",
        "property"
    ],
    "INTERFACE_LINK_DIRECTORIES": [
        "List of public link directories requirements for a library.\\nTargets may populate this property to publish the link directories\\nrequired to compile against the headers for the target.  The ``target_link_directories()``\\ncommand populates this property with values given to the ``PUBLIC`` and\\n``INTERFACE`` keywords.  Projects may also get and set the property directly.\\n",
        "property"
    ],
    "INTERFACE_LINK_LIBRARIES": [
        "List public interface libraries for a library.\\nThis property contains the list of transitive link dependencies.  When\\nthe target is linked into another target using the\\n``target_link_libraries()`` command, the libraries listed (and\\nrecursively their link interface libraries) will be provided to the\\n",
        "property"
    ],
    "INTERFACE_LINK_OPTIONS": [
        "List of public link options requirements for a library.\\nTargets may populate this property to publish the link options\\nrequired to compile against the headers for the target.  The ``target_link_options()``\\ncommand populates this property with values given to the ``PUBLIC`` and\\n``INTERFACE`` keywords.  Projects may also get and set the property directly.\\n",
        "property"
    ],
    "INTERFACE_POSITION_INDEPENDENT_CODE": [
        "Whether consumers need to create a position-independent target\\nThe ``INTERFACE_POSITION_INDEPENDENT_CODE`` property informs consumers of\\nthis target whether they must set their\\n``POSITION_INDEPENDENT_CODE`` property to ``ON``.  If this\\nproperty is set to ``ON``, then the ``POSITION_INDEPENDENT_CODE``\\n",
        "property"
    ],
    "INTERFACE_PRECOMPILE_HEADERS": [
        "List of interface header files to precompile into consuming targets.\\nTargets may populate this property to publish the header files\\nfor consuming targets to precompile.  The ``target_precompile_headers()``\\ncommand populates this property with values given to the ``PUBLIC`` and\\n``INTERFACE`` keywords.  Projects may also get and set the property directly.\\n",
        "property"
    ],
    "INTERFACE_SOURCES": [
        "List of interface sources to compile into consuming targets.\\nTargets may populate this property to publish the sources\\nfor consuming targets to compile.  The ``target_sources()`` command\\npopulates this property with values given to the ``PUBLIC`` and\\n``INTERFACE`` keywords.  Projects may also get and set the property directly.\\n",
        "property"
    ],
    "INTERFACE_SYSTEM_INCLUDE_DIRECTORIES": [
        "List of public system include directories for a library.\\nTargets may populate this property to publish the include directories\\nwhich contain system headers, and therefore should not result in\\ncompiler warnings.  The ``target_include_directories(SYSTEM)``\\ncommand signature populates this property with values given to the\\n",
        "property"
    ],
    "INTERPROCEDURAL_OPTIMIZATION": [
        "Enable interprocedural optimization for targets in a directory.\\nIf set to true, enables interprocedural optimizations if they are\\nknown to be supported by the compiler.\\nINTERPROCEDURAL_OPTIMIZATION\\n----------------------------\\n",
        "property"
    ],
    "INTERPROCEDURAL_OPTIMIZATION_DEBUG": [
        "Per-configuration interprocedural optimization for a directory.\\nThis is a per-configuration version of ``INTERPROCEDURAL_OPTIMIZATION``.\\nIf set, this property overrides the generic property for the named\\nconfiguration.\\nINTERPROCEDURAL_OPTIMIZATION_<CONFIG>\\n",
        "property"
    ],
    "INTERPROCEDURAL_OPTIMIZATION_RELEASE": [
        "Per-configuration interprocedural optimization for a directory.\\nThis is a per-configuration version of ``INTERPROCEDURAL_OPTIMIZATION``.\\nIf set, this property overrides the generic property for the named\\nconfiguration.\\nINTERPROCEDURAL_OPTIMIZATION_<CONFIG>\\n",
        "property"
    ],
    "IN_TRY_COMPILE": [
        "Read-only property that is true during a try-compile configuration.\\nTrue when building a project inside a ``try_compile()`` or\\n``try_run()`` command.\\n",
        "property"
    ],
    "IOS_INSTALL_COMBINED": [
        "Build a combined (device and simulator) target when installing.\\nWhen this property is set to set to false (which is the default) then it will\\neither be built with the device SDK or the simulator SDK depending on the SDK\\nset. But if this property is set to true then the target will at install time\\nalso be built for the corresponding SDK and combined into one library.\\n",
        "property"
    ],
    "JOB_POOLS": [
        "Ninja only: List of available pools.\\nA pool is a named integer property and defines the maximum number\\nof concurrent jobs which can be started by a rule assigned to the pool.\\nThe ``JOB_POOLS`` property is a semicolon-separated list of\\npairs using the syntax NAME=integer (without a space after the equality sign).\\n",
        "property"
    ],
    "JOB_POOL_COMPILE": [
        "Ninja only: Pool used for compiling.\\nThe number of parallel compile processes could be limited by defining\\npools with the global ``JOB_POOLS``\\nproperty and then specifying here the pool name.\\nFor instance:\\n",
        "property"
    ],
    "JOB_POOL_LINK": [
        "Ninja only: Pool used for linking.\\nThe number of parallel link processes could be limited by defining\\npools with the global ``JOB_POOLS``\\nproperty and then specifying here the pool name.\\nFor instance:\\n",
        "property"
    ],
    "KEEP_EXTENSION": [
        "Make the output file have the same extension as the source file.\\nIf this property is set then the file extension of the output file\\nwill be the same as that of the source file.  Normally the output file\\nextension is computed based on the language of the source file, for\\nexample ``.cxx`` will go to a ``.o`` extension.\\n",
        "property"
    ],
    "LABELS": [
        "Specify a list of text labels associated with a directory and all of its\\nsubdirectories. This is equivalent to setting the ``LABELS`` target\\nproperty and the ``LABELS`` test property on all targets and tests in\\nthe current directory and subdirectories. Note: Launchers must enabled to\\npropagate labels to targets.\\n",
        "property"
    ],
    "LANGUAGE": [
        "What programming language is the file.\\nA property that can be set to indicate what programming language the\\nsource file is.  If it is not set the language is determined based on\\nthe file extension.  Typical values are ``CXX`` (i.e.  C++), ``C``,\\n``CSharp``, ``CUDA``, ``Fortran``, and ``ASM``.  Setting this\\n",
        "property"
    ],
    "LIBRARY_OUTPUT_DIRECTORY": [
        "Output directory in which to build :ref:`LIBRARY <Library Output Artifacts>` target files.\\nThis property specifies the directory into which library target files\\nshould be built.  The property value may use\\n``generator expressions``.\\nMulti-configuration generators (VS, Xcode) append a per-configuration\\n",
        "property"
    ],
    "LIBRARY_OUTPUT_DIRECTORY_DEBUG": [
        "Per-configuration output directory for\\n:ref:`LIBRARY <Library Output Artifacts>` target files.\\nThis is a per-configuration version of the\\n``LIBRARY_OUTPUT_DIRECTORY`` target property, but\\nmulti-configuration generators (:ref:`Visual Studio Generators`,\\n",
        "property"
    ],
    "LIBRARY_OUTPUT_DIRECTORY_RELEASE": [
        "Per-configuration output directory for\\n:ref:`LIBRARY <Library Output Artifacts>` target files.\\nThis is a per-configuration version of the\\n``LIBRARY_OUTPUT_DIRECTORY`` target property, but\\nmulti-configuration generators (:ref:`Visual Studio Generators`,\\n",
        "property"
    ],
    "LIBRARY_OUTPUT_NAME": [
        "Output name for :ref:`LIBRARY <Library Output Artifacts>` target files.\\nThis property specifies the base name for library target files.  It\\noverrides ``OUTPUT_NAME`` and ``OUTPUT_NAME_<CONFIG>``\\nproperties.\\nSee also the ``LIBRARY_OUTPUT_NAME_<CONFIG>`` target property.\\n",
        "property"
    ],
    "LIBRARY_OUTPUT_NAME_DEBUG": [
        "Per-configuration output name for\\n:ref:`LIBRARY <Library Output Artifacts>` target files.\\nThis is the configuration-specific version of the\\n``LIBRARY_OUTPUT_NAME`` target property.\\n",
        "property"
    ],
    "LIBRARY_OUTPUT_NAME_RELEASE": [
        "Per-configuration output name for\\n:ref:`LIBRARY <Library Output Artifacts>` target files.\\nThis is the configuration-specific version of the\\n``LIBRARY_OUTPUT_NAME`` target property.\\n",
        "property"
    ],
    "LINKER_LANGUAGE": [
        "Specifies language whose compiler will invoke the linker.\\nFor executables, shared libraries, and modules, this sets the language\\nwhose compiler is used to link the target (such as \\\"C\\\" or \\\"CXX\\\").  A\\ntypical value for an executable is the language of the source file\\nproviding the program entry point (main).  If not set, the language\\n",
        "property"
    ],
    "LINK_DEPENDS": [
        "Additional files on which a target binary depends for linking.\\nSpecifies a semicolon-separated list of full-paths to files on which\\nthe link rule for this target depends.  The target binary will be\\nlinked if any of the named files is newer than it.\\nThis property is supported only by ``Ninja`` and\\n",
        "property"
    ],
    "LINK_DEPENDS_NO_SHARED": [
        "Do not depend on linked shared library files.\\nSet this property to true to tell CMake generators not to add\\nfile-level dependencies on the shared library files linked by this\\ntarget.  Modification to the shared libraries will not be sufficient\\nto re-link this target.  Logical target-level dependencies will not be\\n",
        "property"
    ],
    "LINK_DIRECTORIES": [
        "List of linker search directories.\\nThis property holds a :ref:`semicolon-separated list <CMake Language Lists>` of directories\\nand is typically populated using the ``link_directories()`` command.\\nIt gets its initial value from its parent directory, if it has one.\\nThe directory property is used to initialize the ``LINK_DIRECTORIES``\\n",
        "property"
    ],
    "LINK_FLAGS": [
        "Additional flags to use when linking this target if it is a shared library,\\nmodule library, or an executable. Static libraries need to use\\n``STATIC_LIBRARY_OPTIONS`` or ``STATIC_LIBRARY_FLAGS``\\nproperties.\\nThe ``LINK_FLAGS`` property, managed as a string, can be used to add extra\\n",
        "property"
    ],
    "LINK_FLAGS_DEBUG": [
        "Per-configuration linker flags for a ``SHARED`` library, ``MODULE`` or\\n``EXECUTABLE`` target.\\nThis is the configuration-specific version of ``LINK_FLAGS``.\\n.. note::\\n  This property has been superseded by ``LINK_OPTIONS`` property.\\n",
        "property"
    ],
    "LINK_FLAGS_RELEASE": [
        "Per-configuration linker flags for a ``SHARED`` library, ``MODULE`` or\\n``EXECUTABLE`` target.\\nThis is the configuration-specific version of ``LINK_FLAGS``.\\n.. note::\\n  This property has been superseded by ``LINK_OPTIONS`` property.\\n",
        "property"
    ],
    "LINK_INTERFACE_LIBRARIES": [
        "List public interface libraries for a shared library or executable.\\nBy default linking to a shared library target transitively links to\\ntargets with which the library itself was linked.  For an executable\\nwith exports (see the ``ENABLE_EXPORTS`` target property) no\\ndefault transitive link dependencies are used.  This property replaces the default\\n",
        "property"
    ],
    "LINK_INTERFACE_LIBRARIES_DEBUG": [
        "Per-configuration list of public interface libraries for a target.\\nThis is the configuration-specific version of\\n``LINK_INTERFACE_LIBRARIES``.  If set, this property completely\\noverrides the generic property for the named configuration.\\nThis property is overridden by the ``INTERFACE_LINK_LIBRARIES``\\n",
        "property"
    ],
    "LINK_INTERFACE_LIBRARIES_RELEASE": [
        "Per-configuration list of public interface libraries for a target.\\nThis is the configuration-specific version of\\n``LINK_INTERFACE_LIBRARIES``.  If set, this property completely\\noverrides the generic property for the named configuration.\\nThis property is overridden by the ``INTERFACE_LINK_LIBRARIES``\\n",
        "property"
    ],
    "LINK_INTERFACE_MULTIPLICITY": [
        "Repetition count for ``STATIC`` libraries with cyclic dependencies.\\nWhen linking to a ``STATIC`` library target with cyclic dependencies the\\nlinker may need to scan more than once through the archives in the\\nstrongly connected component of the dependency graph.  CMake by\\ndefault constructs the link line so that the linker will scan through\\n",
        "property"
    ],
    "LINK_INTERFACE_MULTIPLICITY_DEBUG": [
        "Per-configuration repetition count for cycles of ``STATIC`` libraries.\\nThis is the configuration-specific version of\\n``LINK_INTERFACE_MULTIPLICITY``.  If set, this property completely\\noverrides the generic property for the named configuration.\\n",
        "property"
    ],
    "LINK_INTERFACE_MULTIPLICITY_RELEASE": [
        "Per-configuration repetition count for cycles of ``STATIC`` libraries.\\nThis is the configuration-specific version of\\n``LINK_INTERFACE_MULTIPLICITY``.  If set, this property completely\\noverrides the generic property for the named configuration.\\n",
        "property"
    ],
    "LINK_LIBRARIES": [
        "List of direct link dependencies.\\nThis property specifies the list of libraries or targets which will be\\nused for linking.  In addition to accepting values from the\\n``target_link_libraries()`` command, values may be set directly on\\nany target using the ``set_property()`` command.\\n",
        "property"
    ],
    "LINK_OPTIONS": [
        "List of options to use for the link step of shared library, module\\nand executable targets.\\nThis property holds a :ref:`semicolon-separated list <CMake Language Lists>` of options\\ngiven so far to the ``add_link_options()`` command.\\nThis property is used to initialize the ``LINK_OPTIONS`` target\\n",
        "property"
    ],
    "LINK_SEARCH_END_STATIC": [
        "End a link line such that static system libraries are used.\\nSome linkers support switches such as ``-Bstatic`` and ``-Bdynamic`` to\\ndetermine whether to use static or shared libraries for ``-lXXX`` options.\\nCMake uses these options to set the link type for libraries whose full\\npaths are not known or (in some cases) are in implicit link\\n",
        "property"
    ],
    "LINK_SEARCH_START_STATIC": [
        "Assume the linker looks for static libraries by default.\\nSome linkers support switches such as ``-Bstatic`` and ``-Bdynamic`` to\\ndetermine whether to use static or shared libraries for ``-lXXX`` options.\\nCMake uses these options to set the link type for libraries whose full\\npaths are not known or (in some cases) are in implicit link\\n",
        "property"
    ],
    "LINK_WHAT_YOU_USE": [
        "This is a boolean option that when set to ``TRUE`` will automatically run\\n``ldd -r -u`` on the target after it is linked. In addition, the linker flag\\n``-Wl,--no-as-needed`` will be passed to the target with the link command so\\nthat all libraries specified on the command line will be linked into the\\ntarget. This will result in the link producing a list of libraries that\\n",
        "property"
    ],
    "LISTFILE_STACK": [
        "The current stack of listfiles being processed.\\nThis property is mainly useful when trying to debug errors in your\\nCMake scripts.  It returns a list of what list files are currently\\nbeing processed, in order.  So if one listfile does an\\n``include()`` command then that is effectively pushing the\\n",
        "property"
    ],
    "LOCATION": [
        "The full path to a source file.\\nA read only property on a SOURCE FILE that contains the full path to\\nthe source file.\\nLOCATION\\n--------\\n",
        "property"
    ],
    "LOCATION_DEBUG": [
        "Read-only property providing a target location on disk.\\nA read-only property that indicates where a target's main file is\\nlocated on disk for the configuration ``<CONFIG>``.  The property is\\ndefined only for library and executable targets.  An imported target\\nmay provide a set of configurations different from that of the\\n",
        "property"
    ],
    "LOCATION_RELEASE": [
        "Read-only property providing a target location on disk.\\nA read-only property that indicates where a target's main file is\\nlocated on disk for the configuration ``<CONFIG>``.  The property is\\ndefined only for library and executable targets.  An imported target\\nmay provide a set of configurations different from that of the\\n",
        "property"
    ],
    "MACOSX_BUNDLE": [
        "Build an executable as an Application Bundle on macOS or iOS.\\nWhen this property is set to ``TRUE`` the executable when built on macOS\\nor iOS will be created as an application bundle.  This makes it\\na GUI executable that can be launched from the Finder.  See the\\n``MACOSX_BUNDLE_INFO_PLIST`` target property for information about\\n",
        "property"
    ],
    "MACOSX_BUNDLE_INFO_PLIST": [
        "Specify a custom ``Info.plist`` template for a macOS and iOS Application Bundle.\\nAn executable target with ``MACOSX_BUNDLE`` enabled will be built as an\\napplication bundle on macOS.  By default its ``Info.plist`` file is created\\nby configuring a template called ``MacOSXBundleInfo.plist.in`` located in the\\n``CMAKE_MODULE_PATH``.  This property specifies an alternative template\\n",
        "property"
    ],
    "MACOSX_FRAMEWORK_INFO_PLIST": [
        "Specify a custom ``Info.plist`` template for a macOS and iOS Framework.\\nA library target with ``FRAMEWORK`` enabled will be built as a\\nframework on macOS.  By default its ``Info.plist`` file is created by\\nconfiguring a template called ``MacOSXFrameworkInfo.plist.in`` located in the\\n``CMAKE_MODULE_PATH``.  This property specifies an alternative template\\n",
        "property"
    ],
    "MACOSX_PACKAGE_LOCATION": [
        "Place a source file inside a Application Bundle\\n(``MACOSX_BUNDLE``), Core Foundation Bundle (``BUNDLE``),\\nor Framework Bundle (``FRAMEWORK``).  It is applicable for macOS\\nand iOS.\\nExecutable targets with the ``MACOSX_BUNDLE`` property set are\\n",
        "property"
    ],
    "MACOSX_RPATH": [
        "Whether this target on macOS or iOS is located at runtime using rpaths.\\nWhen this property is set to ``TRUE``, the directory portion of\\nthe ``install_name`` field of this shared library will be ``@rpath``\\nunless overridden by ``INSTALL_NAME_DIR``.  This indicates\\nthe shared library is to be found at runtime using runtime\\n",
        "property"
    ],
    "MACROS": [
        "List of macro commands available in the current directory.\\nThis read-only property specifies the list of CMake macros currently\\ndefined.  It is intended for debugging purposes.  See the ``macro()``\\ncommand.\\n",
        "property"
    ],
    "MANUALLY_ADDED_DEPENDENCIES": [
        "Get manually added dependencies to other top-level targets.\\nThis read-only property can be used to query all dependencies that\\nwere added for this target with the ``add_dependencies()``\\ncommand.\\n",
        "property"
    ],
    "MAP_IMPORTED_CONFIG_DEBUG": [
        "Map from project configuration to\\n:ref:`imported target <IMPORTED targets>`'s configuration.\\nSet this to the list of configurations of an imported target that may\\nbe used for the current project's ``<CONFIG>`` configuration.  Targets\\nimported from another project may not provide the same set of\\n",
        "property"
    ],
    "MAP_IMPORTED_CONFIG_RELEASE": [
        "Map from project configuration to\\n:ref:`imported target <IMPORTED targets>`'s configuration.\\nSet this to the list of configurations of an imported target that may\\nbe used for the current project's ``<CONFIG>`` configuration.  Targets\\nimported from another project may not provide the same set of\\n",
        "property"
    ],
    "MEASUREMENT": [
        "Specify a ``CDASH`` measurement and value to be reported for a test.\\nIf set to a name then that name will be reported to ``CDASH`` as a named\\nmeasurement with a value of ``1``.  You may also specify a value by\\nsetting ``MEASUREMENT`` to ``measurement=value``.\\n",
        "property"
    ],
    "MODIFIED": [
        "Internal management property.  Do not set or get.\\nThis is an internal cache entry property managed by CMake to track\\ninteractive user modification of entries.  Ignore it.\\n",
        "property"
    ],
    "MSVC_RUNTIME_LIBRARY": [
        "Select the MSVC runtime library for use by compilers targeting the MSVC ABI.\\nThe allowed values are:\\n``MultiThreaded``\\n  Compile with ``-MT`` or equivalent flag(s) to use a multi-threaded\\n  statically-linked runtime library.\\n",
        "property"
    ],
    "NAME": [
        "Logical name for the target.\\nRead-only logical name for the target as used by CMake.\\n",
        "property"
    ],
    "NO_SONAME": [
        "Whether to set ``soname`` when linking a shared library.\\nEnable this boolean property if a generated ``SHARED`` library\\nshould not have ``soname`` set.  Default is to set ``soname`` on all\\nshared libraries as long as the platform supports it.\\nGenerally, use this property only for leaf private libraries or\\n",
        "property"
    ],
    "NO_SYSTEM_FROM_IMPORTED": [
        "Do not treat include directories from the interfaces of consumed\\n:ref:`imported targets` as ``SYSTEM``.\\nThe contents of the ``INTERFACE_INCLUDE_DIRECTORIES`` target property\\nof imported targets are treated as ``SYSTEM`` includes by default.  If this\\nproperty is enabled on a target, compilation of sources in that target will\\n",
        "property"
    ],
    "OBJCXX_EXTENSIONS": [
        "Boolean specifying whether compiler specific extensions are requested.\\nThis property specifies whether compiler specific extensions should be\\nused.  For some compilers, this results in adding a flag such\\nas ``-std=gnu++11`` instead of ``-std=c++11`` to the compile line.  This\\nproperty is ``ON`` by default. The basic ObjC++ standard level is\\n",
        "property"
    ],
    "OBJCXX_STANDARD": [
        "The ObjC++ standard whose features are requested to build this target.\\nThis property specifies the ObjC++ standard whose features are requested\\nto build this target.  For some compilers, this results in adding a\\nflag such as ``-std=gnu++11`` to the compile line.\\nSupported values are ``98``, ``11``, ``14``, ``17``, and ``20``.\\n",
        "property"
    ],
    "OBJCXX_STANDARD_REQUIRED": [
        "Boolean describing whether the value of ``OBJCXX_STANDARD`` is a requirement.\\nIf this property is set to ``ON``, then the value of the\\n``OBJCXX_STANDARD`` target property is treated as a requirement.  If this\\nproperty is ``OFF`` or unset, the ``OBJCXX_STANDARD`` target property is\\ntreated as optional and may \\\"decay\\\" to a previous standard if the requested is\\n",
        "property"
    ],
    "OBJC_EXTENSIONS": [
        "Boolean specifying whether compiler specific extensions are requested.\\nThis property specifies whether compiler specific extensions should be\\nused.  For some compilers, this results in adding a flag such\\nas ``-std=gnu11`` instead of ``-std=c11`` to the compile line.  This\\nproperty is ``ON`` by default. The basic OBJC standard level is\\n",
        "property"
    ],
    "OBJC_STANDARD": [
        "The OBJC standard whose features are requested to build this target.\\nThis property specifies the OBJC standard whose features are requested\\nto build this target.  For some compilers, this results in adding a\\nflag such as ``-std=gnu11`` to the compile line.\\nSupported values are ``90``, ``99`` and ``11``.\\n",
        "property"
    ],
    "OBJC_STANDARD_REQUIRED": [
        "Boolean describing whether the value of ``OBJC_STANDARD`` is a requirement.\\nIf this property is set to ``ON``, then the value of the\\n``OBJC_STANDARD`` target property is treated as a requirement.  If this\\nproperty is ``OFF`` or unset, the ``OBJC_STANDARD`` target property is\\ntreated as optional and may \\\"decay\\\" to a previous standard if the requested is\\n",
        "property"
    ],
    "OBJECT_DEPENDS": [
        "Additional files on which a compiled object file depends.\\nSpecifies a :ref:`semicolon-separated list <CMake Language Lists>` of full-paths to\\nfiles on which any object files compiled from this source file depend.\\nOn :ref:`Makefile Generators` and the ``Ninja`` generator an\\nobject file will be recompiled if any of the named files is newer than it.\\n",
        "property"
    ],
    "OBJECT_OUTPUTS": [
        "Additional outputs for a ``Ninja`` or :ref:`Makefile Generators` rule.\\nAdditional outputs created by compilation of this source file.  If any\\nof these outputs is missing the object will be recompiled.  This is\\nsupported only on the ``Ninja`` and :ref:`Makefile Generators`\\nand will be ignored on other generators.\\n",
        "property"
    ],
    "OSX_ARCHITECTURES": [
        "Target specific architectures for macOS.\\nThe ``OSX_ARCHITECTURES`` property sets the target binary architecture for\\ntargets on macOS (``-arch``).  This property is initialized by the value of the\\nvariable ``CMAKE_OSX_ARCHITECTURES`` if it is set when a target is\\ncreated.  Use ``OSX_ARCHITECTURES_<CONFIG>`` to set the binary\\n",
        "property"
    ],
    "OSX_ARCHITECTURES_DEBUG": [
        "Per-configuration macOS and iOS binary architectures for a target.\\nThis property is the configuration-specific version of\\n``OSX_ARCHITECTURES``.\\n",
        "property"
    ],
    "OSX_ARCHITECTURES_RELEASE": [
        "Per-configuration macOS and iOS binary architectures for a target.\\nThis property is the configuration-specific version of\\n``OSX_ARCHITECTURES``.\\n",
        "property"
    ],
    "OUTPUT_NAME": [
        "Output name for target files.\\nThis sets the base name for output files created for an executable or\\nlibrary target.  If not set, the logical target name is used by\\ndefault during generation. The value is not set by default during\\nconfiguration.\\n",
        "property"
    ],
    "OUTPUT_NAME_DEBUG": [
        "Per-configuration target file base name.\\nThis is the configuration-specific version of the ``OUTPUT_NAME``\\ntarget property.\\n",
        "property"
    ],
    "OUTPUT_NAME_RELEASE": [
        "Per-configuration target file base name.\\nThis is the configuration-specific version of the ``OUTPUT_NAME``\\ntarget property.\\n",
        "property"
    ],
    "PACKAGES_FOUND": [
        "List of packages which were found during the CMake run.\\nList of packages which were found during the CMake run.  Whether a\\npackage has been found is determined using the <NAME>_FOUND variables.\\n",
        "property"
    ],
    "PACKAGES_NOT_FOUND": [
        "List of packages which were not found during the CMake run.\\nList of packages which were not found during the CMake run.  Whether a\\npackage has been found is determined using the <NAME>_FOUND variables.\\n",
        "property"
    ],
    "PARENT_DIRECTORY": [
        "Source directory that added current subdirectory.\\nThis read-only property specifies the source directory that added the\\ncurrent source directory as a subdirectory of the build.  In the\\ntop-level directory the value is the empty-string.\\n",
        "property"
    ],
    "PASS_REGULAR_EXPRESSION": [
        "The output must match this regular expression for the test to pass.\\nIf set, the test output will be checked against the specified regular\\nexpressions and at least one of the regular expressions has to match,\\notherwise the test will fail.  Example:\\n set_tests_properties(mytest PROPERTIES\\n",
        "property"
    ],
    "PDB_NAME": [
        "Output name for the MS debug symbol ``.pdb`` file generated by the\\nlinker for an executable or shared library target.\\nThis property specifies the base name for the debug symbols file.\\nIf not set, the ``OUTPUT_NAME`` target property value or\\nlogical target name is used by default.\\n",
        "property"
    ],
    "PDB_NAME_DEBUG": [
        "Per-configuration output name for the MS debug symbol ``.pdb`` file\\ngenerated by the linker for an executable or shared library target.\\nThis is the configuration-specific version of ``PDB_NAME``.\\n.. note::\\n This property does not apply to STATIC library targets because no linker\\n",
        "property"
    ],
    "PDB_NAME_RELEASE": [
        "Per-configuration output name for the MS debug symbol ``.pdb`` file\\ngenerated by the linker for an executable or shared library target.\\nThis is the configuration-specific version of ``PDB_NAME``.\\n.. note::\\n This property does not apply to STATIC library targets because no linker\\n",
        "property"
    ],
    "PDB_OUTPUT_DIRECTORY": [
        "Output directory for the MS debug symbols ``.pdb`` file\\ngenerated by the linker for an executable or shared library target.\\nThis property specifies the directory into which the MS debug symbols\\nwill be placed by the linker. The property value may use\\n``generator expressions``.\\n",
        "property"
    ],
    "PDB_OUTPUT_DIRECTORY_DEBUG": [
        "Per-configuration output directory for the MS debug symbol ``.pdb`` file\\ngenerated by the linker for an executable or shared library target.\\nThis is a per-configuration version of ``PDB_OUTPUT_DIRECTORY``,\\nbut multi-configuration generators (:ref:`Visual Studio Generators`,\\n``Xcode``) do NOT append a\\n",
        "property"
    ],
    "PDB_OUTPUT_DIRECTORY_RELEASE": [
        "Per-configuration output directory for the MS debug symbol ``.pdb`` file\\ngenerated by the linker for an executable or shared library target.\\nThis is a per-configuration version of ``PDB_OUTPUT_DIRECTORY``,\\nbut multi-configuration generators (:ref:`Visual Studio Generators`,\\n``Xcode``) do NOT append a\\n",
        "property"
    ],
    "POSITION_INDEPENDENT_CODE": [
        "Whether to create a position-independent target\\nThe ``POSITION_INDEPENDENT_CODE`` property determines whether position\\nindependent executables or shared libraries will be created.  This\\nproperty is ``True`` by default for ``SHARED`` and ``MODULE`` library\\ntargets and ``False`` otherwise.  This property is initialized by the value\\n",
        "property"
    ],
    "POST_INSTALL_SCRIPT": [
        "Deprecated install support.\\nThe ``PRE_INSTALL_SCRIPT`` and ``POST_INSTALL_SCRIPT`` properties are\\nthe old way to specify CMake scripts to run before and after installing a\\ntarget.  They are used only when the old ``INSTALL_TARGETS`` command is\\nused to install the target.  Use the ``install()`` command instead.\\n",
        "property"
    ],
    "PRECOMPILE_HEADERS": [
        "List of header files to precompile.\\nThis property holds a :ref:`semicolon-separated list <CMake Language Lists>`\\nof header files to precompile specified so far for its target.\\nUse the ``target_precompile_headers()`` command to append more header\\nfiles.\\n",
        "property"
    ],
    "PRECOMPILE_HEADERS_REUSE_FROM": [
        "Target from which to reuse the precompiled headers build artifact.\\nSee the second signature of ``target_precompile_headers()`` command\\nfor more detailed information.\\n",
        "property"
    ],
    "PREDEFINED_TARGETS_FOLDER": [
        "Name of FOLDER for targets that are added automatically by CMake.\\nIf not set, CMake uses \\\"CMakePredefinedTargets\\\" as a default value for\\nthis property.  Targets such as INSTALL, PACKAGE and RUN_TESTS will be\\norganized into this FOLDER.  See also the documentation for the\\n``FOLDER`` target property.\\n",
        "property"
    ],
    "PREFIX": [
        "What comes before the library name.\\nA target property that can be set to override the prefix (such as\\n``lib``) on a library name.\\n",
        "property"
    ],
    "PRE_INSTALL_SCRIPT": [
        "Deprecated install support.\\nThe ``PRE_INSTALL_SCRIPT`` and ``POST_INSTALL_SCRIPT`` properties are\\nthe old way to specify CMake scripts to run before and after installing a\\ntarget.  They are used only when the old ``INSTALL_TARGETS`` command is\\nused to install the target.  Use the ``install()`` command instead.\\n",
        "property"
    ],
    "PRIVATE_HEADER": [
        "Specify private header files in a ``FRAMEWORK`` shared library target.\\nShared library targets marked with the ``FRAMEWORK`` property generate\\nframeworks on macOS, iOS and normal shared libraries on other platforms.\\nThis property may be set to a list of header files to be placed in the\\nPrivateHeaders directory inside the framework folder.  On non-Apple\\n",
        "property"
    ],
    "PROCESSORS": [
        "Set to specify how many process slots this test requires.\\nIf not set, the default is ``1`` processor.\\nDenotes the number of processors that this test will require.  This is\\ntypically used for MPI tests, and should be used in conjunction with\\nthe ``ctest_test()`` ``PARALLEL_LEVEL`` option.\\n",
        "property"
    ],
    "PROCESSOR_AFFINITY": [
        "Set to a true value to ask CTest to launch the test process with CPU affinity\\nfor a fixed set of processors.  If enabled and supported for the current\\nplatform, CTest will choose a set of processors to place in the CPU affinity\\nmask when launching the test process.  The number of processors in the set is\\ndetermined by the ``PROCESSORS`` test property or the number of\\n",
        "property"
    ],
    "PROJECT_LABEL": [
        "Change the name of a target in an IDE.\\nCan be used to change the name of the target in an IDE like Visual\\nStudio.\\n",
        "property"
    ],
    "PUBLIC_HEADER": [
        "Specify public header files in a ``FRAMEWORK`` shared library target.\\nShared library targets marked with the ``FRAMEWORK`` property generate\\nframeworks on macOS, iOS and normal shared libraries on other platforms.\\nThis property may be set to a list of header files to be placed in the\\n``Headers`` directory inside the framework folder.  On non-Apple platforms\\n",
        "property"
    ],
    "REPORT_UNDEFINED_PROPERTIES": [
        "If set, report any undefined properties to this file.\\nIf this property is set to a filename then when CMake runs it will\\nreport any properties or variables that were accessed but not defined\\ninto the filename specified in this property.\\n",
        "property"
    ],
    "REQUIRED_FILES": [
        "List of files required to run the test.\\nIf set to a list of files, the test will not be run unless all of the\\nfiles exist.\\n",
        "property"
    ],
    "RESOURCE": [
        "Specify resource files in a ``FRAMEWORK`` or ``BUNDLE``.\\nTarget marked with the ``FRAMEWORK`` or ``BUNDLE`` property\\ngenerate framework or application bundle (both macOS and iOS is supported)\\nor normal shared libraries on other platforms.\\nThis property may be set to a list of files to be placed in the corresponding\\n",
        "property"
    ],
    "RESOURCE_GROUPS": [
        "Specify resources required by a test, grouped in a way that is meaningful to\\nthe test.  See :ref:`resource allocation <ctest-resource-allocation>`\\nfor more information on how this property integrates into the CTest resource\\nallocation feature.\\nThe ``RESOURCE_GROUPS`` property is a :ref:`semicolon-separated list <CMake\\n",
        "property"
    ],
    "RESOURCE_LOCK": [
        "Specify a list of resources that are locked by this test.\\nIf multiple tests specify the same resource lock, they are guaranteed\\nnot to run concurrently.\\nSee also ``FIXTURES_REQUIRED`` if the resource requires any setup or\\ncleanup steps.\\n",
        "property"
    ],
    "RULE_LAUNCH_COMPILE": [
        "Specify a launcher for compile rules.\\nSee the global property of the same name for details.  This overrides\\nthe global property for a directory.\\nRULE_LAUNCH_COMPILE\\n-------------------\\n",
        "property"
    ],
    "RULE_LAUNCH_CUSTOM": [
        "Specify a launcher for custom rules.\\nSee the global property of the same name for details.  This overrides\\nthe global property for a directory.\\nRULE_LAUNCH_CUSTOM\\n------------------\\n",
        "property"
    ],
    "RULE_LAUNCH_LINK": [
        "Specify a launcher for link rules.\\nSee the global property of the same name for details.  This overrides\\nthe global property for a directory.\\nRULE_LAUNCH_LINK\\n----------------\\n",
        "property"
    ],
    "RULE_MESSAGES": [
        "Specify whether to report a message for each make rule.\\nThis property specifies whether Makefile generators should add a\\nprogress message describing what each build rule does.  If the\\nproperty is not set the default is ON.  Set the property to OFF to\\ndisable granular messages and report only as each target completes.\\n",
        "property"
    ],
    "RUNTIME_OUTPUT_DIRECTORY": [
        "Output directory in which to build :ref:`RUNTIME <Runtime Output Artifacts>` target files.\\nThis property specifies the directory into which runtime target files\\nshould be built.  The property value may use\\n``generator expressions``.\\nMulti-configuration generators (VS, Xcode) append a per-configuration\\n",
        "property"
    ],
    "RUNTIME_OUTPUT_DIRECTORY_DEBUG": [
        "Per-configuration output directory for\\n:ref:`RUNTIME <Runtime Output Artifacts>` target files.\\nThis is a per-configuration version of the\\n``RUNTIME_OUTPUT_DIRECTORY`` target property, but\\nmulti-configuration generators (:ref:`Visual Studio Generators`,\\n",
        "property"
    ],
    "RUNTIME_OUTPUT_DIRECTORY_RELEASE": [
        "Per-configuration output directory for\\n:ref:`RUNTIME <Runtime Output Artifacts>` target files.\\nThis is a per-configuration version of the\\n``RUNTIME_OUTPUT_DIRECTORY`` target property, but\\nmulti-configuration generators (:ref:`Visual Studio Generators`,\\n",
        "property"
    ],
    "RUNTIME_OUTPUT_NAME": [
        "Output name for :ref:`RUNTIME <Runtime Output Artifacts>` target files.\\nThis property specifies the base name for runtime target files.  It\\noverrides ``OUTPUT_NAME`` and ``OUTPUT_NAME_<CONFIG>``\\nproperties.\\nSee also the ``RUNTIME_OUTPUT_NAME_<CONFIG>`` target property.\\n",
        "property"
    ],
    "RUNTIME_OUTPUT_NAME_DEBUG": [
        "Per-configuration output name for\\n:ref:`RUNTIME <Runtime Output Artifacts>` target files.\\nThis is the configuration-specific version of the\\n``RUNTIME_OUTPUT_NAME`` target property.\\n",
        "property"
    ],
    "RUNTIME_OUTPUT_NAME_RELEASE": [
        "Per-configuration output name for\\n:ref:`RUNTIME <Runtime Output Artifacts>` target files.\\nThis is the configuration-specific version of the\\n``RUNTIME_OUTPUT_NAME`` target property.\\n",
        "property"
    ],
    "RUN_SERIAL": [
        "Do not run this test in parallel with any other test.\\nUse this option in conjunction with the ctest_test ``PARALLEL_LEVEL``\\noption to specify that this test should not be run in parallel with\\nany other tests.\\n",
        "property"
    ],
    "SKIP_AUTOGEN": [
        "Exclude the source file from ``AUTOMOC``, ``AUTOUIC`` and\\n``AUTORCC`` processing (for Qt projects).\\nFor finer exclusion control see ``SKIP_AUTOMOC``,\\n``SKIP_AUTOUIC`` and ``SKIP_AUTORCC``.\\nEXAMPLE\\n",
        "property"
    ],
    "SKIP_AUTOMOC": [
        "Exclude the source file from ``AUTOMOC`` processing (for Qt projects).\\nFor broader exclusion control see ``SKIP_AUTOGEN``.\\nEXAMPLE\\n^^^^^^^\\n # ...\\n",
        "property"
    ],
    "SKIP_AUTORCC": [
        "Exclude the source file from ``AUTORCC`` processing (for Qt projects).\\nFor broader exclusion control see ``SKIP_AUTOGEN``.\\nEXAMPLE\\n^^^^^^^\\n # ...\\n",
        "property"
    ],
    "SKIP_AUTOUIC": [
        "Exclude the source file from ``AUTOUIC`` processing (for Qt projects).\\n``SKIP_AUTOUIC`` can be set on C++ header and source files and on\\n``.ui`` files.\\nFor broader exclusion control see ``SKIP_AUTOGEN``.\\nEXAMPLE\\n",
        "property"
    ],
    "SKIP_BUILD_RPATH": [
        "Should rpaths be used for the build tree.\\n``SKIP_BUILD_RPATH`` is a boolean specifying whether to skip automatic\\ngeneration of an rpath allowing the target to run from the build tree.\\nThis property is initialized by the value of the variable\\n``CMAKE_SKIP_BUILD_RPATH`` if it is set when a target is created.\\n",
        "property"
    ],
    "SKIP_PRECOMPILE_HEADERS": [
        "Is this source file skipped by ``PRECOMPILE_HEADERS`` feature.\\nThis property helps with build problems that one would run into\\nwhen using the ``PRECOMPILE_HEADERS`` feature.\\nOne example would be the usage of Objective-C (*.m) files, and\\nObjective-C++ (*.mm) files, which lead to compilation failure\\n",
        "property"
    ],
    "SKIP_REGULAR_EXPRESSION": [
        "If the output matches this regular expression the test will be marked as skipped.\\nIf set, if the output matches one of specified regular expressions,\\nthe test will be marked as skipped.  Example:\\n set_property(TEST mytest PROPERTY\\n   SKIP_REGULAR_EXPRESSION \\\"[^a-z]Skip\\\" \\\"SKIP\\\" \\\"Skipped\\\"\\n",
        "property"
    ],
    "SKIP_RETURN_CODE": [
        "Return code to mark a test as skipped.\\nSometimes only a test itself can determine if all requirements for the\\ntest are met. If such a situation should not be considered a hard failure\\na return code of the process can be specified that will mark the test as\\n``Not Run`` if it is encountered. Valid values are in the range of\\n",
        "property"
    ],
    "SKIP_UNITY_BUILD_INCLUSION": [
        "Setting this property to true ensures the source file will be skipped by\\nunity builds when its associated target has its ``UNITY_BUILD``\\nproperty set to true.  The source file will instead be compiled on its own\\nin the same way as it would with unity builds disabled.\\nThis property helps with \\\"ODR (One definition rule)\\\" problems where combining\\n",
        "property"
    ],
    "SOURCES": [
        "Source names specified for a target.\\nList of sources specified for a target.\\n",
        "property"
    ],
    "SOURCE_DIR": [
        "This read-only directory property reports absolute path to the source\\ndirectory on which it is read.\\nSOURCE_DIR\\n----------\\nThis read-only property reports the value of the\\n",
        "property"
    ],
    "SOVERSION": [
        "What version number is this target.\\nFor shared libraries ``VERSION`` and ``SOVERSION`` can be used to\\nspecify the build version and API version respectively.  When building or\\ninstalling appropriate symlinks are created if the platform supports\\nsymlinks and the linker supports so-names.  If only one of both is\\n",
        "property"
    ],
    "STATIC_LIBRARY_FLAGS": [
        "Archiver (or MSVC librarian) flags for a static library target.\\nTargets that are shared libraries, modules, or executables need to use\\nthe ``LINK_OPTIONS`` or ``LINK_FLAGS`` target properties.\\nThe ``STATIC_LIBRARY_FLAGS`` property, managed as a string, can be used to add\\nextra flags to the link step of a static library target.\\n",
        "property"
    ],
    "STATIC_LIBRARY_FLAGS_DEBUG": [
        "Per-configuration archiver (or MSVC librarian) flags for a static library\\ntarget.\\nThis is the configuration-specific version of ``STATIC_LIBRARY_FLAGS``.\\n.. note::\\n  This property has been superseded by ``STATIC_LIBRARY_OPTIONS``\\n",
        "property"
    ],
    "STATIC_LIBRARY_FLAGS_RELEASE": [
        "Per-configuration archiver (or MSVC librarian) flags for a static library\\ntarget.\\nThis is the configuration-specific version of ``STATIC_LIBRARY_FLAGS``.\\n.. note::\\n  This property has been superseded by ``STATIC_LIBRARY_OPTIONS``\\n",
        "property"
    ],
    "STATIC_LIBRARY_OPTIONS": [
        "Archiver (or MSVC librarian) flags for a static library target.\\nTargets that are shared libraries, modules, or executables need to use\\nthe ``LINK_OPTIONS`` target property.\\nThis property holds a :ref:`semicolon-separated list <CMake Language Lists>` of options\\nspecified so far for its target.  Use ``set_target_properties()`` or\\n",
        "property"
    ],
    "STRINGS": [
        "Enumerate possible ``STRING`` entry values for GUI selection.\\nFor cache entries with type ``STRING``, this enumerates a set of values.\\nCMake GUIs may use this to provide a selection widget instead of a\\ngeneric string entry field.  This is for convenience only.  CMake does\\nnot enforce that the value matches one of those listed.\\n",
        "property"
    ],
    "SUBDIRECTORIES": [
        "This read-only directory property contains a\\n:ref:`semicolon-separated list <CMake Language Lists>` of subdirectories processed so far by\\nthe ``add_subdirectory()`` or ``subdirs()`` commands.  Each entry is\\nthe absolute path to the source directory (containing the ``CMakeLists.txt``\\nfile).  This is suitable to pass to the ``get_property()`` command\\n",
        "property"
    ],
    "SUFFIX": [
        "What comes after the target name.\\nA target property that can be set to override the suffix (such as\\n``.so`` or ``.exe``) on the name of a library, module or executable.\\n",
        "property"
    ],
    "SYMBOLIC": [
        "Is this just a name for a rule.\\nIf ``SYMBOLIC`` (boolean) is set to ``True`` the build system will be informed\\nthat the source file is not actually created on disk but instead used\\nas a symbolic name for a build rule.\\n",
        "property"
    ],
    "Swift_DEPENDENCIES_FILE": [
        "This property sets the path for the Swift dependency file (swiftdeps) for the\\nsource.  If one is not specified, it will default to ``<OBJECT>.swiftdeps``.\\nSwift_DEPENDENCIES_FILE\\n-----------------------\\nThis property sets the path for the Swift dependency file (swiftdep) for the\\n",
        "property"
    ],
    "Swift_DIAGNOSTICS_FILE": [
        "This property controls where the Swift diagnostics are serialized.\\n",
        "property"
    ],
    "Swift_LANGUAGE_VERSION": [
        "This property sets the language version for the Swift sources in the target.  If\\none is not specified, it will default to ``<CMAKE_Swift_LANGUAGE_VERSION>`` if\\nspecified, otherwise it is the latest version supported by the compiler.\\n",
        "property"
    ],
    "Swift_MODULE_DIRECTORY": [
        "Specify output directory for Swift modules provided by the target.\\nIf the target contains Swift source files, this specifies the directory in which\\nthe modules will be placed.  When this property is not set, the modules will be\\nplaced in the build directory corresponding to the target's source directory.\\nIf the variable ``CMAKE_Swift_MODULE_DIRECTORY`` is set when a target is\\n",
        "property"
    ],
    "Swift_MODULE_NAME": [
        "This property specifies the name of the Swift module.  It is defaulted to the\\nname of the target.\\n",
        "property"
    ],
    "TARGET_ARCHIVES_MAY_BE_SHARED_LIBS": [
        "Set if shared libraries may be named like archives.\\nOn AIX shared libraries may be named \\\"lib<name>.a\\\".  This property is\\nset to true on such platforms.\\n",
        "property"
    ],
    "TARGET_MESSAGES": [
        "Specify whether to report the completion of each target.\\nThis property specifies whether :ref:`Makefile Generators` should\\nadd a progress message describing that each target has been completed.\\nIf the property is not set the default is ``ON``.  Set the property\\nto ``OFF`` to disable target completion messages.\\n",
        "property"
    ],
    "TARGET_SUPPORTS_SHARED_LIBS": [
        "Does the target platform support shared libraries.\\nTARGET_SUPPORTS_SHARED_LIBS is a boolean specifying whether the target\\nplatform supports shared libraries.  Basically all current general\\ngeneral purpose OS do so, the exception are usually embedded systems\\nwith no or special OSs.\\n",
        "property"
    ],
    "TESTS": [
        "List of tests.\\nThis read-only property holds a\\n:ref:`semicolon-separated list <CMake Language Lists>` of tests\\ndefined so far, in the current directory, by the ``add_test()`` command.\\n",
        "property"
    ],
    "TEST_INCLUDE_FILE": [
        "Deprecated.  Use ``TEST_INCLUDE_FILES`` instead.\\nA cmake file that will be included when ctest is run.\\nIf you specify ``TEST_INCLUDE_FILE``, that file will be included and\\nprocessed when ctest is run on the directory.\\n",
        "property"
    ],
    "TEST_INCLUDE_FILES": [
        "A list of cmake files that will be included when ctest is run.\\nIf you specify ``TEST_INCLUDE_FILES``, those files will be included and\\nprocessed when ctest is run on the directory.\\n",
        "property"
    ],
    "TIMEOUT": [
        "How many seconds to allow for this test.\\nThis property if set will limit a test to not take more than the\\nspecified number of seconds to run.  If it exceeds that the test\\nprocess will be killed and ctest will move to the next test.  This\\nsetting takes precedence over ``CTEST_TEST_TIMEOUT``.\\n",
        "property"
    ],
    "TIMEOUT_AFTER_MATCH": [
        "Change a test's timeout duration after a matching line is encountered\\nin its output.\\nUsage\\n^^^^^\\n add_test(mytest ...)\\n",
        "property"
    ],
    "TYPE": [
        "Widget type for entry in GUIs.\\nCache entry values are always strings, but CMake GUIs present widgets\\nto help users set values.  The GUIs use this property as a hint to\\ndetermine the widget type.  Valid ``TYPE`` values are:\\n::\\n",
        "property"
    ],
    "UNITY_BUILD": [
        "When this property is set to true, the target source files will be combined\\ninto batches for faster compilation.  This is done by creating a (set of)\\nunity sources which ``#include`` the original sources, then compiling these\\nunity sources instead of the originals.  This is known as a *Unity* or *Jumbo*\\nbuild.  The ``UNITY_BUILD_BATCH_SIZE`` property controls the upper\\n",
        "property"
    ],
    "UNITY_BUILD_BATCH_SIZE": [
        "Specifies the maximum number of source files that can be combined into any one\\nunity source file when unity builds are enabled by the ``UNITY_BUILD``\\ntarget property.  The original source files will be distributed across as many\\nunity source files as necessary to honor this limit.\\nThe initial value for this property is taken from the\\n",
        "property"
    ],
    "UNITY_BUILD_CODE_AFTER_INCLUDE": [
        "Code snippet which is included verbatim by the ``UNITY_BUILD``\\nfeature just after every ``#include`` statement in the generated unity\\nsource files.  For example:\\n set(after [[\\n #if defined(NOMINMAX)\\n",
        "property"
    ],
    "UNITY_BUILD_CODE_BEFORE_INCLUDE": [
        "Code snippet which is included verbatim by the ``UNITY_BUILD``\\nfeature just before every ``#include`` statement in the generated unity\\nsource files.  For example:\\n set(before [[\\n #if !defined(NOMINMAX)\\n",
        "property"
    ],
    "USE_FOLDERS": [
        "Use the ``FOLDER`` target property to organize targets into\\nfolders.\\nIf not set, CMake treats this property as ``OFF`` by default.  CMake\\ngenerators that are capable of organizing into a hierarchy of folders\\nuse the values of the ``FOLDER`` target property to name those\\n",
        "property"
    ],
    "VALUE": [
        "Value of a cache entry.\\nThis property maps to the actual value of a cache entry.  Setting this\\nproperty always sets the value without checking, so use with care.\\n",
        "property"
    ],
    "VARIABLES": [
        "List of variables defined in the current directory.\\nThis read-only property specifies the list of CMake variables\\ncurrently defined.  It is intended for debugging purposes.\\n",
        "property"
    ],
    "VERSION": [
        "What version number is this target.\\nFor shared libraries ``VERSION`` and ``SOVERSION`` can be used\\nto specify the build version and API version respectively.  When building or\\ninstalling appropriate symlinks are created if the platform supports\\nsymlinks and the linker supports so-names.  If only one of both is\\n",
        "property"
    ],
    "VISIBILITY_INLINES_HIDDEN": [
        "Whether to add a compile flag to hide symbols of inline functions\\nThe ``VISIBILITY_INLINES_HIDDEN`` property determines whether a flag for\\nhiding symbols for inline functions, such as ``-fvisibility-inlines-hidden``,\\nshould be used when invoking the compiler.  This property affects compilation\\nin sources of all types of targets (subject to policy ``CMP0063``).\\n",
        "property"
    ],
    "VS_CONFIGURATION_TYPE": [
        "Visual Studio project configuration type.\\nSets the ``ConfigurationType`` attribute for a generated Visual Studio project.\\nThe property value may use\\n``generator expressions``.\\nIf this property is set, it overrides the default setting that is based on the\\n",
        "property"
    ],
    "VS_COPY_TO_OUT_DIR": [
        "Sets the ``<CopyToOutputDirectory>`` tag for a source file in a\\nVisual Studio project file. Valid values are ``Never``, ``Always``\\nand ``PreserveNewest``.\\n",
        "property"
    ],
    "VS_CSHARP_<tagname>": [
        "Visual Studio and CSharp source-file-specific configuration.\\nTell the ``Visual Studio generators``\\nto set the source file tag ``<tagname>``\\nto a given value in the generated Visual Studio CSharp\\nproject. Ignored on other generators and languages. This property\\n",
        "property"
    ],
    "VS_DEBUGGER_COMMAND": [
        "Sets the local debugger command for Visual Studio C++ targets.\\nThe property value may use\\n``generator expressions``.\\nThis is defined in ``<LocalDebuggerCommand>`` in the Visual Studio\\nproject file.\\n",
        "property"
    ],
    "VS_DEBUGGER_COMMAND_ARGUMENTS": [
        "Sets the local debugger command line arguments for Visual Studio C++ targets.\\nThe property value may use\\n``generator expressions``.\\nThis is defined in ``<LocalDebuggerCommandArguments>`` in the Visual Studio\\nproject file.\\n",
        "property"
    ],
    "VS_DEBUGGER_ENVIRONMENT": [
        "Sets the local debugger environment for Visual Studio C++ targets.\\nThe property value may use\\n``generator expressions``.\\nThis is defined in ``<LocalDebuggerEnvironment>`` in the Visual Studio\\nproject file.\\n",
        "property"
    ],
    "VS_DEBUGGER_WORKING_DIRECTORY": [
        "Sets the local debugger working directory for Visual Studio C++ targets.\\nThe property value may use\\n``generator expressions``.\\nThis is defined in ``<LocalDebuggerWorkingDirectory>`` in the Visual Studio\\nproject file.\\n",
        "property"
    ],
    "VS_DEPLOYMENT_CONTENT": [
        "Mark a source file as content for deployment with a Windows Phone or\\nWindows Store application when built with a\\n``Visual Studio generators``.\\nThe value must evaluate to either ``1`` or ``0`` and may use\\n``generator expressions``\\n",
        "property"
    ],
    "VS_DEPLOYMENT_LOCATION": [
        "Specifies the deployment location for a content source file with a Windows\\nPhone or Windows Store application when built\\nwith a ``Visual Studio generators``.\\nThis property is only applicable when using ``VS_DEPLOYMENT_CONTENT``.\\nThe value represent the path relative to the app package and applies to all\\n",
        "property"
    ],
    "VS_DESKTOP_EXTENSIONS_VERSION": [
        "Visual Studio Windows 10 Desktop Extensions Version\\nSpecifies the version of the Desktop Extensions that should be included in the\\ntarget. For example ``10.0.10240.0``. If the value is not specified, the Desktop\\nExtensions will not be included. To use the same version of the extensions as\\nthe Windows 10 SDK that is being used, you can use the\\n",
        "property"
    ],
    "VS_DOTNET_REFERENCEPROP_<refname>_TAG_<tagname>": [
        "Defines an XML property ``<tagname>`` for a .NET reference\\n``<refname>``.\\nReference properties can be set for .NET references which are\\ndefined by the target properties ``VS_DOTNET_REFERENCES``,\\n``VS_DOTNET_REFERENCE_<refname>``\\n",
        "property"
    ],
    "VS_DOTNET_REFERENCES": [
        "Visual Studio managed project .NET references\\nAdds one or more semicolon-delimited .NET references to a generated\\nVisual Studio project.  For example, \\\"System;System.Windows.Forms\\\".\\n",
        "property"
    ],
    "VS_DOTNET_REFERENCES_COPY_LOCAL": [
        "Sets the **Copy Local** property for all .NET hint references in the target\\nBoolean property to enable/disable copying of .NET hint references to\\noutput directory. The default is ``ON``.\\n",
        "property"
    ],
    "VS_DOTNET_REFERENCE_<refname>": [
        "Visual Studio managed project .NET reference with name ``<refname>``\\nand hint path.\\nAdds one .NET reference to generated Visual Studio project. The\\nreference will have the name ``<refname>`` and will point to the\\nassembly given as value of the property.\\n",
        "property"
    ],
    "VS_DOTNET_TARGET_FRAMEWORK_VERSION": [
        "Specify the .NET target framework version.\\nUsed to specify the .NET target framework version for C++/CLI.  For\\nexample, \\\"v4.5\\\".\\nThis property is deprecated and should not be used anymore. Use\\n``DOTNET_TARGET_FRAMEWORK_VERSION`` instead.\\n",
        "property"
    ],
    "VS_DPI_AWARE": [
        "Set the Manifest Tool -> Input and Output -> DPI Awareness in the Visual Studio\\ntarget project properties.\\nValid values are ``PerMonitor``, ``ON``, or ``OFF``.\\nFor example:\\n add_executable(myproject myproject.cpp)\\n",
        "property"
    ],
    "VS_GLOBAL_<variable>": [
        "Visual Studio project-specific global variable.\\nTell the Visual Studio generator to set the global variable\\n'<variable>' to a given value in the generated Visual Studio project.\\nIgnored on other generators.  Qt integration works better if\\nVS_GLOBAL_QtVersion is set to the version FindQt4.cmake found.  For\\n",
        "property"
    ],
    "VS_GLOBAL_KEYWORD": [
        "Visual Studio project keyword for VS 10 (2010) and newer.\\nSets the \\\"keyword\\\" attribute for a generated Visual Studio project.\\nDefaults to \\\"Win32Proj\\\".  You may wish to override this value with\\n\\\"ManagedCProj\\\", for example, in a Visual Studio managed C++ unit test\\nproject.\\n",
        "property"
    ],
    "VS_GLOBAL_PROJECT_TYPES": [
        "Visual Studio project type(s).\\nCan be set to one or more UUIDs recognized by Visual Studio to\\nindicate the type of project.  This value is copied verbatim into the\\ngenerated project file.  Example for a managed C++ unit testing\\nproject:\\n",
        "property"
    ],
    "VS_GLOBAL_ROOTNAMESPACE": [
        "Visual Studio project root namespace.\\nSets the \\\"RootNamespace\\\" attribute for a generated Visual Studio\\nproject.  The attribute will be generated only if this is set.\\n",
        "property"
    ],
    "VS_GLOBAL_SECTION_POST_<section>": [
        "Specify a postSolution global section in Visual Studio.\\nSetting a property like this generates an entry of the following form\\nin the solution file:\\n::\\n GlobalSection(<section>) = postSolution\\n",
        "property"
    ],
    "VS_GLOBAL_SECTION_PRE_<section>": [
        "Specify a preSolution global section in Visual Studio.\\nSetting a property like this generates an entry of the following form\\nin the solution file:\\n::\\n GlobalSection(<section>) = preSolution\\n",
        "property"
    ],
    "VS_INCLUDE_IN_VSIX": [
        "Boolean property to specify if the file should be included within a\\nVSIX (Visual Studio Integration Extension) extension package.\\nThis is needed for development of Visual Studio extensions.\\n",
        "property"
    ],
    "VS_IOT_EXTENSIONS_VERSION": [
        "Visual Studio Windows 10 IoT Extensions Version\\nSpecifies the version of the IoT Extensions that should be included in the\\ntarget. For example ``10.0.10240.0``. If the value is not specified, the IoT\\nExtensions will not be included. To use the same version of the extensions as\\nthe Windows 10 SDK that is being used, you can use the\\n",
        "property"
    ],
    "VS_IOT_STARTUP_TASK": [
        "Visual Studio Windows 10 IoT Continuous Background Task\\nSpecifies that the target should be compiled as a Continuous Background Task library.\\n",
        "property"
    ],
    "VS_JUST_MY_CODE_DEBUGGING": [
        "Enable Just My Code with Visual Studio debugger.\\nSupported on :ref:`Visual Studio Generators` for VS 2010 and higher,\\n:ref:`Makefile Generators` and the ``Ninja`` generators.\\nThis property is initialized by the ``CMAKE_VS_JUST_MY_CODE_DEBUGGING``\\nvariable if it is set when a target is created.\\n",
        "property"
    ],
    "VS_KEYWORD": [
        "Visual Studio project keyword for VS 9 (2008) and older.\\nCan be set to change the visual studio keyword, for example Qt\\nintegration works better if this is set to Qt4VSv1.0.\\nUse the ``VS_GLOBAL_KEYWORD`` target property to set the\\nkeyword for Visual Studio 10 (2010) and newer.\\n",
        "property"
    ],
    "VS_MOBILE_EXTENSIONS_VERSION": [
        "Visual Studio Windows 10 Mobile Extensions Version\\nSpecifies the version of the Mobile Extensions that should be included in the\\ntarget. For example ``10.0.10240.0``. If the value is not specified, the Mobile\\nExtensions will not be included. To use the same version of the extensions as\\nthe Windows 10 SDK that is being used, you can use the\\n",
        "property"
    ],
    "VS_NO_SOLUTION_DEPLOY": [
        "Specify that the target should not be marked for deployment to a Windows CE\\nor Windows Phone device in the generated Visual Studio solution.\\nBe default, all EXE and shared library (DLL) targets are marked to deploy to\\nthe target device in the generated Visual Studio solution.\\nGenerator expressions are supported.\\n",
        "property"
    ],
    "VS_PACKAGE_REFERENCES": [
        "Visual Studio package references for nuget.\\nAdds one or more semicolon-delimited package references to a generated\\nVisual Studio project. The version of the package will be\\nunderscore delimited. For example, ``boost_1.7.0;nunit_3.12.*``.\\n set_property(TARGET ${TARGET_NAME} PROPERTY\\n",
        "property"
    ],
    "VS_PROJECT_IMPORT": [
        "Visual Studio managed project imports\\nAdds to a generated Visual Studio project one or more semicolon-delimited paths\\nto .props files needed when building projects from some NuGet packages.\\nFor example, ``my_packages_path/MyPackage.1.0.0/build/MyPackage.props``.\\n",
        "property"
    ],
    "VS_RESOURCE_GENERATOR": [
        "This property allows to specify the resource generator to be used\\non this file. It defaults to ``PublicResXFileCodeGenerator`` if\\nnot set.\\nThis property only applies to C# projects.\\n",
        "property"
    ],
    "VS_SCC_AUXPATH": [
        "Visual Studio Source Code Control Aux Path.\\nCan be set to change the visual studio source code control auxpath\\nproperty.\\n",
        "property"
    ],
    "VS_SCC_LOCALPATH": [
        "Visual Studio Source Code Control Local Path.\\nCan be set to change the visual studio source code control local path\\nproperty.\\n",
        "property"
    ],
    "VS_SCC_PROJECTNAME": [
        "Visual Studio Source Code Control Project.\\nCan be set to change the visual studio source code control project\\nname property.\\n",
        "property"
    ],
    "VS_SCC_PROVIDER": [
        "Visual Studio Source Code Control Provider.\\nCan be set to change the visual studio source code control provider\\nproperty.\\n",
        "property"
    ],
    "VS_SDK_REFERENCES": [
        "Visual Studio project SDK references.\\nSpecify a :ref:`semicolon-separated list <CMake Language Lists>` of SDK references\\nto be added to a generated Visual Studio project, e.g.\\n``Microsoft.AdMediatorWindows81, Version=1.0``.\\n",
        "property"
    ],
    "VS_SHADER_DISABLE_OPTIMIZATIONS": [
        "Disable compiler optimizations for an ``.hlsl`` source file.  This adds the\\n``-Od`` flag to the command line for the FxCompiler tool.  Specify the value\\n``true`` for this property to disable compiler optimizations.\\n",
        "property"
    ],
    "VS_SHADER_ENABLE_DEBUG": [
        "Enable debugging information for an ``.hlsl`` source file.  This adds the\\n``-Zi`` flag to the command line for the FxCompiler tool.  Specify the value\\n``true`` to generate debugging information for the compiled shader.\\n",
        "property"
    ],
    "VS_SHADER_ENTRYPOINT": [
        "Specifies the name of the entry point for the shader of a ``.hlsl`` source\\nfile.\\n",
        "property"
    ],
    "VS_SHADER_FLAGS": [
        "Set additional Visual Studio shader flags of a ``.hlsl`` source file.\\n",
        "property"
    ],
    "VS_SHADER_MODEL": [
        "Specifies the shader model of a ``.hlsl`` source file. Some shader types can\\nonly be used with recent shader models\\n",
        "property"
    ],
    "VS_SHADER_OBJECT_FILE_NAME": [
        "Specifies a file name for the compiled shader object file for an ``.hlsl``\\nsource file.  This adds the ``-Fo`` flag to the command line for the FxCompiler\\ntool.\\n",
        "property"
    ],
    "VS_SHADER_OUTPUT_HEADER_FILE": [
        "Set filename for output header file containing object code of a ``.hlsl``\\nsource file.\\n",
        "property"
    ],
    "VS_SHADER_TYPE": [
        "Set the Visual Studio shader type of a ``.hlsl`` source file.\\n",
        "property"
    ],
    "VS_SHADER_VARIABLE_NAME": [
        "Set name of variable in header file containing object code of a ``.hlsl``\\nsource file.\\n",
        "property"
    ],
    "VS_STARTUP_PROJECT": [
        "Specify the default startup project in a Visual Studio solution.\\nThe :ref:`Visual Studio Generators` create a ``.sln`` file for each directory\\nwhose ``CMakeLists.txt`` file calls the ``project()`` command.  Set this\\nproperty in the same directory as a ``project()`` command call (e.g. in\\nthe top-level ``CMakeLists.txt`` file) to specify the default startup project\\n",
        "property"
    ],
    "VS_TOOL_OVERRIDE": [
        "Override the default Visual Studio tool that will be applied to the source file\\nwith a new tool not based on the extension of the file.\\n",
        "property"
    ],
    "VS_USER_PROPS": [
        "Sets the user props file to be included in the visual studio\\nC++ project file. The standard path is\\n``$(UserRootDir)\\\\\\\\Microsoft.Cpp.$(Platform).user.props``, which is\\nin most cases the same as\\n``%LOCALAPPDATA%\\\\\\\\Microsoft\\\\\\\\MSBuild\\\\\\\\v4.0\\\\\\\\Microsoft.Cpp.Win32.user.props``\\n",
        "property"
    ],
    "VS_WINDOWS_TARGET_PLATFORM_MIN_VERSION": [
        "Visual Studio Windows Target Platform Minimum Version\\nFor Windows 10. Specifies the minimum version of the OS that is being\\ntargeted. For example ``10.0.10240.0``. If the value is not specified, the\\nvalue of ``CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION`` will be used on\\nWindowsStore projects otherwise the target platform minimum version will not\\n",
        "property"
    ],
    "VS_WINRT_COMPONENT": [
        "Mark a target as a Windows Runtime component for the Visual Studio generator.\\nCompile the target with ``C++/CX`` language extensions for Windows Runtime.\\nFor ``SHARED`` and ``MODULE`` libraries, this also defines the\\n``_WINRT_DLL`` preprocessor macro.\\n.. note::\\n",
        "property"
    ],
    "VS_WINRT_EXTENSIONS": [
        "Deprecated.  Use ``VS_WINRT_COMPONENT`` instead.\\nThis property was an experimental partial implementation of that one.\\n",
        "property"
    ],
    "VS_WINRT_REFERENCES": [
        "Visual Studio project Windows Runtime Metadata references\\nAdds one or more semicolon-delimited WinRT references to a generated\\nVisual Studio project.  For example, \\\"Windows;Windows.UI.Core\\\".\\n",
        "property"
    ],
    "VS_XAML_TYPE": [
        "Mark a Extensible Application Markup Language (XAML) source file\\nas a different type than the default ``Page``.\\nThe most common usage would be to set the default ``App.xaml`` file as\\n``ApplicationDefinition``.\\n",
        "property"
    ],
    "WILL_FAIL": [
        "If set to true, this will invert the pass/fail flag of the test.\\nThis property can be used for tests that are expected to fail and\\nreturn a non zero return code.\\n",
        "property"
    ],
    "WIN32_EXECUTABLE": [
        "Build an executable with a WinMain entry point on windows.\\nWhen this property is set to true the executable when linked on\\nWindows will be created with a WinMain() entry point instead of just\\nmain().  This makes it a GUI executable instead of a console application.\\nSee the ``CMAKE_MFC_FLAG`` variable documentation to\\n",
        "property"
    ],
    "WINDOWS_EXPORT_ALL_SYMBOLS": [
        "This property is implemented only for MS-compatible tools on Windows.\\nEnable this boolean property to automatically create a module definition\\n(``.def``) file with all global symbols found in the input ``.obj`` files\\nfor a ``SHARED`` library (or executable with ``ENABLE_EXPORTS``)\\non Windows.  The module definition file will be passed to the linker\\n",
        "property"
    ],
    "WORKING_DIRECTORY": [
        "The directory from which the test executable will be called.\\nIf this is not set, the test will be run with the working directory set to the\\nbinary directory associated with where the test was created (i.e. the\\n``CMAKE_CURRENT_BINARY_DIR`` for where ``add_test()`` was\\ncalled).\\n",
        "property"
    ],
    "WRAP_EXCLUDE": [
        "Exclude this source file from any code wrapping techniques.\\nSome packages can wrap source files into alternate languages to\\nprovide additional functionality.\\nFor example, C++ code can be wrapped into Java or Python, using SWIG.\\nIf ``WRAP_EXCLUDE`` is set to ``True``, that indicates that this\\n",
        "property"
    ],
    "XCODE_ATTRIBUTE_<an-attribute>": [
        "Set Xcode target attributes directly.\\nTell the ``Xcode`` generator to set '<an-attribute>' to a given\\nvalue in the generated Xcode project.  Ignored on other generators.\\nSee the ``CMAKE_XCODE_ATTRIBUTE_<an-attribute>`` variable\\nto set attributes on all targets in a directory tree.\\n",
        "property"
    ],
    "XCODE_EMIT_EFFECTIVE_PLATFORM_NAME": [
        "Control emission of ``EFFECTIVE_PLATFORM_NAME`` by the ``Xcode``\\ngenerator.\\nIt is required for building the same target with multiple SDKs. A\\ncommon use case is the parallel use of ``iphoneos`` and\\n``iphonesimulator`` SDKs.\\n",
        "property"
    ],
    "XCODE_EXPLICIT_FILE_TYPE": [
        "Set the ``Xcode`` ``explicitFileType`` attribute on its reference to a\\nsource file.  CMake computes a default based on file extension but\\ncan be told explicitly with this property.\\nSee also ``XCODE_LAST_KNOWN_FILE_TYPE``.\\nXCODE_EXPLICIT_FILE_TYPE\\n",
        "property"
    ],
    "XCODE_FILE_ATTRIBUTES": [
        "Add values to the ``Xcode`` ``ATTRIBUTES`` setting on its reference to a\\nsource file.  Among other things, this can be used to set the role on\\na ``.mig`` file::\\n set_source_files_properties(defs.mig\\n     PROPERTIES\\n",
        "property"
    ],
    "XCODE_GENERATE_SCHEME": [
        "If enabled, the ``Xcode`` generator will generate schema files.  These\\nare useful to invoke analyze, archive, build-for-testing and test\\nactions from the command line.\\nThis property is initialized by the value of the variable\\n``CMAKE_XCODE_GENERATE_SCHEME`` if it is set when a target\\n",
        "property"
    ],
    "XCODE_LAST_KNOWN_FILE_TYPE": [
        "Set the ``Xcode`` ``lastKnownFileType`` attribute on its reference to\\na source file.  CMake computes a default based on file extension but\\ncan be told explicitly with this property.\\nSee also ``XCODE_EXPLICIT_FILE_TYPE``, which is preferred\\nover this property if set.\\n",
        "property"
    ],
    "XCODE_PRODUCT_TYPE": [
        "Set the Xcode ``productType`` attribute on its reference to a\\ntarget.  CMake computes a default based on target type but\\ncan be told explicitly with this property.\\nSee also ``XCODE_EXPLICIT_FILE_TYPE``.\\n",
        "property"
    ],
    "XCODE_SCHEME_ADDRESS_SANITIZER": [
        "Whether to enable ``Address Sanitizer`` in the Diagnostics\\nsection of the generated Xcode scheme.\\nThis property is initialized by the value of the variable\\n``CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER`` if it is set\\nwhen a target is created.\\n",
        "property"
    ],
    "XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN": [
        "Whether to enable ``Detect use of stack after return``\\nin the Diagnostics section of the generated Xcode scheme.\\nThis property is initialized by the value of the variable\\n``CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN``\\nif it is set when a target is created.\\n",
        "property"
    ],
    "XCODE_SCHEME_ARGUMENTS": [
        "Specify command line arguments that should be added to the Arguments\\nsection of the generated Xcode scheme.\\nIf set to a list of arguments those will be added to the scheme.\\nPlease refer to the ``XCODE_GENERATE_SCHEME`` target property\\ndocumentation to see all Xcode schema related properties.\\n",
        "property"
    ],
    "XCODE_SCHEME_DEBUG_AS_ROOT": [
        "Whether to debug the target as 'root'.\\nPlease refer to the ``XCODE_GENERATE_SCHEME`` target property\\ndocumentation to see all Xcode schema related properties.\\n",
        "property"
    ],
    "XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING": [
        "Whether to enable\\n``Allow debugging when using document Versions Browser``\\nin the Options section of the generated Xcode scheme.\\nThis property is initialized by the value of the variable\\n``CMAKE_XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING``\\n",
        "property"
    ],
    "XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER": [
        "Whether to disable the ``Main Thread Checker``\\nin the Diagnostics section of the generated Xcode scheme.\\nThis property is initialized by the value of the variable\\n``CMAKE_XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER``\\nif it is set when a target is created.\\n",
        "property"
    ],
    "XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS": [
        "Whether to enable ``Dynamic Library Loads``\\nin the Diagnostics section of the generated Xcode scheme.\\nThis property is initialized by the value of the variable\\n``CMAKE_XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS`` if it is set\\nwhen a target is created.\\n",
        "property"
    ],
    "XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE": [
        "Whether to enable ``Dynamic Linker API usage``\\nin the Diagnostics section of the generated Xcode scheme.\\nThis property is initialized by the value of the variable\\n``CMAKE_XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE`` if it is set\\nwhen a target is created.\\n",
        "property"
    ],
    "XCODE_SCHEME_ENVIRONMENT": [
        "Specify environment variables that should be added to the Arguments\\nsection of the generated Xcode scheme.\\nIf set to a list of environment variables and values of the form\\n``MYVAR=value`` those environment variables will be added to the\\nscheme.\\n",
        "property"
    ],
    "XCODE_SCHEME_EXECUTABLE": [
        "Specify path to executable in the Info section of the generated\\nXcode scheme. If not set the schema generator will select the\\ncurrent target if it is actually executable.\\nPlease refer to the ``XCODE_GENERATE_SCHEME`` target property\\ndocumentation to see all Xcode schema related properties.\\n",
        "property"
    ],
    "XCODE_SCHEME_GUARD_MALLOC": [
        "Whether to enable ``Guard Malloc``\\nin the Diagnostics section of the generated Xcode scheme.\\nThis property is initialized by the value of the variable\\n``CMAKE_XCODE_SCHEME_GUARD_MALLOC`` if it is set\\nwhen a target is created.\\n",
        "property"
    ],
    "XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP": [
        "Whether to enable the ``Main Thread Checker`` option\\n``Pause on issues``\\nin the Diagnostics section of the generated Xcode scheme.\\nThis property is initialized by the value of the variable\\n``CMAKE_XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP`` if it is set\\n",
        "property"
    ],
    "XCODE_SCHEME_MALLOC_GUARD_EDGES": [
        "Whether to enable ``Malloc Guard Edges``\\nin the Diagnostics section of the generated Xcode scheme.\\nThis property is initialized by the value of the variable\\n``CMAKE_XCODE_SCHEME_MALLOC_GUARD_EDGES`` if it is set\\nwhen a target is created.\\n",
        "property"
    ],
    "XCODE_SCHEME_MALLOC_SCRIBBLE": [
        "Whether to enable ``Malloc Scribble``\\nin the Diagnostics section of the generated Xcode scheme.\\nThis property is initialized by the value of the variable\\n``CMAKE_XCODE_SCHEME_MALLOC_SCRIBBLE`` if it is set\\nwhen a target is created.\\n",
        "property"
    ],
    "XCODE_SCHEME_MALLOC_STACK": [
        "Whether to enable ``Malloc Stack`` in the Diagnostics\\nsection of the generated Xcode scheme.\\nThis property is initialized by the value of the variable\\n``CMAKE_XCODE_SCHEME_MALLOC_STACK`` if it is set\\nwhen a target is created.\\n",
        "property"
    ],
    "XCODE_SCHEME_THREAD_SANITIZER": [
        "Whether to enable ``Thread Sanitizer`` in the Diagnostics\\nsection of the generated Xcode scheme.\\nThis property is initialized by the value of the variable\\n``CMAKE_XCODE_SCHEME_THREAD_SANITIZER`` if it is set\\nwhen a target is created.\\n",
        "property"
    ],
    "XCODE_SCHEME_THREAD_SANITIZER_STOP": [
        "Whether to enable ``Thread Sanitizer - Pause on issues``\\nin the Diagnostics section of the generated Xcode scheme.\\nThis property is initialized by the value of the variable\\n``CMAKE_XCODE_SCHEME_THREAD_SANITIZER_STOP`` if it is set\\nwhen a target is created.\\n",
        "property"
    ],
    "XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER": [
        "Whether to enable ``Undefined Behavior Sanitizer``\\nin the Diagnostics section of the generated Xcode scheme.\\nThis property is initialized by the value of the variable\\n``CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER``\\nif it is set when a target is created.\\n",
        "property"
    ],
    "XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP": [
        "Whether to enable ``Undefined Behavior Sanitizer`` option\\n``Pause on issues``\\nin the Diagnostics section of the generated Xcode scheme.\\nThis property is initialized by the value of the variable\\n``CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP``\\n",
        "property"
    ],
    "XCODE_SCHEME_ZOMBIE_OBJECTS": [
        "Whether to enable ``Zombie Objects``\\nin the Diagnostics section of the generated Xcode scheme.\\nThis property is initialized by the value of the variable\\n``CMAKE_XCODE_SCHEME_ZOMBIE_OBJECTS`` if it is set\\nwhen a target is created.\\n",
        "property"
    ],
    "XCTEST": [
        "This target is a XCTest CFBundle on the Mac.\\nThis property will usually get set via the ``xctest_add_bundle()``\\nmacro in ``FindXCTest`` module.\\nIf a module library target has this property set to true it will be\\nbuilt as a CFBundle when built on the Mac.  It will have the directory\\n",
        "property"
    ],
    "CMP0000": [
        "A minimum required CMake version must be specified.\\nCMake requires that projects specify the version of CMake to which\\nthey have been written.  This policy has been put in place so users\\ntrying to build the project may be told when they need to update their\\nCMake.  Specifying a version also helps the project build with CMake\\n",
        "policy"
    ],
    "CMP0001": [
        "``CMAKE_BACKWARDS_COMPATIBILITY`` should no longer be used.\\nThe behavior is to check ``CMAKE_BACKWARDS_COMPATIBILITY`` and present\\nit to the user.  The ``NEW`` behavior is to ignore\\nCMAKE_BACKWARDS_COMPATIBILITY completely.\\nIn CMake 2.4 and below the variable ``CMAKE_BACKWARDS_COMPATIBILITY`` was\\n",
        "policy"
    ],
    "CMP0002": [
        "Logical target names must be globally unique.\\nTargets names created with ``add_executable()``, ``add_library()``, or\\n``add_custom_target()`` are logical build target names.  Logical target\\nnames must be globally unique because:\\n::\\n",
        "policy"
    ],
    "CMP0003": [
        "Libraries linked via full path no longer produce linker search paths.\\nThis policy affects how libraries whose full paths are NOT known are\\nfound at link time, but was created due to a change in how CMake deals\\nwith libraries whose full paths are known.  Consider the code\\n::\\n",
        "policy"
    ],
    "CMP0004": [
        "Libraries linked may not have leading or trailing whitespace.\\nCMake versions 2.4 and below silently removed leading and trailing\\nwhitespace from libraries linked with code like\\n::\\n target_link_libraries(myexe \\\" A \\\")\\n",
        "policy"
    ],
    "CMP0005": [
        "Preprocessor definition values are now escaped automatically.\\nThis policy determines whether or not CMake should generate escaped\\npreprocessor definition values added via add_definitions.  CMake\\nversions 2.4 and below assumed that only trivial values would be given\\nfor macros in add_definitions calls.  It did not attempt to escape\\n",
        "policy"
    ],
    "CMP0006": [
        "Installing ``MACOSX_BUNDLE`` targets requires a ``BUNDLE DESTINATION``.\\nThis policy determines whether the ``install(TARGETS)`` command must be\\ngiven a ``BUNDLE DESTINATION`` when asked to install a target with the\\n``MACOSX_BUNDLE`` property set.  CMake 2.4 and below did not distinguish\\napplication bundles from normal executables when installing targets.\\n",
        "policy"
    ],
    "CMP0007": [
        "list command no longer ignores empty elements.\\nThis policy determines whether the list command will ignore empty\\nelements in the list.  CMake 2.4 and below list commands ignored all\\nempty elements in the list.  For example, ``a;b;;c`` would have length 3\\nand not 4.  The ``OLD`` behavior for this policy is to ignore empty list\\n",
        "policy"
    ],
    "CMP0008": [
        "Libraries linked by full-path must have a valid library file name.\\nIn CMake 2.4 and below it is possible to write code like\\n::\\n target_link_libraries(myexe /full/path/to/somelib)\\nwhere ``somelib`` is supposed to be a valid library file name such as\\n",
        "policy"
    ],
    "CMP0009": [
        "FILE GLOB_RECURSE calls should not follow symlinks by default.\\nIn CMake 2.6.1 and below, ``file(GLOB_RECURSE)`` calls would follow\\nthrough symlinks, sometimes coming up with unexpectedly large result sets\\nbecause of symlinks to top level directories that contain hundreds of\\nthousands of files.\\n",
        "policy"
    ],
    "CMP0010": [
        "Bad variable reference syntax is an error.\\nIn CMake 2.6.2 and below, incorrect variable reference syntax such as\\na missing close-brace (``${FOO``) was reported but did not stop\\nprocessing of CMake code.  This policy determines whether a bad\\nvariable reference is an error.  The ``OLD`` behavior for this policy is\\n",
        "policy"
    ],
    "CMP0011": [
        "Included scripts do automatic ``cmake_policy()`` PUSH and POP.\\nIn CMake 2.6.2 and below, CMake Policy settings in scripts loaded by\\nthe ``include()`` and ``find_package()`` commands would affect\\nthe includer.  Explicit invocations of ``cmake_policy(PUSH)`` and\\n``cmake_policy(POP)`` were required to isolate policy changes and protect\\n",
        "policy"
    ],
    "CMP0012": [
        "``if()`` recognizes numbers and boolean constants.\\nIn CMake versions 2.6.4 and lower the ``if()`` command implicitly\\ndereferenced arguments corresponding to variables, even those named\\nlike numbers or boolean constants, except for ``0`` and ``1``.  Numbers and\\nboolean constants such as ``true``, ``false``, ``yes``, ``no``, ``on``,\\n",
        "policy"
    ],
    "CMP0013": [
        "Duplicate binary directories are not allowed.\\nCMake 2.6.3 and below silently permitted add_subdirectory() calls to\\ncreate the same binary directory multiple times.  During build system\\ngeneration files would be written and then overwritten in the build\\ntree and could lead to strange behavior.  CMake 2.6.4 and above\\n",
        "policy"
    ],
    "CMP0014": [
        "Input directories must have ``CMakeLists.txt``.\\nCMake versions before 2.8 silently ignored missing ``CMakeLists.txt``\\nfiles in directories referenced by ``add_subdirectory()`` or  ``subdirs()``,\\ntreating them as if present but empty.  In CMake 2.8.0 and above this\\n``cmake_policy()`` determines whether or not the case is an error.\\n",
        "policy"
    ],
    "CMP0015": [
        " ``link_directories()`` treats paths relative to the source dir.\\nIn CMake 2.8.0 and lower the ``link_directories()`` command passed\\nrelative paths unchanged to the linker.  In CMake 2.8.1 and above the\\n``link_directories()`` command prefers to interpret relative paths with\\nrespect to ``CMAKE_CURRENT_SOURCE_DIR``, which is consistent with\\n",
        "policy"
    ],
    "CMP0016": [
        "``target_link_libraries()`` reports error if its only argument\\nis not a target.\\nIn CMake 2.8.2 and lower the ``target_link_libraries()`` command silently\\nignored if it was called with only one argument, and this argument\\nwasn't a valid target.  In CMake 2.8.3 and above it reports an error\\n",
        "policy"
    ],
    "CMP0017": [
        "Prefer files from the CMake module directory when including from there.\\nStarting with CMake 2.8.4, if a cmake-module shipped with CMake (i.e.\\nlocated in the CMake module directory) calls ``include()`` or\\n``find_package()``, the files located in the CMake module directory are\\npreferred over the files in ``CMAKE_MODULE_PATH``.  This makes sure\\n",
        "policy"
    ],
    "CMP0018": [
        "Ignore ``CMAKE_SHARED_LIBRARY_<Lang>_FLAGS`` variable.\\nCMake 2.8.8 and lower compiled sources in ``SHARED`` and ``MODULE`` libraries\\nusing the value of the undocumented ``CMAKE_SHARED_LIBRARY_<Lang>_FLAGS``\\nplatform variable.  The variable contained platform-specific flags\\nneeded to compile objects for shared libraries.  Typically it included\\n",
        "policy"
    ],
    "CMP0019": [
        "Do not re-expand variables in include and link information.\\nCMake 2.8.10 and lower re-evaluated values given to the\\ninclude_directories, link_directories, and link_libraries commands to\\nexpand any leftover variable references at the end of the\\nconfiguration step.  This was for strict compatibility with VERY early\\n",
        "policy"
    ],
    "CMP0020": [
        "Automatically link Qt executables to ``qtmain`` target on Windows.\\nCMake 2.8.10 and lower required users of Qt to always specify a link\\ndependency to the ``qtmain.lib`` static library manually on Windows.\\nCMake 2.8.11 gained the ability to evaluate generator expressions\\nwhile determining the link dependencies from ``IMPORTED`` targets.  This\\n",
        "policy"
    ],
    "CMP0021": [
        "Fatal error on relative paths in ``INCLUDE_DIRECTORIES`` target\\nproperty.\\nCMake 2.8.10.2 and lower allowed the ``INCLUDE_DIRECTORIES`` target\\nproperty to contain relative paths.  The base path for such relative\\nentries is not well defined.  CMake 2.8.12 issues a ``FATAL_ERROR`` if the\\n",
        "policy"
    ],
    "CMP0022": [
        "``INTERFACE_LINK_LIBRARIES`` defines the link interface.\\nCMake 2.8.11 constructed the 'link interface' of a target from\\nproperties matching ``(IMPORTED_)?LINK_INTERFACE_LIBRARIES(_<CONFIG>)?``.\\nThe modern way to specify config-sensitive content is to use generator\\nexpressions and the ``IMPORTED_`` prefix makes uniform processing of the\\n",
        "policy"
    ],
    "CMP0023": [
        "Plain and keyword ``target_link_libraries()`` signatures cannot be mixed.\\nCMake 2.8.12 introduced the ``target_link_libraries()`` signature using\\nthe ``PUBLIC``, ``PRIVATE``, and ``INTERFACE`` keywords to generalize the\\n``LINK_PUBLIC`` and ``LINK_PRIVATE`` keywords introduced in CMake 2.8.7.\\nUse of signatures with any of these keywords sets the link interface of a\\n",
        "policy"
    ],
    "CMP0024": [
        "Disallow include export result.\\nCMake 2.8.12 and lower allowed use of the ``include()`` command with the\\nresult of the ``export()`` command.  This relies on the assumption that\\nthe ``export()`` command has an immediate effect at configure-time during\\na cmake run.  Certain properties of targets are not fully determined\\n",
        "policy"
    ],
    "CMP0025": [
        "Compiler id for Apple Clang is now ``AppleClang``.\\nCMake 3.0 and above recognize that Apple Clang is a different compiler\\nthan upstream Clang and that they have different version numbers.\\nCMake now prefers to present this to projects by setting the\\n``CMAKE_<LANG>_COMPILER_ID`` variable to ``AppleClang`` instead\\n",
        "policy"
    ],
    "CMP0026": [
        "Disallow use of the LOCATION property for build targets.\\nCMake 2.8.12 and lower allowed reading the ``LOCATION`` target\\nproperty (and configuration-specific variants) to\\ndetermine the eventual location of build targets.  This relies on the\\nassumption that all necessary information is available at\\n",
        "policy"
    ],
    "CMP0027": [
        "Conditionally linked imported targets with missing include directories.\\nCMake 2.8.11 introduced introduced the concept of\\n``INTERFACE_INCLUDE_DIRECTORIES``, and a check at cmake time that the\\nentries in the ``INTERFACE_INCLUDE_DIRECTORIES`` of an ``IMPORTED``\\ntarget actually exist.  CMake 2.8.11 also introduced generator expression\\n",
        "policy"
    ],
    "CMP0028": [
        "Double colon in target name means ``ALIAS`` or ``IMPORTED`` target.\\nCMake 2.8.12 and lower allowed the use of targets and files with double\\ncolons in ``target_link_libraries()``, with some buildsystem generators.\\nThe use of double-colons is a common pattern used to namespace ``IMPORTED``\\ntargets and ``ALIAS`` targets.  When computing the link dependencies of\\n",
        "policy"
    ],
    "CMP0029": [
        "The ``subdir_depends()`` command should not be called.\\nThe implementation of this command has been empty since December 2001\\nbut was kept in CMake for compatibility for a long time.\\nCMake >= 3.0 prefer that this command never be called.\\nThe ``OLD`` behavior for this policy is to allow the command to be called.\\n",
        "policy"
    ],
    "CMP0030": [
        "The ``use_mangled_mesa()`` command should not be called.\\nThis command was created in September 2001 to support VTK before\\nmodern CMake language and custom command capabilities.  VTK has\\nnot used it in years.\\nCMake >= 3.0 prefer that this command never be called.\\n",
        "policy"
    ],
    "CMP0031": [
        "The ``load_command()`` command should not be called.\\nThis command was added in August 2002 to allow projects to add\\narbitrary commands implemented in C or C++.  However, it does\\nnot work when the toolchain in use does not match the ABI of\\nthe CMake process.  It has been mostly superseded by the\\n",
        "policy"
    ],
    "CMP0032": [
        "The ``output_required_files()`` command should not be called.\\nThis command was added in June 2001 to expose the then-current CMake\\nimplicit dependency scanner.  CMake's real implicit dependency scanner\\nhas evolved since then but is not exposed through this command.  The\\nscanning capabilities of this command are very limited and this\\n",
        "policy"
    ],
    "CMP0033": [
        "The ``export_library_dependencies()`` command should not be called.\\nThis command was added in January 2003 to export ``<tgt>_LIB_DEPENDS``\\ninternal CMake cache entries to a file for installation with a project.\\nThis was used at the time to allow transitive link dependencies to\\nwork for applications outside of the original build tree of a project.\\n",
        "policy"
    ],
    "CMP0034": [
        "The ``utility_source()`` command should not be called.\\nThis command was introduced in March 2001 to help build executables used to\\ngenerate other files.  This approach has long been replaced by\\n``add_executable()`` combined with ``add_custom_command()``.\\nCMake >= 3.0 prefer that this command never be called.\\n",
        "policy"
    ],
    "CMP0035": [
        "The ``variable_requires()`` command should not be called.\\nThis command was introduced in November 2001 to perform some conditional\\nlogic.  It has long been replaced by the ``if()`` command.\\nCMake >= 3.0 prefer that this command never be called.\\nThe ``OLD`` behavior for this policy is to allow the command to be called.\\n",
        "policy"
    ],
    "CMP0036": [
        "The ``build_name()`` command should not be called.\\nThis command was added in May 2001 to compute a name for the current\\noperating system and compiler combination.  The command has long been\\ndocumented as discouraged and replaced by the ``CMAKE_SYSTEM``\\nand ``CMAKE_<LANG>_COMPILER`` variables.\\n",
        "policy"
    ],
    "CMP0037": [
        "Target names should not be reserved and should match a validity pattern.\\nCMake 2.8.12 and lower allowed creating targets using ``add_library()``,\\n``add_executable()`` and ``add_custom_target()`` with unrestricted\\nchoice for the target name.  Newer cmake features such\\nas ``cmake-generator-expressions(7)`` and some\\n",
        "policy"
    ],
    "CMP0038": [
        "Targets may not link directly to themselves.\\nCMake 2.8.12 and lower allowed a build target to link to itself directly with\\na ``target_link_libraries()`` call. This is an indicator of a bug in\\nuser code.\\nThe ``OLD`` behavior for this policy is to ignore targets which list themselves\\n",
        "policy"
    ],
    "CMP0039": [
        "Utility targets may not have link dependencies.\\nCMake 2.8.12 and lower allowed using utility targets in the left hand side\\nposition of the ``target_link_libraries()`` command. This is an indicator\\nof a bug in user code.\\nThe ``OLD`` behavior for this policy is to ignore attempts to set the link\\n",
        "policy"
    ],
    "CMP0040": [
        "The target in the ``TARGET`` signature of ``add_custom_command()``\\nmust exist and must be defined in the current directory.\\nCMake 2.8.12 and lower silently ignored a custom command created with\\nthe ``TARGET`` signature of ``add_custom_command()``\\nif the target is unknown or was defined outside the current directory.\\n",
        "policy"
    ],
    "CMP0041": [
        "Error on relative include with generator expression.\\nDiagnostics in CMake 2.8.12 and lower silently ignored an entry in the\\n``INTERFACE_INCLUDE_DIRECTORIES`` of a target if it contained a generator\\nexpression at any position.\\nThe path entries in that target property should not be relative. High-level\\n",
        "policy"
    ],
    "CMP0042": [
        "``MACOSX_RPATH`` is enabled by default.\\nCMake 2.8.12 and newer has support for using ``@rpath`` in a target's install\\nname.  This was enabled by setting the target property\\n``MACOSX_RPATH``.  The ``@rpath`` in an install name is a more\\nflexible and powerful mechanism than ``@executable_path`` or ``@loader_path``\\n",
        "policy"
    ],
    "CMP0043": [
        "Ignore COMPILE_DEFINITIONS_<Config> properties\\nCMake 2.8.12 and lower allowed setting the\\n``COMPILE_DEFINITIONS_<CONFIG>`` target property and\\n``COMPILE_DEFINITIONS_<CONFIG>`` directory property to apply\\nconfiguration-specific compile definitions.\\n",
        "policy"
    ],
    "CMP0044": [
        "Case sensitive ``<LANG>_COMPILER_ID`` generator expressions\\nCMake 2.8.12 introduced the ``<LANG>_COMPILER_ID``\\n``generator expressions`` to allow\\ncomparison of the ``CMAKE_<LANG>_COMPILER_ID`` with a test value.  The\\npossible valid values are lowercase, but the comparison with the test value\\n",
        "policy"
    ],
    "CMP0045": [
        "Error on non-existent target in get_target_property.\\nIn CMake 2.8.12 and lower, the ``get_target_property()`` command accepted\\na non-existent target argument without issuing any error or warning.  The\\nresult variable is set to a ``-NOTFOUND`` value.\\nThe ``OLD`` behavior for this policy is to issue no warning and set the result\\n",
        "policy"
    ],
    "CMP0046": [
        "Error on non-existent dependency in add_dependencies.\\nCMake 2.8.12 and lower silently ignored non-existent dependencies\\nlisted in the ``add_dependencies()`` command.\\nThe ``OLD`` behavior for this policy is to silently ignore non-existent\\ndependencies. The ``NEW`` behavior for this policy is to report an error\\n",
        "policy"
    ],
    "CMP0047": [
        "Use ``QCC`` compiler id for the qcc drivers on QNX.\\nCMake 3.0 and above recognize that the QNX qcc compiler driver is\\ndifferent from the GNU compiler.\\nCMake now prefers to present this to projects by setting the\\n``CMAKE_<LANG>_COMPILER_ID`` variable to ``QCC`` instead\\n",
        "policy"
    ],
    "CMP0048": [
        "The ``project()`` command manages ``VERSION`` variables.\\nCMake version 3.0 introduced the ``VERSION`` option of the ``project()``\\ncommand to specify a project version as well as the name.  In order to keep\\n``PROJECT_VERSION`` and related variables consistent with variable\\n``PROJECT_NAME`` it is necessary to set the ``VERSION`` variables\\n",
        "policy"
    ],
    "CMP0049": [
        "Do not expand variables in target source entries.\\nCMake 2.8.12 and lower performed an extra layer of variable expansion\\nwhen evaluating source file names::\\n set(a_source foo.c)\\n add_executable(foo \\\\${a_source})\\n",
        "policy"
    ],
    "CMP0050": [
        "Disallow add_custom_command SOURCE signatures.\\nCMake 2.8.12 and lower allowed a signature for ``add_custom_command()``\\nwhich specified an input to a command.  This was undocumented behavior.\\nModern use of CMake associates custom commands with their output, rather\\nthan their input.\\n",
        "policy"
    ],
    "CMP0051": [
        "List TARGET_OBJECTS in SOURCES target property.\\nCMake 3.0 and lower did not include the ``TARGET_OBJECTS``\\n``generator expression`` when\\nreturning the ``SOURCES`` target property.\\nConfigure-time CMake code is not able to handle generator expressions.  If\\n",
        "policy"
    ],
    "CMP0052": [
        "Reject source and build dirs in installed\\n``INTERFACE_INCLUDE_DIRECTORIES``.\\nCMake 3.0 and lower allowed subdirectories of the source directory or build\\ndirectory to be in the ``INTERFACE_INCLUDE_DIRECTORIES`` of\\ninstalled and exported targets, if the directory was also a subdirectory of\\n",
        "policy"
    ],
    "CMP0053": [
        "Simplify variable reference and escape sequence evaluation.\\nCMake 3.1 introduced a much faster implementation of evaluation of the\\n:ref:`Variable References` and :ref:`Escape Sequences` documented in the\\n``cmake-language(7)`` manual.  While the behavior is identical\\nto the legacy implementation in most cases, some corner cases were\\n",
        "policy"
    ],
    "CMP0054": [
        "Only interpret ``if()`` arguments as variables or keywords when unquoted.\\nCMake 3.1 and above no longer implicitly dereference variables or\\ninterpret keywords in an ``if()`` command argument when\\nit is a :ref:`Quoted Argument` or a :ref:`Bracket Argument`.\\nThe ``OLD`` behavior for this policy is to dereference variables and\\n",
        "policy"
    ],
    "CMP0055": [
        "Strict checking for the ``break()`` command.\\nCMake 3.1 and lower allowed calls to the ``break()`` command\\noutside of a loop context and also ignored any given arguments.\\nThis was undefined behavior.\\nThe ``OLD`` behavior for this policy is to allow ``break()`` to be placed\\n",
        "policy"
    ],
    "CMP0056": [
        "Honor link flags in ``try_compile()`` source-file signature.\\nThe ``try_compile()`` command source-file signature generates a\\n``CMakeLists.txt`` file to build the source file into an executable.\\nIn order to compile the source the same way as it might be compiled\\nby the calling project, the generated project sets the value of the\\n",
        "policy"
    ],
    "CMP0057": [
        "Support new ``if()`` IN_LIST operator.\\nCMake 3.3 adds support for the new IN_LIST operator.\\nThe ``OLD`` behavior for this policy is to ignore the IN_LIST operator.\\nThe ``NEW`` behavior is to interpret the IN_LIST operator.\\nThis policy was introduced in CMake version 3.3.\\n",
        "policy"
    ],
    "CMP0058": [
        "Ninja requires custom command byproducts to be explicit.\\nWhen an intermediate file generated during the build is consumed\\nby an expensive operation or a large tree of dependents, one may\\nreduce the work needed for an incremental rebuild by updating the\\nfile timestamp only when its content changes.  With this approach\\n",
        "policy"
    ],
    "CMP0059": [
        "Do not treat ``DEFINITIONS`` as a built-in directory property.\\nCMake 3.3 and above no longer make a list of definitions available through\\nthe ``DEFINITIONS`` directory property.  The\\n``COMPILE_DEFINITIONS`` directory property may be used instead.\\nThe ``OLD`` behavior for this policy is to provide the list of flags given\\n",
        "policy"
    ],
    "CMP0060": [
        "Link libraries by full path even in implicit directories.\\nPolicy ``CMP0003`` was introduced with the intention of always\\nlinking library files by full path when a full path is given to the\\n``target_link_libraries()`` command.  However, on some platforms\\n(e.g. HP-UX) the compiler front-end adds alternative library search paths\\n",
        "policy"
    ],
    "CMP0061": [
        "CTest does not by default tell ``make`` to ignore errors (``-i``).\\nThe ``ctest_build()`` and ``build_command()`` commands no\\nlonger generate build commands for :ref:`Makefile Generators` with\\nthe ``-i`` option.  Previously this was done to help build as much\\nof tested projects as possible.  However, this behavior is not\\n",
        "policy"
    ],
    "CMP0062": [
        "Disallow ``install()`` of ``export()`` result.\\nThe ``export()`` command generates a file containing\\n:ref:`Imported Targets`, which is suitable for use from the build\\ndirectory.  It is not suitable for installation because it contains absolute\\npaths to buildsystem locations, and is particular to a single build\\n",
        "policy"
    ],
    "CMP0063": [
        "Honor visibility properties for all target types.\\nThe ``<LANG>_VISIBILITY_PRESET`` and\\n``VISIBILITY_INLINES_HIDDEN`` target properties affect visibility\\nof symbols during dynamic linking.  When first introduced these properties\\naffected compilation of sources only in shared libraries, module libraries,\\n",
        "policy"
    ],
    "CMP0064": [
        "Recognize ``TEST`` as a operator for the ``if()`` command.\\nThe ``TEST`` operator was added to the ``if()`` command to determine if a\\ngiven test name was created by the ``add_test()`` command.\\nThe ``OLD`` behavior for this policy is to ignore the ``TEST`` operator.\\nThe ``NEW`` behavior is to interpret the ``TEST`` operator.\\n",
        "policy"
    ],
    "CMP0065": [
        "Do not add flags to export symbols from executables without\\nthe ``ENABLE_EXPORTS`` target property.\\nCMake 3.3 and below, for historical reasons, always linked executables\\non some platforms with flags like ``-rdynamic`` to export symbols from\\nthe executables for use by any plugins they may load via ``dlopen``.\\n",
        "policy"
    ],
    "CMP0066": [
        "Honor per-config flags in ``try_compile()`` source-file signature.\\nThe source file signature of the ``try_compile()`` command uses the value\\nof the ``CMAKE_<LANG>_FLAGS`` variable in the test project so that the\\ntest compilation works as it would in the main project.  However, CMake 3.6 and\\nbelow do not also honor config-specific compiler flags such as those in the\\n",
        "policy"
    ],
    "CMP0067": [
        "Honor language standard in ``try_compile()`` source-file signature.\\nThe ``try_compile()`` source file signature is intended to allow\\ncallers to check whether they will be able to compile a given source file\\nwith the current toolchain.  In order to match compiler behavior, any\\nlanguage standard mode should match.  However, CMake 3.7 and below did not\\n",
        "policy"
    ],
    "CMP0068": [
        "``RPATH`` settings on macOS do not affect ``install_name``.\\nCMake 3.9 and newer remove any effect the following settings may have on the\\n``install_name`` of a target on macOS:\\n* ``BUILD_WITH_INSTALL_RPATH`` target property\\n* ``SKIP_BUILD_RPATH`` target property\\n",
        "policy"
    ],
    "CMP0069": [
        "``INTERPROCEDURAL_OPTIMIZATION`` is enforced when enabled.\\nCMake 3.9 and newer prefer to add IPO flags whenever the\\n``INTERPROCEDURAL_OPTIMIZATION`` target property is enabled and\\nproduce an error if flags are not known to CMake for the current compiler.\\nSince a given compiler may not support IPO flags in all environments in which\\n",
        "policy"
    ],
    "CMP0070": [
        "Define ``file(GENERATE)`` behavior for relative paths.\\nCMake 3.10 and newer define that relative paths given to ``INPUT`` and\\n``OUTPUT`` arguments of ``file(GENERATE)`` are interpreted relative to the\\ncurrent source and binary directories, respectively.  CMake 3.9 and lower did\\nnot define any behavior for relative paths but did not diagnose them either\\n",
        "policy"
    ],
    "CMP0071": [
        "Let ``AUTOMOC`` and ``AUTOUIC`` process\\n``GENERATED`` files.\\nSince version 3.10, CMake processes **regular** and ``GENERATED``\\nsource files in ``AUTOMOC`` and ``AUTOUIC``.\\nIn earlier CMake versions, only **regular** source files were processed.\\n",
        "policy"
    ],
    "CMP0072": [
        "``FindOpenGL`` prefers GLVND by default when available.\\nThe ``FindOpenGL`` module provides an ``OpenGL::GL`` target and an\\n``OPENGL_LIBRARIES`` variable for projects to use for legacy GL interfaces.\\nWhen both a legacy GL library (e.g. ``libGL.so``) and GLVND libraries\\nfor OpenGL and GLX (e.g. ``libOpenGL.so`` and ``libGLX.so``) are available,\\n",
        "policy"
    ],
    "CMP0073": [
        "Do not produce legacy ``_LIB_DEPENDS`` cache entries.\\nAncient CMake versions once used ``<tgt>_LIB_DEPENDS`` cache entries to\\npropagate library link dependencies.  This has long been done by other\\nmeans, leaving the ``export_library_dependencies()`` command as the\\nonly user of these values.  That command has long been disallowed by\\n",
        "policy"
    ],
    "CMP0074": [
        "``find_package()`` uses ``<PackageName>_ROOT`` variables.\\nIn CMake 3.12 and above the ``find_package(<PackageName>)`` command now\\nsearches prefixes specified by the ``<PackageName>_ROOT`` CMake\\nvariable and the ``<PackageName>_ROOT`` environment variable.\\nPackage roots are maintained as a stack so nested calls to all ``find_*``\\n",
        "policy"
    ],
    "CMP0075": [
        "Include file check macros honor ``CMAKE_REQUIRED_LIBRARIES``.\\nIn CMake 3.12 and above, the\\n* ``check_include_file`` macro in the ``CheckIncludeFile`` module, the\\n* ``check_include_file_cxx`` macro in the\\n  ``CheckIncludeFileCXX`` module, and the\\n",
        "policy"
    ],
    "CMP0076": [
        "The ``target_sources()`` command converts relative paths to absolute.\\nIn CMake 3.13 and above, the ``target_sources()`` command now converts\\nrelative source file paths to absolute paths in the following cases:\\n* Source files are added to the target's ``INTERFACE_SOURCES``\\n  property.\\n",
        "policy"
    ],
    "CMP0077": [
        "``option()`` honors normal variables.\\nThe ``option()`` command is typically used to create a cache entry\\nto allow users to set the option.  However, there are cases in which a\\nnormal (non-cached) variable of the same name as the option may be\\ndefined by the project prior to calling the ``option()`` command.\\n",
        "policy"
    ],
    "CMP0078": [
        "``UseSWIG`` generates standard target names.\\nStarting with CMake 3.13, ``UseSWIG`` generates now standard target\\nnames. This policy provides compatibility with projects that expect the legacy\\nbehavior.\\nThe ``OLD`` behavior for this policy relies on\\n",
        "policy"
    ],
    "CMP0079": [
        "``target_link_libraries()`` allows use with targets in other directories.\\nPrior to CMake 3.13 the ``target_link_libraries()`` command did not\\naccept targets not created in the calling directory as its first argument\\nfor calls that update the ``LINK_LIBRARIES`` of the target itself.\\nIt did accidentally accept targets from other directories on calls that\\n",
        "policy"
    ],
    "CMP0080": [
        "``BundleUtilities`` cannot be included at configure time.\\nThe macros provided by ``BundleUtilities`` are intended to be invoked\\nat install time rather than at configure time, because they depend on the\\nlisted targets already existing at the time they are invoked. If they are\\ninvoked at configure time, the targets haven't been built yet, and the\\n",
        "policy"
    ],
    "CMP0081": [
        "Relative paths not allowed in ``LINK_DIRECTORIES`` target property.\\nCMake 3.12 and lower allowed the ``LINK_DIRECTORIES`` directory\\nproperty to contain relative paths.  The base path for such relative\\nentries is not well defined.  CMake 3.13 and later will issue a\\n``FATAL_ERROR`` if the ``LINK_DIRECTORIES`` target property\\n",
        "policy"
    ],
    "CMP0082": [
        "Install rules from ``add_subdirectory()`` calls are interleaved with\\nthose in caller.\\nCMake 3.13 and lower ran the install rules from ``add_subdirectory()``\\nafter all other install rules, even if ``add_subdirectory()`` was called\\nbefore the other install rules.  CMake 3.14 and above prefer to interleave\\n",
        "policy"
    ],
    "CMP0083": [
        "To control generation of Position Independent Executable (``PIE``) or not, some\\nflags are required at link time.\\nCMake 3.13 and lower did not add these link flags when\\n``POSITION_INDEPENDENT_CODE`` is set.\\nThe ``OLD`` behavior for this policy is to not manage ``PIE`` link flags. The\\n",
        "policy"
    ],
    "CMP0084": [
        "The ``FindQt`` module does not exist for ``find_package()``.\\nThe existence of ``FindQt`` means that for Qt upstream to provide\\npackage config files that can be found by ``find_package(Qt)``, the consuming\\nproject has to explicitly specify ``find_package(Qt CONFIG)``. Removing this\\nmodule gives Qt a path forward for exporting its own config files which can\\n",
        "policy"
    ],
    "CMP0085": [
        "``$<IN_LIST:...>`` handles empty list items.\\nIn CMake 3.13 and lower, the ``$<IN_LIST:...>`` generator expression always\\nreturned ``0`` if the first argument was empty, even if the list contained an\\nempty item. This behavior is inconsistent with the ``IN_LIST`` behavior of\\n``if()``, which this generator expression is meant to emulate. CMake 3.14\\n",
        "policy"
    ],
    "CMP0086": [
        "``UseSWIG`` honors ``SWIG_MODULE_NAME`` via ``-module`` flag.\\nStarting with CMake 3.14, ``UseSWIG`` passes option\\n``-module <module_name>`` to ``SWIG`` compiler if the file property\\n``SWIG_MODULE_NAME`` is specified. This policy provides compatibility with\\nprojects that expect the legacy behavior.\\n",
        "policy"
    ],
    "CMP0087": [
        "``install(CODE)`` and ``install(SCRIPT)`` support generator\\nexpressions.\\nIn CMake 3.13 and earlier, ``install(CODE)`` and\\n``install(SCRIPT)`` did not evaluate generator expressions.  CMake 3.14\\nand later will evaluate generator expressions for ``install(CODE)`` and\\n",
        "policy"
    ],
    "CMP0088": [
        "``FindBISON`` runs bison in ``CMAKE_CURRENT_BINARY_DIR``\\nwhen executing.\\nThe module provides a ``BISON_TARGET`` macro which generates BISON output.\\nIn CMake 3.13 and below the macro would generate a custom command that runs\\n``bison`` in the source directory.  CMake 3.14 and later prefer to run it\\n",
        "policy"
    ],
    "CMP0089": [
        "Compiler id for IBM Clang-based XL compilers is now ``XLClang``.\\nCMake 3.15 and above recognize that IBM's Clang-based XL compilers\\nthat define ``__ibmxl__`` are a new front-end distinct from ``xlc``\\nwith a different command line and set of capabilities.\\nCMake now prefers to present this to projects by setting the\\n",
        "policy"
    ],
    "CMP0090": [
        "``export(PACKAGE)`` does not populate package registry by default.\\nIn CMake 3.14 and below the ``export(PACKAGE)`` command populated the\\nuser package registry by default and users needed to set the\\n``CMAKE_EXPORT_NO_PACKAGE_REGISTRY`` to disable it, e.g. in automated\\nbuild and packaging environments.  Since the user package registry is stored\\n",
        "policy"
    ],
    "CMP0091": [
        "MSVC runtime library flags are selected by an abstraction.\\nCompilers targeting the MSVC ABI have flags to select the MSVC runtime library.\\nRuntime library selection typically varies with build configuration because\\nthere is a separate runtime library for Debug builds.\\nIn CMake 3.14 and below, MSVC runtime library selection flags are added to\\n",
        "policy"
    ],
    "CMP0092": [
        "MSVC warning flags are not in ``CMAKE_<LANG>_FLAGS`` by default.\\nWhen using MSVC-like compilers in CMake 3.14 and below, warning flags\\nlike ``/W3`` are added to ``CMAKE_<LANG>_FLAGS`` by default.\\nThis is problematic for projects that want to choose a different warning\\nlevel programmatically.  In particular, it requires string editing of the\\n",
        "policy"
    ],
    "CMP0093": [
        "``FindBoost`` reports ``Boost_VERSION`` in ``x.y.z`` format.\\nIn CMake 3.14 and below the module would report the Boost version\\nnumber as specified in the preprocessor definition ``BOOST_VERSION`` in\\nthe ``boost/version.hpp`` file. In CMake 3.15 and later it is preferred\\nthat the reported version number matches the ``x.y.z`` format reported\\n",
        "policy"
    ],
    "CMP0094": [
        "Modules ``FindPython3``, ``FindPython2`` and ``FindPython``\\nuse ``LOCATION`` for lookup strategy.\\nStarting with CMake 3.15, Modules ``FindPython3``, ``FindPython2``\\nand ``FindPython`` set value ``LOCATION`` for, respectively, variables\\n``Python3_FIND_STRATEGY``, ``Python2_FIND_STRATEGY`` and\\n",
        "policy"
    ],
    "CMP0095": [
        "``RPATH`` entries are properly escaped in the intermediary CMake install script.\\nIn CMake 3.15 and earlier, ``RPATH`` entries set via\\n``CMAKE_INSTALL_RPATH`` or via ``INSTALL_RPATH`` have not been\\nescaped before being inserted into the ``cmake_install.cmake`` script. Dynamic\\nlinkers on ELF-based systems (e.g. Linux and FreeBSD) allow certain keywords in\\n",
        "policy"
    ],
    "CMP0096": [
        "The ``project()`` command preserves leading zeros in version components.\\nWhen a ``VERSION <major>[.<minor>[.<patch>[.<tweak>]]]]`` argument is given\\nto the ``project()`` command, it stores the version string in the\\n``PROJECT_VERSION`` variable and stores individual integer version components\\nin ``PROJECT_VERSION_{MAJOR,MINOR,PATCH,TWEAK}`` variables (see policy\\n",
        "policy"
    ],
    "CMP0097": [
        "``ExternalProject_Add()`` with ``GIT_SUBMODULES \\\"\\\"`` initializes no\\nsubmodules.\\nThe module provides a ``GIT_SUBMODULES`` option which controls what submodules\\nto initialize and update. Starting with CMake 3.16, explicitly setting\\n``GIT_SUBMODULES`` to an empty string means no submodules will be initialized\\n",
        "policy"
    ],
    "<PROJECT-NAME>_BINARY_DIR": [
        "Top level binary directory for the named project.\\nA variable is created with the name used in the ``project()`` command,\\nand is the binary directory for the project.  This can be useful when\\n``add_subdirectory()`` is used to connect several projects.\\n",
        "variable"
    ],
    "<PROJECT-NAME>_DESCRIPTION": [
        "Value given to the ``DESCRIPTION`` option of the most recent call to the\\n``project()`` command with project name ``<PROJECT-NAME>``, if any.\\n",
        "variable"
    ],
    "<PROJECT-NAME>_HOMEPAGE_URL": [
        "Value given to the ``HOMEPAGE_URL`` option of the most recent call to the\\n``project()`` command with project name ``<PROJECT-NAME>``, if any.\\n",
        "variable"
    ],
    "<PROJECT-NAME>_SOURCE_DIR": [
        "Top level source directory for the named project.\\nA variable is created with the name used in the ``project()`` command,\\nand is the source directory for the project.  This can be useful when\\n``add_subdirectory()`` is used to connect several projects.\\n",
        "variable"
    ],
    "<PROJECT-NAME>_VERSION": [
        "Value given to the ``VERSION`` option of the most recent call to the\\n``project()`` command with project name ``<PROJECT-NAME>``, if any.\\nSee also the component-wise version variables\\n``<PROJECT-NAME>_VERSION_MAJOR``,\\n``<PROJECT-NAME>_VERSION_MINOR``,\\n",
        "variable"
    ],
    "<PROJECT-NAME>_VERSION_MAJOR": [
        "First version number component of the ``<PROJECT-NAME>_VERSION``\\nvariable as set by the ``project()`` command.\\n",
        "variable"
    ],
    "<PROJECT-NAME>_VERSION_MINOR": [
        "Second version number component of the ``<PROJECT-NAME>_VERSION``\\nvariable as set by the ``project()`` command.\\n",
        "variable"
    ],
    "<PROJECT-NAME>_VERSION_PATCH": [
        "Third version number component of the ``<PROJECT-NAME>_VERSION``\\nvariable as set by the ``project()`` command.\\n",
        "variable"
    ],
    "<PROJECT-NAME>_VERSION_TWEAK": [
        "Fourth version number component of the ``<PROJECT-NAME>_VERSION``\\nvariable as set by the ``project()`` command.\\n",
        "variable"
    ],
    "<PackageName>_ROOT": [
        "Calls to ``find_package(<PackageName>)`` will search in prefixes\\nspecified by the ``<PackageName>_ROOT`` CMake variable, where\\n``<PackageName>`` is the name given to the ``find_package()`` call\\nand ``_ROOT`` is literal.  For example, ``find_package(Foo)`` will search\\nprefixes specified in the ``Foo_ROOT`` CMake variable (if set).\\n",
        "variable"
    ],
    "ANDROID": [
        "Set to ``1`` when the target system (``CMAKE_SYSTEM_NAME``) is\\n``Android``.\\n",
        "variable"
    ],
    "APPLE": [
        "Set to ``True`` when the target system is an Apple platform\\n(macOS, iOS, tvOS or watchOS).\\n",
        "variable"
    ],
    "BORLAND": [
        "``True`` if the Borland compiler is being used.\\nThis is set to ``true`` if the Borland compiler is being used.\\n",
        "variable"
    ],
    "BUILD_SHARED_LIBS": [
        "Global flag to cause ``add_library()`` to create shared libraries if on.\\nIf present and true, this will cause all libraries to be built shared\\nunless the library was explicitly added as a static library.  This\\nvariable is often added to projects as an ``option()`` so that each user\\nof a project can decide if they want to build the project using shared or\\n",
        "variable"
    ],
    "CACHE": [
        "Operator to read cache variables.\\nUse the syntax ``$CACHE{VAR}`` to read cache entry ``VAR``.\\nSee the :ref:`cmake-language(7) variables <CMake Language Variables>`\\ndocumentation for more complete documentation of the interaction of\\nnormal variables and cache entries.\\n",
        "variable"
    ],
    "CMAKE_DEBUG_POSTFIX": [
        "See variable ``CMAKE_<CONFIG>_POSTFIX``.\\nThis variable is a special case of the more-general\\n``CMAKE_<CONFIG>_POSTFIX`` variable for the `DEBUG` configuration.\\n",
        "variable"
    ],
    "CMAKE_RELEASE_POSTFIX": [
        "Default filename postfix for libraries under configuration ``<CONFIG>``.\\nWhen a non-executable target is created its ``<CONFIG>_POSTFIX``\\ntarget property is initialized with the value of this variable if it is set.\\n",
        "variable"
    ],
    "CMAKE_C_ANDROID_TOOLCHAIN_MACHINE": [
        "When :ref:`Cross Compiling for Android` this variable contains the\\ntoolchain binutils machine name (e.g. ``gcc -dumpmachine``).  The\\nbinutils typically have a ``<machine>-`` prefix on their name.\\nSee also ``CMAKE_<LANG>_ANDROID_TOOLCHAIN_PREFIX``\\nand ``CMAKE_<LANG>_ANDROID_TOOLCHAIN_SUFFIX``.\\n",
        "variable"
    ],
    "CMAKE_CXX_ANDROID_TOOLCHAIN_MACHINE": [
        "When :ref:`Cross Compiling for Android` this variable contains the\\ntoolchain binutils machine name (e.g. ``gcc -dumpmachine``).  The\\nbinutils typically have a ``<machine>-`` prefix on their name.\\nSee also ``CMAKE_<LANG>_ANDROID_TOOLCHAIN_PREFIX``\\nand ``CMAKE_<LANG>_ANDROID_TOOLCHAIN_SUFFIX``.\\n",
        "variable"
    ],
    "CMAKE_C_ANDROID_TOOLCHAIN_PREFIX": [
        "When :ref:`Cross Compiling for Android` this variable contains the absolute\\npath prefixing the toolchain GNU compiler and its binutils.\\nSee also ``CMAKE_<LANG>_ANDROID_TOOLCHAIN_SUFFIX``\\nand ``CMAKE_<LANG>_ANDROID_TOOLCHAIN_MACHINE``.\\nFor example, the path to the linker is::\\n",
        "variable"
    ],
    "CMAKE_CXX_ANDROID_TOOLCHAIN_PREFIX": [
        "When :ref:`Cross Compiling for Android` this variable contains the absolute\\npath prefixing the toolchain GNU compiler and its binutils.\\nSee also ``CMAKE_<LANG>_ANDROID_TOOLCHAIN_SUFFIX``\\nand ``CMAKE_<LANG>_ANDROID_TOOLCHAIN_MACHINE``.\\nFor example, the path to the linker is::\\n",
        "variable"
    ],
    "CMAKE_C_ANDROID_TOOLCHAIN_SUFFIX": [
        "When :ref:`Cross Compiling for Android` this variable contains the\\nhost platform suffix of the toolchain GNU compiler and its binutils.\\nSee also ``CMAKE_<LANG>_ANDROID_TOOLCHAIN_PREFIX``\\nand ``CMAKE_<LANG>_ANDROID_TOOLCHAIN_MACHINE``.\\n",
        "variable"
    ],
    "CMAKE_CXX_ANDROID_TOOLCHAIN_SUFFIX": [
        "When :ref:`Cross Compiling for Android` this variable contains the\\nhost platform suffix of the toolchain GNU compiler and its binutils.\\nSee also ``CMAKE_<LANG>_ANDROID_TOOLCHAIN_PREFIX``\\nand ``CMAKE_<LANG>_ANDROID_TOOLCHAIN_MACHINE``.\\n",
        "variable"
    ],
    "CMAKE_C_ARCHIVE_APPEND": [
        "Rule variable to append to a static archive.\\nThis is a rule variable that tells CMake how to append to a static\\narchive.  It is used in place of ``CMAKE_<LANG>_CREATE_STATIC_LIBRARY``\\non some platforms in order to support large object counts.  See also\\n``CMAKE_<LANG>_ARCHIVE_CREATE`` and\\n",
        "variable"
    ],
    "CMAKE_CXX_ARCHIVE_APPEND": [
        "Rule variable to append to a static archive.\\nThis is a rule variable that tells CMake how to append to a static\\narchive.  It is used in place of ``CMAKE_<LANG>_CREATE_STATIC_LIBRARY``\\non some platforms in order to support large object counts.  See also\\n``CMAKE_<LANG>_ARCHIVE_CREATE`` and\\n",
        "variable"
    ],
    "CMAKE_C_ARCHIVE_CREATE": [
        "Rule variable to create a new static archive.\\nThis is a rule variable that tells CMake how to create a static\\narchive.  It is used in place of ``CMAKE_<LANG>_CREATE_STATIC_LIBRARY``\\non some platforms in order to support large object counts.  See also\\n``CMAKE_<LANG>_ARCHIVE_APPEND`` and\\n",
        "variable"
    ],
    "CMAKE_CXX_ARCHIVE_CREATE": [
        "Rule variable to create a new static archive.\\nThis is a rule variable that tells CMake how to create a static\\narchive.  It is used in place of ``CMAKE_<LANG>_CREATE_STATIC_LIBRARY``\\non some platforms in order to support large object counts.  See also\\n``CMAKE_<LANG>_ARCHIVE_APPEND`` and\\n",
        "variable"
    ],
    "CMAKE_C_ARCHIVE_FINISH": [
        "Rule variable to finish an existing static archive.\\nThis is a rule variable that tells CMake how to finish a static\\narchive.  It is used in place of ``CMAKE_<LANG>_CREATE_STATIC_LIBRARY``\\non some platforms in order to support large object counts.  See also\\n``CMAKE_<LANG>_ARCHIVE_CREATE`` and\\n",
        "variable"
    ],
    "CMAKE_CXX_ARCHIVE_FINISH": [
        "Rule variable to finish an existing static archive.\\nThis is a rule variable that tells CMake how to finish a static\\narchive.  It is used in place of ``CMAKE_<LANG>_CREATE_STATIC_LIBRARY``\\non some platforms in order to support large object counts.  See also\\n``CMAKE_<LANG>_ARCHIVE_CREATE`` and\\n",
        "variable"
    ],
    "CMAKE_C_CLANG_TIDY": [
        "Default value for ``<LANG>_CLANG_TIDY`` target property\\nwhen ``<LANG>`` is ``C`` or ``CXX``.\\nThis variable is used to initialize the property on each target as it is\\ncreated.  For example:\\n set(CMAKE_CXX_CLANG_TIDY clang-tidy -checks=-*,readability-*)\\n",
        "variable"
    ],
    "CMAKE_CXX_CLANG_TIDY": [
        "Default value for ``<LANG>_CLANG_TIDY`` target property\\nwhen ``<LANG>`` is ``C`` or ``CXX``.\\nThis variable is used to initialize the property on each target as it is\\ncreated.  For example:\\n set(CMAKE_CXX_CLANG_TIDY clang-tidy -checks=-*,readability-*)\\n",
        "variable"
    ],
    "CMAKE_C_COMPILER": [
        "The full path to the compiler for ``LANG``.\\nThis is the command that will be used as the ``<LANG>`` compiler.  Once\\nset, you can not change this variable.\\n",
        "variable"
    ],
    "CMAKE_CXX_COMPILER": [
        "The full path to the compiler for ``LANG``.\\nThis is the command that will be used as the ``<LANG>`` compiler.  Once\\nset, you can not change this variable.\\n",
        "variable"
    ],
    "CMAKE_C_COMPILER_ABI": [
        "An internal variable subject to change.\\nThis is used in determining the compiler ABI and is subject to change.\\n",
        "variable"
    ],
    "CMAKE_CXX_COMPILER_ABI": [
        "An internal variable subject to change.\\nThis is used in determining the compiler ABI and is subject to change.\\n",
        "variable"
    ],
    "CMAKE_C_COMPILER_AR": [
        "A wrapper around ``ar`` adding the appropriate ``--plugin`` option for the\\ncompiler.\\nSee also ``CMAKE_AR``.\\n",
        "variable"
    ],
    "CMAKE_CXX_COMPILER_AR": [
        "A wrapper around ``ar`` adding the appropriate ``--plugin`` option for the\\ncompiler.\\nSee also ``CMAKE_AR``.\\n",
        "variable"
    ],
    "CMAKE_C_COMPILER_ARCHITECTURE_ID": [
        "An internal variable subject to change.\\nThis is used to identify the variant of a compiler based on its target\\narchitecture.  For some compilers this is needed to determine the correct\\nusage.\\n",
        "variable"
    ],
    "CMAKE_CXX_COMPILER_ARCHITECTURE_ID": [
        "An internal variable subject to change.\\nThis is used to identify the variant of a compiler based on its target\\narchitecture.  For some compilers this is needed to determine the correct\\nusage.\\n",
        "variable"
    ],
    "CMAKE_C_COMPILER_EXTERNAL_TOOLCHAIN": [
        "The external toolchain for cross-compiling, if supported.\\nSome compiler toolchains do not ship their own auxiliary utilities such as\\narchivers and linkers.  The compiler driver may support a command-line argument\\nto specify the location of such tools.\\n``CMAKE_<LANG>_COMPILER_EXTERNAL_TOOLCHAIN`` may be set to a path to\\n",
        "variable"
    ],
    "CMAKE_CXX_COMPILER_EXTERNAL_TOOLCHAIN": [
        "The external toolchain for cross-compiling, if supported.\\nSome compiler toolchains do not ship their own auxiliary utilities such as\\narchivers and linkers.  The compiler driver may support a command-line argument\\nto specify the location of such tools.\\n``CMAKE_<LANG>_COMPILER_EXTERNAL_TOOLCHAIN`` may be set to a path to\\n",
        "variable"
    ],
    "CMAKE_C_COMPILER_ID": [
        "Compiler identification string.\\nA short string unique to the compiler vendor.  Possible values\\ninclude:\\n::\\n Absoft = Absoft Fortran (absoft.com)\\n",
        "variable"
    ],
    "CMAKE_CXX_COMPILER_ID": [
        "Compiler identification string.\\nA short string unique to the compiler vendor.  Possible values\\ninclude:\\n::\\n Absoft = Absoft Fortran (absoft.com)\\n",
        "variable"
    ],
    "CMAKE_C_COMPILER_LAUNCHER": [
        "Default value for ``<LANG>_COMPILER_LAUNCHER`` target property.\\nThis variable is used to initialize the property on each target as it is\\ncreated.  This is done only when ``<LANG>`` is ``C``, ``CXX``, ``Fortran``,\\n``OBJC``, ``OBJCXX``, or ``CUDA``.\\n",
        "variable"
    ],
    "CMAKE_CXX_COMPILER_LAUNCHER": [
        "Default value for ``<LANG>_COMPILER_LAUNCHER`` target property.\\nThis variable is used to initialize the property on each target as it is\\ncreated.  This is done only when ``<LANG>`` is ``C``, ``CXX``, ``Fortran``,\\n``OBJC``, ``OBJCXX``, or ``CUDA``.\\n",
        "variable"
    ],
    "CMAKE_C_COMPILER_LOADED": [
        "Defined to true if the language is enabled.\\nWhen language ``<LANG>`` is enabled by ``project()`` or\\n``enable_language()`` this variable is defined to ``1``.\\n",
        "variable"
    ],
    "CMAKE_CXX_COMPILER_LOADED": [
        "Defined to true if the language is enabled.\\nWhen language ``<LANG>`` is enabled by ``project()`` or\\n``enable_language()`` this variable is defined to ``1``.\\n",
        "variable"
    ],
    "CMAKE_C_COMPILER_PREDEFINES_COMMAND": [
        "Command that outputs the compiler pre definitions.\\nSee ``AUTOMOC`` which uses\\n``CMAKE_CXX_COMPILER_PREDEFINES_COMMAND``\\nto generate the ``AUTOMOC_COMPILER_PREDEFINES``.\\n",
        "variable"
    ],
    "CMAKE_CXX_COMPILER_PREDEFINES_COMMAND": [
        "Command that outputs the compiler pre definitions.\\nSee ``AUTOMOC`` which uses\\n``CMAKE_CXX_COMPILER_PREDEFINES_COMMAND``\\nto generate the ``AUTOMOC_COMPILER_PREDEFINES``.\\n",
        "variable"
    ],
    "CMAKE_C_COMPILER_RANLIB": [
        "A wrapper around ``ranlib`` adding the appropriate ``--plugin`` option for the\\ncompiler.\\nSee also ``CMAKE_RANLIB``.\\n",
        "variable"
    ],
    "CMAKE_CXX_COMPILER_RANLIB": [
        "A wrapper around ``ranlib`` adding the appropriate ``--plugin`` option for the\\ncompiler.\\nSee also ``CMAKE_RANLIB``.\\n",
        "variable"
    ],
    "CMAKE_C_COMPILER_TARGET": [
        "The target for cross-compiling, if supported.\\nSome compiler drivers are inherently cross-compilers, such as clang and\\nQNX qcc. These compiler drivers support a command-line argument to specify\\nthe target to cross-compile for.\\nThis variable may only be set in a toolchain file specified by\\n",
        "variable"
    ],
    "CMAKE_CXX_COMPILER_TARGET": [
        "The target for cross-compiling, if supported.\\nSome compiler drivers are inherently cross-compilers, such as clang and\\nQNX qcc. These compiler drivers support a command-line argument to specify\\nthe target to cross-compile for.\\nThis variable may only be set in a toolchain file specified by\\n",
        "variable"
    ],
    "CMAKE_C_COMPILER_VERSION": [
        "Compiler version string.\\nCompiler version in major[.minor[.patch[.tweak]]] format.  This\\nvariable is not guaranteed to be defined for all compilers or\\nlanguages.\\nFor example ``CMAKE_C_COMPILER_VERSION`` and\\n",
        "variable"
    ],
    "CMAKE_CXX_COMPILER_VERSION": [
        "Compiler version string.\\nCompiler version in major[.minor[.patch[.tweak]]] format.  This\\nvariable is not guaranteed to be defined for all compilers or\\nlanguages.\\nFor example ``CMAKE_C_COMPILER_VERSION`` and\\n",
        "variable"
    ],
    "CMAKE_C_COMPILER_VERSION_INTERNAL": [
        "An internal variable subject to change.\\nThis is used to identify the variant of a compiler based on an internal\\nversion number.  For some compilers this is needed to determine the\\ncorrect usage.\\n",
        "variable"
    ],
    "CMAKE_CXX_COMPILER_VERSION_INTERNAL": [
        "An internal variable subject to change.\\nThis is used to identify the variant of a compiler based on an internal\\nversion number.  For some compilers this is needed to determine the\\ncorrect usage.\\n",
        "variable"
    ],
    "CMAKE_C_COMPILE_OBJECT": [
        "Rule variable to compile a single object file.\\nThis is a rule variable that tells CMake how to compile a single\\nobject file for the language ``<LANG>``.\\n",
        "variable"
    ],
    "CMAKE_CXX_COMPILE_OBJECT": [
        "Rule variable to compile a single object file.\\nThis is a rule variable that tells CMake how to compile a single\\nobject file for the language ``<LANG>``.\\n",
        "variable"
    ],
    "CMAKE_C_CPPCHECK": [
        "Default value for ``<LANG>_CPPCHECK`` target property. This variable\\nis used to initialize the property on each target as it is created.  This\\nis done only when ``<LANG>`` is ``C`` or ``CXX``.\\n",
        "variable"
    ],
    "CMAKE_CXX_CPPCHECK": [
        "Default value for ``<LANG>_CPPCHECK`` target property. This variable\\nis used to initialize the property on each target as it is created.  This\\nis done only when ``<LANG>`` is ``C`` or ``CXX``.\\n",
        "variable"
    ],
    "CMAKE_C_CPPLINT": [
        "Default value for ``<LANG>_CPPLINT`` target property. This variable\\nis used to initialize the property on each target as it is created.  This\\nis done only when ``<LANG>`` is ``C`` or ``CXX``.\\n",
        "variable"
    ],
    "CMAKE_CXX_CPPLINT": [
        "Default value for ``<LANG>_CPPLINT`` target property. This variable\\nis used to initialize the property on each target as it is created.  This\\nis done only when ``<LANG>`` is ``C`` or ``CXX``.\\n",
        "variable"
    ],
    "CMAKE_C_CREATE_SHARED_LIBRARY": [
        "Rule variable to create a shared library.\\nThis is a rule variable that tells CMake how to create a shared\\nlibrary for the language ``<LANG>``.  This rule variable is a ``;`` delimited\\nlist of commands to run to perform the linking step.\\n",
        "variable"
    ],
    "CMAKE_CXX_CREATE_SHARED_LIBRARY": [
        "Rule variable to create a shared library.\\nThis is a rule variable that tells CMake how to create a shared\\nlibrary for the language ``<LANG>``.  This rule variable is a ``;`` delimited\\nlist of commands to run to perform the linking step.\\n",
        "variable"
    ],
    "CMAKE_C_CREATE_SHARED_MODULE": [
        "Rule variable to create a shared module.\\nThis is a rule variable that tells CMake how to create a shared\\nlibrary for the language ``<LANG>``.  This rule variable is a ``;`` delimited\\nlist of commands to run.\\n",
        "variable"
    ],
    "CMAKE_CXX_CREATE_SHARED_MODULE": [
        "Rule variable to create a shared module.\\nThis is a rule variable that tells CMake how to create a shared\\nlibrary for the language ``<LANG>``.  This rule variable is a ``;`` delimited\\nlist of commands to run.\\n",
        "variable"
    ],
    "CMAKE_C_CREATE_STATIC_LIBRARY": [
        "Rule variable to create a static library.\\nThis is a rule variable that tells CMake how to create a static\\nlibrary for the language ``<LANG>``.\\n",
        "variable"
    ],
    "CMAKE_CXX_CREATE_STATIC_LIBRARY": [
        "Rule variable to create a static library.\\nThis is a rule variable that tells CMake how to create a static\\nlibrary for the language ``<LANG>``.\\n",
        "variable"
    ],
    "CMAKE_C_FLAGS": [
        "Flags for all build types.\\n``<LANG>`` flags used regardless of the value of ``CMAKE_BUILD_TYPE``.\\nThis is initialized for each language from environment variables:\\n* ``CMAKE_C_FLAGS``:\\n  Initialized by the ``CFLAGS`` environment variable.\\n",
        "variable"
    ],
    "CMAKE_CXX_FLAGS": [
        "Flags for all build types.\\n``<LANG>`` flags used regardless of the value of ``CMAKE_BUILD_TYPE``.\\nThis is initialized for each language from environment variables:\\n* ``CMAKE_C_FLAGS``:\\n  Initialized by the ``CFLAGS`` environment variable.\\n",
        "variable"
    ],
    "CMAKE_C_FLAGS_DEBUG": [
        "This variable is the ``Debug`` variant of the\\n``CMAKE_<LANG>_FLAGS_<CONFIG>`` variable.\\n",
        "variable"
    ],
    "CMAKE_CXX_FLAGS_DEBUG": [
        "This variable is the ``Debug`` variant of the\\n``CMAKE_<LANG>_FLAGS_<CONFIG>`` variable.\\n",
        "variable"
    ],
    "CMAKE_C_FLAGS_RELEASE": [
        "This variable is the ``Release`` variant of the\\n``CMAKE_<LANG>_FLAGS_<CONFIG>`` variable.\\n",
        "variable"
    ],
    "CMAKE_CXX_FLAGS_RELEASE": [
        "This variable is the ``Release`` variant of the\\n``CMAKE_<LANG>_FLAGS_<CONFIG>`` variable.\\n",
        "variable"
    ],
    "CMAKE_C_FLAGS_DEBUG_INIT": [
        "This variable is the ``Debug`` variant of the\\n``CMAKE_<LANG>_FLAGS_<CONFIG>_INIT`` variable.\\n",
        "variable"
    ],
    "CMAKE_CXX_FLAGS_DEBUG_INIT": [
        "This variable is the ``Debug`` variant of the\\n``CMAKE_<LANG>_FLAGS_<CONFIG>_INIT`` variable.\\n",
        "variable"
    ],
    "CMAKE_C_FLAGS_RELEASE_INIT": [
        "This variable is the ``Release`` variant of the\\n``CMAKE_<LANG>_FLAGS_<CONFIG>_INIT`` variable.\\n",
        "variable"
    ],
    "CMAKE_CXX_FLAGS_RELEASE_INIT": [
        "This variable is the ``Release`` variant of the\\n``CMAKE_<LANG>_FLAGS_<CONFIG>_INIT`` variable.\\n",
        "variable"
    ],
    "CMAKE_C_FLAGS_INIT": [
        "Value used to initialize the ``CMAKE_<LANG>_FLAGS`` cache entry\\nthe first time a build tree is configured for language ``<LANG>``.\\nThis variable is meant to be set by a :variable:`toolchain file\\n<CMAKE_TOOLCHAIN_FILE>`.  CMake may prepend or append content to\\nthe value based on the environment and target platform.\\n",
        "variable"
    ],
    "CMAKE_CXX_FLAGS_INIT": [
        "Value used to initialize the ``CMAKE_<LANG>_FLAGS`` cache entry\\nthe first time a build tree is configured for language ``<LANG>``.\\nThis variable is meant to be set by a :variable:`toolchain file\\n<CMAKE_TOOLCHAIN_FILE>`.  CMake may prepend or append content to\\nthe value based on the environment and target platform.\\n",
        "variable"
    ],
    "CMAKE_C_FLAGS_MINSIZEREL": [
        "This variable is the ``MinSizeRel`` variant of the\\n``CMAKE_<LANG>_FLAGS_<CONFIG>`` variable.\\n",
        "variable"
    ],
    "CMAKE_CXX_FLAGS_MINSIZEREL": [
        "This variable is the ``MinSizeRel`` variant of the\\n``CMAKE_<LANG>_FLAGS_<CONFIG>`` variable.\\n",
        "variable"
    ],
    "CMAKE_C_FLAGS_MINSIZEREL_INIT": [
        "This variable is the ``MinSizeRel`` variant of the\\n``CMAKE_<LANG>_FLAGS_<CONFIG>_INIT`` variable.\\n",
        "variable"
    ],
    "CMAKE_CXX_FLAGS_MINSIZEREL_INIT": [
        "This variable is the ``MinSizeRel`` variant of the\\n``CMAKE_<LANG>_FLAGS_<CONFIG>_INIT`` variable.\\n",
        "variable"
    ],
    "CMAKE_C_FLAGS_RELWITHDEBINFO": [
        "This variable is the ``RelWithDebInfo`` variant of the\\n``CMAKE_<LANG>_FLAGS_<CONFIG>`` variable.\\n",
        "variable"
    ],
    "CMAKE_CXX_FLAGS_RELWITHDEBINFO": [
        "This variable is the ``RelWithDebInfo`` variant of the\\n``CMAKE_<LANG>_FLAGS_<CONFIG>`` variable.\\n",
        "variable"
    ],
    "CMAKE_C_FLAGS_RELWITHDEBINFO_INIT": [
        "This variable is the ``RelWithDebInfo`` variant of the\\n``CMAKE_<LANG>_FLAGS_<CONFIG>_INIT`` variable.\\n",
        "variable"
    ],
    "CMAKE_CXX_FLAGS_RELWITHDEBINFO_INIT": [
        "This variable is the ``RelWithDebInfo`` variant of the\\n``CMAKE_<LANG>_FLAGS_<CONFIG>_INIT`` variable.\\n",
        "variable"
    ],
    "CMAKE_C_IGNORE_EXTENSIONS": [
        "File extensions that should be ignored by the build.\\nThis is a list of file extensions that may be part of a project for a\\ngiven language but are not compiled.\\n",
        "variable"
    ],
    "CMAKE_CXX_IGNORE_EXTENSIONS": [
        "File extensions that should be ignored by the build.\\nThis is a list of file extensions that may be part of a project for a\\ngiven language but are not compiled.\\n",
        "variable"
    ],
    "CMAKE_C_IMPLICIT_INCLUDE_DIRECTORIES": [
        "Directories implicitly searched by the compiler for header files.\\nCMake does not explicitly specify these directories on compiler\\ncommand lines for language ``<LANG>``.  This prevents system include\\ndirectories from being treated as user include directories on some\\ncompilers, which is important for ``C``, ``CXX``, and ``CUDA`` to\\n",
        "variable"
    ],
    "CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES": [
        "Directories implicitly searched by the compiler for header files.\\nCMake does not explicitly specify these directories on compiler\\ncommand lines for language ``<LANG>``.  This prevents system include\\ndirectories from being treated as user include directories on some\\ncompilers, which is important for ``C``, ``CXX``, and ``CUDA`` to\\n",
        "variable"
    ],
    "CMAKE_C_IMPLICIT_LINK_DIRECTORIES": [
        "Implicit linker search path detected for language ``<LANG>``.\\nCompilers typically pass directories containing language runtime\\nlibraries and default library search paths when they invoke a linker.\\nThese paths are implicit linker search directories for the compiler's\\nlanguage.  CMake automatically detects these directories for each\\n",
        "variable"
    ],
    "CMAKE_CXX_IMPLICIT_LINK_DIRECTORIES": [
        "Implicit linker search path detected for language ``<LANG>``.\\nCompilers typically pass directories containing language runtime\\nlibraries and default library search paths when they invoke a linker.\\nThese paths are implicit linker search directories for the compiler's\\nlanguage.  CMake automatically detects these directories for each\\n",
        "variable"
    ],
    "CMAKE_C_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES": [
        "Implicit linker framework search path detected for language ``<LANG>``.\\nThese paths are implicit linker framework search directories for the\\ncompiler's language.  CMake automatically detects these directories\\nfor each language and reports the results in this variable.\\n",
        "variable"
    ],
    "CMAKE_CXX_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES": [
        "Implicit linker framework search path detected for language ``<LANG>``.\\nThese paths are implicit linker framework search directories for the\\ncompiler's language.  CMake automatically detects these directories\\nfor each language and reports the results in this variable.\\n",
        "variable"
    ],
    "CMAKE_C_IMPLICIT_LINK_LIBRARIES": [
        "Implicit link libraries and flags detected for language ``<LANG>``.\\nCompilers typically pass language runtime library names and other\\nflags when they invoke a linker.  These flags are implicit link\\noptions for the compiler's language.  CMake automatically detects\\nthese libraries and flags for each language and reports the results in\\n",
        "variable"
    ],
    "CMAKE_CXX_IMPLICIT_LINK_LIBRARIES": [
        "Implicit link libraries and flags detected for language ``<LANG>``.\\nCompilers typically pass language runtime library names and other\\nflags when they invoke a linker.  These flags are implicit link\\noptions for the compiler's language.  CMake automatically detects\\nthese libraries and flags for each language and reports the results in\\n",
        "variable"
    ],
    "CMAKE_C_INCLUDE_WHAT_YOU_USE": [
        "Default value for ``<LANG>_INCLUDE_WHAT_YOU_USE`` target property.\\nThis variable is used to initialize the property on each target as it is\\ncreated.  This is done only when ``<LANG>`` is ``C`` or ``CXX``.\\n",
        "variable"
    ],
    "CMAKE_CXX_INCLUDE_WHAT_YOU_USE": [
        "Default value for ``<LANG>_INCLUDE_WHAT_YOU_USE`` target property.\\nThis variable is used to initialize the property on each target as it is\\ncreated.  This is done only when ``<LANG>`` is ``C`` or ``CXX``.\\n",
        "variable"
    ],
    "CMAKE_C_LIBRARY_ARCHITECTURE": [
        "Target architecture library directory name detected for ``<LANG>``.\\nIf the ``<LANG>`` compiler passes to the linker an architecture-specific\\nsystem library search directory such as ``<prefix>/lib/<arch>`` this\\nvariable contains the ``<arch>`` name if/as detected by CMake.\\n",
        "variable"
    ],
    "CMAKE_CXX_LIBRARY_ARCHITECTURE": [
        "Target architecture library directory name detected for ``<LANG>``.\\nIf the ``<LANG>`` compiler passes to the linker an architecture-specific\\nsystem library search directory such as ``<prefix>/lib/<arch>`` this\\nvariable contains the ``<arch>`` name if/as detected by CMake.\\n",
        "variable"
    ],
    "CMAKE_C_LINKER_PREFERENCE": [
        "Preference value for linker language selection.\\nThe \\\"linker language\\\" for executable, shared library, and module\\ntargets is the language whose compiler will invoke the linker.  The\\n``LINKER_LANGUAGE`` target property sets the language explicitly.\\nOtherwise, the linker language is that whose linker preference value\\n",
        "variable"
    ],
    "CMAKE_CXX_LINKER_PREFERENCE": [
        "Preference value for linker language selection.\\nThe \\\"linker language\\\" for executable, shared library, and module\\ntargets is the language whose compiler will invoke the linker.  The\\n``LINKER_LANGUAGE`` target property sets the language explicitly.\\nOtherwise, the linker language is that whose linker preference value\\n",
        "variable"
    ],
    "CMAKE_C_LINKER_PREFERENCE_PROPAGATES": [
        "True if ``CMAKE_<LANG>_LINKER_PREFERENCE`` propagates across targets.\\nThis is used when CMake selects a linker language for a target.\\nLanguages compiled directly into the target are always considered.  A\\nlanguage compiled into static libraries linked by the target is\\nconsidered if this variable is true.\\n",
        "variable"
    ],
    "CMAKE_CXX_LINKER_PREFERENCE_PROPAGATES": [
        "True if ``CMAKE_<LANG>_LINKER_PREFERENCE`` propagates across targets.\\nThis is used when CMake selects a linker language for a target.\\nLanguages compiled directly into the target are always considered.  A\\nlanguage compiled into static libraries linked by the target is\\nconsidered if this variable is true.\\n",
        "variable"
    ],
    "CMAKE_C_LINKER_WRAPPER_FLAG": [
        "Defines the syntax of compiler driver option to pass options to the linker\\ntool. It will be used to translate the ``LINKER:`` prefix in the link options\\n(see ``add_link_options()`` and ``target_link_options()``).\\nThis variable holds a :ref:`semicolon-separated list <CMake Language Lists>` of tokens.\\nIf a space (i.e. \\\" \\\") is specified as last token, flag and ``LINKER:``\\n",
        "variable"
    ],
    "CMAKE_CXX_LINKER_WRAPPER_FLAG": [
        "Defines the syntax of compiler driver option to pass options to the linker\\ntool. It will be used to translate the ``LINKER:`` prefix in the link options\\n(see ``add_link_options()`` and ``target_link_options()``).\\nThis variable holds a :ref:`semicolon-separated list <CMake Language Lists>` of tokens.\\nIf a space (i.e. \\\" \\\") is specified as last token, flag and ``LINKER:``\\n",
        "variable"
    ],
    "CMAKE_C_LINKER_WRAPPER_FLAG_SEP": [
        "This variable is used with ``CMAKE_<LANG>_LINKER_WRAPPER_FLAG``\\nvariable to format ``LINKER:`` prefix in the link options\\n(see ``add_link_options()`` and ``target_link_options()``).\\nWhen specified, arguments of the ``LINKER:`` prefix will be concatenated using\\nthis value as separator.\\n",
        "variable"
    ],
    "CMAKE_CXX_LINKER_WRAPPER_FLAG_SEP": [
        "This variable is used with ``CMAKE_<LANG>_LINKER_WRAPPER_FLAG``\\nvariable to format ``LINKER:`` prefix in the link options\\n(see ``add_link_options()`` and ``target_link_options()``).\\nWhen specified, arguments of the ``LINKER:`` prefix will be concatenated using\\nthis value as separator.\\n",
        "variable"
    ],
    "CMAKE_C_LINK_EXECUTABLE": [
        "Rule variable to link an executable.\\nRule variable to link an executable for the given language.\\n",
        "variable"
    ],
    "CMAKE_CXX_LINK_EXECUTABLE": [
        "Rule variable to link an executable.\\nRule variable to link an executable for the given language.\\n",
        "variable"
    ],
    "CMAKE_C_LINK_LIBRARY_FILE_FLAG": [
        "Language-specific flag to be used to link a library specified by\\na path to its file.\\nThe flag will be used before a library file path is given to the\\nlinker.  This is needed only on very few platforms.\\n",
        "variable"
    ],
    "CMAKE_CXX_LINK_LIBRARY_FILE_FLAG": [
        "Language-specific flag to be used to link a library specified by\\na path to its file.\\nThe flag will be used before a library file path is given to the\\nlinker.  This is needed only on very few platforms.\\n",
        "variable"
    ],
    "CMAKE_C_LINK_LIBRARY_FLAG": [
        "Flag to be used to link a library into a shared library or executable.\\nThis flag will be used to specify a library to link to a shared library or an\\nexecutable for the specific language.  On most compilers this is ``-l``.\\n",
        "variable"
    ],
    "CMAKE_CXX_LINK_LIBRARY_FLAG": [
        "Flag to be used to link a library into a shared library or executable.\\nThis flag will be used to specify a library to link to a shared library or an\\nexecutable for the specific language.  On most compilers this is ``-l``.\\n",
        "variable"
    ],
    "CMAKE_C_LINK_LIBRARY_SUFFIX": [
        "Language-specific suffix for libraries that you link to.\\nThe suffix to use for the end of a library filename, ``.lib`` on Windows.\\n",
        "variable"
    ],
    "CMAKE_CXX_LINK_LIBRARY_SUFFIX": [
        "Language-specific suffix for libraries that you link to.\\nThe suffix to use for the end of a library filename, ``.lib`` on Windows.\\n",
        "variable"
    ],
    "CMAKE_C_OUTPUT_EXTENSION": [
        "Extension for the output of a compile for a single file.\\nThis is the extension for an object file for the given ``<LANG>``.  For\\nexample ``.obj`` for C on Windows.\\n",
        "variable"
    ],
    "CMAKE_CXX_OUTPUT_EXTENSION": [
        "Extension for the output of a compile for a single file.\\nThis is the extension for an object file for the given ``<LANG>``.  For\\nexample ``.obj`` for C on Windows.\\n",
        "variable"
    ],
    "CMAKE_C_PLATFORM_ID": [
        "An internal variable subject to change.\\nThis is used in determining the platform and is subject to change.\\n",
        "variable"
    ],
    "CMAKE_CXX_PLATFORM_ID": [
        "An internal variable subject to change.\\nThis is used in determining the platform and is subject to change.\\n",
        "variable"
    ],
    "CMAKE_C_SIMULATE_ID": [
        "Identification string of \\\"simulated\\\" compiler.\\nSome compilers simulate other compilers to serve as drop-in\\nreplacements.  When CMake detects such a compiler it sets this\\nvariable to what would have been the ``CMAKE_<LANG>_COMPILER_ID`` for\\nthe simulated compiler.\\n",
        "variable"
    ],
    "CMAKE_CXX_SIMULATE_ID": [
        "Identification string of \\\"simulated\\\" compiler.\\nSome compilers simulate other compilers to serve as drop-in\\nreplacements.  When CMake detects such a compiler it sets this\\nvariable to what would have been the ``CMAKE_<LANG>_COMPILER_ID`` for\\nthe simulated compiler.\\n",
        "variable"
    ],
    "CMAKE_C_SIMULATE_VERSION": [
        "Version string of \\\"simulated\\\" compiler.\\nSome compilers simulate other compilers to serve as drop-in\\nreplacements.  When CMake detects such a compiler it sets this\\nvariable to what would have been the ``CMAKE_<LANG>_COMPILER_VERSION``\\nfor the simulated compiler.\\n",
        "variable"
    ],
    "CMAKE_CXX_SIMULATE_VERSION": [
        "Version string of \\\"simulated\\\" compiler.\\nSome compilers simulate other compilers to serve as drop-in\\nreplacements.  When CMake detects such a compiler it sets this\\nvariable to what would have been the ``CMAKE_<LANG>_COMPILER_VERSION``\\nfor the simulated compiler.\\n",
        "variable"
    ],
    "CMAKE_C_SIZEOF_DATA_PTR": [
        "Size of pointer-to-data types for language ``<LANG>``.\\nThis holds the size (in bytes) of pointer-to-data types in the target\\nplatform ABI.  It is defined for languages ``C`` and ``CXX`` (C++).\\n",
        "variable"
    ],
    "CMAKE_CXX_SIZEOF_DATA_PTR": [
        "Size of pointer-to-data types for language ``<LANG>``.\\nThis holds the size (in bytes) of pointer-to-data types in the target\\nplatform ABI.  It is defined for languages ``C`` and ``CXX`` (C++).\\n",
        "variable"
    ],
    "CMAKE_C_SOURCE_FILE_EXTENSIONS": [
        "Extensions of source files for the given language.\\nThis is the list of extensions for a given language's source files.\\n",
        "variable"
    ],
    "CMAKE_CXX_SOURCE_FILE_EXTENSIONS": [
        "Extensions of source files for the given language.\\nThis is the list of extensions for a given language's source files.\\n",
        "variable"
    ],
    "CMAKE_C_STANDARD_INCLUDE_DIRECTORIES": [
        "Include directories to be used for every source file compiled with\\nthe ``<LANG>`` compiler.  This is meant for specification of system\\ninclude directories needed by the language for the current platform.\\nThe directories always appear at the end of the include path passed\\nto the compiler.\\n",
        "variable"
    ],
    "CMAKE_CXX_STANDARD_INCLUDE_DIRECTORIES": [
        "Include directories to be used for every source file compiled with\\nthe ``<LANG>`` compiler.  This is meant for specification of system\\ninclude directories needed by the language for the current platform.\\nThe directories always appear at the end of the include path passed\\nto the compiler.\\n",
        "variable"
    ],
    "CMAKE_C_STANDARD_LIBRARIES": [
        "Libraries linked into every executable and shared library linked\\nfor language ``<LANG>``.  This is meant for specification of system\\nlibraries needed by the language for the current platform.\\nThis variable should not be set by project code.  It is meant to be set by\\nCMake's platform information modules for the current toolchain, or by a\\n",
        "variable"
    ],
    "CMAKE_CXX_STANDARD_LIBRARIES": [
        "Libraries linked into every executable and shared library linked\\nfor language ``<LANG>``.  This is meant for specification of system\\nlibraries needed by the language for the current platform.\\nThis variable should not be set by project code.  It is meant to be set by\\nCMake's platform information modules for the current toolchain, or by a\\n",
        "variable"
    ],
    "CMAKE_C_VISIBILITY_PRESET": [
        "Default value for the ``<LANG>_VISIBILITY_PRESET`` target\\nproperty when a target is created.\\n",
        "variable"
    ],
    "CMAKE_CXX_VISIBILITY_PRESET": [
        "Default value for the ``<LANG>_VISIBILITY_PRESET`` target\\nproperty when a target is created.\\n",
        "variable"
    ],
    "CMAKE_ABSOLUTE_DESTINATION_FILES": [
        "List of files which have been installed using an ``ABSOLUTE DESTINATION`` path.\\nThis variable is defined by CMake-generated ``cmake_install.cmake``\\nscripts.  It can be used (read-only) by programs or scripts that\\nsource those install scripts.  This is used by some CPack generators\\n(e.g.  RPM).\\n",
        "variable"
    ],
    "CMAKE_ANDROID_ANT_ADDITIONAL_OPTIONS": [
        "Default value for the ``ANDROID_ANT_ADDITIONAL_OPTIONS`` target property.\\nSee that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_ANDROID_API": [
        "When :ref:`Cross Compiling for Android with NVIDIA Nsight Tegra Visual Studio\\nEdition`, this variable may be set to specify the default value for the\\n``ANDROID_API`` target property.  See that target property for\\nadditional information.\\nOtherwise, when :ref:`Cross Compiling for Android`, this variable provides\\n",
        "variable"
    ],
    "CMAKE_ANDROID_API_MIN": [
        "Default value for the ``ANDROID_API_MIN`` target property.\\nSee that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_ANDROID_ARCH": [
        "When :ref:`Cross Compiling for Android with NVIDIA Nsight Tegra Visual Studio\\nEdition`, this variable may be set to specify the default value for the\\n``ANDROID_ARCH`` target property.  See that target property for\\nadditional information.\\nOtherwise, when :ref:`Cross Compiling for Android`, this variable provides\\n",
        "variable"
    ],
    "CMAKE_ANDROID_ARCH_ABI": [
        "When :ref:`Cross Compiling for Android`, this variable specifies the\\ntarget architecture and ABI to be used.  Valid values are:\\n* ``arm64-v8a``\\n* ``armeabi-v7a``\\n* ``armeabi-v6``\\n",
        "variable"
    ],
    "CMAKE_ANDROID_ARM_MODE": [
        "When :ref:`Cross Compiling for Android` and ``CMAKE_ANDROID_ARCH_ABI``\\nis set to one of the ``armeabi`` architectures, set ``CMAKE_ANDROID_ARM_MODE``\\nto ``ON`` to target 32-bit ARM processors (``-marm``).  Otherwise, the\\ndefault is to target the 16-bit Thumb processors (``-mthumb``).\\n",
        "variable"
    ],
    "CMAKE_ANDROID_ARM_NEON": [
        "When :ref:`Cross Compiling for Android` and ``CMAKE_ANDROID_ARCH_ABI``\\nis set to ``armeabi-v7a`` set ``CMAKE_ANDROID_ARM_NEON`` to ``ON`` to target\\nARM NEON devices.\\n",
        "variable"
    ],
    "CMAKE_ANDROID_ASSETS_DIRECTORIES": [
        "Default value for the ``ANDROID_ASSETS_DIRECTORIES`` target property.\\nSee that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_ANDROID_GUI": [
        "Default value for the ``ANDROID_GUI`` target property of\\nexecutables.  See that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_ANDROID_JAR_DEPENDENCIES": [
        "Default value for the ``ANDROID_JAR_DEPENDENCIES`` target property.\\nSee that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_ANDROID_JAR_DIRECTORIES": [
        "Default value for the ``ANDROID_JAR_DIRECTORIES`` target property.\\nSee that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_ANDROID_JAVA_SOURCE_DIR": [
        "Default value for the ``ANDROID_JAVA_SOURCE_DIR`` target property.\\nSee that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_ANDROID_NATIVE_LIB_DEPENDENCIES": [
        "Default value for the ``ANDROID_NATIVE_LIB_DEPENDENCIES`` target\\nproperty.  See that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_ANDROID_NATIVE_LIB_DIRECTORIES": [
        "Default value for the ``ANDROID_NATIVE_LIB_DIRECTORIES`` target\\nproperty.  See that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_ANDROID_NDK": [
        "When :ref:`Cross Compiling for Android with the NDK`, this variable holds\\nthe absolute path to the root directory of the NDK.  The directory must\\ncontain a ``platforms`` subdirectory holding the ``android-<api>``\\ndirectories.\\n",
        "variable"
    ],
    "CMAKE_ANDROID_NDK_DEPRECATED_HEADERS": [
        "When :ref:`Cross Compiling for Android with the NDK`, this variable\\nmay be set to specify whether to use the deprecated per-api-level\\nheaders instead of the unified headers.\\nIf not specified, the default will be *false* if using a NDK version\\nthat provides the unified headers and *true* otherwise.\\n",
        "variable"
    ],
    "CMAKE_ANDROID_NDK_TOOLCHAIN_HOST_TAG": [
        "When :ref:`Cross Compiling for Android with the NDK`, this variable\\nprovides the NDK's \\\"host tag\\\" used to construct the path to prebuilt\\ntoolchains that run on the host.\\n",
        "variable"
    ],
    "CMAKE_ANDROID_NDK_TOOLCHAIN_VERSION": [
        "When :ref:`Cross Compiling for Android with the NDK`, this variable\\nmay be set to specify the version of the toolchain to be used\\nas the compiler.\\nOn NDK r19 or above, this variable must be unset or set to ``clang``.\\nOn NDK r18 or below, this variable must be set to one of these forms:\\n",
        "variable"
    ],
    "CMAKE_ANDROID_PROCESS_MAX": [
        "Default value for the ``ANDROID_PROCESS_MAX`` target property.\\nSee that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_ANDROID_PROGUARD": [
        "Default value for the ``ANDROID_PROGUARD`` target property.\\nSee that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_ANDROID_PROGUARD_CONFIG_PATH": [
        "Default value for the ``ANDROID_PROGUARD_CONFIG_PATH`` target property.\\nSee that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_ANDROID_SECURE_PROPS_PATH": [
        "Default value for the ``ANDROID_SECURE_PROPS_PATH`` target property.\\nSee that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_ANDROID_SKIP_ANT_STEP": [
        "Default value for the ``ANDROID_SKIP_ANT_STEP`` target property.\\nSee that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_ANDROID_STANDALONE_TOOLCHAIN": [
        "When :ref:`Cross Compiling for Android with a Standalone Toolchain`, this\\nvariable holds the absolute path to the root directory of the toolchain.\\nThe specified directory must contain a ``sysroot`` subdirectory.\\n",
        "variable"
    ],
    "CMAKE_ANDROID_STL_TYPE": [
        "When :ref:`Cross Compiling for Android with NVIDIA Nsight Tegra Visual Studio\\nEdition`, this variable may be set to specify the default value for the\\n``ANDROID_STL_TYPE`` target property.  See that target property\\nfor additional information.\\nWhen :ref:`Cross Compiling for Android with the NDK`, this variable may be\\n",
        "variable"
    ],
    "CMAKE_APPBUNDLE_PATH": [
        ":ref:`Semicolon-separated list <CMake Language Lists>` of directories specifying a search path\\nfor macOS application bundles used by the ``find_program()``, and\\n``find_package()`` commands.\\n",
        "variable"
    ],
    "CMAKE_AR": [
        "Name of archiving tool for static libraries.\\nThis specifies the name of the program that creates archive or static\\nlibraries.\\n",
        "variable"
    ],
    "CMAKE_ARCHIVE_OUTPUT_DIRECTORY": [
        "Where to put all the :ref:`ARCHIVE <Archive Output Artifacts>`\\ntarget files when built.\\nThis variable is used to initialize the ``ARCHIVE_OUTPUT_DIRECTORY``\\nproperty on all the targets.  See that target property for additional\\ninformation.\\n",
        "variable"
    ],
    "CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG": [
        "Where to put all the :ref:`ARCHIVE <Archive Output Artifacts>`\\ntarget files when built for a specific configuration.\\nThis variable is used to initialize the\\n``ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>`` property on all the targets.\\nSee that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE": [
        "Where to put all the :ref:`ARCHIVE <Archive Output Artifacts>`\\ntarget files when built for a specific configuration.\\nThis variable is used to initialize the\\n``ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>`` property on all the targets.\\nSee that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_ARGC": [
        "Number of command line arguments passed to CMake in script mode.\\nWhen run in :ref:`-P <Script Processing Mode>` script mode, CMake sets this\\nvariable to the number of command line arguments.  See also\\n``CMAKE_ARGV0``, ``1``, ``2`` ...\\n",
        "variable"
    ],
    "CMAKE_ARGV0": [
        "Command line argument passed to CMake in script mode.\\nWhen run in :ref:`-P <Script Processing Mode>` script mode, CMake sets this\\nvariable to the first command line argument.  It then also sets ``CMAKE_ARGV1``,\\n``CMAKE_ARGV2``, ... and so on, up to the number of command line arguments\\ngiven.  See also ``CMAKE_ARGC``.\\n",
        "variable"
    ],
    "CMAKE_AUTOGEN_ORIGIN_DEPENDS": [
        "Switch for forwarding origin target dependencies to the corresponding\\n``_autogen`` targets.\\nThis variable is used to initialize the ``AUTOGEN_ORIGIN_DEPENDS``\\nproperty on all the targets.  See that target property for additional\\ninformation.\\n",
        "variable"
    ],
    "CMAKE_AUTOGEN_PARALLEL": [
        "Number of parallel ``moc`` or ``uic`` processes to start when using\\n``AUTOMOC`` and ``AUTOUIC``.\\nThis variable is used to initialize the ``AUTOGEN_PARALLEL`` property\\non all the targets.  See that target property for additional information.\\nBy default ``CMAKE_AUTOGEN_PARALLEL`` is unset.\\n",
        "variable"
    ],
    "CMAKE_AUTOGEN_VERBOSE": [
        "Sets the verbosity of ``AUTOMOC``, ``AUTOUIC`` and\\n``AUTORCC``.  A positive integer value or a true boolean value\\nlets the ``AUTO*`` generators output additional processing information.\\nSetting ``CMAKE_AUTOGEN_VERBOSE`` has the same effect\\nas setting the ``VERBOSE`` environment variable during\\n",
        "variable"
    ],
    "CMAKE_AUTOMOC": [
        "Whether to handle ``moc`` automatically for Qt targets.\\nThis variable is used to initialize the ``AUTOMOC`` property on all the\\ntargets.  See that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_AUTOMOC_COMPILER_PREDEFINES": [
        "This variable is used to initialize the ``AUTOMOC_COMPILER_PREDEFINES``\\nproperty on all the targets. See that target property for additional\\ninformation.\\nBy default it is ON.\\n",
        "variable"
    ],
    "CMAKE_AUTOMOC_DEPEND_FILTERS": [
        "Filter definitions used by ``CMAKE_AUTOMOC``\\nto extract file names from source code as additional dependencies\\nfor the ``moc`` file.\\nThis variable is used to initialize the ``AUTOMOC_DEPEND_FILTERS``\\nproperty on all the targets. See that target property for additional\\n",
        "variable"
    ],
    "CMAKE_AUTOMOC_MACRO_NAMES": [
        ":ref:`Semicolon-separated list <CMake Language Lists>` list of macro names used by\\n``CMAKE_AUTOMOC`` to determine if a C++ file needs to be\\nprocessed by ``moc``.\\nThis variable is used to initialize the ``AUTOMOC_MACRO_NAMES``\\nproperty on all the targets. See that target property for additional\\n",
        "variable"
    ],
    "CMAKE_AUTOMOC_MOC_OPTIONS": [
        "Additional options for ``moc`` when using ``CMAKE_AUTOMOC``.\\nThis variable is used to initialize the ``AUTOMOC_MOC_OPTIONS`` property\\non all the targets.  See that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_AUTOMOC_PATH_PREFIX": [
        "Whether to generate the ``-p`` path prefix option for ``moc`` on\\n``AUTOMOC`` enabled Qt targets.\\nThis variable is used to initialize the ``AUTOMOC_PATH_PREFIX``\\nproperty on all the targets.  See that target property for additional\\ninformation.\\n",
        "variable"
    ],
    "CMAKE_AUTOMOC_RELAXED_MODE": [
        "Switch between strict and relaxed automoc mode.\\nBy default, ``AUTOMOC`` behaves exactly as described in the\\ndocumentation of the ``AUTOMOC`` target property.  When set to\\n``TRUE``, it accepts more input and tries to find the correct input file for\\n``moc`` even if it differs from the documented behaviour.  In this mode it\\n",
        "variable"
    ],
    "CMAKE_AUTORCC": [
        "Whether to handle ``rcc`` automatically for Qt targets.\\nThis variable is used to initialize the ``AUTORCC`` property on all\\nthe targets.  See that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_AUTORCC_OPTIONS": [
        "Additional options for ``rcc`` when using ``CMAKE_AUTORCC``.\\nThis variable is used to initialize the ``AUTORCC_OPTIONS`` property on\\nall the targets.  See that target property for additional information.\\nEXAMPLE\\n^^^^^^^\\n",
        "variable"
    ],
    "CMAKE_AUTOUIC": [
        "Whether to handle ``uic`` automatically for Qt targets.\\nThis variable is used to initialize the ``AUTOUIC`` property on all\\nthe targets.  See that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_AUTOUIC_OPTIONS": [
        "Additional options for ``uic`` when using ``CMAKE_AUTOUIC``.\\nThis variable is used to initialize the ``AUTOUIC_OPTIONS`` property on\\nall the targets.  See that target property for additional information.\\nEXAMPLE\\n^^^^^^^\\n",
        "variable"
    ],
    "CMAKE_AUTOUIC_SEARCH_PATHS": [
        "Search path list used by ``CMAKE_AUTOUIC`` to find included\\n``.ui`` files.\\nThis variable is used to initialize the ``AUTOUIC_SEARCH_PATHS``\\nproperty on all the targets. See that target property for additional\\ninformation.\\n",
        "variable"
    ],
    "CMAKE_BACKWARDS_COMPATIBILITY": [
        "Deprecated.  See CMake Policy ``CMP0001`` documentation.\\n",
        "variable"
    ],
    "CMAKE_BINARY_DIR": [
        "The path to the top level of the build tree.\\nThis is the full path to the top level of the current CMake build\\ntree.  For an in-source build, this would be the same as\\n``CMAKE_SOURCE_DIR``.\\nWhen run in -P script mode, CMake sets the variables\\n",
        "variable"
    ],
    "CMAKE_BUILD_RPATH": [
        ":ref:`Semicolon-separated list <CMake Language Lists>` specifying runtime path (``RPATH``)\\nentries to add to binaries linked in the build tree (for platforms that\\nsupport it).  The entries will *not* be used for binaries in the install\\ntree.  See also the ``CMAKE_INSTALL_RPATH`` variable.\\nThis is used to initialize the ``BUILD_RPATH`` target property\\n",
        "variable"
    ],
    "CMAKE_BUILD_RPATH_USE_ORIGIN": [
        "Whether to use relative paths for the build ``RPATH``.\\nThis is used to initialize the ``BUILD_RPATH_USE_ORIGIN`` target\\nproperty for all targets, see that property for more details.\\n",
        "variable"
    ],
    "CMAKE_BUILD_TOOL": [
        "This variable exists only for backwards compatibility.\\nIt contains the same value as ``CMAKE_MAKE_PROGRAM``.\\nUse that variable instead.\\n",
        "variable"
    ],
    "CMAKE_BUILD_TYPE": [
        "Specifies the build type on single-configuration generators.\\nThis statically specifies what build type (configuration) will be\\nbuilt in this build tree.  Possible values are empty, ``Debug``, ``Release``,\\n``RelWithDebInfo``, ``MinSizeRel``, ...  This variable is only meaningful to\\nsingle-configuration generators (such as :ref:`Makefile Generators` and\\n",
        "variable"
    ],
    "CMAKE_BUILD_WITH_INSTALL_NAME_DIR": [
        "Whether to use ``INSTALL_NAME_DIR`` on targets in the build tree.\\nThis variable is used to initialize the ``BUILD_WITH_INSTALL_NAME_DIR``\\nproperty on all targets.\\n",
        "variable"
    ],
    "CMAKE_BUILD_WITH_INSTALL_RPATH": [
        "Use the install path for the ``RPATH``.\\nNormally CMake uses the build tree for the ``RPATH`` when building\\nexecutables etc on systems that use ``RPATH``.  When the software is\\ninstalled the executables etc are relinked by CMake to have the\\ninstall ``RPATH``.  If this variable is set to true then the software is\\n",
        "variable"
    ],
    "CMAKE_CACHEFILE_DIR": [
        "The directory with the ``CMakeCache.txt`` file.\\nThis is the full path to the directory that has the ``CMakeCache.txt``\\nfile in it.  This is the same as ``CMAKE_BINARY_DIR``.\\n",
        "variable"
    ],
    "CMAKE_CACHE_MAJOR_VERSION": [
        "Major version of CMake used to create the ``CMakeCache.txt`` file\\nThis stores the major version of CMake used to write a CMake cache\\nfile.  It is only different when a different version of CMake is run\\non a previously created cache file.\\n",
        "variable"
    ],
    "CMAKE_CACHE_MINOR_VERSION": [
        "Minor version of CMake used to create the ``CMakeCache.txt`` file\\nThis stores the minor version of CMake used to write a CMake cache\\nfile.  It is only different when a different version of CMake is run\\non a previously created cache file.\\n",
        "variable"
    ],
    "CMAKE_CACHE_PATCH_VERSION": [
        "Patch version of CMake used to create the ``CMakeCache.txt`` file\\nThis stores the patch version of CMake used to write a CMake cache\\nfile.  It is only different when a different version of CMake is run\\non a previously created cache file.\\n",
        "variable"
    ],
    "CMAKE_CFG_INTDIR": [
        "Build-time reference to per-configuration output subdirectory.\\nFor native build systems supporting multiple configurations in the\\nbuild tree (such as :ref:`Visual Studio Generators` and ``Xcode``),\\nthe value is a reference to a build-time variable specifying the name\\nof the per-configuration output subdirectory.  On :ref:`Makefile Generators`\\n",
        "variable"
    ],
    "CMAKE_CL_64": [
        "Discouraged.  Use ``CMAKE_SIZEOF_VOID_P`` instead.\\nSet to a true value when using a Microsoft Visual Studio ``cl`` compiler that\\n*targets* a 64-bit architecture.\\n",
        "variable"
    ],
    "CMAKE_CODEBLOCKS_COMPILER_ID": [
        "Change the compiler id in the generated CodeBlocks project files.\\nCodeBlocks uses its own compiler id string which differs from\\n``CMAKE_<LANG>_COMPILER_ID``.  If this variable is left empty,\\nCMake tries to recognize the CodeBlocks compiler id automatically.\\nOtherwise the specified string is used in the CodeBlocks project file.\\n",
        "variable"
    ],
    "CMAKE_CODEBLOCKS_EXCLUDE_EXTERNAL_FILES": [
        "Change the way the CodeBlocks generator creates project files.\\nIf this variable evaluates to ``ON`` the generator excludes from\\nthe project file any files that are located outside the project root.\\n",
        "variable"
    ],
    "CMAKE_CODELITE_USE_TARGETS": [
        "Change the way the CodeLite generator creates projectfiles.\\nIf this variable evaluates to ``ON`` at the end of the top-level\\n``CMakeLists.txt`` file, the generator creates projectfiles based on targets\\nrather than projects.\\n",
        "variable"
    ],
    "CMAKE_COLOR_MAKEFILE": [
        "Enables color output when using the :ref:`Makefile Generators`.\\nWhen enabled, the generated Makefiles will produce colored output.\\nDefault is ``ON``.\\n",
        "variable"
    ],
    "CMAKE_COMMAND": [
        "The full path to the ``cmake(1)`` executable.\\nThis is the full path to the CMake executable ``cmake(1)`` which is\\nuseful from custom commands that want to use the ``cmake -E`` option for\\nportable system commands.  (e.g.  ``/usr/local/bin/cmake``)\\n",
        "variable"
    ],
    "CMAKE_COMPILER_2005": [
        "Using the Visual Studio 2005 compiler from Microsoft\\nSet to true when using the Visual Studio 2005 compiler from Microsoft.\\n",
        "variable"
    ],
    "CMAKE_COMPILER_IS_GNUCC": [
        "True if the ``C`` compiler is GNU.\\nUse ``CMAKE_C_COMPILER_ID`` instead.\\n",
        "variable"
    ],
    "CMAKE_COMPILER_IS_GNUCXX": [
        "True if the C++ (``CXX``) compiler is GNU.\\nUse ``CMAKE_CXX_COMPILER_ID`` instead.\\n",
        "variable"
    ],
    "CMAKE_COMPILER_IS_GNUG77": [
        "True if the ``Fortran`` compiler is GNU.\\nUse ``CMAKE_Fortran_COMPILER_ID`` instead.\\n",
        "variable"
    ],
    "CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY": [
        "Output directory for MS debug symbol ``.pdb`` files\\ngenerated by the compiler while building source files.\\nThis variable is used to initialize the\\n``COMPILE_PDB_OUTPUT_DIRECTORY`` property on all the targets.\\n",
        "variable"
    ],
    "CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY_DEBUG": [
        "Per-configuration output directory for MS debug symbol ``.pdb`` files\\ngenerated by the compiler while building source files.\\nThis is a per-configuration version of\\n``CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY``.\\nThis variable is used to initialize the\\n",
        "variable"
    ],
    "CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY_RELEASE": [
        "Per-configuration output directory for MS debug symbol ``.pdb`` files\\ngenerated by the compiler while building source files.\\nThis is a per-configuration version of\\n``CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY``.\\nThis variable is used to initialize the\\n",
        "variable"
    ],
    "CMAKE_CONFIGURATION_TYPES": [
        "Specifies the available build types on multi-config generators.\\nThis specifies what build types (configurations) will be available\\nsuch as ``Debug``, ``Release``, ``RelWithDebInfo`` etc.  This has reasonable\\ndefaults on most platforms, but can be extended to provide other build\\ntypes.  See also ``CMAKE_BUILD_TYPE`` for details of managing\\n",
        "variable"
    ],
    "CMAKE_CPACK_COMMAND": [
        "Full path to ``cpack(1)`` command installed with CMake.\\nThis is the full path to the CPack executable ``cpack(1)`` which is\\nuseful from custom commands that want to use the ``cmake(1)`` ``-E``\\noption for portable system commands.\\n",
        "variable"
    ],
    "CMAKE_CROSSCOMPILING": [
        "Intended to indicate whether CMake is cross compiling, but note limitations\\ndiscussed below.\\nThis variable will be set to true by CMake if the ``CMAKE_SYSTEM_NAME``\\nvariable has been set manually (i.e. in a toolchain file or as a cache entry\\nfrom the ``cmake`` command line). In most cases, manually\\n",
        "variable"
    ],
    "CMAKE_CROSSCOMPILING_EMULATOR": [
        "This variable is only used when ``CMAKE_CROSSCOMPILING`` is on. It\\nshould point to a command on the host system that can run executable built\\nfor the target system.\\nIf this variable contains a :ref:`semicolon-separated list <CMake Language\\nLists>`, then the first value is the command and remaining values are its\\n",
        "variable"
    ],
    "CMAKE_CTEST_COMMAND": [
        "Full path to ``ctest(1)`` command installed with CMake.\\nThis is the full path to the CTest executable ``ctest(1)`` which is\\nuseful from custom commands that want to use the ``cmake(1)`` ``-E``\\noption for portable system commands.\\n",
        "variable"
    ],
    "CMAKE_CUDA_EXTENSIONS": [
        "Default value for ``CUDA_EXTENSIONS`` property of targets.\\nThis variable is used to initialize the ``CUDA_EXTENSIONS``\\nproperty on all targets.  See that target property for additional\\ninformation.\\nSee the ``cmake-compile-features(7)`` manual for information on\\n",
        "variable"
    ],
    "CMAKE_CUDA_HOST_COMPILER": [
        "Executable to use when compiling host code when compiling ``CUDA`` language\\nfiles. Maps to the ``nvcc -ccbin`` option.  Will only be used by CMake on the first\\nconfiguration to determine a valid host compiler for ``CUDA``. After a valid\\nhost compiler has been found, this value is read-only.  This variable takes\\npriority over the ``CUDAHOSTCXX`` environment variable.\\n",
        "variable"
    ],
    "CMAKE_CUDA_RESOLVE_DEVICE_SYMBOLS": [
        "Default value for ``CUDA_RESOLVE_DEVICE_SYMBOLS`` target\\nproperty. This variable is used to initialize the property on each target as\\nit is created.\\n",
        "variable"
    ],
    "CMAKE_CUDA_SEPARABLE_COMPILATION": [
        "Default value for ``CUDA_SEPARABLE_COMPILATION`` target property.\\nThis variable is used to initialize the property on each target as it is\\ncreated.\\n",
        "variable"
    ],
    "CMAKE_CUDA_STANDARD": [
        "Default value for ``CUDA_STANDARD`` property of targets.\\nThis variable is used to initialize the ``CUDA_STANDARD``\\nproperty on all targets.  See that target property for additional\\ninformation.\\nSee the ``cmake-compile-features(7)`` manual for information on\\n",
        "variable"
    ],
    "CMAKE_CUDA_STANDARD_REQUIRED": [
        "Default value for ``CUDA_STANDARD_REQUIRED`` property of targets.\\nThis variable is used to initialize the ``CUDA_STANDARD_REQUIRED``\\nproperty on all targets.  See that target property for additional\\ninformation.\\nSee the ``cmake-compile-features(7)`` manual for information on\\n",
        "variable"
    ],
    "CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES": [
        "When the ``CUDA`` language has been enabled, this provides a\\n:ref:`semicolon-separated list <CMake Language Lists>` of include directories provided\\nby the CUDA Toolkit.  The value may be useful for C++ source files\\nto include CUDA headers.\\n",
        "variable"
    ],
    "CMAKE_CURRENT_BINARY_DIR": [
        "The path to the binary directory currently being processed.\\nThis the full path to the build directory that is currently being\\nprocessed by cmake.  Each directory added by ``add_subdirectory()`` will\\ncreate a binary directory in the build tree, and as it is being\\nprocessed this variable will be set.  For in-source builds this is the\\n",
        "variable"
    ],
    "CMAKE_CURRENT_LIST_DIR": [
        "Full directory of the listfile currently being processed.\\nAs CMake processes the listfiles in your project this variable will\\nalways be set to the directory where the listfile which is currently\\nbeing processed (``CMAKE_CURRENT_LIST_FILE``) is located.  The value\\nhas dynamic scope.  When CMake starts processing commands in a source file\\n",
        "variable"
    ],
    "CMAKE_CURRENT_LIST_FILE": [
        "Full path to the listfile currently being processed.\\nAs CMake processes the listfiles in your project this variable will\\nalways be set to the one currently being processed.  The value has\\ndynamic scope.  When CMake starts processing commands in a source file\\nit sets this variable to the location of the file.  When CMake\\n",
        "variable"
    ],
    "CMAKE_CURRENT_LIST_LINE": [
        "The line number of the current file being processed.\\nThis is the line number of the file currently being processed by\\ncmake.\\n",
        "variable"
    ],
    "CMAKE_CURRENT_SOURCE_DIR": [
        "The path to the source directory currently being processed.\\nThis the full path to the source directory that is currently being\\nprocessed by cmake.\\nWhen run in -P script mode, CMake sets the variables\\n``CMAKE_BINARY_DIR``, ``CMAKE_SOURCE_DIR``,\\n",
        "variable"
    ],
    "CMAKE_CXX_COMPILE_FEATURES": [
        "List of features known to the C++ compiler\\nThese features are known to be available for use with the C++ compiler. This\\nlist is a subset of the features listed in the\\n``CMAKE_CXX_KNOWN_FEATURES`` global property.\\nSee the ``cmake-compile-features(7)`` manual for information on\\n",
        "variable"
    ],
    "CMAKE_CXX_EXTENSIONS": [
        "Default value for ``CXX_EXTENSIONS`` property of targets.\\nThis variable is used to initialize the ``CXX_EXTENSIONS``\\nproperty on all targets.  See that target property for additional\\ninformation.\\nSee the ``cmake-compile-features(7)`` manual for information on\\n",
        "variable"
    ],
    "CMAKE_CXX_STANDARD": [
        "Default value for ``CXX_STANDARD`` property of targets.\\nThis variable is used to initialize the ``CXX_STANDARD``\\nproperty on all targets.  See that target property for additional\\ninformation.\\nSee the ``cmake-compile-features(7)`` manual for information on\\n",
        "variable"
    ],
    "CMAKE_CXX_STANDARD_REQUIRED": [
        "Default value for ``CXX_STANDARD_REQUIRED`` property of targets.\\nThis variable is used to initialize the ``CXX_STANDARD_REQUIRED``\\nproperty on all targets.  See that target property for additional\\ninformation.\\nSee the ``cmake-compile-features(7)`` manual for information on\\n",
        "variable"
    ],
    "CMAKE_C_COMPILE_FEATURES": [
        "List of features known to the C compiler\\nThese features are known to be available for use with the C compiler. This\\nlist is a subset of the features listed in the\\n``CMAKE_C_KNOWN_FEATURES`` global property.\\nSee the ``cmake-compile-features(7)`` manual for information on\\n",
        "variable"
    ],
    "CMAKE_C_EXTENSIONS": [
        "Default value for ``C_EXTENSIONS`` property of targets.\\nThis variable is used to initialize the ``C_EXTENSIONS``\\nproperty on all targets.  See that target property for additional\\ninformation.\\nSee the ``cmake-compile-features(7)`` manual for information on\\n",
        "variable"
    ],
    "CMAKE_C_STANDARD": [
        "Default value for ``C_STANDARD`` property of targets.\\nThis variable is used to initialize the ``C_STANDARD``\\nproperty on all targets.  See that target property for additional\\ninformation.\\nSee the ``cmake-compile-features(7)`` manual for information on\\n",
        "variable"
    ],
    "CMAKE_C_STANDARD_REQUIRED": [
        "Default value for ``C_STANDARD_REQUIRED`` property of targets.\\nThis variable is used to initialize the ``C_STANDARD_REQUIRED``\\nproperty on all targets.  See that target property for additional\\ninformation.\\nSee the ``cmake-compile-features(7)`` manual for information on\\n",
        "variable"
    ],
    "CMAKE_DEBUG_TARGET_PROPERTIES": [
        "Enables tracing output for target properties.\\nThis variable can be populated with a list of properties to generate\\ndebug output for when evaluating target properties.  Currently it can\\nonly be used when evaluating:\\n* ``AUTOUIC_OPTIONS``\\n",
        "variable"
    ],
    "CMAKE_DEPENDS_IN_PROJECT_ONLY": [
        "When set to ``TRUE`` in a directory, the build system produced by the\\n:ref:`Makefile Generators` is set up to only consider dependencies on source\\nfiles that appear either in the source or in the binary directories.  Changes\\nto source files outside of these directories will not cause rebuilds.\\nThis should be used carefully in cases where some source files are picked up\\n",
        "variable"
    ],
    "CMAKE_DIRECTORY_LABELS": [
        "Specify labels for the current directory.\\nThis is used to initialize the ``LABELS`` directory property.\\n",
        "variable"
    ],
    "CMAKE_DISABLE_FIND_PACKAGE_<PackageName>": [
        "Variable for disabling ``find_package()`` calls.\\nEvery non-``REQUIRED`` ``find_package()`` call in a project can be\\ndisabled by setting the variable\\n``CMAKE_DISABLE_FIND_PACKAGE_<PackageName>`` to ``TRUE``.\\nThis can be used to build a project without an optional package,\\n",
        "variable"
    ],
    "CMAKE_DISABLE_PRECOMPILE_HEADERS": [
        "Default value for ``DISABLE_PRECOMPILE_HEADERS`` of targets.\\nBy default ``CMAKE_DISABLE_PRECOMPILE_HEADERS`` is ``OFF``.\\n",
        "variable"
    ],
    "CMAKE_DL_LIBS": [
        "Name of library containing ``dlopen`` and ``dlclose``.\\nThe name of the library that has ``dlopen`` and ``dlclose`` in it, usually\\n``-ldl`` on most UNIX machines.\\n",
        "variable"
    ],
    "CMAKE_DOTNET_TARGET_FRAMEWORK_VERSION": [
        "Default value for ``DOTNET_TARGET_FRAMEWORK_VERSION``\\nproperty of targets.\\nThis variable is used to initialize the\\n``DOTNET_TARGET_FRAMEWORK_VERSION`` property on all\\ntargets. See that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_ECLIPSE_GENERATE_LINKED_RESOURCES": [
        "This cache variable is used by the Eclipse project generator.  See\\n``cmake-generators(7)``.\\nThe Eclipse project generator generates so-called linked resources\\ne.g. to the subproject root dirs in the source tree or to the source files\\nof targets.\\n",
        "variable"
    ],
    "CMAKE_ECLIPSE_GENERATE_SOURCE_PROJECT": [
        "This cache variable is used by the Eclipse project generator.  See\\n``cmake-generators(7)``.\\nIf this variable is set to TRUE, the Eclipse project generator will generate\\nan Eclipse project in ``CMAKE_SOURCE_DIR`` . This project can then\\nbe used in Eclipse e.g. for the version control functionality.\\n",
        "variable"
    ],
    "CMAKE_ECLIPSE_MAKE_ARGUMENTS": [
        "This cache variable is used by the Eclipse project generator.  See\\n``cmake-generators(7)``.\\nThis variable holds arguments which are used when Eclipse invokes the make\\ntool. By default it is initialized to hold flags to enable parallel builds\\n(using -j typically).\\n",
        "variable"
    ],
    "CMAKE_ECLIPSE_RESOURCE_ENCODING": [
        "This cache variable tells the ``Eclipse CDT4`` project generator\\nto set the resource encoding to the given value in generated project files.\\nIf no value is given, no encoding will be set.\\n",
        "variable"
    ],
    "CMAKE_ECLIPSE_VERSION": [
        "This cache variable is used by the Eclipse project generator.  See\\n``cmake-generators(7)``.\\nWhen using the Eclipse project generator, CMake tries to find the Eclipse\\nexecutable and detect the version of it. Depending on the version it finds,\\nsome features are enabled or disabled. If CMake doesn't find\\n",
        "variable"
    ],
    "CMAKE_EDIT_COMMAND": [
        "Full path to ``cmake-gui(1)`` or ``ccmake(1)``.  Defined only for\\n:ref:`Makefile Generators` when not using an \\\"extra\\\" generator for an IDE.\\nThis is the full path to the CMake executable that can graphically\\nedit the cache.  For example, ``cmake-gui(1)`` or ``ccmake(1)``.\\n",
        "variable"
    ],
    "CMAKE_ENABLE_EXPORTS": [
        "Specify whether executables export symbols for loadable modules.\\nThis variable is used to initialize the ``ENABLE_EXPORTS`` target\\nproperty for executable targets when they are created by calls to the\\n``add_executable()`` command.  See the property documentation for details.\\n",
        "variable"
    ],
    "CMAKE_ERROR_DEPRECATED": [
        "Whether to issue errors for deprecated functionality.\\nIf ``TRUE``, use of deprecated functionality will issue fatal errors.\\nIf this variable is not set, CMake behaves as if it were set to ``FALSE``.\\n",
        "variable"
    ],
    "CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION": [
        "Ask ``cmake_install.cmake`` script to error out as soon as a file with\\nabsolute ``INSTALL DESTINATION`` is encountered.\\nThe fatal error is emitted before the installation of the offending\\nfile takes place.  This variable is used by CMake-generated\\n``cmake_install.cmake`` scripts.  If one sets this variable to ``ON`` while\\n",
        "variable"
    ],
    "CMAKE_EXECUTABLE_SUFFIX": [
        "The suffix for executables on this platform.\\nThe suffix to use for the end of an executable filename if any, ``.exe``\\non Windows.\\n``CMAKE_EXECUTABLE_SUFFIX_<LANG>`` overrides this for language ``<LANG>``.\\n",
        "variable"
    ],
    "CMAKE_EXECUTE_PROCESS_COMMAND_ECHO": [
        "If this variable is set to ``STDERR``, ``STDOUT`` or ``NONE`` then commands\\nin ``execute_process()`` calls will be printed to either stderr or\\nstdout or not at all.\\n",
        "variable"
    ],
    "CMAKE_EXE_LINKER_FLAGS": [
        "Linker flags to be used to create executables.\\nThese flags will be used by the linker when creating an executable.\\n",
        "variable"
    ],
    "CMAKE_EXE_LINKER_FLAGS_DEBUG": [
        "Flags to be used when linking an executable.\\nSame as ``CMAKE_C_FLAGS_*`` but used by the linker when creating\\nexecutables.\\n",
        "variable"
    ],
    "CMAKE_EXE_LINKER_FLAGS_RELEASE": [
        "Flags to be used when linking an executable.\\nSame as ``CMAKE_C_FLAGS_*`` but used by the linker when creating\\nexecutables.\\n",
        "variable"
    ],
    "CMAKE_EXE_LINKER_FLAGS_DEBUG_INIT": [
        "Value used to initialize the ``CMAKE_EXE_LINKER_FLAGS_<CONFIG>``\\ncache entry the first time a build tree is configured.\\nThis variable is meant to be set by a :variable:`toolchain file\\n<CMAKE_TOOLCHAIN_FILE>`.  CMake may prepend or append content to\\nthe value based on the environment and target platform.\\n",
        "variable"
    ],
    "CMAKE_EXE_LINKER_FLAGS_RELEASE_INIT": [
        "Value used to initialize the ``CMAKE_EXE_LINKER_FLAGS_<CONFIG>``\\ncache entry the first time a build tree is configured.\\nThis variable is meant to be set by a :variable:`toolchain file\\n<CMAKE_TOOLCHAIN_FILE>`.  CMake may prepend or append content to\\nthe value based on the environment and target platform.\\n",
        "variable"
    ],
    "CMAKE_EXE_LINKER_FLAGS_INIT": [
        "Value used to initialize the ``CMAKE_EXE_LINKER_FLAGS``\\ncache entry the first time a build tree is configured.\\nThis variable is meant to be set by a :variable:`toolchain file\\n<CMAKE_TOOLCHAIN_FILE>`.  CMake may prepend or append content to\\nthe value based on the environment and target platform.\\n",
        "variable"
    ],
    "CMAKE_EXPORT_COMPILE_COMMANDS": [
        "Enable/Disable output of compile commands during generation.\\nIf enabled, generates a ``compile_commands.json`` file containing the exact\\ncompiler calls for all translation units of the project in machine-readable\\nform.  The format of the JSON file looks like:\\n [\\n",
        "variable"
    ],
    "CMAKE_EXPORT_NO_PACKAGE_REGISTRY": [
        "Disable the ``export(PACKAGE)`` command when ``CMP0090``\\nis not set to ``NEW``.\\nIn some cases, for example for packaging and for system wide\\ninstallations, it is not desirable to write the user package registry.\\nIf the ``CMAKE_EXPORT_NO_PACKAGE_REGISTRY`` variable is enabled,\\n",
        "variable"
    ],
    "CMAKE_EXPORT_PACKAGE_REGISTRY": [
        "Enables the ``export(PACKAGE)`` command when ``CMP0090``\\nis set to ``NEW``.\\nThe ``export(PACKAGE)`` command does nothing by default.  In some cases\\nit is desirable to write to the user package registry, so the\\n``CMAKE_EXPORT_PACKAGE_REGISTRY`` variable may be set to enable it.\\n",
        "variable"
    ],
    "CMAKE_EXTRA_GENERATOR": [
        "The extra generator used to build the project.  See\\n``cmake-generators(7)``.\\nWhen using the Eclipse, CodeBlocks, CodeLite, Kate or Sublime generators, CMake\\ngenerates Makefiles (``CMAKE_GENERATOR``) and additionally project\\nfiles for the respective IDE.  This IDE project file generator is stored in\\n",
        "variable"
    ],
    "CMAKE_EXTRA_SHARED_LIBRARY_SUFFIXES": [
        "Additional suffixes for shared libraries.\\nExtensions for shared libraries other than that specified by\\n``CMAKE_SHARED_LIBRARY_SUFFIX``, if any.  CMake uses this to recognize\\nexternal shared library files during analysis of libraries linked by a\\ntarget.\\n",
        "variable"
    ],
    "CMAKE_FIND_APPBUNDLE": [
        "This variable affects how ``find_*`` commands choose between\\nmacOS Application Bundles and unix-style package components.\\nOn Darwin or systems supporting macOS Application Bundles, the\\n``CMAKE_FIND_APPBUNDLE`` variable can be set to empty or\\none of the following:\\n",
        "variable"
    ],
    "CMAKE_FIND_FRAMEWORK": [
        "This variable affects how ``find_*`` commands choose between\\nmacOS Frameworks and unix-style package components.\\nOn Darwin or systems supporting macOS Frameworks, the\\n``CMAKE_FIND_FRAMEWORK`` variable can be set to empty or\\none of the following:\\n",
        "variable"
    ],
    "CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX": [
        "Specify a ``<suffix>`` to tell the ``find_library()`` command to\\nsearch in a ``lib<suffix>`` directory before each ``lib`` directory that\\nwould normally be searched.\\nThis overrides the behavior of related global properties:\\n* ``FIND_LIBRARY_USE_LIB32_PATHS``\\n",
        "variable"
    ],
    "CMAKE_FIND_LIBRARY_PREFIXES": [
        "Prefixes to prepend when looking for libraries.\\nThis specifies what prefixes to add to library names when the\\n``find_library()`` command looks for libraries.  On UNIX systems this is\\ntypically ``lib``, meaning that when trying to find the ``foo`` library it\\nwill look for ``libfoo``.\\n",
        "variable"
    ],
    "CMAKE_FIND_LIBRARY_SUFFIXES": [
        "Suffixes to append when looking for libraries.\\nThis specifies what suffixes to add to library names when the\\n``find_library()`` command looks for libraries.  On Windows systems this\\nis typically ``.lib`` and ``.dll``, meaning that when trying to find the\\n``foo`` library it will look for ``foo.dll`` etc.\\n",
        "variable"
    ],
    "CMAKE_FIND_NO_INSTALL_PREFIX": [
        "Exclude the values of the ``CMAKE_INSTALL_PREFIX`` and\\n``CMAKE_STAGING_PREFIX`` variables from\\n``CMAKE_SYSTEM_PREFIX_PATH``.  CMake adds these project-destination\\nprefixes to ``CMAKE_SYSTEM_PREFIX_PATH`` by default in order to\\nsupport building a series of dependent packages and installing them into\\n",
        "variable"
    ],
    "CMAKE_FIND_PACKAGE_NAME": [
        "Defined by the ``find_package()`` command while loading\\na find module to record the caller-specified package name.\\nSee command documentation for details.\\n",
        "variable"
    ],
    "CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY": [
        "By default this variable is not set. If neither\\n``CMAKE_FIND_USE_PACKAGE_REGISTRY`` nor\\n``CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY`` is set, then\\n``find_package()`` will use the :ref:`User Package Registry`\\nunless the ``NO_CMAKE_PACKAGE_REGISTRY`` option is provided.\\n",
        "variable"
    ],
    "CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY": [
        "By default this variable is not set. If neither\\n``CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY`` nor\\n``CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY`` is set, then\\n``find_package()`` will use the :ref:`System Package Registry`\\nunless the ``NO_CMAKE_SYSTEM_PACKAGE_REGISTRY`` option is provided.\\n",
        "variable"
    ],
    "CMAKE_FIND_PACKAGE_PREFER_CONFIG": [
        "Tell ``find_package()`` to try \\\"Config\\\" mode before \\\"Module\\\" mode if no\\nmode was specified.\\nThe command ``find_package()`` operates without an explicit mode when\\nthe reduced signature is used without the ``MODULE`` option. In this case,\\nby default, CMake first tries Module mode by searching for a\\n",
        "variable"
    ],
    "CMAKE_FIND_PACKAGE_RESOLVE_SYMLINKS": [
        "Set to ``TRUE`` to tell ``find_package()`` calls to resolve symbolic\\nlinks in the value of ``<PackageName>_DIR``.\\nThis is helpful in use cases where the package search path points at a\\nproxy directory in which symlinks to the real package locations appear.\\nThis is not enabled by default because there are also common use cases\\n",
        "variable"
    ],
    "CMAKE_FIND_PACKAGE_SORT_DIRECTION": [
        "The sorting direction used by ``CMAKE_FIND_PACKAGE_SORT_ORDER``.\\nIt can assume one of the following values:\\n``DEC``\\n  Default.  Ordering is done in descending mode.\\n  The highest folder found will be tested first.\\n",
        "variable"
    ],
    "CMAKE_FIND_PACKAGE_SORT_ORDER": [
        "The default order for sorting packages found using ``find_package()``.\\nIt can assume one of the following values:\\n``NONE``\\n  Default.  No attempt is done to sort packages.\\n  The first valid package found will be selected.\\n",
        "variable"
    ],
    "CMAKE_FIND_PACKAGE_WARN_NO_MODULE": [
        "Tell ``find_package()`` to warn if called without an explicit mode.\\nIf ``find_package()`` is called without an explicit mode option\\n(``MODULE``, ``CONFIG``, or ``NO_MODULE``) and no ``Find<pkg>.cmake`` module\\nis in ``CMAKE_MODULE_PATH`` then CMake implicitly assumes that the\\ncaller intends to search for a package configuration file.  If no package\\n",
        "variable"
    ],
    "CMAKE_FIND_ROOT_PATH": [
        ":ref:`Semicolon-separated list <CMake Language Lists>` of root paths to search on the filesystem.\\nThis variable is most useful when cross-compiling. CMake uses the paths in\\nthis list as alternative roots to find filesystem items with\\n``find_package()``, ``find_library()`` etc.\\n",
        "variable"
    ],
    "CMAKE_FIND_ROOT_PATH_MODE_INCLUDE": [
        "This variable controls whether the ``CMAKE_FIND_ROOT_PATH`` and\\n``CMAKE_SYSROOT`` are used by ``find_file()`` and ``find_path()``.\\nIf set to ``ONLY``, then only the roots in ``CMAKE_FIND_ROOT_PATH``\\nwill be searched. If set to ``NEVER``, then the roots in\\n``CMAKE_FIND_ROOT_PATH`` will be ignored and only the host system\\n",
        "variable"
    ],
    "CMAKE_FIND_ROOT_PATH_MODE_LIBRARY": [
        "This variable controls whether the ``CMAKE_FIND_ROOT_PATH`` and\\n``CMAKE_SYSROOT`` are used by ``find_library()``.\\nIf set to ``ONLY``, then only the roots in ``CMAKE_FIND_ROOT_PATH``\\nwill be searched. If set to ``NEVER``, then the roots in\\n``CMAKE_FIND_ROOT_PATH`` will be ignored and only the host system\\n",
        "variable"
    ],
    "CMAKE_FIND_ROOT_PATH_MODE_PACKAGE": [
        "This variable controls whether the ``CMAKE_FIND_ROOT_PATH`` and\\n``CMAKE_SYSROOT`` are used by ``find_package()``.\\nIf set to ``ONLY``, then only the roots in ``CMAKE_FIND_ROOT_PATH``\\nwill be searched. If set to ``NEVER``, then the roots in\\n``CMAKE_FIND_ROOT_PATH`` will be ignored and only the host system\\n",
        "variable"
    ],
    "CMAKE_FIND_ROOT_PATH_MODE_PROGRAM": [
        "This variable controls whether the ``CMAKE_FIND_ROOT_PATH`` and\\n``CMAKE_SYSROOT`` are used by ``find_program()``.\\nIf set to ``ONLY``, then only the roots in ``CMAKE_FIND_ROOT_PATH``\\nwill be searched. If set to ``NEVER``, then the roots in\\n``CMAKE_FIND_ROOT_PATH`` will be ignored and only the host system\\n",
        "variable"
    ],
    "CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH": [
        "Controls the default behavior of the following commands for whether or not to\\nsearch paths provided by cmake-specific environment variables:\\n* ``find_program()``\\n* ``find_library()``\\n* ``find_file()``\\n",
        "variable"
    ],
    "CMAKE_FIND_USE_CMAKE_PATH": [
        "Controls the default behavior of the following commands for whether or not to\\nsearch paths provided by cmake-specific cache variables:\\n* ``find_program()``\\n* ``find_library()``\\n* ``find_file()``\\n",
        "variable"
    ],
    "CMAKE_FIND_USE_CMAKE_SYSTEM_PATH": [
        "Controls the default behavior of the following commands for whether or not to\\nsearch paths provided by platform-specific cmake variables:\\n* ``find_program()``\\n* ``find_library()``\\n* ``find_file()``\\n",
        "variable"
    ],
    "CMAKE_FIND_USE_PACKAGE_REGISTRY": [
        "Controls the default behavior of the ``find_package()`` command for\\nwhether or not to search paths provided by the :ref:`User Package Registry`.\\nBy default this variable is not set and the behavior will fall back\\nto that determined by the deprecated\\n``CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY`` variable.  If that is\\n",
        "variable"
    ],
    "CMAKE_FIND_USE_PACKAGE_ROOT_PATH": [
        "Controls the default behavior of the following commands for whether or not to\\nsearch paths provided by ``<PackageName>_ROOT`` variables:\\n* ``find_program()``\\n* ``find_library()``\\n* ``find_file()``\\n",
        "variable"
    ],
    "CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH": [
        "Controls the default behavior of the following commands for whether or not to\\nsearch paths provided by standard system environment variables:\\n* ``find_program()``\\n* ``find_library()``\\n* ``find_file()``\\n",
        "variable"
    ],
    "CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY": [
        "Controls searching the :ref:`System Package Registry` by the\\n``find_package()`` command.\\nBy default this variable is not set and the behavior will fall back\\nto that determined by the deprecated\\n``CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY`` variable.\\n",
        "variable"
    ],
    "CMAKE_FOLDER": [
        "Set the folder name. Use to organize targets in an IDE.\\nThis variable is used to initialize the ``FOLDER`` property on all the\\ntargets.  See that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_FRAMEWORK": [
        "Default value for ``FRAMEWORK`` of targets.\\nThis variable is used to initialize the ``FRAMEWORK`` property on\\nall the targets.  See that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_FRAMEWORK_PATH": [
        ":ref:`Semicolon-separated list <CMake Language Lists>` of directories specifying a search path\\nfor macOS frameworks used by the ``find_library()``,\\n``find_package()``, ``find_path()``, and ``find_file()``\\ncommands.\\n",
        "variable"
    ],
    "CMAKE_Fortran_FORMAT": [
        "Set to ``FIXED`` or ``FREE`` to indicate the Fortran source layout.\\nThis variable is used to initialize the ``Fortran_FORMAT`` property on\\nall the targets.  See that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_Fortran_MODDIR_DEFAULT": [
        "Fortran default module output directory.\\nMost Fortran compilers write ``.mod`` files to the current working\\ndirectory.  For those that do not, this is set to ``.`` and used when\\nthe ``Fortran_MODULE_DIRECTORY`` target property is not set.\\n",
        "variable"
    ],
    "CMAKE_Fortran_MODDIR_FLAG": [
        "Fortran flag for module output directory.\\nThis stores the flag needed to pass the value of the\\n``Fortran_MODULE_DIRECTORY`` target property to the compiler.\\n",
        "variable"
    ],
    "CMAKE_Fortran_MODOUT_FLAG": [
        "Fortran flag to enable module output.\\nMost Fortran compilers write ``.mod`` files out by default.  For others,\\nthis stores the flag needed to enable module output.\\n",
        "variable"
    ],
    "CMAKE_Fortran_MODULE_DIRECTORY": [
        "Fortran module output directory.\\nThis variable is used to initialize the ``Fortran_MODULE_DIRECTORY``\\nproperty on all the targets.  See that target property for additional\\ninformation.\\n",
        "variable"
    ],
    "CMAKE_GENERATOR": [
        "The generator used to build the project.  See ``cmake-generators(7)``.\\nThe name of the generator that is being used to generate the build\\nfiles.  (e.g.  ``Unix Makefiles``, ``Ninja``, etc.)\\nThe value of this variable should never be modified by project code.\\nA generator may be selected via the ``cmake(1)`` ``-G`` option,\\n",
        "variable"
    ],
    "CMAKE_GENERATOR_INSTANCE": [
        "Generator-specific instance specification provided by user.\\nSome CMake generators support selection of an instance of the native build\\nsystem when multiple instances are available.  If the user specifies an\\ninstance (e.g. by setting this cache entry or via the\\n``CMAKE_GENERATOR_INSTANCE`` environment variable), or after a default\\n",
        "variable"
    ],
    "CMAKE_GENERATOR_PLATFORM": [
        "Generator-specific target platform specification provided by user.\\nSome CMake generators support a target platform name to be given\\nto the native build system to choose a compiler toolchain.\\nIf the user specifies a platform name (e.g. via the ``cmake(1)`` ``-A``\\noption or via the ``CMAKE_GENERATOR_PLATFORM`` environment variable)\\n",
        "variable"
    ],
    "CMAKE_GENERATOR_TOOLSET": [
        "Native build system toolset specification provided by user.\\nSome CMake generators support a toolset specification to tell the\\nnative build system how to choose a compiler.  If the user specifies\\na toolset (e.g. via the ``cmake(1)`` ``-T`` option or via\\nthe ``CMAKE_GENERATOR_TOOLSET`` environment variable) the value\\n",
        "variable"
    ],
    "CMAKE_GHS_NO_SOURCE_GROUP_FILE": [
        "``ON`` / ``OFF`` boolean to control if the project file for a target should\\nbe one single file or multiple files.  Refer to\\n``GHS_NO_SOURCE_GROUP_FILE`` for further details.\\n",
        "variable"
    ],
    "CMAKE_GLOBAL_AUTOGEN_TARGET": [
        "Switch to enable generation of a global ``autogen`` target.\\nWhen ``CMAKE_GLOBAL_AUTORCC_TARGET`` is enabled, a custom target\\n``autogen`` is generated.  This target depends on all ``AUTOMOC`` and\\n``AUTOUIC`` generated ``<ORIGIN>_autogen`` targets in the project.\\nBy building the global ``autogen`` target, all ``AUTOMOC`` and\\n",
        "variable"
    ],
    "CMAKE_GLOBAL_AUTOGEN_TARGET_NAME": [
        "Change the name of the global ``autogen`` target.\\nWhen ``CMAKE_GLOBAL_AUTOGEN_TARGET`` is enabled, a global custom target\\nnamed ``autogen`` is created.  ``CMAKE_GLOBAL_AUTOGEN_TARGET_NAME``\\nallows to set a different name for that target.\\nBy default ``CMAKE_GLOBAL_AUTOGEN_TARGET_NAME`` is unset.\\n",
        "variable"
    ],
    "CMAKE_GLOBAL_AUTORCC_TARGET": [
        "Switch to enable generation of a global ``autorcc`` target.\\nWhen ``CMAKE_GLOBAL_AUTORCC_TARGET`` is enabled, a custom target\\n``autorcc`` is generated. This target depends on all ``AUTORCC``\\ngenerated ``<ORIGIN>_arcc_<QRC>`` targets in the project.\\nBy building the global ``autorcc`` target, all ``AUTORCC``\\n",
        "variable"
    ],
    "CMAKE_GLOBAL_AUTORCC_TARGET_NAME": [
        "Change the name of the global ``autorcc`` target.\\nWhen ``CMAKE_GLOBAL_AUTORCC_TARGET`` is enabled, a global custom target\\nnamed ``autorcc`` is created.  ``CMAKE_GLOBAL_AUTORCC_TARGET_NAME``\\nallows to set a different name for that target.\\nBy default ``CMAKE_GLOBAL_AUTOGEN_TARGET_NAME`` is unset.\\n",
        "variable"
    ],
    "CMAKE_GNUtoMS": [
        "Convert GNU import libraries (``.dll.a``) to MS format (``.lib``).\\nThis variable is used to initialize the ``GNUtoMS`` property on\\ntargets when they are created.  See that target property for additional\\ninformation.\\n",
        "variable"
    ],
    "CMAKE_HOME_DIRECTORY": [
        "Path to top of source tree. Same as ``CMAKE_SOURCE_DIR``.\\nThis is an internal cache entry used to locate the source directory\\nwhen loading a ``CMakeCache.txt`` from a build tree.  It should not\\nbe used in project code.  The variable ``CMAKE_SOURCE_DIR``\\nhas the same value and should be preferred.\\n",
        "variable"
    ],
    "CMAKE_HOST_APPLE": [
        "``True`` for Apple macOS operating systems.\\nSet to ``true`` when the host system is Apple macOS.\\n",
        "variable"
    ],
    "CMAKE_HOST_SOLARIS": [
        "``True`` for Oracle Solaris operating systems.\\nSet to ``true`` when the host system is Oracle Solaris.\\n",
        "variable"
    ],
    "CMAKE_HOST_SYSTEM": [
        "Composite Name of OS CMake is being run on.\\nThis variable is the composite of ``CMAKE_HOST_SYSTEM_NAME`` and\\n``CMAKE_HOST_SYSTEM_VERSION``, e.g.\\n``${CMAKE_HOST_SYSTEM_NAME}-${CMAKE_HOST_SYSTEM_VERSION}``.  If\\n``CMAKE_HOST_SYSTEM_VERSION`` is not set, then this variable is\\n",
        "variable"
    ],
    "CMAKE_HOST_SYSTEM_NAME": [
        "Name of the OS CMake is running on.\\nOn systems that have the uname command, this variable is set to the\\noutput of ``uname -s``.  ``Linux``, ``Windows``, and ``Darwin`` for macOS\\nare the values found on the big three operating systems.\\n",
        "variable"
    ],
    "CMAKE_HOST_SYSTEM_PROCESSOR": [
        "The name of the CPU CMake is running on.\\nOn systems that support ``uname``, this variable is set to the output of\\n``uname -p``.  On Windows it is set to the value of the environment variable\\n``PROCESSOR_ARCHITECTURE``.\\n",
        "variable"
    ],
    "CMAKE_HOST_SYSTEM_VERSION": [
        "The OS version CMake is running on.\\nA numeric version string for the system.  On systems that support\\n``uname``, this variable is set to the output of ``uname -r``. On other\\nsystems this is set to major-minor version numbers.\\n",
        "variable"
    ],
    "CMAKE_HOST_UNIX": [
        "``True`` for UNIX and UNIX like operating systems.\\nSet to ``true`` when the host system is UNIX or UNIX like (i.e.  APPLE and\\nCYGWIN).\\n",
        "variable"
    ],
    "CMAKE_HOST_WIN32": [
        "``True`` if the host system is running Windows, including Windows 64-bit and MSYS.\\nSet to ``false`` on Cygwin.\\n",
        "variable"
    ],
    "CMAKE_IGNORE_PATH": [
        ":ref:`Semicolon-separated list <CMake Language Lists>` of directories to be *ignored* by\\nthe ``find_program()``, ``find_library()``, ``find_file()``,\\nand ``find_path()`` commands.  This is useful in cross-compiling\\nenvironments where some system directories contain incompatible but\\npossibly linkable libraries.  For example, on cross-compiled cluster\\n",
        "variable"
    ],
    "CMAKE_IMPORT_LIBRARY_PREFIX": [
        "The prefix for import libraries that you link to.\\nThe prefix to use for the name of an import library if used on this\\nplatform.\\n``CMAKE_IMPORT_LIBRARY_PREFIX_<LANG>`` overrides this for language ``<LANG>``.\\n",
        "variable"
    ],
    "CMAKE_IMPORT_LIBRARY_SUFFIX": [
        "The suffix for import libraries that you link to.\\nThe suffix to use for the end of an import library filename if used on\\nthis platform.\\n``CMAKE_IMPORT_LIBRARY_SUFFIX_<LANG>`` overrides this for language ``<LANG>``.\\n",
        "variable"
    ],
    "CMAKE_INCLUDE_CURRENT_DIR": [
        "Automatically add the current source and build directories to the include path.\\nIf this variable is enabled, CMake automatically adds\\n``CMAKE_CURRENT_SOURCE_DIR`` and ``CMAKE_CURRENT_BINARY_DIR``\\nto the include path for each directory.  These additional include\\ndirectories do not propagate down to subdirectories.  This is useful\\n",
        "variable"
    ],
    "CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE": [
        "Automatically add the current source and build directories to the\\n``INTERFACE_INCLUDE_DIRECTORIES`` target property.\\nIf this variable is enabled, CMake automatically adds for each shared\\nlibrary target, static library target, module target and executable\\ntarget, ``CMAKE_CURRENT_SOURCE_DIR`` and\\n",
        "variable"
    ],
    "CMAKE_INCLUDE_DIRECTORIES_BEFORE": [
        "Whether to append or prepend directories by default in\\n``include_directories()``.\\nThis variable affects the default behavior of the ``include_directories()``\\ncommand.  Setting this variable to ``ON`` is equivalent to using the ``BEFORE``\\noption in all uses of that command.\\n",
        "variable"
    ],
    "CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE": [
        "Whether to force prepending of project include directories.\\nThis variable affects the order of include directories generated in compiler\\ncommand lines.  If set to ``ON``, it causes the ``CMAKE_SOURCE_DIR``\\nand the ``CMAKE_BINARY_DIR`` to appear first.\\n",
        "variable"
    ],
    "CMAKE_INCLUDE_PATH": [
        ":ref:`Semicolon-separated list <CMake Language Lists>` of directories specifying a search path\\nfor the ``find_file()`` and ``find_path()`` commands.  By default it\\nis empty, it is intended to be set by the project.  See also\\n``CMAKE_SYSTEM_INCLUDE_PATH`` and ``CMAKE_PREFIX_PATH``.\\n",
        "variable"
    ],
    "CMAKE_INSTALL_DEFAULT_COMPONENT_NAME": [
        "Default component used in ``install()`` commands.\\nIf an ``install()`` command is used without the ``COMPONENT`` argument,\\nthese files will be grouped into a default component.  The name of this\\ndefault install component will be taken from this variable.  It\\ndefaults to ``Unspecified``.\\n",
        "variable"
    ],
    "CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS": [
        "Default permissions for directories created implicitly during installation\\nof files by ``install()`` and ``file(INSTALL)``.\\nIf ``make install`` is invoked and directories are implicitly created they\\nget permissions set by ``CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS``\\nvariable or platform specific default permissions if the variable is not set.\\n",
        "variable"
    ],
    "CMAKE_INSTALL_MESSAGE": [
        "Specify verbosity of installation script code generated by the\\n``install()`` command (using the ``file(INSTALL)`` command).\\nFor paths that are newly installed or updated, installation\\nmay print lines like::\\n -- Installing: /some/destination/path\\n",
        "variable"
    ],
    "CMAKE_INSTALL_NAME_DIR": [
        "macOS directory name for installed targets.\\n``CMAKE_INSTALL_NAME_DIR`` is used to initialize the\\n``INSTALL_NAME_DIR`` property on all targets.  See that target\\nproperty for more information.\\n",
        "variable"
    ],
    "CMAKE_INSTALL_PREFIX": [
        "Install directory used by ``install()``.\\nIf ``make install`` is invoked or ``INSTALL`` is built, this directory is\\nprepended onto all install directories.  This variable defaults to\\n``/usr/local`` on UNIX and ``c:/Program Files/${PROJECT_NAME}`` on Windows.\\nSee ``CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT`` for how a\\n",
        "variable"
    ],
    "CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT": [
        "CMake sets this variable to a ``TRUE`` value when the\\n``CMAKE_INSTALL_PREFIX`` has just been initialized to\\nits default value, typically on the first run of CMake within\\na new build tree.  This can be used by project code to change\\nthe default without overriding a user-provided value:\\n",
        "variable"
    ],
    "CMAKE_INSTALL_REMOVE_ENVIRONMENT_RPATH": [
        "Sets the default for whether toolchain-defined rpaths should be removed during\\ninstallation.\\n``CMAKE_INSTALL_REMOVE_ENVIRONMENT_RPATH`` is a boolean that provides the\\ndefault value for the ``INSTALL_REMOVE_ENVIRONMENT_RPATH`` property\\nof all subsequently created targets.\\n",
        "variable"
    ],
    "CMAKE_INSTALL_RPATH": [
        "The rpath to use for installed targets.\\nA semicolon-separated list specifying the rpath to use in installed\\ntargets (for platforms that support it).  This is used to initialize\\nthe target property ``INSTALL_RPATH`` for all targets.\\n",
        "variable"
    ],
    "CMAKE_INSTALL_RPATH_USE_LINK_PATH": [
        "Add paths to linker search and installed rpath.\\n``CMAKE_INSTALL_RPATH_USE_LINK_PATH`` is a boolean that if set to ``true``\\nwill append directories in the linker search path and outside the\\nproject to the ``INSTALL_RPATH``.  This is used to initialize the\\ntarget property ``INSTALL_RPATH_USE_LINK_PATH`` for all targets.\\n",
        "variable"
    ],
    "CMAKE_INTERNAL_PLATFORM_ABI": [
        "An internal variable subject to change.\\nThis is used in determining the compiler ABI and is subject to change.\\n",
        "variable"
    ],
    "CMAKE_INTERPROCEDURAL_OPTIMIZATION": [
        "Default value for ``INTERPROCEDURAL_OPTIMIZATION`` of targets.\\nThis variable is used to initialize the ``INTERPROCEDURAL_OPTIMIZATION``\\nproperty on all the targets.  See that target property for additional\\ninformation.\\n",
        "variable"
    ],
    "CMAKE_INTERPROCEDURAL_OPTIMIZATION_DEBUG": [
        "Default value for ``INTERPROCEDURAL_OPTIMIZATION_<CONFIG>`` of targets.\\nThis variable is used to initialize the ``INTERPROCEDURAL_OPTIMIZATION_<CONFIG>``\\nproperty on all the targets.  See that target property for additional\\ninformation.\\n",
        "variable"
    ],
    "CMAKE_INTERPROCEDURAL_OPTIMIZATION_RELEASE": [
        "Default value for ``INTERPROCEDURAL_OPTIMIZATION_<CONFIG>`` of targets.\\nThis variable is used to initialize the ``INTERPROCEDURAL_OPTIMIZATION_<CONFIG>``\\nproperty on all the targets.  See that target property for additional\\ninformation.\\n",
        "variable"
    ],
    "CMAKE_IOS_INSTALL_COMBINED": [
        "Default value for ``IOS_INSTALL_COMBINED`` of targets.\\nThis variable is used to initialize the ``IOS_INSTALL_COMBINED``\\nproperty on all the targets.  See that target property for additional\\ninformation.\\n",
        "variable"
    ],
    "CMAKE_JOB_POOLS": [
        "If the ``JOB_POOLS`` global property is not set, the value\\nof this variable is used in its place.  See ``JOB_POOLS``\\nfor additional information.\\n",
        "variable"
    ],
    "CMAKE_JOB_POOL_COMPILE": [
        "This variable is used to initialize the ``JOB_POOL_COMPILE``\\nproperty on all the targets. See ``JOB_POOL_COMPILE``\\nfor additional information.\\n",
        "variable"
    ],
    "CMAKE_JOB_POOL_LINK": [
        "This variable is used to initialize the ``JOB_POOL_LINK``\\nproperty on all the targets. See ``JOB_POOL_LINK``\\nfor additional information.\\n",
        "variable"
    ],
    "CMAKE_LIBRARY_ARCHITECTURE": [
        "Target architecture library directory name, if detected.\\nThis is the value of ``CMAKE_<LANG>_LIBRARY_ARCHITECTURE`` as detected\\nfor one of the enabled languages.\\n",
        "variable"
    ],
    "CMAKE_LIBRARY_ARCHITECTURE_REGEX": [
        "Regex matching possible target architecture library directory names.\\nThis is used to detect ``CMAKE_<LANG>_LIBRARY_ARCHITECTURE`` from the\\nimplicit linker search path by matching the ``<arch>`` name.\\n",
        "variable"
    ],
    "CMAKE_LIBRARY_OUTPUT_DIRECTORY": [
        "Where to put all the :ref:`LIBRARY <Library Output Artifacts>`\\ntarget files when built.\\nThis variable is used to initialize the ``LIBRARY_OUTPUT_DIRECTORY``\\nproperty on all the targets.  See that target property for additional\\ninformation.\\n",
        "variable"
    ],
    "CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG": [
        "Where to put all the :ref:`LIBRARY <Library Output Artifacts>`\\ntarget files when built for a specific configuration.\\nThis variable is used to initialize the\\n``LIBRARY_OUTPUT_DIRECTORY_<CONFIG>`` property on all the targets.\\nSee that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE": [
        "Where to put all the :ref:`LIBRARY <Library Output Artifacts>`\\ntarget files when built for a specific configuration.\\nThis variable is used to initialize the\\n``LIBRARY_OUTPUT_DIRECTORY_<CONFIG>`` property on all the targets.\\nSee that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_LIBRARY_PATH": [
        ":ref:`Semicolon-separated list <CMake Language Lists>` of directories specifying a search path\\nfor the ``find_library()`` command.  By default it is empty, it is\\nintended to be set by the project.  See also\\n``CMAKE_SYSTEM_LIBRARY_PATH`` and ``CMAKE_PREFIX_PATH``.\\n",
        "variable"
    ],
    "CMAKE_LIBRARY_PATH_FLAG": [
        "The flag to be used to add a library search path to a compiler.\\nThe flag will be used to specify a library directory to the compiler.\\nOn most compilers this is ``-L``.\\n",
        "variable"
    ],
    "CMAKE_LINK_DEF_FILE_FLAG": [
        "Linker flag to be used to specify a ``.def`` file for dll creation.\\nThe flag will be used to add a ``.def`` file when creating a dll on\\nWindows; this is only defined on Windows.\\n",
        "variable"
    ],
    "CMAKE_LINK_DEPENDS_NO_SHARED": [
        "Whether to skip link dependencies on shared library files.\\nThis variable initializes the ``LINK_DEPENDS_NO_SHARED`` property on\\ntargets when they are created.  See that target property for\\nadditional information.\\n",
        "variable"
    ],
    "CMAKE_LINK_DIRECTORIES_BEFORE": [
        "Whether to append or prepend directories by default in\\n``link_directories()``.\\nThis variable affects the default behavior of the ``link_directories()``\\ncommand.  Setting this variable to ``ON`` is equivalent to using the ``BEFORE``\\noption in all uses of that command.\\n",
        "variable"
    ],
    "CMAKE_LINK_INTERFACE_LIBRARIES": [
        "Default value for ``LINK_INTERFACE_LIBRARIES`` of targets.\\nThis variable is used to initialize the ``LINK_INTERFACE_LIBRARIES``\\nproperty on all the targets.  See that target property for additional\\ninformation.\\n",
        "variable"
    ],
    "CMAKE_LINK_LIBRARY_FILE_FLAG": [
        "Flag to be used to link a library specified by a path to its file.\\nThe flag will be used before a library file path is given to the\\nlinker.  This is needed only on very few platforms.\\n",
        "variable"
    ],
    "CMAKE_LINK_LIBRARY_FLAG": [
        "Flag to be used to link a library into an executable.\\nThe flag will be used to specify a library to link to an executable.\\nOn most compilers this is ``-l``.\\n",
        "variable"
    ],
    "CMAKE_LINK_LIBRARY_SUFFIX": [
        "The suffix for libraries that you link to.\\nThe suffix to use for the end of a library filename, ``.lib`` on Windows.\\n",
        "variable"
    ],
    "CMAKE_LINK_SEARCH_END_STATIC": [
        "End a link line such that static system libraries are used.\\nSome linkers support switches such as ``-Bstatic`` and ``-Bdynamic`` to\\ndetermine whether to use static or shared libraries for ``-lXXX`` options.\\nCMake uses these options to set the link type for libraries whose full\\npaths are not known or (in some cases) are in implicit link\\n",
        "variable"
    ],
    "CMAKE_LINK_SEARCH_START_STATIC": [
        "Assume the linker looks for static libraries by default.\\nSome linkers support switches such as ``-Bstatic`` and ``-Bdynamic`` to\\ndetermine whether to use static or shared libraries for ``-lXXX`` options.\\nCMake uses these options to set the link type for libraries whose full\\npaths are not known or (in some cases) are in implicit link\\n",
        "variable"
    ],
    "CMAKE_LINK_WHAT_YOU_USE": [
        "Default value for ``LINK_WHAT_YOU_USE`` target property.\\nThis variable is used to initialize the property on each target as it is\\ncreated.\\n",
        "variable"
    ],
    "CMAKE_MACOSX_BUNDLE": [
        "Default value for ``MACOSX_BUNDLE`` of targets.\\nThis variable is used to initialize the ``MACOSX_BUNDLE`` property on\\nall the targets.  See that target property for additional information.\\nThis variable is set to ``ON`` by default if ``CMAKE_SYSTEM_NAME``\\nequals to :ref:`iOS, tvOS or watchOS <Cross Compiling for iOS, tvOS, or watchOS>`.\\n",
        "variable"
    ],
    "CMAKE_MACOSX_RPATH": [
        "Whether to use rpaths on macOS and iOS.\\nThis variable is used to initialize the ``MACOSX_RPATH`` property on\\nall targets.\\n",
        "variable"
    ],
    "CMAKE_MAJOR_VERSION": [
        "First version number component of the ``CMAKE_VERSION``\\nvariable.\\n",
        "variable"
    ],
    "CMAKE_MAKE_PROGRAM": [
        "Tool that can launch the native build system.\\nThe value may be the full path to an executable or just the tool\\nname if it is expected to be in the ``PATH``.\\nThe tool selected depends on the ``CMAKE_GENERATOR`` used\\nto configure the project:\\n",
        "variable"
    ],
    "CMAKE_MAP_IMPORTED_CONFIG_DEBUG": [
        "Default value for ``MAP_IMPORTED_CONFIG_<CONFIG>`` of targets.\\nThis variable is used to initialize the\\n``MAP_IMPORTED_CONFIG_<CONFIG>`` property on all the targets.  See\\nthat target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_MAP_IMPORTED_CONFIG_RELEASE": [
        "Default value for ``MAP_IMPORTED_CONFIG_<CONFIG>`` of targets.\\nThis variable is used to initialize the\\n``MAP_IMPORTED_CONFIG_<CONFIG>`` property on all the targets.  See\\nthat target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_MATCH_<n>": [
        "Capture group ``<n>`` matched by the last regular expression, for groups\\n0 through 9.  Group 0 is the entire match.  Groups 1 through 9 are the\\nsubexpressions captured by ``()`` syntax.\\nWhen a regular expression match is used, CMake fills in ``CMAKE_MATCH_<n>``\\nvariables with the match contents.  The ``CMAKE_MATCH_COUNT``\\n",
        "variable"
    ],
    "CMAKE_MATCH_COUNT": [
        "The number of matches with the last regular expression.\\nWhen a regular expression match is used, CMake fills in\\n``CMAKE_MATCH_<n>`` variables with the match contents.\\nThe ``CMAKE_MATCH_COUNT`` variable holds the number of match\\nexpressions when these are filled.\\n",
        "variable"
    ],
    "CMAKE_MAXIMUM_RECURSION_DEPTH": [
        "Maximum recursion depth for CMake scripts. It is intended to be set on the\\ncommand line with ``-DCMAKE_MAXIMUM_RECURSION_DEPTH=<x>``, or within\\n``CMakeLists.txt`` by projects that require a large recursion depth. Projects\\nthat set this variable should provide the user with a way to override it. For\\nexample:\\n",
        "variable"
    ],
    "CMAKE_MESSAGE_INDENT": [
        "The ``message()`` command joins the strings from this list and for\\nlog levels of ``NOTICE`` and below, it prepends the resultant string to\\neach line of the message.\\nExample:\\n list(APPEND listVar one two three)\\n",
        "variable"
    ],
    "CMAKE_MFC_FLAG": [
        "Use the MFC library for an executable or dll.\\nEnables the use of the Microsoft Foundation Classes (MFC).\\nIt should be set to ``1`` for the static MFC library, and\\n``2`` for the shared MFC library.  This is used in Visual Studio\\nproject files.\\n",
        "variable"
    ],
    "CMAKE_MINIMUM_REQUIRED_VERSION": [
        "The ``<min>`` version of CMake given to the most recent call to the\\n``cmake_minimum_required(VERSION)`` command.\\n",
        "variable"
    ],
    "CMAKE_MINOR_VERSION": [
        "Second version number component of the ``CMAKE_VERSION``\\nvariable.\\n",
        "variable"
    ],
    "CMAKE_MODULE_LINKER_FLAGS": [
        "Linker flags to be used to create modules.\\nThese flags will be used by the linker when creating a module.\\n",
        "variable"
    ],
    "CMAKE_MODULE_LINKER_FLAGS_DEBUG": [
        "Flags to be used when linking a module.\\nSame as ``CMAKE_C_FLAGS_*`` but used by the linker when creating modules.\\n",
        "variable"
    ],
    "CMAKE_MODULE_LINKER_FLAGS_RELEASE": [
        "Flags to be used when linking a module.\\nSame as ``CMAKE_C_FLAGS_*`` but used by the linker when creating modules.\\n",
        "variable"
    ],
    "CMAKE_MODULE_LINKER_FLAGS_DEBUG_INIT": [
        "Value used to initialize the ``CMAKE_MODULE_LINKER_FLAGS_<CONFIG>``\\ncache entry the first time a build tree is configured.\\nThis variable is meant to be set by a :variable:`toolchain file\\n<CMAKE_TOOLCHAIN_FILE>`.  CMake may prepend or append content to\\nthe value based on the environment and target platform.\\n",
        "variable"
    ],
    "CMAKE_MODULE_LINKER_FLAGS_RELEASE_INIT": [
        "Value used to initialize the ``CMAKE_MODULE_LINKER_FLAGS_<CONFIG>``\\ncache entry the first time a build tree is configured.\\nThis variable is meant to be set by a :variable:`toolchain file\\n<CMAKE_TOOLCHAIN_FILE>`.  CMake may prepend or append content to\\nthe value based on the environment and target platform.\\n",
        "variable"
    ],
    "CMAKE_MODULE_LINKER_FLAGS_INIT": [
        "Value used to initialize the ``CMAKE_MODULE_LINKER_FLAGS``\\ncache entry the first time a build tree is configured.\\nThis variable is meant to be set by a :variable:`toolchain file\\n<CMAKE_TOOLCHAIN_FILE>`.  CMake may prepend or append content to\\nthe value based on the environment and target platform.\\n",
        "variable"
    ],
    "CMAKE_MODULE_PATH": [
        ":ref:`Semicolon-separated list <CMake Language Lists>` of directories specifying a search path\\nfor CMake modules to be loaded by the ``include()`` or\\n``find_package()`` commands before checking the default modules that come\\nwith CMake.  By default it is empty, it is intended to be set by the project.\\n",
        "variable"
    ],
    "CMAKE_MSVCIDE_RUN_PATH": [
        "Extra PATH locations that should be used when executing\\n``add_custom_command()`` or ``add_custom_target()`` when using the\\n``Visual Studio 9 2008`` (or above) generator. This allows\\nfor running commands and using dll's that the IDE environment is not aware of.\\nIf not set explicitly the value is initialized by the ``CMAKE_MSVCIDE_RUN_PATH``\\n",
        "variable"
    ],
    "CMAKE_MSVC_RUNTIME_LIBRARY": [
        "Select the MSVC runtime library for use by compilers targeting the MSVC ABI.\\nThis variable is used to initialize the ``MSVC_RUNTIME_LIBRARY``\\nproperty on all targets as they are created.  It is also propagated by\\ncalls to the ``try_compile()`` command into the test project.\\nThe allowed values are:\\n",
        "variable"
    ],
    "CMAKE_NETRC": [
        "This variable is used to initialize the ``NETRC`` option for\\n``file(DOWNLOAD)`` and ``file(UPLOAD)`` commands and the\\nmodule ``ExternalProject``. See those commands for additional\\ninformation.\\nThe local option takes precedence over this variable.\\n",
        "variable"
    ],
    "CMAKE_NETRC_FILE": [
        "This variable is used to initialize the ``NETRC_FILE`` option for\\n``file(DOWNLOAD)`` and ``file(UPLOAD)`` commands and the\\nmodule ``ExternalProject``. See those commands for additional\\ninformation.\\nThe local option takes precedence over this variable.\\n",
        "variable"
    ],
    "CMAKE_NINJA_OUTPUT_PATH_PREFIX": [
        "Set output files path prefix for the ``Ninja`` generator.\\nEvery output files listed in the generated ``build.ninja`` will be\\nprefixed by the contents of this variable (a trailing slash is\\nappended if missing).  This is useful when the generated ninja file is\\nmeant to be embedded as a ``subninja`` file into a *super* ninja\\n",
        "variable"
    ],
    "CMAKE_NOT_USING_CONFIG_FLAGS": [
        "Skip ``_BUILD_TYPE`` flags if true.\\nThis is an internal flag used by the generators in CMake to tell CMake\\nto skip the ``_BUILD_TYPE`` flags.\\n",
        "variable"
    ],
    "CMAKE_NO_BUILTIN_CHRPATH": [
        "Do not use the builtin ELF editor to fix RPATHs on installation.\\nWhen an ELF binary needs to have a different RPATH after installation\\nthan it does in the build tree, CMake uses a builtin editor to change\\nthe RPATH in the installed copy.  If this variable is set to true then\\nCMake will relink the binary before installation instead of using its\\n",
        "variable"
    ],
    "CMAKE_NO_SYSTEM_FROM_IMPORTED": [
        "Default value for ``NO_SYSTEM_FROM_IMPORTED`` of targets.\\nThis variable is used to initialize the ``NO_SYSTEM_FROM_IMPORTED``\\nproperty on all the targets.  See that target property for additional\\ninformation.\\n",
        "variable"
    ],
    "CMAKE_OBJCXX_EXTENSIONS": [
        "Default value for ``OBJCXX_EXTENSIONS`` property of targets.\\nThis variable is used to initialize the ``OBJCXX_EXTENSIONS``\\nproperty on all targets.  See that target property for additional\\ninformation.\\nSee the ``cmake-compile-features(7)`` manual for information on\\n",
        "variable"
    ],
    "CMAKE_OBJCXX_STANDARD": [
        "Default value for ``OBJCXX_STANDARD`` property of targets.\\nThis variable is used to initialize the ``OBJCXX_STANDARD``\\nproperty on all targets.  See that target property for additional\\ninformation.\\nSee the ``cmake-compile-features(7)`` manual for information on\\n",
        "variable"
    ],
    "CMAKE_OBJCXX_STANDARD_REQUIRED": [
        "Default value for ``OBJCXX_STANDARD_REQUIRED`` property of targets.\\nThis variable is used to initialize the ``OBJCXX_STANDARD_REQUIRED``\\nproperty on all targets.  See that target property for additional\\ninformation.\\nSee the ``cmake-compile-features(7)`` manual for information on\\n",
        "variable"
    ],
    "CMAKE_OBJC_EXTENSIONS": [
        "Default value for ``OBJC_EXTENSIONS`` property of targets.\\nThis variable is used to initialize the ``OBJC_EXTENSIONS``\\nproperty on all targets.  See that target property for additional\\ninformation.\\nSee the ``cmake-compile-features(7)`` manual for information on\\n",
        "variable"
    ],
    "CMAKE_OBJC_STANDARD": [
        "Default value for ``OBJC_STANDARD`` property of targets.\\nThis variable is used to initialize the ``OBJC_STANDARD``\\nproperty on all targets.  See that target property for additional\\ninformation.\\nSee the ``cmake-compile-features(7)`` manual for information on\\n",
        "variable"
    ],
    "CMAKE_OBJC_STANDARD_REQUIRED": [
        "Default value for ``OBJC_STANDARD_REQUIRED`` property of targets.\\nThis variable is used to initialize the ``OBJC_STANDARD_REQUIRED``\\nproperty on all targets.  See that target property for additional\\ninformation.\\nSee the ``cmake-compile-features(7)`` manual for information on\\n",
        "variable"
    ],
    "CMAKE_OBJECT_PATH_MAX": [
        "Maximum object file full-path length allowed by native build tools.\\nCMake computes for every source file an object file name that is\\nunique to the source file and deterministic with respect to the full\\npath to the source file.  This allows multiple source files in a\\ntarget to share the same name if they lie in different directories\\n",
        "variable"
    ],
    "CMAKE_OSX_ARCHITECTURES": [
        "Target specific architectures for macOS and iOS.\\nThis variable is used to initialize the ``OSX_ARCHITECTURES``\\nproperty on each target as it is created.  See that target property\\nfor additional information.\\nThe value of this variable should be set prior to the first\\n",
        "variable"
    ],
    "CMAKE_OSX_DEPLOYMENT_TARGET": [
        "Specify the minimum version of the target platform (e.g. macOS or iOS)\\non which the target binaries are to be deployed.  CMake uses this\\nvariable value for the ``-mmacosx-version-min`` flag or their respective\\ntarget platform equivalents.  For older Xcode versions that shipped\\nmultiple macOS SDKs this variable also helps to choose the SDK in case\\n",
        "variable"
    ],
    "CMAKE_OSX_SYSROOT": [
        "Specify the location or name of the macOS platform SDK to be used.\\nCMake uses this value to compute the value of the ``-isysroot`` flag\\nor equivalent and to help the ``find_*`` commands locate files in\\nthe SDK.\\nIf not set explicitly the value is initialized by the ``SDKROOT``\\n",
        "variable"
    ],
    "CMAKE_PARENT_LIST_FILE": [
        "Full path to the CMake file that included the current one.\\nWhile processing a CMake file loaded by ``include()`` or\\n``find_package()`` this variable contains the full path to the file\\nincluding it.  The top of the include stack is always the ``CMakeLists.txt``\\nfor the current directory.  See also ``CMAKE_CURRENT_LIST_FILE``.\\n",
        "variable"
    ],
    "CMAKE_PATCH_VERSION": [
        "Third version number component of the ``CMAKE_VERSION``\\nvariable.\\n",
        "variable"
    ],
    "CMAKE_PDB_OUTPUT_DIRECTORY": [
        "Output directory for MS debug symbol ``.pdb`` files generated by the\\nlinker for executable and shared library targets.\\nThis variable is used to initialize the ``PDB_OUTPUT_DIRECTORY``\\nproperty on all the targets.  See that target property for additional\\ninformation.\\n",
        "variable"
    ],
    "CMAKE_PDB_OUTPUT_DIRECTORY_DEBUG": [
        "Per-configuration output directory for MS debug symbol ``.pdb`` files\\ngenerated by the linker for executable and shared library targets.\\nThis is a per-configuration version of ``CMAKE_PDB_OUTPUT_DIRECTORY``.\\nThis variable is used to initialize the\\n``PDB_OUTPUT_DIRECTORY_<CONFIG>``\\n",
        "variable"
    ],
    "CMAKE_PDB_OUTPUT_DIRECTORY_RELEASE": [
        "Per-configuration output directory for MS debug symbol ``.pdb`` files\\ngenerated by the linker for executable and shared library targets.\\nThis is a per-configuration version of ``CMAKE_PDB_OUTPUT_DIRECTORY``.\\nThis variable is used to initialize the\\n``PDB_OUTPUT_DIRECTORY_<CONFIG>``\\n",
        "variable"
    ],
    "CMAKE_POLICY_DEFAULT_CMP<NNNN>": [
        "Default for CMake Policy ``CMP<NNNN>`` when it is otherwise left unset.\\nCommands ``cmake_minimum_required(VERSION)`` and\\n``cmake_policy(VERSION)`` by default leave policies introduced after\\nthe given version unset.  Set ``CMAKE_POLICY_DEFAULT_CMP<NNNN>`` to ``OLD``\\nor ``NEW`` to specify the default for policy ``CMP<NNNN>``, where ``<NNNN>``\\n",
        "variable"
    ],
    "CMAKE_POLICY_WARNING_CMP<NNNN>": [
        "Explicitly enable or disable the warning when CMake Policy ``CMP<NNNN>``\\nis not set.  This is meaningful only for the few policies that do not\\nwarn by default:\\n* ``CMAKE_POLICY_WARNING_CMP0025`` controls the warning for\\n  policy ``CMP0025``.\\n",
        "variable"
    ],
    "CMAKE_POSITION_INDEPENDENT_CODE": [
        "Default value for ``POSITION_INDEPENDENT_CODE`` of targets.\\nThis variable is used to initialize the\\n``POSITION_INDEPENDENT_CODE`` property on all the targets.\\nSee that target property for additional information.  If set, it's\\nvalue is also used by the ``try_compile()`` command.\\n",
        "variable"
    ],
    "CMAKE_PREFIX_PATH": [
        ":ref:`Semicolon-separated list <CMake Language Lists>` of directories specifying installation\\n*prefixes* to be searched by the ``find_package()``,\\n``find_program()``, ``find_library()``, ``find_file()``, and\\n``find_path()`` commands.  Each command will add appropriate\\nsubdirectories (like ``bin``, ``lib``, or ``include``) as specified in its own\\n",
        "variable"
    ],
    "CMAKE_PROGRAM_PATH": [
        ":ref:`Semicolon-separated list <CMake Language Lists>` of directories specifying a search path\\nfor the ``find_program()`` command.  By default it is empty, it is\\nintended to be set by the project.  See also\\n``CMAKE_SYSTEM_PROGRAM_PATH`` and ``CMAKE_PREFIX_PATH``.\\n",
        "variable"
    ],
    "CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE": [
        "A CMake language file or module to be included as the last step of any\\n``project()`` command calls that specify ``<PROJECT-NAME>`` as the project\\nname.  This is intended for injecting custom code into project builds without\\nmodifying their source.\\nSee also the ``CMAKE_PROJECT_INCLUDE`` and\\n",
        "variable"
    ],
    "CMAKE_PROJECT_DESCRIPTION": [
        "The description of the top level project.\\nThis variable holds the description of the project as specified in the top\\nlevel CMakeLists.txt file by a ``project()`` command.  In the event that\\nthe top level CMakeLists.txt contains multiple ``project()`` calls,\\nthe most recently called one from that top level CMakeLists.txt will determine\\n",
        "variable"
    ],
    "CMAKE_PROJECT_HOMEPAGE_URL": [
        "The homepage URL of the top level project.\\nThis variable holds the homepage URL of the project as specified in the top\\nlevel CMakeLists.txt file by a ``project()`` command.  In the event that\\nthe top level CMakeLists.txt contains multiple ``project()`` calls,\\nthe most recently called one from that top level CMakeLists.txt will determine\\n",
        "variable"
    ],
    "CMAKE_PROJECT_INCLUDE": [
        "A CMake language file or module to be included as the last step of all\\n``project()`` command calls.  This is intended for injecting custom code\\ninto project builds without modifying their source.\\nSee also the ``CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE`` and\\n``CMAKE_PROJECT_INCLUDE_BEFORE`` variables.\\n",
        "variable"
    ],
    "CMAKE_PROJECT_INCLUDE_BEFORE": [
        "A CMake language file or module to be included as the first step of all\\n``project()`` command calls.  This is intended for injecting custom code\\ninto project builds without modifying their source.\\nSee also the ``CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE`` and\\n``CMAKE_PROJECT_INCLUDE`` variables.\\n",
        "variable"
    ],
    "CMAKE_PROJECT_NAME": [
        "The name of the top level project.\\nThis variable holds the name of the project as specified in the top\\nlevel CMakeLists.txt file by a ``project()`` command.  In the event that\\nthe top level CMakeLists.txt contains multiple ``project()`` calls,\\nthe most recently called one from that top level CMakeLists.txt will determine\\n",
        "variable"
    ],
    "CMAKE_PROJECT_VERSION": [
        "The version of the top level project.\\nThis variable holds the version of the project as specified in the top\\nlevel CMakeLists.txt file by a ``project()`` command.  In the event that\\nthe top level CMakeLists.txt contains multiple ``project()`` calls,\\nthe most recently called one from that top level CMakeLists.txt will determine\\n",
        "variable"
    ],
    "CMAKE_PROJECT_VERSION_MAJOR": [
        "The major version of the top level project.\\nThis variable holds the major version of the project as specified in the top\\nlevel CMakeLists.txt file by a ``project()`` command. Please see\\n``CMAKE_PROJECT_VERSION`` documentation for the behavior when\\nmultiple ``project()`` commands are used in the sources.\\n",
        "variable"
    ],
    "CMAKE_PROJECT_VERSION_MINOR": [
        "The minor version of the top level project.\\nThis variable holds the minor version of the project as specified in the top\\nlevel CMakeLists.txt file by a ``project()`` command. Please see\\n``CMAKE_PROJECT_VERSION`` documentation for the behavior when\\nmultiple ``project()`` commands are used in the sources.\\n",
        "variable"
    ],
    "CMAKE_PROJECT_VERSION_PATCH": [
        "The patch version of the top level project.\\nThis variable holds the patch version of the project as specified in the top\\nlevel CMakeLists.txt file by a ``project()`` command. Please see\\n``CMAKE_PROJECT_VERSION`` documentation for the behavior when\\nmultiple ``project()`` commands are used in the sources.\\n",
        "variable"
    ],
    "CMAKE_PROJECT_VERSION_TWEAK": [
        "The tweak version of the top level project.\\nThis variable holds the tweak version of the project as specified in the top\\nlevel CMakeLists.txt file by a ``project()`` command. Please see\\n``CMAKE_PROJECT_VERSION`` documentation for the behavior when\\nmultiple ``project()`` commands are used in the sources.\\n",
        "variable"
    ],
    "CMAKE_RANLIB": [
        "Name of randomizing tool for static libraries.\\nThis specifies name of the program that randomizes libraries on UNIX,\\nnot used on Windows, but may be present.\\n",
        "variable"
    ],
    "CMAKE_ROOT": [
        "Install directory for running cmake.\\nThis is the install root for the running CMake and the ``Modules``\\ndirectory can be found here.  This is commonly used in this format:\\n``${CMAKE_ROOT}/Modules``\\n",
        "variable"
    ],
    "CMAKE_RULE_MESSAGES": [
        "Specify whether to report a message for each make rule.\\nIf set in the cache it is used to initialize the value of the ``RULE_MESSAGES`` property.\\nUsers may disable the option in their local build tree to disable granular messages\\nand report only as each target completes in Makefile builds.\\n",
        "variable"
    ],
    "CMAKE_RUNTIME_OUTPUT_DIRECTORY": [
        "Where to put all the :ref:`RUNTIME <Runtime Output Artifacts>`\\ntarget files when built.\\nThis variable is used to initialize the ``RUNTIME_OUTPUT_DIRECTORY``\\nproperty on all the targets.  See that target property for additional\\ninformation.\\n",
        "variable"
    ],
    "CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG": [
        "Where to put all the :ref:`RUNTIME <Runtime Output Artifacts>`\\ntarget files when built for a specific configuration.\\nThis variable is used to initialize the\\n``RUNTIME_OUTPUT_DIRECTORY_<CONFIG>`` property on all the targets.\\nSee that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE": [
        "Where to put all the :ref:`RUNTIME <Runtime Output Artifacts>`\\ntarget files when built for a specific configuration.\\nThis variable is used to initialize the\\n``RUNTIME_OUTPUT_DIRECTORY_<CONFIG>`` property on all the targets.\\nSee that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_SCRIPT_MODE_FILE": [
        "Full path to the ``cmake(1)`` ``-P`` script file currently being\\nprocessed.\\nWhen run in ``cmake(1)`` ``-P`` script mode, CMake sets this variable to\\nthe full path of the script file.  When run to configure a ``CMakeLists.txt``\\nfile, this variable is not set.\\n",
        "variable"
    ],
    "CMAKE_SHARED_LIBRARY_PREFIX": [
        "The prefix for shared libraries that you link to.\\nThe prefix to use for the name of a shared library, ``lib`` on UNIX.\\n``CMAKE_SHARED_LIBRARY_PREFIX_<LANG>`` overrides this for language ``<LANG>``.\\n",
        "variable"
    ],
    "CMAKE_SHARED_LIBRARY_SUFFIX": [
        "The suffix for shared libraries that you link to.\\nThe suffix to use for the end of a shared library filename, ``.dll`` on\\nWindows.\\n``CMAKE_SHARED_LIBRARY_SUFFIX_<LANG>`` overrides this for language ``<LANG>``.\\n",
        "variable"
    ],
    "CMAKE_SHARED_LINKER_FLAGS": [
        "Linker flags to be used to create shared libraries.\\nThese flags will be used by the linker when creating a shared library.\\n",
        "variable"
    ],
    "CMAKE_SHARED_LINKER_FLAGS_DEBUG": [
        "Flags to be used when linking a shared library.\\nSame as ``CMAKE_C_FLAGS_*`` but used by the linker when creating shared\\nlibraries.\\n",
        "variable"
    ],
    "CMAKE_SHARED_LINKER_FLAGS_RELEASE": [
        "Flags to be used when linking a shared library.\\nSame as ``CMAKE_C_FLAGS_*`` but used by the linker when creating shared\\nlibraries.\\n",
        "variable"
    ],
    "CMAKE_SHARED_LINKER_FLAGS_DEBUG_INIT": [
        "Value used to initialize the ``CMAKE_SHARED_LINKER_FLAGS_<CONFIG>``\\ncache entry the first time a build tree is configured.\\nThis variable is meant to be set by a :variable:`toolchain file\\n<CMAKE_TOOLCHAIN_FILE>`.  CMake may prepend or append content to\\nthe value based on the environment and target platform.\\n",
        "variable"
    ],
    "CMAKE_SHARED_LINKER_FLAGS_RELEASE_INIT": [
        "Value used to initialize the ``CMAKE_SHARED_LINKER_FLAGS_<CONFIG>``\\ncache entry the first time a build tree is configured.\\nThis variable is meant to be set by a :variable:`toolchain file\\n<CMAKE_TOOLCHAIN_FILE>`.  CMake may prepend or append content to\\nthe value based on the environment and target platform.\\n",
        "variable"
    ],
    "CMAKE_SHARED_LINKER_FLAGS_INIT": [
        "Value used to initialize the ``CMAKE_SHARED_LINKER_FLAGS``\\ncache entry the first time a build tree is configured.\\nThis variable is meant to be set by a :variable:`toolchain file\\n<CMAKE_TOOLCHAIN_FILE>`.  CMake may prepend or append content to\\nthe value based on the environment and target platform.\\n",
        "variable"
    ],
    "CMAKE_SHARED_MODULE_PREFIX": [
        "The prefix for loadable modules that you link to.\\nThe prefix to use for the name of a loadable module on this platform.\\n``CMAKE_SHARED_MODULE_PREFIX_<LANG>`` overrides this for language ``<LANG>``.\\n",
        "variable"
    ],
    "CMAKE_SHARED_MODULE_SUFFIX": [
        "The suffix for shared libraries that you link to.\\nThe suffix to use for the end of a loadable module filename on this\\nplatform\\n``CMAKE_SHARED_MODULE_SUFFIX_<LANG>`` overrides this for language ``<LANG>``.\\n",
        "variable"
    ],
    "CMAKE_SIZEOF_VOID_P": [
        "Size of a ``void`` pointer.\\nThis is set to the size of a pointer on the target machine, and is determined\\nby a try compile.  If a 64-bit size is found, then the library search\\npath is modified to look for 64-bit libraries first.\\n",
        "variable"
    ],
    "CMAKE_SKIP_BUILD_RPATH": [
        "Do not include RPATHs in the build tree.\\nNormally CMake uses the build tree for the RPATH when building\\nexecutables etc on systems that use RPATH.  When the software is\\ninstalled the executables etc are relinked by CMake to have the\\ninstall RPATH.  If this variable is set to true then the software is\\n",
        "variable"
    ],
    "CMAKE_SKIP_INSTALL_ALL_DEPENDENCY": [
        "Don't make the ``install`` target depend on the ``all`` target.\\nBy default, the ``install`` target depends on the ``all`` target.  This\\nhas the effect, that when ``make install`` is invoked or ``INSTALL`` is\\nbuilt, first the ``all`` target is built, then the installation starts.\\nIf ``CMAKE_SKIP_INSTALL_ALL_DEPENDENCY`` is set to ``TRUE``, this\\n",
        "variable"
    ],
    "CMAKE_SKIP_INSTALL_RPATH": [
        "Do not include RPATHs in the install tree.\\nNormally CMake uses the build tree for the RPATH when building\\nexecutables etc on systems that use RPATH.  When the software is\\ninstalled the executables etc are relinked by CMake to have the\\ninstall RPATH.  If this variable is set to true then the software is\\n",
        "variable"
    ],
    "CMAKE_SKIP_INSTALL_RULES": [
        "Whether to disable generation of installation rules.\\nIf ``TRUE``, CMake will neither generate installation rules nor\\nwill it generate ``cmake_install.cmake`` files. This variable is ``FALSE`` by\\ndefault.\\n",
        "variable"
    ],
    "CMAKE_SKIP_RPATH": [
        "If true, do not add run time path information.\\nIf this is set to ``TRUE``, then the rpath information is not added to\\ncompiled executables.  The default is to add rpath information if the\\nplatform supports it.  This allows for easy running from the build\\ntree.  To omit RPATH in the install step, but not the build step, use\\n",
        "variable"
    ],
    "CMAKE_SOURCE_DIR": [
        "The path to the top level of the source tree.\\nThis is the full path to the top level of the current CMake source\\ntree.  For an in-source build, this would be the same as\\n``CMAKE_BINARY_DIR``.\\nWhen run in ``-P`` script mode, CMake sets the variables\\n",
        "variable"
    ],
    "CMAKE_STAGING_PREFIX": [
        "This variable may be set to a path to install to when cross-compiling. This can\\nbe useful if the path in ``CMAKE_SYSROOT`` is read-only, or otherwise\\nshould remain pristine.\\nThe ``CMAKE_STAGING_PREFIX`` location is also used as a search prefix\\nby the ``find_*`` commands. This can be controlled by setting the\\n",
        "variable"
    ],
    "CMAKE_STATIC_LIBRARY_PREFIX": [
        "The prefix for static libraries that you link to.\\nThe prefix to use for the name of a static library, ``lib`` on UNIX.\\n``CMAKE_STATIC_LIBRARY_PREFIX_<LANG>`` overrides this for language ``<LANG>``.\\n",
        "variable"
    ],
    "CMAKE_STATIC_LIBRARY_SUFFIX": [
        "The suffix for static libraries that you link to.\\nThe suffix to use for the end of a static library filename, ``.lib`` on\\nWindows.\\n``CMAKE_STATIC_LIBRARY_SUFFIX_<LANG>`` overrides this for language ``<LANG>``.\\n",
        "variable"
    ],
    "CMAKE_STATIC_LINKER_FLAGS": [
        "Flags to be used to create static libraries.  These flags will be passed\\nto the archiver when creating a static library.\\nSee also ``CMAKE_STATIC_LINKER_FLAGS_<CONFIG>``.\\n.. note::\\n  Static libraries do not actually link.  They are essentially archives\\n",
        "variable"
    ],
    "CMAKE_STATIC_LINKER_FLAGS_DEBUG": [
        "Flags to be used to create static libraries.  These flags will be passed\\nto the archiver when creating a static library in the ``<CONFIG>``\\nconfiguration.\\nSee also ``CMAKE_STATIC_LINKER_FLAGS``.\\n.. note::\\n",
        "variable"
    ],
    "CMAKE_STATIC_LINKER_FLAGS_RELEASE": [
        "Flags to be used to create static libraries.  These flags will be passed\\nto the archiver when creating a static library in the ``<CONFIG>``\\nconfiguration.\\nSee also ``CMAKE_STATIC_LINKER_FLAGS``.\\n.. note::\\n",
        "variable"
    ],
    "CMAKE_STATIC_LINKER_FLAGS_DEBUG_INIT": [
        "Value used to initialize the ``CMAKE_STATIC_LINKER_FLAGS_<CONFIG>``\\ncache entry the first time a build tree is configured.\\nThis variable is meant to be set by a :variable:`toolchain file\\n<CMAKE_TOOLCHAIN_FILE>`.  CMake may prepend or append content to\\nthe value based on the environment and target platform.\\n",
        "variable"
    ],
    "CMAKE_STATIC_LINKER_FLAGS_RELEASE_INIT": [
        "Value used to initialize the ``CMAKE_STATIC_LINKER_FLAGS_<CONFIG>``\\ncache entry the first time a build tree is configured.\\nThis variable is meant to be set by a :variable:`toolchain file\\n<CMAKE_TOOLCHAIN_FILE>`.  CMake may prepend or append content to\\nthe value based on the environment and target platform.\\n",
        "variable"
    ],
    "CMAKE_STATIC_LINKER_FLAGS_INIT": [
        "Value used to initialize the ``CMAKE_STATIC_LINKER_FLAGS``\\ncache entry the first time a build tree is configured.\\nThis variable is meant to be set by a :variable:`toolchain file\\n<CMAKE_TOOLCHAIN_FILE>`.  CMake may prepend or append content to\\nthe value based on the environment and target platform.\\n",
        "variable"
    ],
    "CMAKE_SUBLIME_TEXT_2_ENV_SETTINGS": [
        "This variable contains a list of env vars as a list of tokens with the\\nsyntax ``var=value``.\\nExample:\\n set(CMAKE_SUBLIME_TEXT_2_ENV_SETTINGS\\n    \\\"FOO=FOO1\\\\;FOO2\\\\;FOON\\\"\\n",
        "variable"
    ],
    "CMAKE_SUBLIME_TEXT_2_EXCLUDE_BUILD_TREE": [
        "If this variable evaluates to ``ON`` at the end of the top-level\\n``CMakeLists.txt`` file, the ``Sublime Text 2`` extra generator\\nexcludes the build tree from the ``.sublime-project`` if it is inside the\\nsource tree.\\n",
        "variable"
    ],
    "CMAKE_SUPPRESS_REGENERATION": [
        "If ``CMAKE_SUPPRESS_REGENERATION`` is ``OFF``, which is default, then CMake\\nadds a special target on which all other targets depend that checks the build\\nsystem and optionally re-runs CMake to regenerate the build system when\\nthe target specification source changes.\\nIf this variable evaluates to ``ON`` at the end of the top-level\\n",
        "variable"
    ],
    "CMAKE_SYSROOT": [
        "Path to pass to the compiler in the ``--sysroot`` flag.\\nThe ``CMAKE_SYSROOT`` content is passed to the compiler in the ``--sysroot``\\nflag, if supported.  The path is also stripped from the ``RPATH``/``RUNPATH``\\nif necessary on installation.  The ``CMAKE_SYSROOT`` is also used to prefix\\npaths searched by the ``find_*`` commands.\\n",
        "variable"
    ],
    "CMAKE_SYSROOT_COMPILE": [
        "Path to pass to the compiler in the ``--sysroot`` flag when compiling source\\nfiles.  This is the same as ``CMAKE_SYSROOT`` but is used only for\\ncompiling sources and not linking.\\nThis variable may only be set in a toolchain file specified by\\nthe ``CMAKE_TOOLCHAIN_FILE`` variable.\\n",
        "variable"
    ],
    "CMAKE_SYSROOT_LINK": [
        "Path to pass to the compiler in the ``--sysroot`` flag when linking.  This is\\nthe same as ``CMAKE_SYSROOT`` but is used only for linking and not\\ncompiling sources.\\nThis variable may only be set in a toolchain file specified by\\nthe ``CMAKE_TOOLCHAIN_FILE`` variable.\\n",
        "variable"
    ],
    "CMAKE_SYSTEM": [
        "Composite name of operating system CMake is compiling for.\\nThis variable is the composite of ``CMAKE_SYSTEM_NAME`` and\\n``CMAKE_SYSTEM_VERSION``, e.g.\\n``${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_VERSION}``.  If\\n``CMAKE_SYSTEM_VERSION`` is not set, then this variable is\\n",
        "variable"
    ],
    "CMAKE_SYSTEM_APPBUNDLE_PATH": [
        "Search path for macOS application bundles used by the ``find_program()``,\\nand ``find_package()`` commands.  By default it contains the standard\\ndirectories for the current system.  It is *not* intended to be modified by\\nthe project, use ``CMAKE_APPBUNDLE_PATH`` for this.\\n",
        "variable"
    ],
    "CMAKE_SYSTEM_FRAMEWORK_PATH": [
        "Search path for macOS frameworks used by the ``find_library()``,\\n``find_package()``, ``find_path()``, and ``find_file()``\\ncommands.  By default it contains the standard directories for the\\ncurrent system.  It is *not* intended to be modified by the project,\\nuse ``CMAKE_FRAMEWORK_PATH`` for this.\\n",
        "variable"
    ],
    "CMAKE_SYSTEM_IGNORE_PATH": [
        ":ref:`Semicolon-separated list <CMake Language Lists>` of directories to be *ignored* by\\nthe ``find_program()``, ``find_library()``, ``find_file()``,\\nand ``find_path()`` commands.  This is useful in cross-compiling\\nenvironments where some system directories contain incompatible but\\npossibly linkable libraries.  For example, on cross-compiled cluster\\n",
        "variable"
    ],
    "CMAKE_SYSTEM_INCLUDE_PATH": [
        ":ref:`Semicolon-separated list <CMake Language Lists>` of directories specifying a search path\\nfor the ``find_file()`` and ``find_path()`` commands.  By default\\nthis contains the standard directories for the current system.  It is *not*\\nintended to be modified by the project; use ``CMAKE_INCLUDE_PATH`` for\\nthis.  See also ``CMAKE_SYSTEM_PREFIX_PATH``.\\n",
        "variable"
    ],
    "CMAKE_SYSTEM_LIBRARY_PATH": [
        ":ref:`Semicolon-separated list <CMake Language Lists>` of directories specifying a search path\\nfor the ``find_library()`` command.  By default this contains the\\nstandard directories for the current system.  It is *not* intended to be\\nmodified by the project; use ``CMAKE_LIBRARY_PATH`` for this.\\nSee also ``CMAKE_SYSTEM_PREFIX_PATH``.\\n",
        "variable"
    ],
    "CMAKE_SYSTEM_NAME": [
        "The name of the operating system for which CMake is to build.\\nSee the ``CMAKE_SYSTEM_VERSION`` variable for the OS version.\\nNote that ``CMAKE_SYSTEM_NAME`` is not set to anything by default when running\\nin script mode, since it's not building anything.\\nSystem Name for Host Builds\\n",
        "variable"
    ],
    "CMAKE_SYSTEM_PREFIX_PATH": [
        ":ref:`Semicolon-separated list <CMake Language Lists>` of directories specifying installation\\n*prefixes* to be searched by the ``find_package()``,\\n``find_program()``, ``find_library()``, ``find_file()``, and\\n``find_path()`` commands.  Each command will add appropriate\\nsubdirectories (like ``bin``, ``lib``, or ``include``) as specified in its own\\n",
        "variable"
    ],
    "CMAKE_SYSTEM_PROCESSOR": [
        "The name of the CPU CMake is building for.\\nThis variable is the same as ``CMAKE_HOST_SYSTEM_PROCESSOR`` if\\nyou build for the host system instead of the target system when\\ncross compiling.\\n",
        "variable"
    ],
    "CMAKE_SYSTEM_PROGRAM_PATH": [
        ":ref:`Semicolon-separated list <CMake Language Lists>` of directories specifying a search path\\nfor the ``find_program()`` command.  By default this contains the\\nstandard directories for the current system.  It is *not* intended to be\\nmodified by the project; use ``CMAKE_PROGRAM_PATH`` for this.\\nSee also ``CMAKE_SYSTEM_PREFIX_PATH``.\\n",
        "variable"
    ],
    "CMAKE_SYSTEM_VERSION": [
        "The version of the operating system for which CMake is to build.\\nSee the ``CMAKE_SYSTEM_NAME`` variable for the OS name.\\nSystem Version for Host Builds\\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\nWhen the ``CMAKE_SYSTEM_NAME`` variable takes its default value\\n",
        "variable"
    ],
    "CMAKE_Swift_LANGUAGE_VERSION": [
        "Set to the Swift language version number.  If not set, the oldest legacy\\nversion known to be available in the host Xcode version is assumed:\\n* Swift ``4.0`` for Xcode 10.2 and above.\\n* Swift ``3.0`` for Xcode 8.3 and above.\\n* Swift ``2.3`` for Xcode 8.2 and below.\\n",
        "variable"
    ],
    "CMAKE_Swift_MODULE_DIRECTORY": [
        "Swift module output directory.\\nThis variable is used to initialise the ``Swift_MODULE_DIRECTORY``\\nproperty on all the targets.  See the target property for additional\\ninformation.\\n",
        "variable"
    ],
    "CMAKE_Swift_NUM_THREADS": [
        "Number of threads for parallel compilation for Swift targets.\\nThis variable controls the number of parallel jobs that the swift driver creates\\nfor building targets.  If not specified, it will default to the number of\\nlogical CPUs on the host.\\n",
        "variable"
    ],
    "CMAKE_TOOLCHAIN_FILE": [
        "Path to toolchain file supplied to ``cmake(1)``.\\nThis variable is specified on the command line when cross-compiling with CMake.\\nIt is the path to a file which is read early in the CMake run and which\\nspecifies locations for compilers and toolchain utilities, and other target\\nplatform and compiler related information.\\n",
        "variable"
    ],
    "CMAKE_TRY_COMPILE_CONFIGURATION": [
        "Build configuration used for ``try_compile()`` and ``try_run()``\\nprojects.\\nProjects built by ``try_compile()`` and ``try_run()`` are built\\nsynchronously during the CMake configuration step.  Therefore a specific build\\nconfiguration must be chosen even if the generated build system\\n",
        "variable"
    ],
    "CMAKE_TRY_COMPILE_PLATFORM_VARIABLES": [
        "List of variables that the ``try_compile()`` command source file signature\\nmust propagate into the test project in order to target the same platform as\\nthe host project.\\nThis variable should not be set by project code.  It is meant to be set by\\nCMake's platform information modules for the current toolchain, or by a\\n",
        "variable"
    ],
    "CMAKE_TRY_COMPILE_TARGET_TYPE": [
        "Type of target generated for ``try_compile()`` calls using the\\nsource file signature.  Valid values are:\\n``EXECUTABLE``\\n  Use ``add_executable()`` to name the source file in the\\n  generated project.  This is the default if no value is given.\\n",
        "variable"
    ],
    "CMAKE_TWEAK_VERSION": [
        "Defined to ``0`` for compatibility with code written for older\\nCMake versions that may have defined higher values.\\n.. note::\\n  In CMake versions 2.8.2 through 2.8.12, this variable holds\\n  the fourth version number component of the\\n",
        "variable"
    ],
    "CMAKE_UNITY_BUILD": [
        "This variable is used to initialize the ``UNITY_BUILD``\\nproperty of targets when they are created.  Setting it to true\\nenables batch compilation of multiple sources within each target.\\nThis feature is known as a *Unity* or *Jumbo* build.\\nProjects should not set this variable, it is intended as a developer\\n",
        "variable"
    ],
    "CMAKE_UNITY_BUILD_BATCH_SIZE": [
        "This variable is used to initialize the ``UNITY_BUILD_BATCH_SIZE``\\nproperty of targets when they are created.  It specifies the default upper\\nlimit on the number of source files that may be combined in any one unity\\nsource file when unity builds are enabled for a target.\\n",
        "variable"
    ],
    "CMAKE_USER_MAKE_RULES_OVERRIDE": [
        "Specify a CMake file that overrides platform information.\\nCMake loads the specified file while enabling support for each\\nlanguage from either the ``project()`` or ``enable_language()``\\ncommands.  It is loaded after CMake's builtin compiler and platform information\\nmodules have been loaded but before the information is used.  The file\\n",
        "variable"
    ],
    "CMAKE_USER_MAKE_RULES_OVERRIDE_C": [
        "Specify a CMake file that overrides platform information for ``<LANG>``.\\nThis is a language-specific version of\\n``CMAKE_USER_MAKE_RULES_OVERRIDE`` loaded only when enabling language\\n``<LANG>``.\\n",
        "variable"
    ],
    "CMAKE_USER_MAKE_RULES_OVERRIDE_CXX": [
        "Specify a CMake file that overrides platform information for ``<LANG>``.\\nThis is a language-specific version of\\n``CMAKE_USER_MAKE_RULES_OVERRIDE`` loaded only when enabling language\\n``<LANG>``.\\n",
        "variable"
    ],
    "CMAKE_USE_RELATIVE_PATHS": [
        "This variable has no effect.  The partially implemented effect it\\nhad in previous releases was removed in CMake 3.4.\\n",
        "variable"
    ],
    "CMAKE_VERBOSE_MAKEFILE": [
        "Enable verbose output from Makefile builds.\\nThis variable is a cache entry initialized (to ``FALSE``) by\\nthe ``project()`` command.  Users may enable the option\\nin their local build tree to get more verbose output from\\nMakefile builds and show each command line as it is launched.\\n",
        "variable"
    ],
    "CMAKE_VERSION": [
        "The CMake version string as three non-negative integer components\\nseparated by ``.`` and possibly followed by ``-`` and other information.\\nThe first two components represent the feature level and the third\\ncomponent represents either a bug-fix level or development date.\\nRelease versions and release candidate versions of CMake use the format::\\n",
        "variable"
    ],
    "CMAKE_VISIBILITY_INLINES_HIDDEN": [
        "Default value for the ``VISIBILITY_INLINES_HIDDEN`` target\\nproperty when a target is created.\\n",
        "variable"
    ],
    "CMAKE_VS_DEVENV_COMMAND": [
        "The generators for ``Visual Studio 9 2008`` and above set this\\nvariable to the ``devenv.com`` command installed with the corresponding\\nVisual Studio version.  Note that this variable may be empty on\\nVisual Studio Express editions because they do not provide this tool.\\nThis variable is not defined by other generators even if ``devenv.com``\\n",
        "variable"
    ],
    "CMAKE_VS_GLOBALS": [
        "List of ``Key=Value`` records to be set per target as target properties\\n``VS_GLOBAL_<variable>`` with ``variable=Key`` and value ``Value``.\\nFor example:\\n set(CMAKE_VS_GLOBALS\\n   \\\"DefaultLanguage=en-US\\\"\\n",
        "variable"
    ],
    "CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD": [
        "Include ``INSTALL`` target to default build.\\nIn Visual Studio solution, by default the ``INSTALL`` target will not be part\\nof the default build. Setting this variable will enable the ``INSTALL`` target\\nto be part of the default build.\\n",
        "variable"
    ],
    "CMAKE_VS_INCLUDE_PACKAGE_TO_DEFAULT_BUILD": [
        "Include ``PACKAGE`` target to default build.\\nIn Visual Studio solution, by default the ``PACKAGE`` target will not be part\\nof the default build. Setting this variable will enable the ``PACKAGE`` target\\nto be part of the default build.\\n",
        "variable"
    ],
    "CMAKE_VS_INTEL_Fortran_PROJECT_VERSION": [
        "When generating for ``Visual Studio 9 2008`` or greater with the Intel\\nFortran plugin installed, this specifies the ``.vfproj`` project file format\\nversion.  This is intended for internal use by CMake and should not be\\nused by project code.\\n",
        "variable"
    ],
    "CMAKE_VS_JUST_MY_CODE_DEBUGGING": [
        "Enable Just My Code with Visual Studio debugger.\\nThis variable is used to initialize the ``VS_JUST_MY_CODE_DEBUGGING``\\nproperty on all targets when they are created.  See that target property for\\nadditional information.\\n",
        "variable"
    ],
    "CMAKE_VS_MSBUILD_COMMAND": [
        "The generators for ``Visual Studio 10 2010`` and above set this\\nvariable to the ``MSBuild.exe`` command installed with the corresponding\\nVisual Studio version.\\nThis variable is not defined by other generators even if ``MSBuild.exe``\\nis installed on the computer.\\n",
        "variable"
    ],
    "CMAKE_VS_NsightTegra_VERSION": [
        "When using a Visual Studio generator with the\\n``CMAKE_SYSTEM_NAME`` variable set to ``Android``,\\nthis variable contains the version number of the\\ninstalled NVIDIA Nsight Tegra Visual Studio Edition.\\n",
        "variable"
    ],
    "CMAKE_VS_PLATFORM_NAME": [
        "Visual Studio target platform name used by the current generator.\\nVS 8 and above allow project files to specify a target platform.\\nCMake provides the name of the chosen platform in this variable.\\nSee the ``CMAKE_GENERATOR_PLATFORM`` variable for details.\\nSee also the ``CMAKE_VS_PLATFORM_NAME_DEFAULT`` variable.\\n",
        "variable"
    ],
    "CMAKE_VS_PLATFORM_NAME_DEFAULT": [
        "Default for the Visual Studio target platform name for the current generator\\nwithout considering the value of the ``CMAKE_GENERATOR_PLATFORM``\\nvariable.  For :ref:`Visual Studio Generators` for VS 2017 and below this is\\nalways ``Win32``.  For VS 2019 and above this is based on the host platform.\\nSee also the ``CMAKE_VS_PLATFORM_NAME`` variable.\\n",
        "variable"
    ],
    "CMAKE_VS_PLATFORM_TOOLSET": [
        "Visual Studio Platform Toolset name.\\nVS 10 and above use MSBuild under the hood and support multiple\\ncompiler toolchains.  CMake may specify a toolset explicitly, such as\\n``v110`` for VS 11 or ``Windows7.1SDK`` for 64-bit support in VS 10\\nExpress.  CMake provides the name of the chosen toolset in this\\n",
        "variable"
    ],
    "CMAKE_VS_PLATFORM_TOOLSET_CUDA": [
        "NVIDIA CUDA Toolkit version whose Visual Studio toolset to use.\\nThe :ref:`Visual Studio Generators` for VS 2010 and above support using\\na CUDA toolset provided by a CUDA Toolkit.  The toolset version number\\nmay be specified by a field in ``CMAKE_GENERATOR_TOOLSET`` of\\nthe form ``cuda=8.0``. Or it is automatically detected if a path to\\n",
        "variable"
    ],
    "CMAKE_VS_PLATFORM_TOOLSET_CUDA_CUSTOM_DIR": [
        "Path to standalone NVIDIA CUDA Toolkit (eg. extracted from installer).\\nThe :ref:`Visual Studio Generators` for VS 2010 and above support using\\na standalone (non-installed) NVIDIA CUDA toolkit.  The path\\nmay be specified by a field in ``CMAKE_GENERATOR_TOOLSET`` of\\nthe form ``cuda=C:\\\\path\\\\to\\\\cuda``.  The given directory must at least\\n",
        "variable"
    ],
    "CMAKE_VS_PLATFORM_TOOLSET_HOST_ARCHITECTURE": [
        "Visual Studio preferred tool architecture.\\nThe :ref:`Visual Studio Generators` for VS 2013 and above support using\\neither the 32-bit or 64-bit host toolchains by specifying a ``host=x86``\\nor ``host=x64`` value in the ``CMAKE_GENERATOR_TOOLSET`` option.\\nCMake provides the selected toolchain architecture preference in this\\n",
        "variable"
    ],
    "CMAKE_VS_PLATFORM_TOOLSET_VERSION": [
        "Visual Studio Platform Toolset version.\\nThe :ref:`Visual Studio Generators` for VS 2017 and above allow to\\nselect minor versions of the same toolset. The toolset version number\\nmay be specified by a field in ``CMAKE_GENERATOR_TOOLSET`` of\\nthe form ``version=14.11``. If none is specified CMake will choose a default\\n",
        "variable"
    ],
    "CMAKE_VS_SDK_EXCLUDE_DIRECTORIES": [
        "This variable allows to override Visual Studio default Exclude Directories.\\n",
        "variable"
    ],
    "CMAKE_VS_SDK_EXECUTABLE_DIRECTORIES": [
        "This variable allows to override Visual Studio default Executable Directories.\\n",
        "variable"
    ],
    "CMAKE_VS_SDK_INCLUDE_DIRECTORIES": [
        "This variable allows to override Visual Studio default Include Directories.\\n",
        "variable"
    ],
    "CMAKE_VS_SDK_LIBRARY_DIRECTORIES": [
        "This variable allows to override Visual Studio default Library Directories.\\n",
        "variable"
    ],
    "CMAKE_VS_SDK_LIBRARY_WINRT_DIRECTORIES": [
        "This variable allows to override Visual Studio default Library WinRT\\nDirectories.\\n",
        "variable"
    ],
    "CMAKE_VS_SDK_REFERENCE_DIRECTORIES": [
        "This variable allows to override Visual Studio default Reference Directories.\\n",
        "variable"
    ],
    "CMAKE_VS_SDK_SOURCE_DIRECTORIES": [
        "This variable allows to override Visual Studio default Source Directories.\\n",
        "variable"
    ],
    "CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION": [
        "Visual Studio Windows Target Platform Version.\\nWhen targeting Windows 10 and above Visual Studio 2015 and above support\\nspecification of a target Windows version to select a corresponding SDK.\\nThe ``CMAKE_SYSTEM_VERSION`` variable may be set to specify a\\nversion.  Otherwise CMake computes a default version based on the Windows\\n",
        "variable"
    ],
    "CMAKE_VS_WINRT_BY_DEFAULT": [
        "Tell :ref:`Visual Studio Generators` for VS 2010 and above that the\\ntarget platform compiles as WinRT by default (compiles with ``/ZW``).\\nThis variable is meant to be set by a\\n``toolchain file`` for such platforms.\\n",
        "variable"
    ],
    "CMAKE_WARN_DEPRECATED": [
        "Whether to issue warnings for deprecated functionality.\\nIf not ``FALSE``, use of deprecated functionality will issue warnings.\\nIf this variable is not set, CMake behaves as if it were set to ``TRUE``.\\nWhen running ``cmake(1)``, this option can be enabled with the\\n``-Wdeprecated`` option, or disabled with the ``-Wno-deprecated`` option.\\n",
        "variable"
    ],
    "CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION": [
        "Ask ``cmake_install.cmake`` script to warn each time a file with absolute\\n``INSTALL DESTINATION`` is encountered.\\nThis variable is used by CMake-generated ``cmake_install.cmake`` scripts.\\nIf one sets this variable to ``ON`` while running the script, it may get\\nwarning messages from the script.\\n",
        "variable"
    ],
    "CMAKE_WIN32_EXECUTABLE": [
        "Default value for ``WIN32_EXECUTABLE`` of targets.\\nThis variable is used to initialize the ``WIN32_EXECUTABLE`` property\\non all the targets.  See that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS": [
        "Default value for ``WINDOWS_EXPORT_ALL_SYMBOLS`` target property.\\nThis variable is used to initialize the property on each target as it is\\ncreated.\\n",
        "variable"
    ],
    "CMAKE_XCODE_ATTRIBUTE_<an-attribute>": [
        "Set Xcode target attributes directly.\\nTell the ``Xcode`` generator to set '<an-attribute>' to a given value\\nin the generated Xcode project.  Ignored on other generators.\\nSee the ``XCODE_ATTRIBUTE_<an-attribute>`` target property\\nto set attributes on a specific target.\\n",
        "variable"
    ],
    "CMAKE_XCODE_GENERATE_SCHEME": [
        "If enabled, the ``Xcode`` generator will generate schema files.  These\\nare useful to invoke analyze, archive, build-for-testing and test\\nactions from the command line.\\nThis variable initializes the\\n``XCODE_GENERATE_SCHEME``\\n",
        "variable"
    ],
    "CMAKE_XCODE_GENERATE_TOP_LEVEL_PROJECT_ONLY": [
        "If enabled, the ``Xcode`` generator will generate only a\\nsingle Xcode project file for the topmost ``project()`` command\\ninstead of generating one for every ``project()`` command.\\nThis could be useful to speed up the CMake generation step for\\nlarge projects and to work-around a bug in the ``ZERO_CHECK`` logic.\\n",
        "variable"
    ],
    "CMAKE_XCODE_PLATFORM_TOOLSET": [
        "Xcode compiler selection.\\n``Xcode`` supports selection of a compiler from one of the installed\\ntoolsets.  CMake provides the name of the chosen toolset in this\\nvariable, if any is explicitly selected (e.g.  via the ``cmake(1)``\\n``-T`` option).\\n",
        "variable"
    ],
    "CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER": [
        "Whether to enable ``Address Sanitizer`` in the Diagnostics\\nsection of the generated Xcode scheme.\\nThis variable initializes the\\n``XCODE_SCHEME_ADDRESS_SANITIZER``\\nproperty on all targets.\\n",
        "variable"
    ],
    "CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN": [
        "Whether to enable ``Detect use of stack after return``\\nin the Diagnostics section of the generated Xcode scheme.\\nThis variable initializes the\\n``XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN``\\nproperty on all targets.\\n",
        "variable"
    ],
    "CMAKE_XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING": [
        "Whether to enable\\n``Allow debugging when using document Versions Browser``\\nin the Options section of the generated Xcode scheme.\\nThis variable initializes the\\n``XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING``\\n",
        "variable"
    ],
    "CMAKE_XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER": [
        "Whether to disable the ``Main Thread Checker``\\nin the Diagnostics section of the generated Xcode scheme.\\nThis variable initializes the\\n``XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER``\\nproperty on all targets.\\n",
        "variable"
    ],
    "CMAKE_XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS": [
        "Whether to enable ``Dynamic Library Loads``\\nin the Diagnostics section of the generated Xcode scheme.\\nThis variable initializes the\\n``XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS``\\nproperty on all targets.\\n",
        "variable"
    ],
    "CMAKE_XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE": [
        "Whether to enable ``Dynamic Linker API usage``\\nin the Diagnostics section of the generated Xcode scheme.\\nThis variable initializes the\\n``XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE``\\nproperty on all targets.\\n",
        "variable"
    ],
    "CMAKE_XCODE_SCHEME_GUARD_MALLOC": [
        "Whether to enable ``Guard Malloc``\\nin the Diagnostics section of the generated Xcode scheme.\\nThis variable initializes the\\n``XCODE_SCHEME_GUARD_MALLOC``\\nproperty on all targets.\\n",
        "variable"
    ],
    "CMAKE_XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP": [
        "Whether to enable the ``Main Thread Checker`` option\\n``Pause on issues``\\nin the Diagnostics section of the generated Xcode scheme.\\nThis variable initializes the\\n``XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP``\\n",
        "variable"
    ],
    "CMAKE_XCODE_SCHEME_MALLOC_GUARD_EDGES": [
        "Whether to enable ``Malloc Guard Edges``\\nin the Diagnostics section of the generated Xcode scheme.\\nThis variable initializes the\\n``XCODE_SCHEME_MALLOC_GUARD_EDGES``\\nproperty on all targets.\\n",
        "variable"
    ],
    "CMAKE_XCODE_SCHEME_MALLOC_SCRIBBLE": [
        "Whether to enable ``Malloc Scribble``\\nin the Diagnostics section of the generated Xcode scheme.\\nThis variable initializes the\\n``XCODE_SCHEME_MALLOC_SCRIBBLE``\\nproperty on all targets.\\n",
        "variable"
    ],
    "CMAKE_XCODE_SCHEME_MALLOC_STACK": [
        "Whether to enable ``Malloc Stack`` in the Diagnostics\\nsection of the generated Xcode scheme.\\nThis variable initializes the\\n``XCODE_SCHEME_MALLOC_STACK``\\nproperty on all targets.\\n",
        "variable"
    ],
    "CMAKE_XCODE_SCHEME_THREAD_SANITIZER": [
        "Whether to enable ``Thread Sanitizer`` in the Diagnostics\\nsection of the generated Xcode scheme.\\nThis variable initializes the\\n``XCODE_SCHEME_THREAD_SANITIZER``\\nproperty on all targets.\\n",
        "variable"
    ],
    "CMAKE_XCODE_SCHEME_THREAD_SANITIZER_STOP": [
        "Whether to enable ``Thread Sanitizer - Pause on issues``\\nin the Diagnostics section of the generated Xcode scheme.\\nThis variable initializes the\\n``XCODE_SCHEME_THREAD_SANITIZER_STOP``\\nproperty on all targets.\\n",
        "variable"
    ],
    "CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER": [
        "Whether to enable ``Undefined Behavior Sanitizer``\\nin the Diagnostics section of the generated Xcode scheme.\\nThis variable initializes the\\n``XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER``\\nproperty on all targets.\\n",
        "variable"
    ],
    "CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP": [
        "Whether to enable ``Undefined Behavior Sanitizer`` option\\n``Pause on issues``\\nin the Diagnostics section of the generated Xcode scheme.\\nThis variable initializes the\\n``XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP``\\n",
        "variable"
    ],
    "CMAKE_XCODE_SCHEME_ZOMBIE_OBJECTS": [
        "Whether to enable ``Zombie Objects``\\nin the Diagnostics section of the generated Xcode scheme.\\nThis variable initializes the\\n``XCODE_SCHEME_ZOMBIE_OBJECTS``\\nproperty on all targets.\\n",
        "variable"
    ],
    "CPACK_ABSOLUTE_DESTINATION_FILES": [
        "List of files which have been installed using an ``ABSOLUTE DESTINATION`` path.\\nThis variable is a Read-Only variable which is set internally by CPack\\nduring installation and before packaging using\\n``CMAKE_ABSOLUTE_DESTINATION_FILES`` defined in ``cmake_install.cmake``\\nscripts.  The value can be used within CPack project configuration\\n",
        "variable"
    ],
    "CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY": [
        "Boolean toggle to include/exclude top level directory (component case).\\nSimilar usage as ``CPACK_INCLUDE_TOPLEVEL_DIRECTORY`` but for the\\ncomponent case.  See ``CPACK_INCLUDE_TOPLEVEL_DIRECTORY``\\ndocumentation for the detail.\\n",
        "variable"
    ],
    "CPACK_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION": [
        "Ask CPack to error out as soon as a file with absolute ``INSTALL DESTINATION``\\nis encountered.\\nThe fatal error is emitted before the installation of the offending\\nfile takes place.  Some CPack generators, like ``NSIS``, enforce this\\ninternally.  This variable triggers the definition\\n",
        "variable"
    ],
    "CPACK_INCLUDE_TOPLEVEL_DIRECTORY": [
        "Boolean toggle to include/exclude top level directory.\\nWhen preparing a package CPack installs the item under the so-called\\ntop level directory.  The purpose of is to include (set to ``1`` or ``ON`` or\\n``TRUE``) the top level directory in the package or not (set to ``0`` or\\n``OFF`` or ``FALSE``).\\n",
        "variable"
    ],
    "CPACK_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS": [
        "Default permissions for implicitly created directories during packaging.\\nThis variable serves the same purpose during packaging as the\\n``CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS`` variable\\nserves during installation (e.g. ``make install``).\\nIf `include(CPack)` is used then by default this variable is set to the content\\n",
        "variable"
    ],
    "CPACK_PACKAGING_INSTALL_PREFIX": [
        "The prefix used in the built package.\\nEach CPack generator has a default value (like ``/usr``).  This default\\nvalue may be overwritten from the ``CMakeLists.txt`` or the ``cpack(1)``\\ncommand line by setting an alternative value.  Example:\\n::\\n",
        "variable"
    ],
    "CPACK_SET_DESTDIR": [
        "Boolean toggle to make CPack use ``DESTDIR`` mechanism when packaging.\\n``DESTDIR`` means DESTination DIRectory.  It is commonly used by makefile\\nusers in order to install software at non-default location.  It is a\\nbasic relocation mechanism that should not be used on Windows (see\\n``CMAKE_INSTALL_PREFIX`` documentation).  It is usually invoked like\\n",
        "variable"
    ],
    "CPACK_WARN_ON_ABSOLUTE_INSTALL_DESTINATION": [
        "Ask CPack to warn each time a file with absolute ``INSTALL DESTINATION`` is\\nencountered.\\nThis variable triggers the definition of\\n``CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION`` when CPack runs\\n``cmake_install.cmake`` scripts.\\n",
        "variable"
    ],
    "CTEST_BINARY_DIRECTORY": [
        "Specify the CTest ``BuildDirectory`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_BUILD_COMMAND": [
        "Specify the CTest ``MakeCommand`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_BUILD_NAME": [
        "Specify the CTest ``BuildName`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_BZR_COMMAND": [
        "Specify the CTest ``BZRCommand`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_BZR_UPDATE_OPTIONS": [
        "Specify the CTest ``BZRUpdateOptions`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_CHANGE_ID": [
        "Specify the CTest ``ChangeId`` setting\\nin a ``ctest(1)`` dashboard client script.\\nThis setting allows CTest to pass arbitrary information about this\\nbuild up to CDash.  One use of this feature is to allow CDash to\\npost comments on your pull request if anything goes wrong with your build.\\n",
        "variable"
    ],
    "CTEST_CHECKOUT_COMMAND": [
        "Tell the ``ctest_start()`` command how to checkout or initialize\\nthe source directory in a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_CONFIGURATION_TYPE": [
        "Specify the CTest ``DefaultCTestConfigurationType`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_CONFIGURE_COMMAND": [
        "Specify the CTest ``ConfigureCommand`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_COVERAGE_COMMAND": [
        "Specify the CTest ``CoverageCommand`` setting\\nin a ``ctest(1)`` dashboard client script.\\nCobertura\\n'''''''''\\nUsing Cobertura as the coverage generation within your multi-module\\n",
        "variable"
    ],
    "CTEST_COVERAGE_EXTRA_FLAGS": [
        "Specify the CTest ``CoverageExtraFlags`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_CURL_OPTIONS": [
        "Specify the CTest ``CurlOptions`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_CUSTOM_COVERAGE_EXCLUDE": [
        "A list of regular expressions which will be used to exclude files by their\\npath from coverage output by the ``ctest_coverage()`` command.\\nIt is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``\\nfile. See ``ctest_read_custom_files()`` documentation.\\n",
        "variable"
    ],
    "CTEST_CUSTOM_ERROR_EXCEPTION": [
        "A list of regular expressions which will be used to exclude when detecting\\nerror messages in build outputs by the ``ctest_test()`` command.\\nIt is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``\\nfile. See ``ctest_read_custom_files()`` documentation.\\n",
        "variable"
    ],
    "CTEST_CUSTOM_ERROR_MATCH": [
        "A list of regular expressions which will be used to detect error messages in\\nbuild outputs by the ``ctest_test()`` command.\\nIt is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``\\nfile. See ``ctest_read_custom_files()`` documentation.\\n",
        "variable"
    ],
    "CTEST_CUSTOM_ERROR_POST_CONTEXT": [
        "The number of lines to include as context which follow an error message by the\\n``ctest_test()`` command. The default is 10.\\nIt is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``\\nfile. See ``ctest_read_custom_files()`` documentation.\\n",
        "variable"
    ],
    "CTEST_CUSTOM_ERROR_PRE_CONTEXT": [
        "The number of lines to include as context which precede an error message by\\nthe ``ctest_test()`` command. The default is 10.\\nIt is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``\\nfile. See ``ctest_read_custom_files()`` documentation.\\n",
        "variable"
    ],
    "CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE": [
        "When saving a failing test's output, this is the maximum size, in bytes, that\\nwill be collected by the ``ctest_test()`` command. Defaults to 307200\\n(300 KiB).\\nIt is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``\\nfile. See ``ctest_read_custom_files()`` documentation.\\n",
        "variable"
    ],
    "CTEST_CUSTOM_MAXIMUM_NUMBER_OF_ERRORS": [
        "The maximum number of errors in a single build step which will be detected.\\nAfter this, the ``ctest_test()`` command will truncate the output.\\nDefaults to 50.\\nIt is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``\\nfile. See ``ctest_read_custom_files()`` documentation.\\n",
        "variable"
    ],
    "CTEST_CUSTOM_MAXIMUM_NUMBER_OF_WARNINGS": [
        "The maximum number of warnings in a single build step which will be detected.\\nAfter this, the ``ctest_test()`` command will truncate the output.\\nDefaults to 50.\\nIt is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``\\nfile. See ``ctest_read_custom_files()`` documentation.\\n",
        "variable"
    ],
    "CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE": [
        "When saving a passing test's output, this is the maximum size, in bytes, that\\nwill be collected by the ``ctest_test()`` command. Defaults to 1024\\n(1 KiB).\\nIt is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``\\nfile. See ``ctest_read_custom_files()`` documentation.\\n",
        "variable"
    ],
    "CTEST_CUSTOM_MEMCHECK_IGNORE": [
        "A list of regular expressions to use to exclude tests during the\\n``ctest_memcheck()`` command.\\nIt is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``\\nfile. See ``ctest_read_custom_files()`` documentation.\\n",
        "variable"
    ],
    "CTEST_CUSTOM_POST_MEMCHECK": [
        "A list of commands to run at the end of the ``ctest_memcheck()`` command.\\nIt is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``\\nfile. See ``ctest_read_custom_files()`` documentation.\\n",
        "variable"
    ],
    "CTEST_CUSTOM_POST_TEST": [
        "A list of commands to run at the end of the ``ctest_test()`` command.\\nIt is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``\\nfile. See ``ctest_read_custom_files()`` documentation.\\n",
        "variable"
    ],
    "CTEST_CUSTOM_PRE_MEMCHECK": [
        "A list of commands to run at the start of the ``ctest_memcheck()``\\ncommand.\\nIt is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``\\nfile. See ``ctest_read_custom_files()`` documentation.\\n",
        "variable"
    ],
    "CTEST_CUSTOM_PRE_TEST": [
        "A list of commands to run at the start of the ``ctest_test()`` command.\\nIt is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``\\nfile. See ``ctest_read_custom_files()`` documentation.\\n",
        "variable"
    ],
    "CTEST_CUSTOM_TESTS_IGNORE": [
        "A list of regular expressions to use to exclude tests during the\\n``ctest_test()`` command.\\nIt is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``\\nfile. See ``ctest_read_custom_files()`` documentation.\\n",
        "variable"
    ],
    "CTEST_CUSTOM_WARNING_EXCEPTION": [
        "A list of regular expressions which will be used to exclude when detecting\\nwarning messages in build outputs by the ``ctest_build()`` command.\\nIt is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``\\nfile. See ``ctest_read_custom_files()`` documentation.\\n",
        "variable"
    ],
    "CTEST_CUSTOM_WARNING_MATCH": [
        "A list of regular expressions which will be used to detect warning messages in\\nbuild outputs by the ``ctest_build()`` command.\\nIt is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``\\nfile. See ``ctest_read_custom_files()`` documentation.\\n",
        "variable"
    ],
    "CTEST_CVS_CHECKOUT": [
        "Deprecated.  Use ``CTEST_CHECKOUT_COMMAND`` instead.\\n",
        "variable"
    ],
    "CTEST_CVS_COMMAND": [
        "Specify the CTest ``CVSCommand`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_CVS_UPDATE_OPTIONS": [
        "Specify the CTest ``CVSUpdateOptions`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_DROP_LOCATION": [
        "Specify the CTest ``DropLocation`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_DROP_METHOD": [
        "Specify the CTest ``DropMethod`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_DROP_SITE": [
        "Specify the CTest ``DropSite`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_DROP_SITE_CDASH": [
        "Specify the CTest ``IsCDash`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_DROP_SITE_PASSWORD": [
        "Specify the CTest ``DropSitePassword`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_DROP_SITE_USER": [
        "Specify the CTest ``DropSiteUser`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_EXTRA_COVERAGE_GLOB": [
        "A list of regular expressions which will be used to find files which should be\\ncovered by the ``ctest_coverage()`` command.\\nIt is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``\\nfile. See ``ctest_read_custom_files()`` documentation.\\n",
        "variable"
    ],
    "CTEST_GIT_COMMAND": [
        "Specify the CTest ``GITCommand`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_GIT_INIT_SUBMODULES": [
        "Specify the CTest ``GITInitSubmodules`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_GIT_UPDATE_CUSTOM": [
        "Specify the CTest ``GITUpdateCustom`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_GIT_UPDATE_OPTIONS": [
        "Specify the CTest ``GITUpdateOptions`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_HG_COMMAND": [
        "Specify the CTest ``HGCommand`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_HG_UPDATE_OPTIONS": [
        "Specify the CTest ``HGUpdateOptions`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_LABELS_FOR_SUBPROJECTS": [
        "Specify the CTest ``LabelsForSubprojects`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_MEMORYCHECK_COMMAND": [
        "Specify the CTest ``MemoryCheckCommand`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_MEMORYCHECK_COMMAND_OPTIONS": [
        "Specify the CTest ``MemoryCheckCommandOptions`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_MEMORYCHECK_SANITIZER_OPTIONS": [
        "Specify the CTest ``MemoryCheckSanitizerOptions`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_MEMORYCHECK_SUPPRESSIONS_FILE": [
        "Specify the CTest ``MemoryCheckSuppressionFile`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_MEMORYCHECK_TYPE": [
        "Specify the CTest ``MemoryCheckType`` setting\\nin a ``ctest(1)`` dashboard client script.\\nValid values are ``Valgrind``, ``Purify``, ``BoundsChecker``, and\\n``ThreadSanitizer``, ``AddressSanitizer``, ``LeakSanitizer``, ``MemorySanitizer``, and\\n``UndefinedBehaviorSanitizer``.\\n",
        "variable"
    ],
    "CTEST_NIGHTLY_START_TIME": [
        "Specify the CTest ``NightlyStartTime`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_P4_CLIENT": [
        "Specify the CTest ``P4Client`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_P4_COMMAND": [
        "Specify the CTest ``P4Command`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_P4_OPTIONS": [
        "Specify the CTest ``P4Options`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_P4_UPDATE_OPTIONS": [
        "Specify the CTest ``P4UpdateOptions`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_RUN_CURRENT_SCRIPT": [
        "Setting this to 0 prevents ``ctest(1)`` from being run again when it\\nreaches the end of a script run by calling ``ctest -S``.\\n",
        "variable"
    ],
    "CTEST_SCP_COMMAND": [
        "Legacy option.  Not used.\\n",
        "variable"
    ],
    "CTEST_SITE": [
        "Specify the CTest ``Site`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_SOURCE_DIRECTORY": [
        "Specify the CTest ``SourceDirectory`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_SUBMIT_URL": [
        "Specify the CTest ``SubmitURL`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_SVN_COMMAND": [
        "Specify the CTest ``SVNCommand`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_SVN_OPTIONS": [
        "Specify the CTest ``SVNOptions`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_SVN_UPDATE_OPTIONS": [
        "Specify the CTest ``SVNUpdateOptions`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_TEST_LOAD": [
        "Specify the ``TestLoad`` setting in the :ref:`CTest Test Step`\\nof a ``ctest(1)`` dashboard client script.  This sets the\\ndefault value for the ``TEST_LOAD`` option of the ``ctest_test()``\\ncommand.\\n",
        "variable"
    ],
    "CTEST_TEST_TIMEOUT": [
        "Specify the CTest ``TimeOut`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_TRIGGER_SITE": [
        "Legacy option.  Not used.\\n",
        "variable"
    ],
    "CTEST_UPDATE_COMMAND": [
        "Specify the CTest ``UpdateCommand`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_UPDATE_OPTIONS": [
        "Specify the CTest ``UpdateOptions`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_UPDATE_VERSION_ONLY": [
        "Specify the CTest :ref:`UpdateVersionOnly <UpdateVersionOnly>` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_UPDATE_VERSION_OVERRIDE": [
        "Specify the CTest :ref:`UpdateVersionOverride <UpdateVersionOverride>` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_USE_LAUNCHERS": [
        "Specify the CTest ``UseLaunchers`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CYGWIN": [
        "``True`` for Cygwin.\\nSet to ``true`` when using Cygwin.\\n",
        "variable"
    ],
    "ENV": [
        "Operator to read environment variables.\\nUse the syntax ``$ENV{VAR}`` to read environment variable ``VAR``.\\nTo test whether an environment variable is defined, use the signature\\n``if(DEFINED ENV{<name>})`` of the ``if()`` command.\\nSee the ``set()`` and ``unset()`` commands to see how to\\n",
        "variable"
    ],
    "EXECUTABLE_OUTPUT_PATH": [
        "Old executable location variable.\\nThe target property ``RUNTIME_OUTPUT_DIRECTORY`` supercedes this\\nvariable for a target if it is set.  Executable targets are otherwise placed in\\nthis directory.\\n",
        "variable"
    ],
    "GHS-MULTI": [
        "``True`` when using ``Green Hills MULTI`` generator.\\n",
        "variable"
    ],
    "IOS": [
        "Set to ``1`` when the target system (``CMAKE_SYSTEM_NAME``) is ``iOS``.\\n",
        "variable"
    ],
    "LIBRARY_OUTPUT_PATH": [
        "Old library location variable.\\nThe target properties ``ARCHIVE_OUTPUT_DIRECTORY``,\\n``LIBRARY_OUTPUT_DIRECTORY``, and ``RUNTIME_OUTPUT_DIRECTORY``\\nsupersede this variable for a target if they are set.  Library targets are\\notherwise placed in this directory.\\n",
        "variable"
    ],
    "MINGW": [
        "``True`` when using MinGW\\nSet to ``true`` when the compiler is some version of MinGW.\\n",
        "variable"
    ],
    "MSVC": [
        "Set to ``true`` when the compiler is some version of Microsoft Visual\\nC++ or another compiler simulating Visual C++.  Any compiler defining\\n``_MSC_VER`` is considered simulating Visual C++.\\nSee also the ``MSVC_VERSION`` variable.\\n",
        "variable"
    ],
    "MSVC10": [
        "Discouraged.  Use the ``MSVC_VERSION`` variable instead.\\n``True`` when using the Microsoft Visual Studio ``v100`` toolset\\n(``cl`` version 16) or another compiler that simulates it.\\n",
        "variable"
    ],
    "MSVC11": [
        "Discouraged.  Use the ``MSVC_VERSION`` variable instead.\\n``True`` when using the Microsoft Visual Studio ``v110`` toolset\\n(``cl`` version 17) or another compiler that simulates it.\\n",
        "variable"
    ],
    "MSVC12": [
        "Discouraged.  Use the ``MSVC_VERSION`` variable instead.\\n``True`` when using the Microsoft Visual Studio ``v120`` toolset\\n(``cl`` version 18) or another compiler that simulates it.\\n",
        "variable"
    ],
    "MSVC14": [
        "Discouraged.  Use the ``MSVC_VERSION`` variable instead.\\n``True`` when using the Microsoft Visual Studio ``v140`` or ``v141``\\ntoolset (``cl`` version 19) or another compiler that simulates it.\\n",
        "variable"
    ],
    "MSVC60": [
        "Discouraged.  Use the ``MSVC_VERSION`` variable instead.\\n``True`` when using Microsoft Visual C++ 6.0.\\nSet to ``true`` when the compiler is version 6.0 of Microsoft Visual C++.\\n",
        "variable"
    ],
    "MSVC70": [
        "Discouraged.  Use the ``MSVC_VERSION`` variable instead.\\n``True`` when using Microsoft Visual C++ 7.0.\\nSet to ``true`` when the compiler is version 7.0 of Microsoft Visual C++.\\n",
        "variable"
    ],
    "MSVC71": [
        "Discouraged.  Use the ``MSVC_VERSION`` variable instead.\\n``True`` when using Microsoft Visual C++ 7.1.\\nSet to ``true`` when the compiler is version 7.1 of Microsoft Visual C++.\\n",
        "variable"
    ],
    "MSVC80": [
        "Discouraged.  Use the ``MSVC_VERSION`` variable instead.\\n``True`` when using the Microsoft Visual Studio ``v80`` toolset\\n(``cl`` version 14) or another compiler that simulates it.\\n",
        "variable"
    ],
    "MSVC90": [
        "Discouraged.  Use the ``MSVC_VERSION`` variable instead.\\n``True`` when using the Microsoft Visual Studio ``v90`` toolset\\n(``cl`` version 15) or another compiler that simulates it.\\n",
        "variable"
    ],
    "MSVC_IDE": [
        "``True`` when using the Microsoft Visual C++ IDE.\\nSet to ``true`` when the target platform is the Microsoft Visual C++ IDE, as\\nopposed to the command line compiler.\\n",
        "variable"
    ],
    "MSVC_TOOLSET_VERSION": [
        "The toolset version of Microsoft Visual C/C++ being used if any.\\nIf MSVC-like is being used, this variable is set based on the version\\nof the compiler as given by the ``MSVC_VERSION`` variable.\\nKnown toolset version numbers are::\\n 80        = VS 2005 (8.0)\\n",
        "variable"
    ],
    "MSVC_VERSION": [
        "The version of Microsoft Visual C/C++ being used if any.\\nIf a compiler simulating Visual C++ is being used, this variable is set\\nto the toolset version simulated as given by the ``_MSC_VER``\\npreprocessor definition.\\nKnown version numbers are::\\n",
        "variable"
    ],
    "MSYS": [
        "``True`` when using the ``MSYS Makefiles`` generator.\\n",
        "variable"
    ],
    "PROJECT_BINARY_DIR": [
        "Full path to build directory for project.\\nThis is the binary directory of the most recent ``project()`` command.\\n",
        "variable"
    ],
    "PROJECT_DESCRIPTION": [
        "Short project description given to the project command.\\nThis is the description given to the most recently called ``project()``\\ncommand in the current directory scope or above.  To obtain the description\\nof the top level project, see the ``CMAKE_PROJECT_DESCRIPTION``\\nvariable.\\n",
        "variable"
    ],
    "PROJECT_HOMEPAGE_URL": [
        "The homepage URL of the project.\\nThis is the homepage URL given to the most recently called ``project()``\\ncommand in the current directory scope or above.  To obtain the homepage URL\\nof the top level project, see the ``CMAKE_PROJECT_HOMEPAGE_URL``\\nvariable.\\n",
        "variable"
    ],
    "PROJECT_NAME": [
        "Name of the project given to the project command.\\nThis is the name given to the most recently called ``project()``\\ncommand in the current directory scope or above.  To obtain the name of\\nthe top level project, see the ``CMAKE_PROJECT_NAME`` variable.\\n",
        "variable"
    ],
    "PROJECT_SOURCE_DIR": [
        "Top level source directory for the current project.\\nThis is the source directory of the most recent ``project()`` command.\\n",
        "variable"
    ],
    "PROJECT_VERSION": [
        "Value given to the ``VERSION`` option of the most recent call to the\\n``project()`` command, if any.\\nSee also the component-wise version variables\\n``PROJECT_VERSION_MAJOR``,\\n``PROJECT_VERSION_MINOR``,\\n",
        "variable"
    ],
    "PROJECT_VERSION_MAJOR": [
        "First version number component of the ``PROJECT_VERSION``\\nvariable as set by the ``project()`` command.\\n",
        "variable"
    ],
    "PROJECT_VERSION_MINOR": [
        "Second version number component of the ``PROJECT_VERSION``\\nvariable as set by the ``project()`` command.\\n",
        "variable"
    ],
    "PROJECT_VERSION_PATCH": [
        "Third version number component of the ``PROJECT_VERSION``\\nvariable as set by the ``project()`` command.\\n",
        "variable"
    ],
    "PROJECT_VERSION_TWEAK": [
        "Fourth version number component of the ``PROJECT_VERSION``\\nvariable as set by the ``project()`` command.\\n",
        "variable"
    ],
    "UNIX": [
        "Set to ``True`` when the target system is UNIX or UNIX-like\\n(e.g. ``APPLE`` and ``CYGWIN``).  The\\n``CMAKE_SYSTEM_NAME`` variable should be queried if\\na more specific understanding of the target system is required.\\n",
        "variable"
    ],
    "WIN32": [
        "Set to ``True`` when the target system is Windows, including Win64.\\n",
        "variable"
    ],
    "WINCE": [
        "True when the ``CMAKE_SYSTEM_NAME`` variable is set\\nto ``WindowsCE``.\\n",
        "variable"
    ],
    "WINDOWS_PHONE": [
        "True when the ``CMAKE_SYSTEM_NAME`` variable is set\\nto ``WindowsPhone``.\\n",
        "variable"
    ],
    "WINDOWS_STORE": [
        "True when the ``CMAKE_SYSTEM_NAME`` variable is set\\nto ``WindowsStore``.\\n",
        "variable"
    ],
    "XCODE": [
        "``True`` when using ``Xcode`` generator.\\n",
        "variable"
    ],
    "XCODE_VERSION": [
        "Version of Xcode (``Xcode`` generator only).\\nUnder the ``Xcode`` generator, this is the version of Xcode\\nas specified in ``Xcode.app/Contents/version.plist`` (such as ``3.1.2``).\\n",
        "variable"
    ]
}