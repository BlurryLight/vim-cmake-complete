{
    "add_compile_definitions": [
        "add_compile_definitions\\n-----------------------\\n\\nAdds preprocessor definitions to the compilation of source files.\\n\\n::\\n\\n add_compile_definitions(<definition> ...)\\n\\nAdds preprocessor definitions to the compiler command line for targets in the\\ncurrent directory and below (whether added before or after this command is\\ninvoked). See documentation of the ``directory``\\nand ``target`` ``COMPILE_DEFINITIONS`` properties.\\n\\nDefinitions are specified using the syntax ``VAR`` or ``VAR=value``.\\nFunction-style definitions are not supported. CMake will automatically\\nescape the value correctly for the native build system (note that CMake\\nlanguage syntax may require escapes to specify some values).\\n\\nArguments to ``add_compile_definitions`` may use \\\"generator expressions\\\" with\\nthe syntax ``$<...>``.  See the ``cmake-generator-expressions(7)``\\nmanual for available expressions.  See the ``cmake-buildsystem(7)``\\nmanual for more on defining buildsystem properties.\\n",
        "command"
    ],
    "add_compile_options": [
        "add_compile_options\\n-------------------\\n\\nAdds options to the compilation of source files.\\n\\n::\\n\\n add_compile_options(<option> ...)\\n\\nAdds options to the compiler command line for targets in the current\\ndirectory and below that are added after this command is invoked.\\nSee documentation of the ``directory`` and\\n``target`` ``COMPILE_OPTIONS`` properties.\\n\\nThis command can be used to add any options, but alternative commands\\nexist to add preprocessor definitions (``target_compile_definitions()``\\nand ``add_compile_definitions()``) or include directories\\n(``target_include_directories()`` and ``include_directories()``).\\n\\nArguments to ``add_compile_options`` may use \\\"generator expressions\\\" with\\nthe syntax ``$<...>``.  See the ``cmake-generator-expressions(7)``\\nmanual for available expressions.  See the ``cmake-buildsystem(7)``\\nmanual for more on defining buildsystem properties.\\n\\nThe final set of compile or link options used for a target is constructed by\\naccumulating options from the current target and the usage requirements of\\nit dependencies.  The set of options is de-duplicated to avoid repetition.\\nWhile beneficial for individual options, the de-duplication step can break\\nup option groups.  For example, ``-D A -D B`` becomes ``-D A B``.  One may\\nspecify a group of options using shell-like quoting along with a ``SHELL:``\\nprefix.  The ``SHELL:`` prefix is dropped and the rest of the option string\\nis parsed using the ``separate_arguments()`` ``UNIX_COMMAND`` mode.\\nFor example, ``\\\"SHELL:-D A\\\" \\\"SHELL:-D B\\\"`` becomes ``-D A -D B``.\\n",
        "command"
    ],
    "add_custom_command": [
        "add_custom_command\\n------------------\\n\\nAdd a custom build rule to the generated build system.\\n\\nThere are two main signatures for ``add_custom_command``.\\n\\nGenerating Files\\n^^^^^^^^^^^^^^^^\\n\\nThe first signature is for adding a custom command to produce an output::\\n\\n add_custom_command(OUTPUT output1 [output2 ...]\\n                    COMMAND command1 [ARGS] [args1...]\\n                    [COMMAND command2 [ARGS] [args2...] ...]\\n                    [MAIN_DEPENDENCY depend]\\n                    [DEPENDS [depends...]]\\n                    [BYPRODUCTS [files...]]\\n                    [IMPLICIT_DEPENDS <lang1> depend1\\n                                     [<lang2> depend2] ...]\\n                    [WORKING_DIRECTORY dir]\\n                    [COMMENT comment]\\n                    [DEPFILE depfile]\\n                    [VERBATIM] [APPEND] [USES_TERMINAL]\\n                    [COMMAND_EXPAND_LISTS])\\n\\nThis defines a command to generate specified ``OUTPUT`` file(s).\\nA target created in the same directory (``CMakeLists.txt`` file)\\nthat specifies any output of the custom command as a source file\\nis given a rule to generate the file using the command at build time.\\nDo not list the output in more than one independent target that\\nmay build in parallel or the two instances of the rule may conflict\\n(instead use the ``add_custom_target()`` command to drive the\\ncommand and make the other targets depend on that one).\\nIn makefile terms this creates a new target in the following form::\\n\\n OUTPUT: MAIN_DEPENDENCY DEPENDS\\n         COMMAND\\n\\nThe options are:\\n\\n``APPEND``\\n  Append the ``COMMAND`` and ``DEPENDS`` option values to the custom\\n  command for the first output specified.  There must have already\\n  been a previous call to this command with the same output.\\n  The ``COMMENT``, ``MAIN_DEPENDENCY``, and ``WORKING_DIRECTORY``\\n  options are currently ignored when APPEND is given, but may be\\n  used in the future.\\n\\n``BYPRODUCTS``\\n  Specify the files the command is expected to produce but whose\\n  modification time may or may not be newer than the dependencies.\\n  If a byproduct name is a relative path it will be interpreted\\n  relative to the build tree directory corresponding to the\\n  current source directory.\\n  Each byproduct file will be marked with the ``GENERATED``\\n  source file property automatically.\\n\\n  Explicit specification of byproducts is supported by the\\n  ``Ninja`` generator to tell the ``ninja`` build tool\\n  how to regenerate byproducts when they are missing.  It is\\n  also useful when other build rules (e.g. custom commands)\\n  depend on the byproducts.  Ninja requires a build rule for any\\n  generated file on which another rule depends even if there are\\n  order-only dependencies to ensure the byproducts will be\\n  available before their dependents build.\\n\\n  The ``BYPRODUCTS`` option is ignored on non-Ninja generators\\n  except to mark byproducts ``GENERATED``.\\n\\n``COMMAND``\\n  Specify the command-line(s) to execute at build time.\\n  If more than one ``COMMAND`` is specified they will be executed in order,\\n  but *not* necessarily composed into a stateful shell or batch script.\\n  (To run a full script, use the ``configure_file()`` command or the\\n  ``file(GENERATE)`` command to create it, and then specify\\n  a ``COMMAND`` to launch it.)\\n  The optional ``ARGS`` argument is for backward compatibility and\\n  will be ignored.\\n\\n  If ``COMMAND`` specifies an executable target name (created by the\\n  ``add_executable()`` command) it will automatically be replaced\\n  by the location of the executable created at build time. If set, the\\n  ``CROSSCOMPILING_EMULATOR`` executable target property will\\n  also be prepended to the command to allow the executable to run on\\n  the host.\\n  (Use the ``TARGET_FILE``\\n  ``generator expression`` to\\n  reference an executable later in the command line.)\\n  Additionally a target-level dependency will be added so that the\\n  executable target will be built before any target using this custom\\n  command.  However this does NOT add a file-level dependency that\\n  would cause the custom command to re-run whenever the executable is\\n  recompiled.\\n\\n  Arguments to ``COMMAND`` may use\\n  ``generator expressions``.\\n  References to target names in generator expressions imply target-level\\n  dependencies, but NOT file-level dependencies.  List target names with\\n  the ``DEPENDS`` option to add file-level dependencies.\\n\\n``COMMENT``\\n  Display the given message before the commands are executed at\\n  build time.\\n\\n``DEPENDS``\\n  Specify files on which the command depends.  If any dependency is\\n  an ``OUTPUT`` of another custom command in the same directory\\n  (``CMakeLists.txt`` file) CMake automatically brings the other\\n  custom command into the target in which this command is built.\\n  If ``DEPENDS`` is not specified the command will run whenever\\n  the ``OUTPUT`` is missing; if the command does not actually\\n  create the ``OUTPUT`` then the rule will always run.\\n  If ``DEPENDS`` specifies any target (created by the\\n  ``add_custom_target()``, ``add_executable()``, or\\n  ``add_library()`` command) a target-level dependency is\\n  created to make sure the target is built before any target\\n  using this custom command.  Additionally, if the target is an\\n  executable or library a file-level dependency is created to\\n  cause the custom command to re-run whenever the target is\\n  recompiled.\\n\\n  Arguments to ``DEPENDS`` may use\\n  ``generator expressions``.\\n\\n``COMMAND_EXPAND_LISTS``\\n  Lists in ``COMMAND`` arguments will be expanded, including those\\n  created with\\n  ``generator expressions``,\\n  allowing ``COMMAND`` arguments such as\\n  ``${CC} \\\"-I$<JOIN:$<TARGET_PROPERTY:foo,INCLUDE_DIRECTORIES>,;-I>\\\" foo.cc``\\n  to be properly expanded.\\n\\n``IMPLICIT_DEPENDS``\\n  Request scanning of implicit dependencies of an input file.\\n  The language given specifies the programming language whose\\n  corresponding dependency scanner should be used.\\n  Currently only ``C`` and ``CXX`` language scanners are supported.\\n  The language has to be specified for every file in the\\n  ``IMPLICIT_DEPENDS`` list.  Dependencies discovered from the\\n  scanning are added to those of the custom command at build time.\\n  Note that the ``IMPLICIT_DEPENDS`` option is currently supported\\n  only for Makefile generators and will be ignored by other generators.\\n\\n``MAIN_DEPENDENCY``\\n  Specify the primary input source file to the command.  This is\\n  treated just like any value given to the ``DEPENDS`` option\\n  but also suggests to Visual Studio generators where to hang\\n  the custom command. Each source file may have at most one command\\n  specifying it as its main dependency. A compile command (i.e. for a\\n  library or an executable) counts as an implicit main dependency which\\n  gets silently overwritten by a custom command specification.\\n\\n``OUTPUT``\\n  Specify the output files the command is expected to produce.\\n  If an output name is a relative path it will be interpreted\\n  relative to the build tree directory corresponding to the\\n  current source directory.\\n  Each output file will be marked with the ``GENERATED``\\n  source file property automatically.\\n  If the output of the custom command is not actually created\\n  as a file on disk it should be marked with the ``SYMBOLIC``\\n  source file property.\\n\\n``USES_TERMINAL``\\n  The command will be given direct access to the terminal if possible.\\n  With the ``Ninja`` generator, this places the command in\\n  the ``console`` ``pool``.\\n\\n``VERBATIM``\\n  All arguments to the commands will be escaped properly for the\\n  build tool so that the invoked command receives each argument\\n  unchanged.  Note that one level of escapes is still used by the\\n  CMake language processor before add_custom_command even sees the\\n  arguments.  Use of ``VERBATIM`` is recommended as it enables\\n  correct behavior.  When ``VERBATIM`` is not given the behavior\\n  is platform specific because there is no protection of\\n  tool-specific special characters.\\n\\n``WORKING_DIRECTORY``\\n  Execute the command with the given current working directory.\\n  If it is a relative path it will be interpreted relative to the\\n  build tree directory corresponding to the current source directory.\\n\\n  Arguments to ``WORKING_DIRECTORY`` may use\\n  ``generator expressions``.\\n\\n``DEPFILE``\\n  Specify a ``.d`` depfile for the ``Ninja`` generator.\\n  A ``.d`` file holds dependencies usually emitted by the custom\\n  command itself.\\n  Using ``DEPFILE`` with other generators than Ninja is an error.\\n\\nBuild Events\\n^^^^^^^^^^^^\\n\\nThe second signature adds a custom command to a target such as a\\nlibrary or executable.  This is useful for performing an operation\\nbefore or after building the target.  The command becomes part of the\\ntarget and will only execute when the target itself is built.  If the\\ntarget is already built, the command will not execute.\\n\\n::\\n\\n add_custom_command(TARGET <target>\\n                    PRE_BUILD | PRE_LINK | POST_BUILD\\n                    COMMAND command1 [ARGS] [args1...]\\n                    [COMMAND command2 [ARGS] [args2...] ...]\\n                    [BYPRODUCTS [files...]]\\n                    [WORKING_DIRECTORY dir]\\n                    [COMMENT comment]\\n                    [VERBATIM] [USES_TERMINAL])\\n\\nThis defines a new command that will be associated with building the\\nspecified ``<target>``.  The ``<target>`` must be defined in the current\\ndirectory; targets defined in other directories may not be specified.\\n\\nWhen the command will happen is determined by which\\nof the following is specified:\\n\\n``PRE_BUILD``\\n  On :ref:`Visual Studio Generators`, run before any other rules are\\n  executed within the target.\\n  On other generators, run just before ``PRE_LINK`` commands.\\n``PRE_LINK``\\n  Run after sources have been compiled but before linking the binary\\n  or running the librarian or archiver tool of a static library.\\n  This is not defined for targets created by the\\n  ``add_custom_target()`` command.\\n``POST_BUILD``\\n  Run after all other rules within the target have been executed.\\n\\n.. note::\\n  Because generator expressions can be used in custom commands,\\n  it is possible to define ``COMMAND`` lines or whole custom commands\\n  which evaluate to empty strings for certain configurations.\\n  For **Visual Studio 2010 (and newer)** generators these command\\n  lines or custom commands will be omitted for the specific\\n  configuration and no \\\"empty-string-command\\\" will be added.\\n\\n  This allows to add individual build events for every configuration.\\n",
        "command"
    ],
    "add_custom_target": [
        "add_custom_target\\n-----------------\\n\\nAdd a target with no output so it will always be built.\\n\\n::\\n\\n add_custom_target(Name [ALL] [command1 [args1...]]\\n                   [COMMAND command2 [args2...] ...]\\n                   [DEPENDS depend depend depend ... ]\\n                   [BYPRODUCTS [files...]]\\n                   [WORKING_DIRECTORY dir]\\n                   [COMMENT comment]\\n                   [VERBATIM] [USES_TERMINAL]\\n                   [COMMAND_EXPAND_LISTS]\\n                   [SOURCES src1 [src2...]])\\n\\nAdds a target with the given name that executes the given commands.\\nThe target has no output file and is *always considered out of date*\\neven if the commands try to create a file with the name of the target.\\nUse the ``add_custom_command()`` command to generate a file with\\ndependencies.  By default nothing depends on the custom target.  Use\\nthe ``add_dependencies()`` command to add dependencies to or\\nfrom other targets.\\n\\nThe options are:\\n\\n``ALL``\\n  Indicate that this target should be added to the default build\\n  target so that it will be run every time (the command cannot be\\n  called ``ALL``).\\n\\n``BYPRODUCTS``\\n  Specify the files the command is expected to produce but whose\\n  modification time may or may not be updated on subsequent builds.\\n  If a byproduct name is a relative path it will be interpreted\\n  relative to the build tree directory corresponding to the\\n  current source directory.\\n  Each byproduct file will be marked with the ``GENERATED``\\n  source file property automatically.\\n\\n  Explicit specification of byproducts is supported by the\\n  ``Ninja`` generator to tell the ``ninja`` build tool\\n  how to regenerate byproducts when they are missing.  It is\\n  also useful when other build rules (e.g. custom commands)\\n  depend on the byproducts.  Ninja requires a build rule for any\\n  generated file on which another rule depends even if there are\\n  order-only dependencies to ensure the byproducts will be\\n  available before their dependents build.\\n\\n  The ``BYPRODUCTS`` option is ignored on non-Ninja generators\\n  except to mark byproducts ``GENERATED``.\\n\\n``COMMAND``\\n  Specify the command-line(s) to execute at build time.\\n  If more than one ``COMMAND`` is specified they will be executed in order,\\n  but *not* necessarily composed into a stateful shell or batch script.\\n  (To run a full script, use the ``configure_file()`` command or the\\n  ``file(GENERATE)`` command to create it, and then specify\\n  a ``COMMAND`` to launch it.)\\n\\n  If ``COMMAND`` specifies an executable target name (created by the\\n  ``add_executable()`` command) it will automatically be replaced\\n  by the location of the executable created at build time. If set, the\\n  ``CROSSCOMPILING_EMULATOR`` executable target property will\\n  also be prepended to the command to allow the executable to run on\\n  the host.\\n  Additionally a target-level dependency will be added so that the\\n  executable target will be built before this custom target.\\n\\n  Arguments to ``COMMAND`` may use\\n  ``generator expressions``.\\n  References to target names in generator expressions imply target-level\\n  dependencies.\\n\\n  The command and arguments are optional and if not specified an empty\\n  target will be created.\\n\\n``COMMENT``\\n  Display the given message before the commands are executed at\\n  build time.\\n\\n``DEPENDS``\\n  Reference files and outputs of custom commands created with\\n  ``add_custom_command()`` command calls in the same directory\\n  (``CMakeLists.txt`` file).  They will be brought up to date when\\n  the target is built.\\n\\n  Use the ``add_dependencies()`` command to add dependencies\\n  on other targets.\\n\\n``COMMAND_EXPAND_LISTS``\\n  Lists in ``COMMAND`` arguments will be expanded, including those\\n  created with\\n  ``generator expressions``,\\n  allowing ``COMMAND`` arguments such as\\n  ``${CC} \\\"-I$<JOIN:$<TARGET_PROPERTY:foo,INCLUDE_DIRECTORIES>,;-I>\\\" foo.cc``\\n  to be properly expanded.\\n\\n``SOURCES``\\n  Specify additional source files to be included in the custom target.\\n  Specified source files will be added to IDE project files for\\n  convenience in editing even if they have no build rules.\\n\\n``VERBATIM``\\n  All arguments to the commands will be escaped properly for the\\n  build tool so that the invoked command receives each argument\\n  unchanged.  Note that one level of escapes is still used by the\\n  CMake language processor before ``add_custom_target`` even sees\\n  the arguments.  Use of ``VERBATIM`` is recommended as it enables\\n  correct behavior.  When ``VERBATIM`` is not given the behavior\\n  is platform specific because there is no protection of\\n  tool-specific special characters.\\n\\n``USES_TERMINAL``\\n  The command will be given direct access to the terminal if possible.\\n  With the ``Ninja`` generator, this places the command in\\n  the ``console`` ``pool``.\\n\\n``WORKING_DIRECTORY``\\n  Execute the command with the given current working directory.\\n  If it is a relative path it will be interpreted relative to the\\n  build tree directory corresponding to the current source directory.\\n\\n  Arguments to ``WORKING_DIRECTORY`` may use\\n  ``generator expressions``.\\n",
        "command"
    ],
    "add_definitions": [
        "add_definitions\\n---------------\\n\\nAdds -D define flags to the compilation of source files.\\n\\n::\\n\\n add_definitions(-DFOO -DBAR ...)\\n\\nAdds definitions to the compiler command line for targets in the current\\ndirectory and below (whether added before or after this command is invoked).\\nThis command can be used to add any flags, but it is intended to add\\npreprocessor definitions.\\n\\n.. note::\\n\\n  This command has been superseded by alternatives:\\n\\n  * Use ``add_compile_definitions()`` to add preprocessor definitions.\\n  * Use ``include_directories()`` to add include directories.\\n  * Use ``add_compile_options()`` to add other options.\\n\\nFlags beginning in -D or /D that look like preprocessor definitions are\\nautomatically added to the ``COMPILE_DEFINITIONS`` directory\\nproperty for the current directory.  Definitions with non-trivial values\\nmay be left in the set of flags instead of being converted for reasons of\\nbackwards compatibility.  See documentation of the\\n``directory``,\\n``target``,\\n``source file`` ``COMPILE_DEFINITIONS``\\nproperties for details on adding preprocessor definitions to specific\\nscopes and configurations.\\n\\nSee the ``cmake-buildsystem(7)`` manual for more on defining\\nbuildsystem properties.\\n",
        "command"
    ],
    "add_dependencies": [
        "add_dependencies\\n----------------\\n\\nAdd a dependency between top-level targets.\\n\\n::\\n\\n add_dependencies(<target> [<target-dependency>]...)\\n\\nMake a top-level ``<target>`` depend on other top-level targets to\\nensure that they build before ``<target>`` does.  A top-level target\\nis one created by one of the ``add_executable()``,\\n``add_library()``, or ``add_custom_target()`` commands\\n(but not targets generated by CMake like ``install``).\\n\\nDependencies added to an :ref:`imported target <Imported Targets>`\\nor an :ref:`interface library <Interface Libraries>` are followed\\ntransitively in its place since the target itself does not build.\\n\\nSee the ``DEPENDS`` option of ``add_custom_target()`` and\\n``add_custom_command()`` commands for adding file-level\\ndependencies in custom rules.  See the ``OBJECT_DEPENDS``\\nsource file property to add file-level dependencies to object files.\\n",
        "command"
    ],
    "add_executable": [
        "add_executable\\n--------------\\n\\nAdd an executable to the project using the specified source files.\\n\\n::\\n\\n add_executable(<name> [WIN32] [MACOSX_BUNDLE]\\n                [EXCLUDE_FROM_ALL]\\n                [source1] [source2 ...])\\n\\nAdds an executable target called ``<name>`` to be built from the source\\nfiles listed in the command invocation.  (The source files can be omitted\\nhere if they are added later using ``target_sources()``.)  The\\n``<name>`` corresponds to the logical target name and must be globally\\nunique within a project.  The actual file name of the executable built is\\nconstructed based on conventions of the native platform (such as\\n``<name>.exe`` or just ``<name>``).\\n\\nBy default the executable file will be created in the build tree\\ndirectory corresponding to the source tree directory in which the\\ncommand was invoked.  See documentation of the\\n``RUNTIME_OUTPUT_DIRECTORY`` target property to change this\\nlocation.  See documentation of the ``OUTPUT_NAME`` target property\\nto change the ``<name>`` part of the final file name.\\n\\nIf ``WIN32`` is given the property ``WIN32_EXECUTABLE`` will be\\nset on the target created.  See documentation of that target property for\\ndetails.\\n\\nIf ``MACOSX_BUNDLE`` is given the corresponding property will be set on\\nthe created target.  See documentation of the ``MACOSX_BUNDLE``\\ntarget property for details.\\n\\nIf ``EXCLUDE_FROM_ALL`` is given the corresponding property will be set on\\nthe created target.  See documentation of the ``EXCLUDE_FROM_ALL``\\ntarget property for details.\\n\\nSource arguments to ``add_executable`` may use \\\"generator expressions\\\" with\\nthe syntax ``$<...>``.  See the ``cmake-generator-expressions(7)``\\nmanual for available expressions.  See the ``cmake-buildsystem(7)``\\nmanual for more on defining buildsystem properties.\\n\\nSee also ``HEADER_FILE_ONLY`` on what to do if some sources are\\npre-processed, and you want to have the original sources reachable from\\nwithin IDE.\\n\\n--------------------------------------------------------------------------\\n\\n::\\n\\n add_executable(<name> IMPORTED [GLOBAL])\\n\\nAn :ref:`IMPORTED executable target <Imported Targets>` references an\\nexecutable file located outside the project.  No rules are generated to\\nbuild it, and the ``IMPORTED`` target property is ``True``.  The\\ntarget name has scope in the directory in which it is created and below, but\\nthe ``GLOBAL`` option extends visibility.  It may be referenced like any\\ntarget built within the project.  ``IMPORTED`` executables are useful\\nfor convenient reference from commands like ``add_custom_command()``.\\nDetails about the imported executable are specified by setting properties\\nwhose names begin in ``IMPORTED_``.  The most important such property is\\n``IMPORTED_LOCATION`` (and its per-configuration version\\n``IMPORTED_LOCATION_<CONFIG>``) which specifies the location of\\nthe main executable file on disk.  See documentation of the ``IMPORTED_*``\\nproperties for more information.\\n\\n--------------------------------------------------------------------------\\n\\n::\\n\\n add_executable(<name> ALIAS <target>)\\n\\nCreates an :ref:`Alias Target <Alias Targets>`, such that ``<name>`` can\\nbe used to refer to ``<target>`` in subsequent commands.  The ``<name>``\\ndoes not appear in the generated buildsystem as a make target.  The\\n``<target>`` may not be a non-``GLOBAL``\\n:ref:`Imported Target <Imported Targets>` or an ``ALIAS``.\\n``ALIAS`` targets can be used as targets to read properties\\nfrom, executables for custom commands and custom targets.  They can also be\\ntested for existence with the regular ``if(TARGET)`` subcommand.\\nThe ``<name>`` may not be used to modify properties of ``<target>``, that\\nis, it may not be used as the operand of ``set_property()``,\\n``set_target_properties()``, ``target_link_libraries()`` etc.\\nAn ``ALIAS`` target may not be installed or exported.\\n",
        "command"
    ],
    "add_library": [
        "add_library\\n-----------\\n\\nAdd a library to the project using the specified source files.\\n\\nNormal Libraries\\n^^^^^^^^^^^^^^^^\\n\\n::\\n\\n add_library(<name> [STATIC | SHARED | MODULE]\\n             [EXCLUDE_FROM_ALL]\\n             [source1] [source2 ...])\\n\\nAdds a library target called ``<name>`` to be built from the source files\\nlisted in the command invocation.  (The source files can be omitted here\\nif they are added later using ``target_sources()``.)  The ``<name>``\\ncorresponds to the logical target name and must be globally unique within\\na project.  The actual file name of the library built is constructed based\\non conventions of the native platform (such as ``lib<name>.a`` or\\n``<name>.lib``).\\n\\n``STATIC``, ``SHARED``, or ``MODULE`` may be given to specify the type of\\nlibrary to be created.  ``STATIC`` libraries are archives of object files\\nfor use when linking other targets.  ``SHARED`` libraries are linked\\ndynamically and loaded at runtime.  ``MODULE`` libraries are plugins that\\nare not linked into other targets but may be loaded dynamically at runtime\\nusing dlopen-like functionality.  If no type is given explicitly the\\ntype is ``STATIC`` or ``SHARED`` based on whether the current value of the\\nvariable ``BUILD_SHARED_LIBS`` is ``ON``.  For ``SHARED`` and\\n``MODULE`` libraries the ``POSITION_INDEPENDENT_CODE`` target\\nproperty is set to ``ON`` automatically.\\nA ``SHARED`` or ``STATIC`` library may be marked with the ``FRAMEWORK``\\ntarget property to create an macOS Framework.\\n\\nIf a library does not export any symbols, it must not be declared as a\\n``SHARED`` library.  For example, a Windows resource DLL or a managed C++/CLI\\nDLL that exports no unmanaged symbols would need to be a ``MODULE`` library.\\nThis is because CMake expects a ``SHARED`` library to always have an\\nassociated import library on Windows.\\n\\nBy default the library file will be created in the build tree directory\\ncorresponding to the source tree directory in which the command was\\ninvoked.  See documentation of the ``ARCHIVE_OUTPUT_DIRECTORY``,\\n``LIBRARY_OUTPUT_DIRECTORY``, and\\n``RUNTIME_OUTPUT_DIRECTORY`` target properties to change this\\nlocation.  See documentation of the ``OUTPUT_NAME`` target\\nproperty to change the ``<name>`` part of the final file name.\\n\\nIf ``EXCLUDE_FROM_ALL`` is given the corresponding property will be set on\\nthe created target.  See documentation of the ``EXCLUDE_FROM_ALL``\\ntarget property for details.\\n\\nSource arguments to ``add_library`` may use \\\"generator expressions\\\" with\\nthe syntax ``$<...>``.  See the ``cmake-generator-expressions(7)``\\nmanual for available expressions.  See the ``cmake-buildsystem(7)``\\nmanual for more on defining buildsystem properties.\\n\\nSee also ``HEADER_FILE_ONLY`` on what to do if some sources are\\npre-processed, and you want to have the original sources reachable from\\nwithin IDE.\\n\\nImported Libraries\\n^^^^^^^^^^^^^^^^^^\\n\\n::\\n\\n add_library(<name> <SHARED|STATIC|MODULE|OBJECT|UNKNOWN> IMPORTED\\n             [GLOBAL])\\n\\nAn :ref:`IMPORTED library target <Imported Targets>` references a library\\nfile located outside the project.  No rules are generated to build it, and\\nthe ``IMPORTED`` target property is ``True``.  The target name has\\nscope in the directory in which it is created and below, but the ``GLOBAL``\\noption extends visibility.  It may be referenced like any target built\\nwithin the project.  ``IMPORTED`` libraries are useful for convenient\\nreference from commands like ``target_link_libraries()``.  Details\\nabout the imported library are specified by setting properties whose names\\nbegin in ``IMPORTED_`` and ``INTERFACE_``.  The most important such\\nproperty is ``IMPORTED_LOCATION`` (and its per-configuration\\nvariant ``IMPORTED_LOCATION_<CONFIG>``) which specifies the\\nlocation of the main library file on disk.  Or, for object libraries,\\n``IMPORTED_OBJECTS`` (and ``IMPORTED_OBJECTS_<CONFIG>``)\\nspecifies the locations of object files on disk.\\nSee documentation of the ``IMPORTED_*`` and ``INTERFACE_*`` properties\\nfor more information.\\n\\nObject Libraries\\n^^^^^^^^^^^^^^^^\\n\\n::\\n\\n add_library(<name> OBJECT <src>...)\\n\\nCreates an :ref:`Object Library <Object Libraries>`.  An object library\\ncompiles source files but does not archive or link their object files into a\\nlibrary.  Instead other targets created by ``add_library()`` or\\n``add_executable()`` may reference the objects using an expression of the\\nform ``$<TARGET_OBJECTS:objlib>`` as a source, where ``objlib`` is the\\nobject library name.  For example:\\n\\n add_library(... $<TARGET_OBJECTS:objlib> ...)\\n add_executable(... $<TARGET_OBJECTS:objlib> ...)\\n\\nwill include objlib's object files in a library and an executable\\nalong with those compiled from their own sources.  Object libraries\\nmay contain only sources that compile, header files, and other files\\nthat would not affect linking of a normal library (e.g. ``.txt``).\\nThey may contain custom commands generating such sources, but not\\n``PRE_BUILD``, ``PRE_LINK``, or ``POST_BUILD`` commands.  Some native build\\nsystems (such as Xcode) may not like targets that have only object files, so\\nconsider adding at least one real source file to any target that references\\n``$<TARGET_OBJECTS:objlib>``.\\n\\nAlias Libraries\\n^^^^^^^^^^^^^^^\\n\\n::\\n\\n add_library(<name> ALIAS <target>)\\n\\nCreates an :ref:`Alias Target <Alias Targets>`, such that ``<name>`` can be\\nused to refer to ``<target>`` in subsequent commands.  The ``<name>`` does\\nnot appear in the generated buildsystem as a make target.  The ``<target>``\\nmay not be a non-``GLOBAL`` :ref:`Imported Target <Imported Targets>` or an\\n``ALIAS``.\\n``ALIAS`` targets can be used as linkable targets and as targets to\\nread properties from.  They can also be tested for existence with the\\nregular ``if(TARGET)`` subcommand.  The ``<name>`` may not be used\\nto modify properties of ``<target>``, that is, it may not be used as the\\noperand of ``set_property()``, ``set_target_properties()``,\\n``target_link_libraries()`` etc.  An ``ALIAS`` target may not be\\ninstalled or exported.\\n\\nInterface Libraries\\n^^^^^^^^^^^^^^^^^^^\\n\\n::\\n\\n add_library(<name> INTERFACE [IMPORTED [GLOBAL]])\\n\\nCreates an :ref:`Interface Library <Interface Libraries>`.  An ``INTERFACE``\\nlibrary target does not directly create build output, though it may\\nhave properties set on it and it may be installed, exported and\\nimported. Typically the ``INTERFACE_*`` properties are populated on\\nthe interface target using the commands:\\n\\n* ``set_property()``,\\n* ``target_link_libraries(INTERFACE)``,\\n* ``target_link_options(INTERFACE)``,\\n* ``target_include_directories(INTERFACE)``,\\n* ``target_compile_options(INTERFACE)``,\\n* ``target_compile_definitions(INTERFACE)``, and\\n* ``target_sources(INTERFACE)``,\\n\\nand then it is used as an argument to ``target_link_libraries()``\\nlike any other target.\\n\\nAn ``INTERFACE`` :ref:`Imported Target <Imported Targets>` may also be\\ncreated with this signature.  An ``IMPORTED`` library target references a\\nlibrary defined outside the project.  The target name has scope in the\\ndirectory in which it is created and below, but the ``GLOBAL`` option\\nextends visibility.  It may be referenced like any target built within\\nthe project.  ``IMPORTED`` libraries are useful for convenient reference\\nfrom commands like ``target_link_libraries()``.\\n",
        "command"
    ],
    "add_link_options": [
        "add_link_options\\n----------------\\n\\nAdds options to the link of shared library, module and executable targets.\\n\\n::\\n\\n add_link_options(<option> ...)\\n\\nAdds options to the link step for targets in the current directory and below\\nthat are added after this command is invoked. See documentation of the\\n``directory`` and\\n``target`` ``LINK_OPTIONS`` properties.\\n\\nThis command can be used to add any options, but alternative commands\\nexist to add libraries (``target_link_libraries()`` or\\n``link_libraries()``).\\n\\nArguments to ``add_link_options`` may use \\\"generator expressions\\\" with\\nthe syntax ``$<...>``.  See the ``cmake-generator-expressions(7)``\\nmanual for available expressions.  See the ``cmake-buildsystem(7)``\\nmanual for more on defining buildsystem properties.\\n\\nThe final set of compile or link options used for a target is constructed by\\naccumulating options from the current target and the usage requirements of\\nit dependencies.  The set of options is de-duplicated to avoid repetition.\\nWhile beneficial for individual options, the de-duplication step can break\\nup option groups.  For example, ``-D A -D B`` becomes ``-D A B``.  One may\\nspecify a group of options using shell-like quoting along with a ``SHELL:``\\nprefix.  The ``SHELL:`` prefix is dropped and the rest of the option string\\nis parsed using the ``separate_arguments()`` ``UNIX_COMMAND`` mode.\\nFor example, ``\\\"SHELL:-D A\\\" \\\"SHELL:-D B\\\"`` becomes ``-D A -D B``.\\n\\nTo pass options to the linker tool, each compiler driver has is own syntax.\\nThe ``LINKER:`` prefix can be used to specify, in a portable way, options\\nto pass to the linker tool. The ``LINKER:`` prefix is replaced by the required\\ndriver option and the rest of the option string defines linker arguments using\\n``,`` as separator. These arguments will be formatted according to the\\n``CMAKE_<LANG>_LINKER_WRAPPER_FLAG`` and\\n``CMAKE_<LANG>_LINKER_WRAPPER_FLAG_SEP`` variables.\\n\\nFor example, ``\\\"LINKER:-z,defs\\\"`` becomes ``-Xlinker -z -Xlinker defs`` for\\n``Clang`` and ``-Wl,-z,defs`` for ``GNU GCC``.\\n\\nThe ``LINKER:`` prefix can be specified as part of a ``SHELL:`` prefix\\nexpression.\\n\\nThe ``LINKER:`` prefix supports, as alternate syntax, specification of\\narguments using ``SHELL:`` prefix and space as separator. Previous example\\nbecomes ``\\\"LINKER:SHELL:-z defs\\\"``.\\n\\n.. note::\\n\\n  Specifying ``SHELL:`` prefix elsewhere than at the beginning of the\\n  ``LINKER:`` prefix is not supported.\\n",
        "command"
    ],
    "add_subdirectory": [
        "add_subdirectory\\n----------------\\n\\nAdd a subdirectory to the build.\\n\\n::\\n\\n add_subdirectory(source_dir [binary_dir]\\n                  [EXCLUDE_FROM_ALL])\\n\\nAdd a subdirectory to the build.  The source_dir specifies the\\ndirectory in which the source CMakeLists.txt and code files are\\nlocated.  If it is a relative path it will be evaluated with respect\\nto the current directory (the typical usage), but it may also be an\\nabsolute path.  The ``binary_dir`` specifies the directory in which to\\nplace the output files.  If it is a relative path it will be evaluated\\nwith respect to the current output directory, but it may also be an\\nabsolute path.  If ``binary_dir`` is not specified, the value of\\n``source_dir``, before expanding any relative path, will be used (the\\ntypical usage).  The CMakeLists.txt file in the specified source\\ndirectory will be processed immediately by CMake before processing in\\nthe current input file continues beyond this command.\\n\\nIf the ``EXCLUDE_FROM_ALL`` argument is provided then targets in the\\nsubdirectory will not be included in the ``ALL`` target of the parent\\ndirectory by default, and will be excluded from IDE project files.\\nUsers must explicitly build targets in the subdirectory.  This is\\nmeant for use when the subdirectory contains a separate part of the\\nproject that is useful but not necessary, such as a set of examples.\\nTypically the subdirectory should contain its own ``project()``\\ncommand invocation so that a full build system will be generated in the\\nsubdirectory (such as a VS IDE solution file).  Note that inter-target\\ndependencies supersede this exclusion.  If a target built by the\\nparent project depends on a target in the subdirectory, the dependee\\ntarget will be included in the parent project build system to satisfy\\nthe dependency.\\n",
        "command"
    ],
    "add_test": [
        "add_test\\n--------\\n\\nAdd a test to the project to be run by ``ctest(1)``.\\n\\n::\\n\\n add_test(NAME <name> COMMAND <command> [<arg>...]\\n          [CONFIGURATIONS <config>...]\\n          [WORKING_DIRECTORY <dir>])\\n\\nAdd a test called ``<name>``.  The test name may not contain spaces,\\nquotes, or other characters special in CMake syntax.  The options are:\\n\\n``COMMAND``\\n  Specify the test command-line.  If ``<command>`` specifies an\\n  executable target (created by ``add_executable()``) it will\\n  automatically be replaced by the location of the executable created\\n  at build time.\\n\\n``CONFIGURATIONS``\\n  Restrict execution of the test only to the named configurations.\\n\\n``WORKING_DIRECTORY``\\n  Set the ``WORKING_DIRECTORY`` test property to\\n  specify the working directory in which to execute the test.\\n  If not specified the test will be run with the current working\\n  directory set to the build directory corresponding to the\\n  current source directory.\\n\\nThe given test command is expected to exit with code ``0`` to pass and\\nnon-zero to fail, or vice-versa if the ``WILL_FAIL`` test\\nproperty is set.  Any output written to stdout or stderr will be\\ncaptured by ``ctest(1)`` but does not affect the pass/fail status\\nunless the ``PASS_REGULAR_EXPRESSION`` or\\n``FAIL_REGULAR_EXPRESSION`` test property is used.\\n\\nThe ``COMMAND`` and ``WORKING_DIRECTORY`` options may use \\\"generator\\nexpressions\\\" with the syntax ``$<...>``.  See the\\n``cmake-generator-expressions(7)`` manual for available expressions.\\n\\nExample usage::\\n\\n add_test(NAME mytest\\n          COMMAND testDriver --config $<CONFIGURATION>\\n                             --exe $<TARGET_FILE:myexe>)\\n\\nThis creates a test ``mytest`` whose command runs a ``testDriver`` tool\\npassing the configuration name and the full path to the executable\\nfile produced by target ``myexe``.\\n\\n.. note::\\n\\n  CMake will generate tests only if the ``enable_testing()``\\n  command has been invoked.  The ``CTest`` module invokes the\\n  command automatically when the ``BUILD_TESTING`` option is ``ON``.\\n\\n---------------------------------------------------------------------\\n\\n::\\n\\n add_test(<name> <command> [<arg>...])\\n\\nAdd a test called ``<name>`` with the given command-line.  Unlike\\nthe above ``NAME`` signature no transformation is performed on the\\ncommand-line to support target names or generator expressions.\\n",
        "command"
    ],
    "aux_source_directory": [
        "aux_source_directory\\n--------------------\\n\\nFind all source files in a directory.\\n\\n::\\n\\n aux_source_directory(<dir> <variable>)\\n\\nCollects the names of all the source files in the specified directory\\nand stores the list in the ``<variable>`` provided.  This command is\\nintended to be used by projects that use explicit template\\ninstantiation.  Template instantiation files can be stored in a\\n\\\"Templates\\\" subdirectory and collected automatically using this\\ncommand to avoid manually listing all instantiations.\\n\\nIt is tempting to use this command to avoid writing the list of source\\nfiles for a library or executable target.  While this seems to work,\\nthere is no way for CMake to generate a build system that knows when a\\nnew source file has been added.  Normally the generated build system\\nknows when it needs to rerun CMake because the CMakeLists.txt file is\\nmodified to add a new source.  When the source is just added to the\\ndirectory without modifying this file, one would have to manually\\nrerun CMake to generate a build system incorporating the new file.\\n",
        "command"
    ],
    "break": [
        "break\\n-----\\n\\nBreak from an enclosing foreach or while loop.\\n\\n::\\n\\n break()\\n\\nBreaks from an enclosing foreach loop or while loop\\n\\nSee also the ``continue()`` command.\\n",
        "command"
    ],
    "build_command": [
        "build_command\\n-------------\\n\\nGet a command line to build the current project.\\nThis is mainly intended for internal use by the ``CTest`` module.\\n\\n build_command(<variable>\\n               [CONFIGURATION <config>]\\n               [TARGET <target>]\\n               [PROJECT_NAME <projname>] # legacy, causes warning\\n              )\\n\\nSets the given ``<variable>`` to a command-line string of the form::\\n\\n <cmake> --build . [--config <config>] [--target <target>] [-- -i]\\n\\nwhere ``<cmake>`` is the location of the ``cmake(1)`` command-line\\ntool, and ``<config>`` and ``<target>`` are the values provided to the\\n``CONFIGURATION`` and ``TARGET`` options, if any.  The trailing ``-- -i``\\noption is added for :ref:`Makefile Generators` if policy ``CMP0061``\\nis not set to ``NEW``.\\n\\nWhen invoked, this ``cmake --build`` command line will launch the\\nunderlying build system tool.\\n\\n build_command(<cachevariable> <makecommand>)\\n\\nThis second signature is deprecated, but still available for backwards\\ncompatibility.  Use the first signature instead.\\n\\nIt sets the given ``<cachevariable>`` to a command-line string as\\nabove but without the ``--target`` option.\\nThe ``<makecommand>`` is ignored but should be the full path to\\ndevenv, nmake, make or one of the end user build tools\\nfor legacy invocations.\\n\\n.. note::\\n In CMake versions prior to 3.0 this command returned a command\\n line that directly invokes the native build tool for the current\\n generator.  Their implementation of the ``PROJECT_NAME`` option\\n had no useful effects, so CMake now warns on use of the option.\\n",
        "command"
    ],
    "build_name": [
        "build_name\\n----------\\n\\nDisallowed.  See CMake Policy ``CMP0036``.\\n\\nUse ``${CMAKE_SYSTEM}`` and ``${CMAKE_CXX_COMPILER}`` instead.\\n\\n::\\n\\n build_name(variable)\\n\\nSets the specified variable to a string representing the platform and\\ncompiler settings.  These values are now available through the\\n``CMAKE_SYSTEM`` and\\n``CMAKE_CXX_COMPILER`` variables.\\n",
        "command"
    ],
    "cmake_host_system_information": [
        "cmake_host_system_information\\n-----------------------------\\n\\nQuery host system specific information.\\n\\n::\\n\\n cmake_host_system_information(RESULT <variable> QUERY <key> ...)\\n\\nQueries system information of the host system on which cmake runs.\\nOne or more ``<key>`` can be provided to select the information to be\\nqueried.  The list of queried values is stored in ``<variable>``.\\n\\n``<key>`` can be one of the following values:\\n\\n============================= ================================================\\nKey                           Description\\n============================= ================================================\\n``NUMBER_OF_LOGICAL_CORES``   Number of logical cores\\n``NUMBER_OF_PHYSICAL_CORES``  Number of physical cores\\n``HOSTNAME``                  Hostname\\n``FQDN``                      Fully qualified domain name\\n``TOTAL_VIRTUAL_MEMORY``      Total virtual memory in MiB [#mebibytes]_\\n``AVAILABLE_VIRTUAL_MEMORY``  Available virtual memory in MiB [#mebibytes]_\\n``TOTAL_PHYSICAL_MEMORY``     Total physical memory in MiB [#mebibytes]_\\n``AVAILABLE_PHYSICAL_MEMORY`` Available physical memory in MiB [#mebibytes]_\\n``IS_64BIT``                  One if processor is 64Bit\\n``HAS_FPU``                   One if processor has floating point unit\\n``HAS_MMX``                   One if processor supports MMX instructions\\n``HAS_MMX_PLUS``              One if processor supports Ext. MMX instructions\\n``HAS_SSE``                   One if processor supports SSE instructions\\n``HAS_SSE2``                  One if processor supports SSE2 instructions\\n``HAS_SSE_FP``                One if processor supports SSE FP instructions\\n``HAS_SSE_MMX``               One if processor supports SSE MMX instructions\\n``HAS_AMD_3DNOW``             One if processor supports 3DNow instructions\\n``HAS_AMD_3DNOW_PLUS``        One if processor supports 3DNow+ instructions\\n``HAS_IA64``                  One if IA64 processor emulating x86\\n``HAS_SERIAL_NUMBER``         One if processor has serial number\\n``PROCESSOR_SERIAL_NUMBER``   Processor serial number\\n``PROCESSOR_NAME``            Human readable processor name\\n``PROCESSOR_DESCRIPTION``     Human readable full processor description\\n``OS_NAME``                   See ``CMAKE_HOST_SYSTEM_NAME``\\n``OS_RELEASE``                The OS sub-type e.g. on Windows ``Professional``\\n``OS_VERSION``                The OS build ID\\n``OS_PLATFORM``               See ``CMAKE_HOST_SYSTEM_PROCESSOR``\\n============================= ================================================\\n\\n",
        "command"
    ],
    "cmake_minimum_required": [
        "cmake_minimum_required\\n----------------------\\n\\nSet the minimum required version of cmake for a project and\\nupdate Policy Settings to match the version given::\\n\\n cmake_minimum_required(VERSION <min>[...<max>] [FATAL_ERROR])\\n\\n``<min>`` and the optional ``<max>`` are each CMake versions of the form\\n``major.minor[.patch[.tweak]]``, and the ``...`` is literal.\\n\\nIf the running version of CMake is lower than the ``<min>`` required\\nversion it will stop processing the project and report an error.\\nThe optional ``<max>`` version, if specified, must be at least the\\n``<min>`` version and affects policy settings as described below.\\nIf the running version of CMake is older than 3.12, the extra ``...``\\ndots will be seen as version component separators, resulting in the\\n``...<max>`` part being ignored and preserving the pre-3.12 behavior\\nof basing policies on ``<min>``.\\n\\nThe ``FATAL_ERROR`` option is accepted but ignored by CMake 2.6 and\\nhigher.  It should be specified so CMake versions 2.4 and lower fail\\nwith an error instead of just a warning.\\n\\n.. note::\\n  Call the ``cmake_minimum_required()`` command at the beginning of\\n  the top-level ``CMakeLists.txt`` file even before calling the\\n  ``project()`` command.  It is important to establish version\\n  and policy settings before invoking other commands whose behavior\\n  they may affect.  See also policy ``CMP0000``.\\n\\n  Calling ``cmake_minimum_required()`` inside a ``function()``\\n  limits some effects to the function scope when invoked.  Such calls\\n  should not be made with the intention of having global effects.\\n\\nPolicy Settings\\n^^^^^^^^^^^^^^^\\n\\nThe ``cmake_minimum_required(VERSION)`` command implicitly invokes the\\n``cmake_policy(VERSION)`` command to specify that the current\\nproject code is written for the given range of CMake versions.\\nAll policies known to the running version of CMake and introduced\\nin the ``<min>`` (or ``<max>``, if specified) version or earlier will\\nbe set to use ``NEW`` behavior.  All policies introduced in later\\nversions will be unset.  This effectively requests behavior preferred\\nas of a given CMake version and tells newer CMake versions to warn\\nabout their new policies.\\n\\nWhen a ``<min>`` version higher than 2.4 is specified the command\\nimplicitly invokes::\\n\\n cmake_policy(VERSION <min>[...<max>])\\n\\nwhich sets CMake policies based on the range of versions specified.\\nWhen a ``<min>`` version 2.4 or lower is given the command implicitly\\ninvokes::\\n\\n cmake_policy(VERSION 2.4[...<max>])\\n\\nwhich enables compatibility features for CMake 2.4 and lower.\\n",
        "command"
    ],
    "cmake_parse_arguments": [
        "cmake_parse_arguments\\n---------------------\\n\\n``cmake_parse_arguments`` is intended to be used in macros or functions for\\nparsing the arguments given to that macro or function.  It processes the\\narguments and defines a set of variables which hold the values of the\\nrespective options.\\n\\n::\\n\\n cmake_parse_arguments(<prefix> <options> <one_value_keywords>\\n                       <multi_value_keywords> args...)\\n\\n cmake_parse_arguments(PARSE_ARGV N <prefix> <options> <one_value_keywords>\\n                       <multi_value_keywords>)\\n\\nThe first signature reads processes arguments passed in the ``args...``.\\nThis may be used in either a ``macro()`` or a ``function()``.\\n\\nThe ``PARSE_ARGV`` signature is only for use in a ``function()``\\nbody.  In this case the arguments that are parsed come from the\\n``ARGV#`` variables of the calling function.  The parsing starts with\\nthe Nth argument, where ``N`` is an unsigned integer.  This allows for\\nthe values to have special characters like ``;`` in them.\\n\\nThe ``<options>`` argument contains all options for the respective macro,\\ni.e.  keywords which can be used when calling the macro without any value\\nfollowing, like e.g.  the ``OPTIONAL`` keyword of the ``install()``\\ncommand.\\n\\nThe ``<one_value_keywords>`` argument contains all keywords for this macro\\nwhich are followed by one value, like e.g. ``DESTINATION`` keyword of the\\n``install()`` command.\\n\\nThe ``<multi_value_keywords>`` argument contains all keywords for this\\nmacro which can be followed by more than one value, like e.g. the\\n``TARGETS`` or ``FILES`` keywords of the ``install()`` command.\\n\\n.. note::\\n\\n   All keywords shall be unique. I.e. every keyword shall only be specified\\n   once in either ``<options>``, ``<one_value_keywords>`` or\\n   ``<multi_value_keywords>``. A warning will be emitted if uniqueness is\\n   violated.\\n\\nWhen done, ``cmake_parse_arguments`` will consider for each of the\\nkeywords listed in ``<options>``, ``<one_value_keywords>`` and\\n``<multi_value_keywords>`` a variable composed of the given ``<prefix>``\\nfollowed by ``\\\"_\\\"`` and the name of the respective keyword.  These\\nvariables will then hold the respective value from the argument list\\nor be undefined if the associated option could not be found.\\nFor the ``<options>`` keywords, these will always be defined,\\nto ``TRUE`` or ``FALSE``, whether the option is in the argument list or not.\\n\\nAll remaining arguments are collected in a variable\\n``<prefix>_UNPARSED_ARGUMENTS`` that will be undefined if all argument\\nwhere recognized. This can be checked afterwards to see\\nwhether your macro was called with unrecognized parameters.\\n\\nAs an example here a ``my_install()`` macro, which takes similar arguments\\nas the real ``install()`` command:\\n\\n macro(my_install)\\n     set(options OPTIONAL FAST)\\n     set(oneValueArgs DESTINATION RENAME)\\n     set(multiValueArgs TARGETS CONFIGURATIONS)\\n     cmake_parse_arguments(MY_INSTALL \\\"${options}\\\" \\\"${oneValueArgs}\\\"\\n                           \\\"${multiValueArgs}\\\" ${ARGN} )\\n\\n     # ...\\n\\nAssume ``my_install()`` has been called like this:\\n\\n my_install(TARGETS foo bar DESTINATION bin OPTIONAL blub)\\n\\nAfter the ``cmake_parse_arguments`` call the macro will have set or undefined\\nthe following variables::\\n\\n MY_INSTALL_OPTIONAL = TRUE\\n MY_INSTALL_FAST = FALSE # was not used in call to my_install\\n MY_INSTALL_DESTINATION = \\\"bin\\\"\\n MY_INSTALL_RENAME <UNDEFINED> # was not used\\n MY_INSTALL_TARGETS = \\\"foo;bar\\\"\\n MY_INSTALL_CONFIGURATIONS <UNDEFINED> # was not used\\n MY_INSTALL_UNPARSED_ARGUMENTS = \\\"blub\\\" # nothing expected after \\\"OPTIONAL\\\"\\n\\nYou can then continue and process these variables.\\n\\nKeywords terminate lists of values, e.g.  if directly after a\\none_value_keyword another recognized keyword follows, this is\\ninterpreted as the beginning of the new option.  E.g.\\n``my_install(TARGETS foo DESTINATION OPTIONAL)`` would result in\\n``MY_INSTALL_DESTINATION`` set to ``\\\"OPTIONAL\\\"``, but as ``OPTIONAL``\\nis a keyword itself ``MY_INSTALL_DESTINATION`` will be empty and\\n``MY_INSTALL_OPTIONAL`` will therefore be set to ``TRUE``.\\n",
        "command"
    ],
    "cmake_policy": [
        "cmake_policy\\n------------\\n\\nManage CMake Policy settings.  See the ``cmake-policies(7)``\\nmanual for defined policies.\\n\\nAs CMake evolves it is sometimes necessary to change existing behavior\\nin order to fix bugs or improve implementations of existing features.\\nThe CMake Policy mechanism is designed to help keep existing projects\\nbuilding as new versions of CMake introduce changes in behavior.  Each\\nnew policy (behavioral change) is given an identifier of the form\\n``CMP<NNNN>`` where ``<NNNN>`` is an integer index.  Documentation\\nassociated with each policy describes the ``OLD`` and ``NEW`` behavior\\nand the reason the policy was introduced.  Projects may set each policy\\nto select the desired behavior.  When CMake needs to know which behavior\\nto use it checks for a setting specified by the project.  If no\\nsetting is available the ``OLD`` behavior is assumed and a warning is\\nproduced requesting that the policy be set.\\n\\nSetting Policies by CMake Version\\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\\nThe ``cmake_policy`` command is used to set policies to ``OLD`` or ``NEW``\\nbehavior.  While setting policies individually is supported, we\\nencourage projects to set policies based on CMake versions::\\n\\n cmake_policy(VERSION <min>[...<max>])\\n\\n``<min>`` and the optional ``<max>`` are each CMake versions of the form\\n``major.minor[.patch[.tweak]]``, and the ``...`` is literal.  The ``<min>``\\nversion must be at least ``2.4`` and at most the running version of CMake.\\nThe ``<max>`` version, if specified, must be at least the ``<min>`` version\\nbut may exceed the running version of CMake.  If the running version of\\nCMake is older than 3.12, the extra ``...`` dots will be seen as version\\ncomponent separators, resulting in the ``...<max>`` part being ignored and\\npreserving the pre-3.12 behavior of basing policies on ``<min>``.\\n\\nThis specifies that the current CMake code is written for the given\\nrange of CMake versions.  All policies known to the running version of CMake\\nand introduced in the ``<min>`` (or ``<max>``, if specified) version\\nor earlier will be set to use ``NEW`` behavior.  All policies\\nintroduced in later versions will be unset (unless the\\n``CMAKE_POLICY_DEFAULT_CMP<NNNN>`` variable sets a default).\\nThis effectively requests behavior preferred as of a given CMake\\nversion and tells newer CMake versions to warn about their new policies.\\n\\nNote that the ``cmake_minimum_required(VERSION)``\\ncommand implicitly calls ``cmake_policy(VERSION)`` too.\\n\\nSetting Policies Explicitly\\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\\n::\\n\\n cmake_policy(SET CMP<NNNN> NEW)\\n cmake_policy(SET CMP<NNNN> OLD)\\n\\nTell CMake to use the ``OLD`` or ``NEW`` behavior for a given policy.\\nProjects depending on the old behavior of a given policy may silence a\\npolicy warning by setting the policy state to ``OLD``.  Alternatively\\none may fix the project to work with the new behavior and set the\\npolicy state to ``NEW``.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n\\nChecking Policy Settings\\n^^^^^^^^^^^^^^^^^^^^^^^^\\n\\n::\\n\\n cmake_policy(GET CMP<NNNN> <variable>)\\n\\nCheck whether a given policy is set to ``OLD`` or ``NEW`` behavior.\\nThe output ``<variable>`` value will be ``OLD`` or ``NEW`` if the\\npolicy is set, and empty otherwise.\\n\\nCMake Policy Stack\\n^^^^^^^^^^^^^^^^^^\\n\\nCMake keeps policy settings on a stack, so changes made by the\\ncmake_policy command affect only the top of the stack.  A new entry on\\nthe policy stack is managed automatically for each subdirectory to\\nprotect its parents and siblings.  CMake also manages a new entry for\\nscripts loaded by ``include()`` and ``find_package()`` commands\\nexcept when invoked with the ``NO_POLICY_SCOPE`` option\\n(see also policy ``CMP0011``).\\nThe ``cmake_policy`` command provides an interface to manage custom\\nentries on the policy stack::\\n\\n cmake_policy(PUSH)\\n cmake_policy(POP)\\n\\nEach ``PUSH`` must have a matching ``POP`` to erase any changes.\\nThis is useful to make temporary changes to policy settings.\\nCalls to the ``cmake_minimum_required(VERSION)``,\\n``cmake_policy(VERSION)``, or ``cmake_policy(SET)`` commands\\ninfluence only the current top of the policy stack.\\n\\nCommands created by the ``function()`` and ``macro()``\\ncommands record policy settings when they are created and\\nuse the pre-record policies when they are invoked.  If the function or\\nmacro implementation sets policies, the changes automatically\\npropagate up through callers until they reach the closest nested\\npolicy stack entry.\\n",
        "command"
    ],
    "configure_file": [
        "configure_file\\n--------------\\n\\nCopy a file to another location and modify its contents.\\n\\n::\\n\\n configure_file(<input> <output>\\n                [COPYONLY] [ESCAPE_QUOTES] [@ONLY]\\n                [NEWLINE_STYLE [UNIX|DOS|WIN32|LF|CRLF] ])\\n\\nCopies an ``<input>`` file to an ``<output>`` file and substitutes\\nvariable values referenced as ``@VAR@`` or ``${VAR}`` in the input\\nfile content.  Each variable reference will be replaced with the\\ncurrent value of the variable, or the empty string if the variable\\nis not defined.  Furthermore, input lines of the form::\\n\\n #cmakedefine VAR ...\\n\\nwill be replaced with either::\\n\\n #define VAR ...\\n\\nor::\\n\\n /* #undef VAR */\\n\\ndepending on whether ``VAR`` is set in CMake to any value not considered\\na false constant by the ``if()`` command.  The \\\"...\\\" content on the\\nline after the variable name, if any, is processed as above.\\nInput file lines of the form ``#cmakedefine01 VAR`` will be replaced with\\neither ``#define VAR 1`` or ``#define VAR 0`` similarly.\\nThe result lines (with the exception of the ``#undef`` comments) can be\\nindented using spaces and/or tabs between the ``#`` character\\nand the ``cmakedefine`` or ``cmakedefine01`` words. This whitespace\\nindentation will be preserved in the output lines::\\n\\n #  cmakedefine VAR\\n #  cmakedefine01 VAR\\n\\nwill be replaced, if ``VAR`` is defined, with::\\n\\n #  define VAR\\n #  define VAR 1\\n\\nIf the input file is modified the build system will re-run CMake to\\nre-configure the file and generate the build system again.\\nThe generated file is modified and its timestamp updated on subsequent\\ncmake runs only if its content is changed.\\n\\nThe arguments are:\\n\\n``<input>``\\n  Path to the input file.  A relative path is treated with respect to\\n  the value of ``CMAKE_CURRENT_SOURCE_DIR``.  The input path\\n  must be a file, not a directory.\\n\\n``<output>``\\n  Path to the output file or directory.  A relative path is treated\\n  with respect to the value of ``CMAKE_CURRENT_BINARY_DIR``.\\n  If the path names an existing directory the output file is placed\\n  in that directory with the same file name as the input file.\\n\\n``COPYONLY``\\n  Copy the file without replacing any variable references or other\\n  content.  This option may not be used with ``NEWLINE_STYLE``.\\n\\n``ESCAPE_QUOTES``\\n  Escape any substituted quotes with backslashes (C-style).\\n\\n``@ONLY``\\n  Restrict variable replacement to references of the form ``@VAR@``.\\n  This is useful for configuring scripts that use ``${VAR}`` syntax.\\n\\n``NEWLINE_STYLE <style>``\\n  Specify the newline style for the output file.  Specify\\n  ``UNIX`` or ``LF`` for ``\\\\n`` newlines, or specify\\n  ``DOS``, ``WIN32``, or ``CRLF`` for ``\\\\r\\\\n`` newlines.\\n  This option may not be used with ``COPYONLY``.\\n\\nExample\\n^^^^^^^\\n\\nConsider a source tree containing a ``foo.h.in`` file:\\n\\n #cmakedefine FOO_ENABLE\\n #cmakedefine FOO_STRING \\\"@FOO_STRING@\\\"\\n\\nAn adjacent ``CMakeLists.txt`` may use ``configure_file`` to\\nconfigure the header:\\n\\n option(FOO_ENABLE \\\"Enable Foo\\\" ON)\\n if(FOO_ENABLE)\\n   set(FOO_STRING \\\"foo\\\")\\n endif()\\n configure_file(foo.h.in foo.h @ONLY)\\n\\nThis creates a ``foo.h`` in the build directory corresponding to\\nthis source directory.  If the ``FOO_ENABLE`` option is on, the\\nconfigured file will contain:\\n\\n #define FOO_ENABLE\\n #define FOO_STRING \\\"foo\\\"\\n\\nOtherwise it will contain:\\n\\n /* #undef FOO_ENABLE */\\n /* #undef FOO_STRING */\\n\\nOne may then use the ``include_directories()`` command to\\nspecify the output directory as an include directory:\\n\\n include_directories(${CMAKE_CURRENT_BINARY_DIR})\\n\\nso that sources may include the header as ``#include <foo.h>``.\\n",
        "command"
    ],
    "continue": [
        "continue\\n--------\\n\\nContinue to the top of enclosing foreach or while loop.\\n\\n::\\n\\n continue()\\n\\nThe ``continue`` command allows a cmake script to abort the rest of a block\\nin a ``foreach()`` or ``while()`` loop, and start at the top of\\nthe next iteration.  See also the ``break()`` command.\\n",
        "command"
    ],
    "create_test_sourcelist": [
        "create_test_sourcelist\\n----------------------\\n\\nCreate a test driver and source list for building test programs.\\n\\n::\\n\\n create_test_sourcelist(sourceListName driverName\\n                        test1 test2 test3\\n                        EXTRA_INCLUDE include.h\\n                        FUNCTION function)\\n\\nA test driver is a program that links together many small tests into a\\nsingle executable.  This is useful when building static executables\\nwith large libraries to shrink the total required size.  The list of\\nsource files needed to build the test driver will be in\\n``sourceListName``.  ``driverName`` is the name of the test driver program.\\nThe rest of the arguments consist of a list of test source files, can\\nbe semicolon separated.  Each test source file should have a function\\nin it that is the same name as the file with no extension (foo.cxx\\nshould have int foo(int, char*[]);) ``driverName`` will be able to call\\neach of the tests by name on the command line.  If ``EXTRA_INCLUDE`` is\\nspecified, then the next argument is included into the generated file.\\nIf ``FUNCTION`` is specified, then the next argument is taken as a\\nfunction name that is passed a pointer to ac and av.  This can be used\\nto add extra command line processing to each test.  The\\n``CMAKE_TESTDRIVER_BEFORE_TESTMAIN`` cmake variable can be set to\\nhave code that will be placed directly before calling the test main function.\\n``CMAKE_TESTDRIVER_AFTER_TESTMAIN`` can be set to have code that\\nwill be placed directly after the call to the test main function.\\n",
        "command"
    ],
    "ctest_build": [
        "ctest_build\\n-----------\\n\\nPerform the :ref:`CTest Build Step` as a :ref:`Dashboard Client`.\\n\\n::\\n\\n ctest_build([BUILD <build-dir>] [APPEND]\\n             [CONFIGURATION <config>]\\n             [FLAGS <flags>]\\n             [PROJECT_NAME <project-name>]\\n             [TARGET <target-name>]\\n             [NUMBER_ERRORS <num-err-var>]\\n             [NUMBER_WARNINGS <num-warn-var>]\\n             [RETURN_VALUE <result-var>]\\n             [CAPTURE_CMAKE_ERROR <result-var>]\\n             )\\n\\nBuild the project and store results in ``Build.xml``\\nfor submission with the ``ctest_submit()`` command.\\n\\nThe ``CTEST_BUILD_COMMAND`` variable may be set to explicitly\\nspecify the build command line.  Otherwise the build command line is\\ncomputed automatically based on the options given.\\n\\nThe options are:\\n\\n``BUILD <build-dir>``\\n  Specify the top-level build directory.  If not given, the\\n  ``CTEST_BINARY_DIRECTORY`` variable is used.\\n\\n``APPEND``\\n  Mark ``Build.xml`` for append to results previously submitted to a\\n  dashboard server since the last ``ctest_start()`` call.\\n  Append semantics are defined by the dashboard server in use.\\n  This does *not* cause results to be appended to a ``.xml`` file\\n  produced by a previous call to this command.\\n\\n``CONFIGURATION <config>``\\n  Specify the build configuration (e.g. ``Debug``).  If not\\n  specified the ``CTEST_BUILD_CONFIGURATION`` variable will be checked.\\n  Otherwise the ``-C <cfg>`` option given to the ``ctest(1)``\\n  command will be used, if any.\\n\\n``FLAGS <flags>``\\n  Pass additional arguments to the underlying build command.\\n  If not specified the ``CTEST_BUILD_FLAGS`` variable will be checked.\\n  This can, e.g., be used to trigger a parallel build using the\\n  ``-j`` option of make. See the ``ProcessorCount`` module\\n  for an example.\\n\\n``PROJECT_NAME <project-name>``\\n  Set the name of the project to build.  This should correspond\\n  to the top-level call to the ``project()`` command.\\n  If not specified the ``CTEST_PROJECT_NAME`` variable will be checked.\\n\\n``TARGET <target-name>``\\n  Specify the name of a target to build.  If not specified the\\n  ``CTEST_BUILD_TARGET`` variable will be checked.  Otherwise the\\n  default target will be built.  This is the \\\"all\\\" target\\n  (called ``ALL_BUILD`` in :ref:`Visual Studio Generators`).\\n\\n``NUMBER_ERRORS <num-err-var>``\\n  Store the number of build errors detected in the given variable.\\n\\n``NUMBER_WARNINGS <num-warn-var>``\\n  Store the number of build warnings detected in the given variable.\\n\\n``RETURN_VALUE <result-var>``\\n  Store the return value of the native build tool in the given variable.\\n\\n``CAPTURE_CMAKE_ERROR <result-var>``\\n  Store in the ``<result-var>`` variable -1 if there are any errors running\\n  the command and prevent ctest from returning non-zero if an error occurs.\\n\\n``QUIET``\\n  Suppress any CTest-specific non-error output that would have been\\n  printed to the console otherwise.  The summary of warnings / errors,\\n  as well as the output from the native build tool is unaffected by\\n  this option.\\n",
        "command"
    ],
    "ctest_configure": [
        "ctest_configure\\n---------------\\n\\nPerform the :ref:`CTest Configure Step` as a :ref:`Dashboard Client`.\\n\\n::\\n\\n ctest_configure([BUILD <build-dir>] [SOURCE <source-dir>] [APPEND]\\n                 [OPTIONS <options>] [RETURN_VALUE <result-var>] [QUIET]\\n                 [CAPTURE_CMAKE_ERROR <result-var>])\\n\\nConfigure the project build tree and record results in ``Configure.xml``\\nfor submission with the ``ctest_submit()`` command.\\n\\nThe options are:\\n\\n``BUILD <build-dir>``\\n  Specify the top-level build directory.  If not given, the\\n  ``CTEST_BINARY_DIRECTORY`` variable is used.\\n\\n``SOURCE <source-dir>``\\n  Specify the source directory.  If not given, the\\n  ``CTEST_SOURCE_DIRECTORY`` variable is used.\\n\\n``APPEND``\\n  Mark ``Configure.xml`` for append to results previously submitted to a\\n  dashboard server since the last ``ctest_start()`` call.\\n  Append semantics are defined by the dashboard server in use.\\n  This does *not* cause results to be appended to a ``.xml`` file\\n  produced by a previous call to this command.\\n\\n``OPTIONS <options>``\\n  Specify command-line arguments to pass to the configuration tool.\\n\\n``RETURN_VALUE <result-var>``\\n  Store in the ``<result-var>`` variable the return value of the native\\n  configuration tool.\\n\\n``CAPTURE_CMAKE_ERROR <result-var>``\\n  Store in the ``<result-var>`` variable -1 if there are any errors running\\n  the command and prevent ctest from returning non-zero if an error occurs.\\n\\n``QUIET``\\n  Suppress any CTest-specific non-error messages that would have\\n  otherwise been printed to the console.  Output from the underlying\\n  configure command is not affected.\\n",
        "command"
    ],
    "ctest_coverage": [
        "ctest_coverage\\n--------------\\n\\nPerform the :ref:`CTest Coverage Step` as a :ref:`Dashboard Client`.\\n\\n::\\n\\n ctest_coverage([BUILD <build-dir>] [APPEND]\\n                [LABELS <label>...]\\n                [RETURN_VALUE <result-var>]\\n                [CAPTURE_CMAKE_ERROR <result-var]\\n                [QUIET]\\n                )\\n\\nCollect coverage tool results and stores them in ``Coverage.xml``\\nfor submission with the ``ctest_submit()`` command.\\n\\nThe options are:\\n\\n``BUILD <build-dir>``\\n  Specify the top-level build directory.  If not given, the\\n  ``CTEST_BINARY_DIRECTORY`` variable is used.\\n\\n``APPEND``\\n  Mark ``Coverage.xml`` for append to results previously submitted to a\\n  dashboard server since the last ``ctest_start()`` call.\\n  Append semantics are defined by the dashboard server in use.\\n  This does *not* cause results to be appended to a ``.xml`` file\\n  produced by a previous call to this command.\\n\\n``LABELS``\\n  Filter the coverage report to include only source files labeled\\n  with at least one of the labels specified.\\n\\n``RETURN_VALUE <result-var>``\\n  Store in the ``<result-var>`` variable ``0`` if coverage tools\\n  ran without error and non-zero otherwise.\\n\\n``CAPTURE_CMAKE_ERROR <result-var>``\\n  Store in the ``<result-var>`` variable -1 if there are any errors running\\n  the command and prevent ctest from returning non-zero if an error occurs.\\n\\n``QUIET``\\n  Suppress any CTest-specific non-error output that would have been\\n  printed to the console otherwise.  The summary indicating how many\\n  lines of code were covered is unaffected by this option.\\n",
        "command"
    ],
    "ctest_empty_binary_directory": [
        "ctest_empty_binary_directory\\n----------------------------\\n\\nempties the binary directory\\n\\n::\\n\\n ctest_empty_binary_directory( directory )\\n\\nRemoves a binary directory.  This command will perform some checks\\nprior to deleting the directory in an attempt to avoid malicious or\\naccidental directory deletion.\\n",
        "command"
    ],
    "ctest_memcheck": [
        "ctest_memcheck\\n--------------\\n\\nPerform the :ref:`CTest MemCheck Step` as a :ref:`Dashboard Client`.\\n\\n::\\n\\n ctest_memcheck([BUILD <build-dir>] [APPEND]\\n                [START <start-number>]\\n                [END <end-number>]\\n                [STRIDE <stride-number>]\\n                [EXCLUDE <exclude-regex>]\\n                [INCLUDE <include-regex>]\\n                [EXCLUDE_LABEL <label-exclude-regex>]\\n                [INCLUDE_LABEL <label-include-regex>]\\n                [EXCLUDE_FIXTURE <regex>]\\n                [EXCLUDE_FIXTURE_SETUP <regex>]\\n                [EXCLUDE_FIXTURE_CLEANUP <regex>]\\n                [PARALLEL_LEVEL <level>]\\n                [TEST_LOAD <threshold>]\\n                [SCHEDULE_RANDOM <ON|OFF>]\\n                [STOP_TIME <time-of-day>]\\n                [RETURN_VALUE <result-var>]\\n                [DEFECT_COUNT <defect-count-var>]\\n                [QUIET]\\n                )\\n\\nRun tests with a dynamic analysis tool and store results in\\n``MemCheck.xml`` for submission with the ``ctest_submit()``\\ncommand.\\n\\nMost options are the same as those for the ``ctest_test()`` command.\\n\\nThe options unique to this command are:\\n\\n``DEFECT_COUNT <defect-count-var>``\\n  Store in the ``<defect-count-var>`` the number of defects found.\\n",
        "command"
    ],
    "ctest_read_custom_files": [
        "ctest_read_custom_files\\n-----------------------\\n\\nread CTestCustom files.\\n\\n::\\n\\n ctest_read_custom_files( directory ... )\\n\\nRead all the CTestCustom.ctest or CTestCustom.cmake files from the\\ngiven directory.\\n\\nBy default, invoking ``ctest(1)`` without a script will read custom\\nfiles from the binary directory.\\n",
        "command"
    ],
    "ctest_run_script": [
        "ctest_run_script\\n----------------\\n\\nruns a ctest -S script\\n\\n::\\n\\n ctest_run_script([NEW_PROCESS] script_file_name script_file_name1\\n             script_file_name2 ... [RETURN_VALUE var])\\n\\nRuns a script or scripts much like if it was run from ctest -S.  If no\\nargument is provided then the current script is run using the current\\nsettings of the variables.  If ``NEW_PROCESS`` is specified then each\\nscript will be run in a separate process.If ``RETURN_VALUE`` is specified\\nthe return value of the last script run will be put into ``var``.\\n",
        "command"
    ],
    "ctest_sleep": [
        "ctest_sleep\\n-----------\\n\\nsleeps for some amount of time\\n\\n::\\n\\n ctest_sleep(<seconds>)\\n\\nSleep for given number of seconds.\\n\\n::\\n\\n ctest_sleep(<time1> <duration> <time2>)\\n\\nSleep for t=(time1 + duration - time2) seconds if t > 0.\\n",
        "command"
    ],
    "ctest_start": [
        "ctest_start\\n-----------\\n\\nStarts the testing for a given model\\n\\n::\\n\\n ctest_start(<model> [<source> [<binary>]] [TRACK <track>] [QUIET])\\n\\n ctest_start([<model> [<source> [<binary>]]] [TRACK <track>] APPEND [QUIET])\\n\\nStarts the testing for a given model.  The command should be called\\nafter the binary directory is initialized.\\n\\nThe parameters are as follows:\\n\\n``<model>``\\n  Set the dashboard model. Must be one of ``Experimental``, ``Continuous``, or\\n  ``Nightly``. This parameter is required unless ``APPEND`` is specified.\\n\\n``<source>``\\n  Set the source directory. If not specified, the value of\\n  ``CTEST_SOURCE_DIRECTORY`` is used instead.\\n\\n``<binary>``\\n  Set the binary directory. If not specified, the value of\\n  ``CTEST_BINARY_DIRECTORY`` is used instead.\\n\\n``TRACK <track>``\\n  If ``TRACK`` is used, the submissions will go to the specified track on the\\n  CDash server. If no ``TRACK`` is specified, the name of the model is used by\\n  default.\\n\\n``APPEND``\\n  If ``APPEND`` is used, the existing ``TAG`` is used rather than creating a new\\n  one based on the current time stamp. If you use ``APPEND``, you can omit the\\n  ``<model>`` and ``TRACK <track>`` parameters, because they will be read from\\n  the generated ``TAG`` file. For example:\\n\\n  .. code-block:: cmake\\n\\n    ctest_start(Experimental TRACK TrackExperimental)\\n\\n  Later, in another ``ctest -S`` script:\\n\\n  .. code-block:: cmake\\n\\n    ctest_start(APPEND)\\n\\n  When the second script runs ``ctest_start(APPEND)``, it will read the\\n  ``Experimental`` model and ``TrackExperimental`` track from the ``TAG`` file\\n  generated by the first ``ctest_start()`` command. Please note that if you\\n  call ``ctest_start(APPEND)`` and specify a different model or track than\\n  in the first ``ctest_start()`` command, a warning will be issued, and the\\n  new model and track will be used.\\n\\n``QUIET``\\n  If ``QUIET`` is used, CTest will suppress any non-error messages that it\\n  otherwise would have printed to the console.\\n\\nThe parameters for ``ctest_start()`` can be issued in any order, with the\\nexception that ``<model>``, ``<source>``, and ``<binary>`` have to appear\\nin that order with respect to each other. The following are all valid and\\nequivalent:\\n\\n ctest_start(Experimental path/to/source path/to/binary TRACK SomeTrack QUIET APPEND)\\n\\n ctest_start(TRACK SomeTrack Experimental QUIET path/to/source APPEND path/to/binary)\\n\\n ctest_start(APPEND QUIET Experimental path/to/source TRACK SomeTrack path/to/binary)\\n\\nHowever, for the sake of readability, it is recommended that you order your\\nparameters in the order listed at the top of this page.\\n\\nIf the ``CTEST_CHECKOUT_COMMAND`` variable (or the\\n``CTEST_CVS_CHECKOUT`` variable) is set, its content is treated as\\ncommand-line.  The command is invoked with the current working directory set\\nto the parent of the source directory, even if the source directory already\\nexists.  This can be used to create the source tree from a version control\\nrepository.\\n",
        "command"
    ],
    "ctest_submit": [
        "ctest_submit\\n------------\\n\\nPerform the :ref:`CTest Submit Step` as a :ref:`Dashboard Client`.\\n\\n::\\n\\n ctest_submit([PARTS <part>...] [FILES <file>...]\\n              [HTTPHEADER <header>]\\n              [RETRY_COUNT <count>]\\n              [RETRY_DELAY <delay>]\\n              [RETURN_VALUE <result-var>]\\n              [CAPTURE_CMAKE_ERROR <result-var>]\\n              [QUIET]\\n              )\\n\\nSubmit results to a dashboard server.\\nBy default all available parts are submitted.\\n\\nThe options are:\\n\\n``PARTS <part>...``\\n  Specify a subset of parts to submit.  Valid part names are::\\n\\n Start      = nothing\\n Update     = ctest_update results, in Update.xml\\n Configure  = ctest_configure results, in Configure.xml\\n Build      = ctest_build results, in Build.xml\\n Test       = ctest_test results, in Test.xml\\n Coverage   = ctest_coverage results, in Coverage.xml\\n MemCheck   = ctest_memcheck results, in DynamicAnalysis.xml\\n Notes      = Files listed by CTEST_NOTES_FILES, in Notes.xml\\n ExtraFiles = Files listed by CTEST_EXTRA_SUBMIT_FILES\\n Upload     = Files prepared for upload by ctest_upload(), in Upload.xml\\n Submit     = nothing\\n\\n``FILES <file>...``\\n  Specify an explicit list of specific files to be submitted.\\n  Each individual file must exist at the time of the call.\\n\\n``HTTPHEADER <HTTP-header>``\\n  Specify HTTP header to be included in the request to CDash during submission.\\n  This suboption can be repeated several times.\\n\\n``RETRY_COUNT <count>``\\n  Specify how many times to retry a timed-out submission.\\n\\n``RETRY_DELAY <delay>``\\n  Specify how long (in seconds) to wait after a timed-out submission\\n  before attempting to re-submit.\\n\\n``RETURN_VALUE <result-var>``\\n  Store in the ``<result-var>`` variable ``0`` for success and\\n  non-zero on failure.\\n\\n``CAPTURE_CMAKE_ERROR <result-var>``\\n  Store in the ``<result-var>`` variable -1 if there are any errors running\\n  the command and prevent ctest from returning non-zero if an error occurs.\\n\\n``QUIET``\\n  Suppress all non-error messages that would have otherwise been\\n  printed to the console.\\n\\nSubmit to CDash Upload API\\n^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\\n::\\n\\n ctest_submit(CDASH_UPLOAD <file> [CDASH_UPLOAD_TYPE <type>]\\n              [HTTPHEADER <header>]\\n              [RETRY_COUNT <count>]\\n              [RETRY_DELAY <delay>]\\n              [RETURN_VALUE <result-var>]\\n              [QUIET])\\n\\nThis second signature is used to upload files to CDash via the CDash\\nfile upload API. The API first sends a request to upload to CDash along\\nwith a content hash of the file. If CDash does not already have the file,\\nthen it is uploaded. Along with the file, a CDash type string is specified\\nto tell CDash which handler to use to process the data.\\n\\nThis signature accepts the ``HTTPHEADER``, ``RETRY_COUNT``, ``RETRY_DELAY``,\\n``RETURN_VALUE`` and ``QUIET`` options as described above.\\n",
        "command"
    ],
    "ctest_test": [
        "ctest_test\\n----------\\n\\nPerform the :ref:`CTest Test Step` as a :ref:`Dashboard Client`.\\n\\n::\\n\\n ctest_test([BUILD <build-dir>] [APPEND]\\n            [START <start-number>]\\n            [END <end-number>]\\n            [STRIDE <stride-number>]\\n            [EXCLUDE <exclude-regex>]\\n            [INCLUDE <include-regex>]\\n            [EXCLUDE_LABEL <label-exclude-regex>]\\n            [INCLUDE_LABEL <label-include-regex>]\\n            [EXCLUDE_FIXTURE <regex>]\\n            [EXCLUDE_FIXTURE_SETUP <regex>]\\n            [EXCLUDE_FIXTURE_CLEANUP <regex>]\\n            [PARALLEL_LEVEL <level>]\\n            [TEST_LOAD <threshold>]\\n            [SCHEDULE_RANDOM <ON|OFF>]\\n            [STOP_TIME <time-of-day>]\\n            [RETURN_VALUE <result-var>]\\n            [CAPTURE_CMAKE_ERROR <result-var>]\\n            [QUIET]\\n            )\\n\\nRun tests in the project build tree and store results in\\n``Test.xml`` for submission with the ``ctest_submit()`` command.\\n\\nThe options are:\\n\\n``BUILD <build-dir>``\\n  Specify the top-level build directory.  If not given, the\\n  ``CTEST_BINARY_DIRECTORY`` variable is used.\\n\\n``APPEND``\\n  Mark ``Test.xml`` for append to results previously submitted to a\\n  dashboard server since the last ``ctest_start()`` call.\\n  Append semantics are defined by the dashboard server in use.\\n  This does *not* cause results to be appended to a ``.xml`` file\\n  produced by a previous call to this command.\\n\\n``START <start-number>``\\n  Specify the beginning of a range of test numbers.\\n\\n``END <end-number>``\\n  Specify the end of a range of test numbers.\\n\\n``STRIDE <stride-number>``\\n  Specify the stride by which to step across a range of test numbers.\\n\\n``EXCLUDE <exclude-regex>``\\n  Specify a regular expression matching test names to exclude.\\n\\n``INCLUDE <include-regex>``\\n  Specify a regular expression matching test names to include.\\n  Tests not matching this expression are excluded.\\n\\n``EXCLUDE_LABEL <label-exclude-regex>``\\n  Specify a regular expression matching test labels to exclude.\\n\\n``INCLUDE_LABEL <label-include-regex>``\\n  Specify a regular expression matching test labels to include.\\n  Tests not matching this expression are excluded.\\n\\n``EXCLUDE_FIXTURE <regex>``\\n  If a test in the set of tests to be executed requires a particular fixture,\\n  that fixture's setup and cleanup tests would normally be added to the test\\n  set automatically. This option prevents adding setup or cleanup tests for\\n  fixtures matching the ``<regex>``. Note that all other fixture behavior is\\n  retained, including test dependencies and skipping tests that have fixture\\n  setup tests that fail.\\n\\n``EXCLUDE_FIXTURE_SETUP <regex>``\\n  Same as ``EXCLUDE_FIXTURE`` except only matching setup tests are excluded.\\n\\n``EXCLUDE_FIXTURE_CLEANUP <regex>``\\n  Same as ``EXCLUDE_FIXTURE`` except only matching cleanup tests are excluded.\\n\\n``PARALLEL_LEVEL <level>``\\n  Specify a positive number representing the number of tests to\\n  be run in parallel.\\n\\n``TEST_LOAD <threshold>``\\n  While running tests in parallel, try not to start tests when they\\n  may cause the CPU load to pass above a given threshold.  If not\\n  specified the ``CTEST_TEST_LOAD`` variable will be checked,\\n  and then the ``--test-load`` command-line argument to ``ctest(1)``.\\n  See also the ``TestLoad`` setting in the :ref:`CTest Test Step`.\\n\\n``SCHEDULE_RANDOM <ON|OFF>``\\n  Launch tests in a random order.  This may be useful for detecting\\n  implicit test dependencies.\\n\\n``STOP_TIME <time-of-day>``\\n  Specify a time of day at which the tests should all stop running.\\n\\n``RETURN_VALUE <result-var>``\\n  Store in the ``<result-var>`` variable ``0`` if all tests passed.\\n  Store non-zero if anything went wrong.\\n\\n``CAPTURE_CMAKE_ERROR <result-var>``\\n  Store in the ``<result-var>`` variable -1 if there are any errors running\\n  the command and prevent ctest from returning non-zero if an error occurs.\\n\\n``QUIET``\\n  Suppress any CTest-specific non-error messages that would have otherwise\\n  been printed to the console.  Output from the underlying test command is not\\n  affected.  Summary info detailing the percentage of passing tests is also\\n  unaffected by the ``QUIET`` option.\\n\\nSee also the ``CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE``\\nand ``CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE`` variables.\\n",
        "command"
    ],
    "ctest_update": [
        "ctest_update\\n------------\\n\\nPerform the :ref:`CTest Update Step` as a :ref:`Dashboard Client`.\\n\\n::\\n\\n ctest_update([SOURCE <source-dir>]\\n              [RETURN_VALUE <result-var>]\\n              [CAPTURE_CMAKE_ERROR <result-var>]\\n              [QUIET])\\n\\nUpdate the source tree from version control and record results in\\n``Update.xml`` for submission with the ``ctest_submit()`` command.\\n\\nThe options are:\\n\\n``SOURCE <source-dir>``\\n  Specify the source directory.  If not given, the\\n  ``CTEST_SOURCE_DIRECTORY`` variable is used.\\n\\n``RETURN_VALUE <result-var>``\\n  Store in the ``<result-var>`` variable the number of files\\n  updated or ``-1`` on error.\\n\\n``CAPTURE_CMAKE_ERROR <result-var>``\\n  Store in the ``<result-var>`` variable -1 if there are any errors running\\n  the command and prevent ctest from returning non-zero if an error occurs.\\n\\n``QUIET``\\n  Tell CTest to suppress most non-error messages that it would\\n  have otherwise printed to the console.  CTest will still report\\n  the new revision of the repository and any conflicting files\\n  that were found.\\n\\nThe update always follows the version control branch currently checked\\nout in the source directory.  See the :ref:`CTest Update Step`\\ndocumentation for more information.\\n",
        "command"
    ],
    "ctest_upload": [
        "ctest_upload\\n------------\\n\\nUpload files to a dashboard server as a :ref:`Dashboard Client`.\\n\\n::\\n\\n ctest_upload(FILES <file>... [QUIET] [CAPTURE_CMAKE_ERROR <result-var>])\\n\\nThe options are:\\n\\n``FILES <file>...``\\n  Specify a list of files to be sent along with the build results to the\\n  dashboard server.\\n\\n``QUIET``\\n  Suppress any CTest-specific non-error output that would have been\\n  printed to the console otherwise.\\n\\n``CAPTURE_CMAKE_ERROR <result-var>``\\n  Store in the ``<result-var>`` variable -1 if there are any errors running\\n  the command and prevent ctest from returning non-zero if an error occurs.\\n",
        "command"
    ],
    "define_property": [
        "define_property\\n---------------\\n\\nDefine and document custom properties.\\n\\n::\\n\\n define_property(<GLOBAL | DIRECTORY | TARGET | SOURCE |\\n                  TEST | VARIABLE | CACHED_VARIABLE>\\n                  PROPERTY <name> [INHERITED]\\n                  BRIEF_DOCS <brief-doc> [docs...]\\n                  FULL_DOCS <full-doc> [docs...])\\n\\nDefine one property in a scope for use with the ``set_property()`` and\\n``get_property()`` commands.  This is primarily useful to associate\\ndocumentation with property names that may be retrieved with the\\n``get_property()`` command. The first argument determines the kind of\\nscope in which the property should be used.  It must be one of the\\nfollowing:\\n\\n::\\n\\n GLOBAL    = associated with the global namespace\\n DIRECTORY = associated with one directory\\n TARGET    = associated with one target\\n SOURCE    = associated with one source file\\n TEST      = associated with a test named with add_test\\n VARIABLE  = documents a CMake language variable\\n CACHED_VARIABLE = documents a CMake cache variable\\n\\nNote that unlike ``set_property()`` and ``get_property()`` no\\nactual scope needs to be given; only the kind of scope is important.\\n\\nThe required ``PROPERTY`` option is immediately followed by the name of\\nthe property being defined.\\n\\nIf the ``INHERITED`` option is given, then the ``get_property()`` command\\nwill chain up to the next higher scope when the requested property is not set\\nin the scope given to the command.\\n\\n* ``DIRECTORY`` scope chains to its parent directory's scope, continuing the\\n  walk up parent directories until a directory has the property set or there\\n  are no more parents.  If still not found at the top level directory, it\\n  chains to the ``GLOBAL`` scope.\\n* ``TARGET``, ``SOURCE`` and ``TEST`` properties chain to ``DIRECTORY`` scope,\\n  including further chaining up the directories, etc. as needed.\\n\\nNote that this scope chaining behavior only applies to calls to\\n``get_property()``, ``get_directory_property()``,\\n``get_target_property()``, ``get_source_file_property()`` and\\n``get_test_property()``.  There is no inheriting behavior when *setting*\\nproperties, so using ``APPEND`` or ``APPEND_STRING`` with the\\n``set_property()`` command will not consider inherited values when working\\nout the contents to append to.\\n\\nThe ``BRIEF_DOCS`` and ``FULL_DOCS`` options are followed by strings to be\\nassociated with the property as its brief and full documentation.\\nCorresponding options to the ``get_property()`` command will retrieve\\nthe documentation.\\n",
        "command"
    ],
    "else": [
        "else\\n----\\n\\nStarts the else portion of an if block.\\n\\n::\\n\\n else(expression)\\n\\nSee the ``if()`` command.\\n",
        "command"
    ],
    "elseif": [
        "elseif\\n------\\n\\nStarts the elseif portion of an if block.\\n\\n::\\n\\n elseif(expression)\\n\\nSee the ``if()`` command.\\n",
        "command"
    ],
    "enable_language": [
        "enable_language\\n---------------\\n\\nEnable a language (CXX/C/Fortran/etc)\\n\\n::\\n\\n enable_language(<lang> [OPTIONAL] )\\n\\nThis command enables support for the named language in CMake.  This is\\nthe same as the project command but does not create any of the extra\\nvariables that are created by the project command.  Example languages\\nare ``CXX``, ``C``, ``CUDA``, ``Fortran``, and ``ASM``.\\n\\nIf enabling ``ASM``, enable it last so that CMake can check whether\\ncompilers for other languages like ``C`` work for assembly too.\\n\\nThis command must be called in file scope, not in a function call.\\nFurthermore, it must be called in the highest directory common to all\\ntargets using the named language directly for compiling sources or\\nindirectly through link dependencies.  It is simplest to enable all\\nneeded languages in the top-level directory of a project.\\n\\nThe ``OPTIONAL`` keyword is a placeholder for future implementation and\\ndoes not currently work. Instead you can use the ``CheckLanguage``\\nmodule to verify support before enabling.\\n",
        "command"
    ],
    "enable_testing": [
        "enable_testing\\n--------------\\n\\nEnable testing for current directory and below.\\n\\n::\\n\\n enable_testing()\\n\\nEnables testing for this directory and below.  See also the\\n``add_test()`` command.  Note that ctest expects to find a test file\\nin the build directory root.  Therefore, this command should be in the\\nsource directory root.\\n",
        "command"
    ],
    "endforeach": [
        "endforeach\\n----------\\n\\nEnds a list of commands in a foreach block.\\n\\n::\\n\\n endforeach(expression)\\n\\nSee the ``foreach()`` command.\\n",
        "command"
    ],
    "endfunction": [
        "endfunction\\n-----------\\n\\nEnds a list of commands in a function block.\\n\\n::\\n\\n endfunction(expression)\\n\\nSee the ``function()`` command.\\n",
        "command"
    ],
    "endif": [
        "endif\\n-----\\n\\nEnds a list of commands in an if block.\\n\\n::\\n\\n endif(expression)\\n\\nSee the ``if()`` command.\\n",
        "command"
    ],
    "endmacro": [
        "endmacro\\n--------\\n\\nEnds a list of commands in a macro block.\\n\\n::\\n\\n endmacro(expression)\\n\\nSee the ``macro()`` command.\\n",
        "command"
    ],
    "endwhile": [
        "endwhile\\n--------\\n\\nEnds a list of commands in a while block.\\n\\n::\\n\\n endwhile(expression)\\n\\nSee the ``while()`` command.\\n",
        "command"
    ],
    "exec_program": [
        "exec_program\\n------------\\n\\nDeprecated.  Use the ``execute_process()`` command instead.\\n\\nRun an executable program during the processing of the CMakeList.txt\\nfile.\\n\\n::\\n\\n exec_program(Executable [directory in which to run]\\n              [ARGS <arguments to executable>]\\n              [OUTPUT_VARIABLE <var>]\\n              [RETURN_VALUE <var>])\\n\\nThe executable is run in the optionally specified directory.  The\\nexecutable can include arguments if it is double quoted, but it is\\nbetter to use the optional ``ARGS`` argument to specify arguments to the\\nprogram.  This is because cmake will then be able to escape spaces in\\nthe executable path.  An optional argument ``OUTPUT_VARIABLE`` specifies a\\nvariable in which to store the output.  To capture the return value of\\nthe execution, provide a ``RETURN_VALUE``.  If ``OUTPUT_VARIABLE`` is\\nspecified, then no output will go to the stdout/stderr of the console\\nrunning cmake.\\n",
        "command"
    ],
    "execute_process": [
        "execute_process\\n---------------\\n\\nExecute one or more child processes.\\n\\n execute_process(COMMAND <cmd1> [args1...]]\\n                 [COMMAND <cmd2> [args2...] [...]]\\n                 [WORKING_DIRECTORY <directory>]\\n                 [TIMEOUT <seconds>]\\n                 [RESULT_VARIABLE <variable>]\\n                 [RESULTS_VARIABLE <variable>]\\n                 [OUTPUT_VARIABLE <variable>]\\n                 [ERROR_VARIABLE <variable>]\\n                 [INPUT_FILE <file>]\\n                 [OUTPUT_FILE <file>]\\n                 [ERROR_FILE <file>]\\n                 [OUTPUT_QUIET]\\n                 [ERROR_QUIET]\\n                 [OUTPUT_STRIP_TRAILING_WHITESPACE]\\n                 [ERROR_STRIP_TRAILING_WHITESPACE]\\n                 [ENCODING <name>])\\n\\nRuns the given sequence of one or more commands in parallel with the standard\\noutput of each process piped to the standard input of the next.\\nA single standard error pipe is used for all processes.\\n\\nOptions:\\n\\n``COMMAND``\\n A child process command line.\\n\\n CMake executes the child process using operating system APIs directly.\\n All arguments are passed VERBATIM to the child process.\\n No intermediate shell is used, so shell operators such as ``>``\\n are treated as normal arguments.\\n (Use the ``INPUT_*``, ``OUTPUT_*``, and ``ERROR_*`` options to\\n redirect stdin, stdout, and stderr.)\\n\\n If a sequential execution of multiple commands is required, use multiple\\n ``execute_process()`` calls with a single ``COMMAND`` argument.\\n\\n``WORKING_DIRECTORY``\\n The named directory will be set as the current working directory of\\n the child processes.\\n\\n``TIMEOUT``\\n The child processes will be terminated if they do not finish in the\\n specified number of seconds (fractions are allowed).\\n\\n``RESULT_VARIABLE``\\n The variable will be set to contain the result of last child process.\\n This will be an integer return code from the last child or a string\\n describing an error condition.\\n\\n``RESULTS_VARIABLE <variable>``\\n The variable will be set to contain the result of all processes as a\\n :ref:`;-list <CMake Language Lists>`, in order of the given ``COMMAND``\\n arguments.  Each entry will be an integer return code from the\\n corresponding child or a string describing an error condition.\\n\\n``OUTPUT_VARIABLE``, ``ERROR_VARIABLE``\\n The variable named will be set with the contents of the standard output\\n and standard error pipes, respectively.  If the same variable is named\\n for both pipes their output will be merged in the order produced.\\n\\n``INPUT_FILE, OUTPUT_FILE``, ``ERROR_FILE``\\n The file named will be attached to the standard input of the first\\n process, standard output of the last process, or standard error of\\n all processes, respectively.  If the same file is named for both\\n output and error then it will be used for both.\\n\\n``OUTPUT_QUIET``, ``ERROR_QUIET``\\n The standard output or standard error results will be quietly ignored.\\n\\n``ENCODING <name>``\\n On Windows, the encoding that is used to decode output from the process.\\n Ignored on other platforms.\\n Valid encoding names are:\\n\\n ``NONE``\\n   Perform no decoding.  This assumes that the process output is encoded\\n   in the same way as CMake's internal encoding (UTF-8).\\n   This is the default.\\n ``AUTO``\\n   Use the current active console's codepage or if that isn't\\n   available then use ANSI.\\n ``ANSI``\\n   Use the ANSI codepage.\\n ``OEM``\\n   Use the original equipment manufacturer (OEM) code page.\\n ``UTF8`` or ``UTF-8``\\n   Use the UTF-8 codepage. Prior to CMake 3.11.0, only ``UTF8`` was accepted\\n   for this encoding. In CMake 3.11.0, ``UTF-8`` was added for consistency with\\n   the UTF-8 RFC naming convention.\\n\\nIf more than one ``OUTPUT_*`` or ``ERROR_*`` option is given for the\\nsame pipe the precedence is not specified.\\nIf no ``OUTPUT_*`` or ``ERROR_*`` options are given the output will\\nbe shared with the corresponding pipes of the CMake process itself.\\n\\nThe ``execute_process()`` command is a newer more powerful version of\\n``exec_program()``, but the old command has been kept for compatibility.\\nBoth commands run while CMake is processing the project prior to build\\nsystem generation.  Use ``add_custom_target()`` and\\n``add_custom_command()`` to create custom commands that run at\\nbuild time.\\n",
        "command"
    ],
    "export": [
        "export\\n------\\n\\nExport targets from the build tree for use by outside projects.\\n\\n::\\n\\n export(EXPORT <export-name> [NAMESPACE <namespace>] [FILE <filename>])\\n\\nCreate a file ``<filename>`` that may be included by outside projects to\\nimport targets from the current project's build tree.  This is useful\\nduring cross-compiling to build utility executables that can run on\\nthe host platform in one project and then import them into another\\nproject being compiled for the target platform.  If the ``NAMESPACE``\\noption is given the ``<namespace>`` string will be prepended to all target\\nnames written to the file.\\n\\nTarget installations are associated with the export ``<export-name>``\\nusing the ``EXPORT`` option of the ``install(TARGETS)`` command.\\n\\nThe file created by this command is specific to the build tree and\\nshould never be installed.  See the ``install(EXPORT)`` command to\\nexport targets from an installation tree.\\n\\nThe properties set on the generated IMPORTED targets will have the\\nsame values as the final values of the input TARGETS.\\n\\n::\\n\\n export(TARGETS [target1 [target2 [...]]] [NAMESPACE <namespace>]\\n        [APPEND] FILE <filename> [EXPORT_LINK_INTERFACE_LIBRARIES])\\n\\nThis signature is similar to the ``EXPORT`` signature, but targets are listed\\nexplicitly rather than specified as an export-name.  If the APPEND option is\\ngiven the generated code will be appended to the file instead of overwriting it.\\nThe EXPORT_LINK_INTERFACE_LIBRARIES keyword, if present, causes the\\ncontents of the properties matching\\n``(IMPORTED_)?LINK_INTERFACE_LIBRARIES(_<CONFIG>)?`` to be exported, when\\npolicy CMP0022 is NEW.  If a library target is included in the export\\nbut a target to which it links is not included the behavior is\\nunspecified.\\n\\n.. note::\\n\\n  :ref:`Object Libraries` under ``Xcode`` have special handling if\\n  multiple architectures are listed in ``CMAKE_OSX_ARCHITECTURES``.\\n  In this case they will be exported as :ref:`Interface Libraries` with\\n  no object files available to clients.  This is sufficient to satisfy\\n  transitive usage requirements of other targets that link to the\\n  object libraries in their implementation.\\n\\n::\\n\\n export(PACKAGE <PackageName>)\\n\\nStore the current build directory in the CMake user package registry\\nfor package ``<PackageName>``.  The find_package command may consider the\\ndirectory while searching for package ``<PackageName>``.  This helps dependent\\nprojects find and use a package from the current project's build tree\\nwithout help from the user.  Note that the entry in the package\\nregistry that this command creates works only in conjunction with a\\npackage configuration file (``<PackageName>Config.cmake``) that works with the\\nbuild tree. In some cases, for example for packaging and for system\\nwide installations, it is not desirable to write the user package\\nregistry. If the ``CMAKE_EXPORT_NO_PACKAGE_REGISTRY`` variable\\nis enabled, the ``export(PACKAGE)`` command will do nothing.\\n\\n::\\n\\n export(TARGETS [target1 [target2 [...]]]  [ANDROID_MK <filename>])\\n\\nThis signature exports cmake built targets to the android ndk build system\\nby creating an Android.mk file that references the prebuilt targets. The\\nAndroid NDK supports the use of prebuilt libraries, both static and shared.\\nThis allows cmake to build the libraries of a project and make them available\\nto an ndk build system complete with transitive dependencies, include flags\\nand defines required to use the libraries. The signature takes a list of\\ntargets and puts them in the Android.mk file specified by the ``<filename>``\\ngiven. This signature can only be used if policy CMP0022 is NEW for all\\ntargets given. A error will be issued if that policy is set to OLD for one\\nof the targets.\\n",
        "command"
    ],
    "export_library_dependencies": [
        "export_library_dependencies\\n---------------------------\\n\\nDisallowed.  See CMake Policy ``CMP0033``.\\n\\nUse ``install(EXPORT)`` or ``export()`` command.\\n\\nThis command generates an old-style library dependencies file.\\nProjects requiring CMake 2.6 or later should not use the command.  Use\\ninstead the ``install(EXPORT)`` command to help export targets from an\\ninstallation tree and the ``export()`` command to export targets from a\\nbuild tree.\\n\\nThe old-style library dependencies file does not take into account\\nper-configuration names of libraries or the\\n``LINK_INTERFACE_LIBRARIES`` target property.\\n\\n::\\n\\n export_library_dependencies(<file> [APPEND])\\n\\nCreate a file named ``<file>`` that can be included into a CMake listfile\\nwith the INCLUDE command.  The file will contain a number of SET\\ncommands that will set all the variables needed for library dependency\\ninformation.  This should be the last command in the top level\\nCMakeLists.txt file of the project.  If the ``APPEND`` option is\\nspecified, the SET commands will be appended to the given file instead\\nof replacing it.\\n",
        "command"
    ],
    "file": [
        "file\\n----\\n\\nFile manipulation command.\\n\\nSynopsis\\n^^^^^^^^\\n\\n Reading\\n   file(READ <filename> <out-var> [...])\\n   file(STRINGS <filename> <out-var> [...])\\n   file(<HASH> <filename> <out-var>)\\n   file(TIMESTAMP <filename> <out-var> [...])\\n\\n Writing\\n   file({WRITE | APPEND} <filename> <content>...)\\n   file({TOUCH | TOUCH_NOCREATE} [<file>...])\\n   file(GENERATE OUTPUT <output-file> [...])\\n\\n Filesystem\\n   file({GLOB | GLOB_RECURSE} <out-var> [...] [<globbing-expr>...])\\n   file(RENAME <oldname> <newname>)\\n   file({REMOVE | REMOVE_RECURSE } [<files>...])\\n   file(MAKE_DIRECTORY [<dir>...])\\n   file({COPY | INSTALL} <file>... DESTINATION <dir> [...])\\n\\n Path Conversion\\n   file(RELATIVE_PATH <out-var> <directory> <file>)\\n   file({TO_CMAKE_PATH | TO_NATIVE_PATH} <path> <out-var>)\\n\\n Transfer\\n   file(DOWNLOAD <url> <file> [...])\\n   file(UPLOAD <file> <url> [...])\\n\\n Locking\\n   file(LOCK <path> [...])\\n\\nReading\\n^^^^^^^\\n\\n::\\n\\n file(READ <filename> <variable>\\n      [OFFSET <offset>] [LIMIT <max-in>] [HEX])\\n\\nRead content from a file called ``<filename>`` and store it in a\\n``<variable>``.  Optionally start from the given ``<offset>`` and\\nread at most ``<max-in>`` bytes.  The ``HEX`` option causes data to\\nbe converted to a hexadecimal representation (useful for binary data).\\n\\n::\\n\\n file(STRINGS <filename> <variable> [<options>...])\\n\\nParse a list of ASCII strings from ``<filename>`` and store it in\\n``<variable>``.  Binary data in the file are ignored.  Carriage return\\n(``\\\\r``, CR) characters are ignored.  The options are:\\n\\n``LENGTH_MAXIMUM <max-len>``\\n Consider only strings of at most a given length.\\n\\n``LENGTH_MINIMUM <min-len>``\\n Consider only strings of at least a given length.\\n\\n``LIMIT_COUNT <max-num>``\\n Limit the number of distinct strings to be extracted.\\n\\n``LIMIT_INPUT <max-in>``\\n Limit the number of input bytes to read from the file.\\n\\n``LIMIT_OUTPUT <max-out>``\\n Limit the number of total bytes to store in the ``<variable>``.\\n\\n``NEWLINE_CONSUME``\\n Treat newline characters (``\\\\n``, LF) as part of string content\\n instead of terminating at them.\\n\\n``NO_HEX_CONVERSION``\\n Intel Hex and Motorola S-record files are automatically converted to\\n binary while reading unless this option is given.\\n\\n``REGEX <regex>``\\n Consider only strings that match the given regular expression.\\n\\n``ENCODING <encoding-type>``\\n Consider strings of a given encoding.  Currently supported encodings are:\\n UTF-8, UTF-16LE, UTF-16BE, UTF-32LE, UTF-32BE.  If the ENCODING option\\n is not provided and the file has a Byte Order Mark, the ENCODING option\\n will be defaulted to respect the Byte Order Mark.\\n\\nFor example, the code\\n\\n file(STRINGS myfile.txt myfile)\\n\\nstores a list in the variable ``myfile`` in which each item is a line\\nfrom the input file.\\n\\n::\\n\\n file(<HASH> <filename> <variable>)\\n\\nCompute a cryptographic hash of the content of ``<filename>`` and\\nstore it in a ``<variable>``.  The supported ``<HASH>`` algorithm names\\nare those listed by the :ref:`string(\\\\<HASH\\\\>) <Supported Hash Algorithms>`\\ncommand.\\n\\n::\\n\\n file(TIMESTAMP <filename> <variable> [<format>] [UTC])\\n\\nCompute a string representation of the modification time of ``<filename>``\\nand store it in ``<variable>``.  Should the command be unable to obtain a\\ntimestamp variable will be set to the empty string (\\\"\\\").\\n\\nSee the ``string(TIMESTAMP)`` command for documentation of\\nthe ``<format>`` and ``UTC`` options.\\n\\nWriting\\n^^^^^^^\\n\\n::\\n\\n file(WRITE <filename> <content>...)\\n file(APPEND <filename> <content>...)\\n\\nWrite ``<content>`` into a file called ``<filename>``.  If the file does\\nnot exist, it will be created.  If the file already exists, ``WRITE``\\nmode will overwrite it and ``APPEND`` mode will append to the end.\\nAny directories in the path specified by ``<filename>`` that do not\\nexist will be created.\\n\\nIf the file is a build input, use the ``configure_file()`` command\\nto update the file only when its content changes.\\n\\n::\\n\\n file(TOUCH [<files>...])\\n file(TOUCH_NOCREATE [<files>...])\\n\\nCreate a file with no content if it does not yet exist. If the file already\\nexists, its access and/or modification will be updated to the time when the\\nfunction call is executed.\\n\\nUse TOUCH_NOCREATE to touch a file if it exists but not create it. If a file\\ndoes not exist it will be silently ignored.\\n\\nWith TOUCH and TOUCH_NOCREATE the contents of an existing file will not be\\nmodified.\\n\\n::\\n\\n file(GENERATE OUTPUT output-file\\n      <INPUT input-file|CONTENT content>\\n      [CONDITION expression])\\n\\nGenerate an output file for each build configuration supported by the current\\n``CMake Generator``.  Evaluate\\n``generator expressions``\\nfrom the input content to produce the output content.  The options are:\\n\\n``CONDITION <condition>``\\n  Generate the output file for a particular configuration only if\\n  the condition is true.  The condition must be either ``0`` or ``1``\\n  after evaluating generator expressions.\\n\\n``CONTENT <content>``\\n  Use the content given explicitly as input.\\n\\n``INPUT <input-file>``\\n  Use the content from a given file as input.\\n  A relative path is treated with respect to the value of\\n  ``CMAKE_CURRENT_SOURCE_DIR``.  See policy ``CMP0070``.\\n\\n``OUTPUT <output-file>``\\n  Specify the output file name to generate.  Use generator expressions\\n  such as ``$<CONFIG>`` to specify a configuration-specific output file\\n  name.  Multiple configurations may generate the same output file only\\n  if the generated content is identical.  Otherwise, the ``<output-file>``\\n  must evaluate to an unique name for each configuration.\\n  A relative path (after evaluating generator expressions) is treated\\n  with respect to the value of ``CMAKE_CURRENT_BINARY_DIR``.\\n  See policy ``CMP0070``.\\n\\nExactly one ``CONTENT`` or ``INPUT`` option must be given.  A specific\\n``OUTPUT`` file may be named by at most one invocation of ``file(GENERATE)``.\\nGenerated files are modified and their timestamp updated on subsequent cmake\\nruns only if their content is changed.\\n\\nNote also that ``file(GENERATE)`` does not create the output file until the\\ngeneration phase. The output file will not yet have been written when the\\n``file(GENERATE)`` command returns, it is written only after processing all\\nof a project's ``CMakeLists.txt`` files.\\n\\nFilesystem\\n^^^^^^^^^^\\n\\n::\\n\\n file(GLOB <variable>\\n      [LIST_DIRECTORIES true|false] [RELATIVE <path>] [CONFIGURE_DEPENDS]\\n      [<globbing-expressions>...])\\n file(GLOB_RECURSE <variable> [FOLLOW_SYMLINKS]\\n      [LIST_DIRECTORIES true|false] [RELATIVE <path>] [CONFIGURE_DEPENDS]\\n      [<globbing-expressions>...])\\n\\nGenerate a list of files that match the ``<globbing-expressions>`` and\\nstore it into the ``<variable>``.  Globbing expressions are similar to\\nregular expressions, but much simpler.  If ``RELATIVE`` flag is\\nspecified, the results will be returned as relative paths to the given\\npath.  The results will be ordered lexicographically.\\n\\nIf the ``CONFIGURE_DEPENDS`` flag is specified, CMake will add logic\\nto the main build system check target to rerun the flagged ``GLOB`` commands\\nat build time. If any of the outputs change, CMake will regenerate the build\\nsystem.\\n\\nBy default ``GLOB`` lists directories - directories are omitted in result if\\n``LIST_DIRECTORIES`` is set to false.\\n\\n.. note::\\n  We do not recommend using GLOB to collect a list of source files from\\n  your source tree.  If no CMakeLists.txt file changes when a source is\\n  added or removed then the generated build system cannot know when to\\n  ask CMake to regenerate.\\n  The ``CONFIGURE_DEPENDS`` flag may not work reliably on all generators, or if\\n  a new generator is added in the future that cannot support it, projects using\\n  it will be stuck. Even if ``CONFIGURE_DEPENDS`` works reliably, there is\\n  still a cost to perform the check on every rebuild.\\n\\nExamples of globbing expressions include::\\n\\n *.cxx      - match all files with extension cxx\\n *.vt?      - match all files with extension vta,...,vtz\\n f[3-5].txt - match files f3.txt, f4.txt, f5.txt\\n\\nThe ``GLOB_RECURSE`` mode will traverse all the subdirectories of the\\nmatched directory and match the files.  Subdirectories that are symlinks\\nare only traversed if ``FOLLOW_SYMLINKS`` is given or policy\\n``CMP0009`` is not set to ``NEW``.\\n\\nBy default ``GLOB_RECURSE`` omits directories from result list - setting\\n``LIST_DIRECTORIES`` to true adds directories to result list.\\nIf ``FOLLOW_SYMLINKS`` is given or policy ``CMP0009`` is not set to\\n``OLD`` then ``LIST_DIRECTORIES`` treats symlinks as directories.\\n\\nExamples of recursive globbing include::\\n\\n /dir/*.py  - match all python files in /dir and subdirectories\\n\\n::\\n\\n file(RENAME <oldname> <newname>)\\n\\nMove a file or directory within a filesystem from ``<oldname>`` to\\n``<newname>``, replacing the destination atomically.\\n\\n::\\n\\n file(REMOVE [<files>...])\\n file(REMOVE_RECURSE [<files>...])\\n\\nRemove the given files.  The ``REMOVE_RECURSE`` mode will remove the given\\nfiles and directories, also non-empty directories. No error is emitted if a\\ngiven file does not exist.\\n\\n::\\n\\n file(MAKE_DIRECTORY [<directories>...])\\n\\nCreate the given directories and their parents as needed.\\n\\n::\\n\\n file(<COPY|INSTALL> <files>... DESTINATION <dir>\\n      [FILE_PERMISSIONS <permissions>...]\\n      [DIRECTORY_PERMISSIONS <permissions>...]\\n      [NO_SOURCE_PERMISSIONS] [USE_SOURCE_PERMISSIONS]\\n      [FILES_MATCHING]\\n      [[PATTERN <pattern> | REGEX <regex>]\\n       [EXCLUDE] [PERMISSIONS <permissions>...]] [...])\\n\\nThe ``COPY`` signature copies files, directories, and symlinks to a\\ndestination folder.  Relative input paths are evaluated with respect\\nto the current source directory, and a relative destination is\\nevaluated with respect to the current build directory.  Copying\\npreserves input file timestamps, and optimizes out a file if it exists\\nat the destination with the same timestamp.  Copying preserves input\\npermissions unless explicit permissions or ``NO_SOURCE_PERMISSIONS``\\nare given (default is ``USE_SOURCE_PERMISSIONS``).\\n\\nSee the ``install(DIRECTORY)`` command for documentation of\\npermissions, ``FILES_MATCHING``, ``PATTERN``, ``REGEX``, and\\n``EXCLUDE`` options.  Copying directories preserves the structure\\nof their content even if options are used to select a subset of\\nfiles.\\n\\nThe ``INSTALL`` signature differs slightly from ``COPY``: it prints\\nstatus messages (subject to the ``CMAKE_INSTALL_MESSAGE`` variable),\\nand ``NO_SOURCE_PERMISSIONS`` is default.\\nInstallation scripts generated by the ``install()`` command\\nuse this signature (with some undocumented options for internal use).\\n\\nPath Conversion\\n^^^^^^^^^^^^^^^\\n\\n::\\n\\n file(RELATIVE_PATH <variable> <directory> <file>)\\n\\nCompute the relative path from a ``<directory>`` to a ``<file>`` and\\nstore it in the ``<variable>``.\\n\\n::\\n\\n file(TO_CMAKE_PATH \\\"<path>\\\" <variable>)\\n file(TO_NATIVE_PATH \\\"<path>\\\" <variable>)\\n\\nThe ``TO_CMAKE_PATH`` mode converts a native ``<path>`` into a cmake-style\\npath with forward-slashes (``/``).  The input can be a single path or a\\nsystem search path like ``$ENV{PATH}``.  A search path will be converted\\nto a cmake-style list separated by ``;`` characters.\\n\\nThe ``TO_NATIVE_PATH`` mode converts a cmake-style ``<path>`` into a native\\npath with platform-specific slashes (``\\\\`` on Windows and ``/`` elsewhere).\\n\\nAlways use double quotes around the ``<path>`` to be sure it is treated\\nas a single argument to this command.\\n\\nTransfer\\n^^^^^^^^\\n\\n::\\n\\n file(DOWNLOAD <url> <file> [<options>...])\\n file(UPLOAD   <file> <url> [<options>...])\\n\\nThe ``DOWNLOAD`` mode downloads the given ``<url>`` to a local ``<file>``.\\nThe ``UPLOAD`` mode uploads a local ``<file>`` to a given ``<url>``.\\n\\nOptions to both ``DOWNLOAD`` and ``UPLOAD`` are:\\n\\n``INACTIVITY_TIMEOUT <seconds>``\\n  Terminate the operation after a period of inactivity.\\n\\n``LOG <variable>``\\n  Store a human-readable log of the operation in a variable.\\n\\n``SHOW_PROGRESS``\\n  Print progress information as status messages until the operation is\\n  complete.\\n\\n``STATUS <variable>``\\n  Store the resulting status of the operation in a variable.\\n  The status is a ``;`` separated list of length 2.\\n  The first element is the numeric return value for the operation,\\n  and the second element is a string value for the error.\\n  A ``0`` numeric error means no error in the operation.\\n\\n``TIMEOUT <seconds>``\\n  Terminate the operation after a given total time has elapsed.\\n\\n``USERPWD <username>:<password>``\\n  Set username and password for operation.\\n\\n``HTTPHEADER <HTTP-header>``\\n  HTTP header for operation. Suboption can be repeated several times.\\n\\n``NETRC <level>``\\n  Specify whether the .netrc file is to be used for operation.  If this\\n  option is not specified, the value of the ``CMAKE_NETRC`` variable\\n  will be used instead.\\n  Valid levels are:\\n\\n  ``IGNORED``\\n    The .netrc file is ignored.\\n    This is the default.\\n  ``OPTIONAL``\\n    The .netrc file is optional, and information in the URL is preferred.\\n    The file will be scanned to find which ever information is not specified\\n    in the URL.\\n  ``REQUIRED``\\n    The .netrc file is required, and information in the URL is ignored.\\n\\n``NETRC_FILE <file>``\\n  Specify an alternative .netrc file to the one in your home directory,\\n  if the ``NETRC`` level is ``OPTIONAL`` or ``REQUIRED``. If this option\\n  is not specified, the value of the ``CMAKE_NETRC_FILE`` variable will\\n  be used instead.\\n\\nIf neither ``NETRC`` option is given CMake will check variables\\n``CMAKE_NETRC`` and ``CMAKE_NETRC_FILE``, respectively.\\n\\nAdditional options to ``DOWNLOAD`` are:\\n\\n``EXPECTED_HASH ALGO=<value>``\\n\\n  Verify that the downloaded content hash matches the expected value, where\\n  ``ALGO`` is one of the algorithms supported by ``file(<HASH>)``.\\n  If it does not match, the operation fails with an error.\\n\\n``EXPECTED_MD5 <value>``\\n  Historical short-hand for ``EXPECTED_HASH MD5=<value>``.\\n\\n``TLS_VERIFY <ON|OFF>``\\n  Specify whether to verify the server certificate for ``https://`` URLs.\\n  The default is to *not* verify.\\n\\n``TLS_CAINFO <file>``\\n  Specify a custom Certificate Authority file for ``https://`` URLs.\\n\\nFor ``https://`` URLs CMake must be built with OpenSSL support.  ``TLS/SSL``\\ncertificates are not checked by default.  Set ``TLS_VERIFY`` to ``ON`` to\\ncheck certificates and/or use ``EXPECTED_HASH`` to verify downloaded content.\\nIf neither ``TLS`` option is given CMake will check variables\\n``CMAKE_TLS_VERIFY`` and ``CMAKE_TLS_CAINFO``, respectively.\\n\\nLocking\\n^^^^^^^\\n\\n::\\n\\n file(LOCK <path> [DIRECTORY] [RELEASE]\\n      [GUARD <FUNCTION|FILE|PROCESS>]\\n      [RESULT_VARIABLE <variable>]\\n      [TIMEOUT <seconds>])\\n\\nLock a file specified by ``<path>`` if no ``DIRECTORY`` option present and file\\n``<path>/cmake.lock`` otherwise. File will be locked for scope defined by\\n``GUARD`` option (default value is ``PROCESS``). ``RELEASE`` option can be used\\nto unlock file explicitly. If option ``TIMEOUT`` is not specified CMake will\\nwait until lock succeed or until fatal error occurs. If ``TIMEOUT`` is set to\\n``0`` lock will be tried once and result will be reported immediately. If\\n``TIMEOUT`` is not ``0`` CMake will try to lock file for the period specified\\nby ``<seconds>`` value. Any errors will be interpreted as fatal if there is no\\n``RESULT_VARIABLE`` option. Otherwise result will be stored in ``<variable>``\\nand will be ``0`` on success or error message on failure.\\n\\nNote that lock is advisory - there is no guarantee that other processes will\\nrespect this lock, i.e. lock synchronize two or more CMake instances sharing\\nsome modifiable resources. Similar logic applied to ``DIRECTORY`` option -\\nlocking parent directory doesn't prevent other ``LOCK`` commands to lock any\\nchild directory or file.\\n\\nTrying to lock file twice is not allowed.  Any intermediate directories and\\nfile itself will be created if they not exist.  ``GUARD`` and ``TIMEOUT``\\noptions ignored on ``RELEASE`` operation.\\n",
        "command"
    ],
    "find_file": [
        "find_file\\n---------\\n\\nA short-hand signature is:\\n\\n find_file (<VAR> name1 [path1 path2 ...])\\n\\nThe general signature is:\\n\\n find_file (\\n           <VAR>\\n           name | NAMES name1 [name2 ...]\\n           [HINTS path1 [path2 ... ENV var]]\\n           [PATHS path1 [path2 ... ENV var]]\\n           [PATH_SUFFIXES suffix1 [suffix2 ...]]\\n           [DOC \\\"cache documentation string\\\"]\\n           [NO_DEFAULT_PATH]\\n           [NO_PACKAGE_ROOT_PATH]\\n           [NO_CMAKE_PATH]\\n           [NO_CMAKE_ENVIRONMENT_PATH]\\n           [NO_SYSTEM_ENVIRONMENT_PATH]\\n           [NO_CMAKE_SYSTEM_PATH]\\n           [CMAKE_FIND_ROOT_PATH_BOTH |\\n            ONLY_CMAKE_FIND_ROOT_PATH |\\n            NO_CMAKE_FIND_ROOT_PATH]\\n          )\\n\\nThis command is used to find a full path to named file.\\nA cache entry named by ``<VAR>`` is created to store the result\\nof this command.\\nIf the full path to a file is found the result is stored in the variable\\nand the search will not be repeated unless the variable is cleared.\\nIf nothing is found, the result will be\\n``<VAR>-NOTFOUND``, and the search will be attempted again the\\nnext time find_file is invoked with the same variable.\\n\\nOptions include:\\n\\n``NAMES``\\n  Specify one or more possible names for the full path to a file.\\n\\n  When using this to specify names with and without a version\\n  suffix, we recommend specifying the unversioned name first\\n  so that locally-built packages can be found before those\\n  provided by distributions.\\n\\n``HINTS``, ``PATHS``\\n  Specify directories to search in addition to the default locations.\\n  The ``ENV var`` sub-option reads paths from a system environment\\n  variable.\\n\\n``PATH_SUFFIXES``\\n  Specify additional subdirectories to check below each directory\\n  location otherwise considered.\\n\\n``DOC``\\n  Specify the documentation string for the ``<VAR>`` cache entry.\\n\\nIf ``NO_DEFAULT_PATH`` is specified, then no additional paths are\\nadded to the search.\\nIf ``NO_DEFAULT_PATH`` is not specified, the search process is as follows:\\n\\n1. If called from within a find module loaded by\\n   ``find_package(<PackageName>)``, search prefixes unique to the\\n   current package being found.  Specifically look in the\\n   ``<PackageName>_ROOT`` CMake variable and the\\n   ``<PackageName>_ROOT`` environment variable.\\n   The package root variables are maintained as a stack so if called from\\n   nested find modules, root paths from the parent's find module will be\\n   searched after paths from the current module,\\n   i.e. ``<CurrentPackage>_ROOT``, ``ENV{<CurrentPackage>_ROOT}``,\\n   ``<ParentPackage>_ROOT``, ``ENV{<ParentPackage>_ROOT}``, etc.\\n   This can be skipped if ``NO_PACKAGE_ROOT_PATH`` is passed.\\n   See policy ``CMP0074``.\\n\\n   * ``<prefix>/include/<arch>`` if ``CMAKE_LIBRARY_ARCHITECTURE`` is set, and ``<prefix>/include`` for each ``<prefix>`` in the ``<PackageName>_ROOT`` CMake variable and the ``<PackageName>_ROOT`` environment variable if called from within a find module loaded by ``find_package(<PackageName>)``\\n\\n2. Search paths specified in cmake-specific cache variables.\\n   These are intended to be used on the command line with a ``-DVAR=value``.\\n   The values are interpreted as :ref:`;-lists <CMake Language Lists>`.\\n   This can be skipped if ``NO_CMAKE_PATH`` is passed.\\n\\n   * ``<prefix>/include/<arch>`` if ``CMAKE_LIBRARY_ARCHITECTURE`` is set, and ``<prefix>/include`` for each ``<prefix>`` in ``CMAKE_PREFIX_PATH``\\n   * ``CMAKE_INCLUDE_PATH``\\n   * ``CMAKE_FRAMEWORK_PATH``\\n\\n3. Search paths specified in cmake-specific environment variables.\\n   These are intended to be set in the user's shell configuration,\\n   and therefore use the host's native path separator\\n   (``;`` on Windows and ``:`` on UNIX).\\n   This can be skipped if ``NO_CMAKE_ENVIRONMENT_PATH`` is passed.\\n\\n   * ``<prefix>/include/<arch>`` if ``CMAKE_LIBRARY_ARCHITECTURE`` is set, and ``<prefix>/include`` for each ``<prefix>`` in ``CMAKE_PREFIX_PATH``\\n   * ``CMAKE_INCLUDE_PATH``\\n   * ``CMAKE_FRAMEWORK_PATH``\\n\\n4. Search the paths specified by the ``HINTS`` option.\\n   These should be paths computed by system introspection, such as a\\n   hint provided by the location of another item already found.\\n   Hard-coded guesses should be specified with the ``PATHS`` option.\\n\\n5. Search the standard system environment variables.\\n   This can be skipped if ``NO_SYSTEM_ENVIRONMENT_PATH`` is an argument.\\n\\n   * Directories in ``INCLUDE``. On Windows hosts: ``<prefix>/include/<arch>`` if ``CMAKE_LIBRARY_ARCHITECTURE`` is set, and ``<prefix>/include`` for each ``<prefix>/[s]bin`` in ``PATH``, and ``<entry>/include`` for other entries in ``PATH``, and the directories in ``PATH`` itself.\\n\\n6. Search cmake variables defined in the Platform files\\n   for the current system.  This can be skipped if ``NO_CMAKE_SYSTEM_PATH``\\n   is passed.\\n\\n   * ``<prefix>/include/<arch>`` if ``CMAKE_LIBRARY_ARCHITECTURE`` is set, and ``<prefix>/include`` for each ``<prefix>`` in ``CMAKE_SYSTEM_PREFIX_PATH``\\n   * ``CMAKE_SYSTEM_INCLUDE_PATH``\\n   * ``CMAKE_SYSTEM_FRAMEWORK_PATH``\\n\\n7. Search the paths specified by the PATHS option\\n   or in the short-hand version of the command.\\n   These are typically hard-coded guesses.\\n\\nOn macOS the ``CMAKE_FIND_FRAMEWORK`` and\\n``CMAKE_FIND_APPBUNDLE`` variables determine the order of\\npreference between Apple-style and unix-style package components.\\n\\nThe CMake variable ``CMAKE_FIND_ROOT_PATH`` specifies one or more\\ndirectories to be prepended to all other search directories.  This\\neffectively \\\"re-roots\\\" the entire search under given locations.\\nPaths which are descendants of the ``CMAKE_STAGING_PREFIX`` are excluded\\nfrom this re-rooting, because that variable is always a path on the host system.\\nBy default the ``CMAKE_FIND_ROOT_PATH`` is empty.\\n\\nThe ``CMAKE_SYSROOT`` variable can also be used to specify exactly one\\ndirectory to use as a prefix.  Setting ``CMAKE_SYSROOT`` also has other\\neffects.  See the documentation for that variable for more.\\n\\nThese variables are especially useful when cross-compiling to\\npoint to the root directory of the target environment and CMake will\\nsearch there too.  By default at first the directories listed in\\n``CMAKE_FIND_ROOT_PATH`` are searched, then the ``CMAKE_SYSROOT``\\ndirectory is searched, and then the non-rooted directories will be\\nsearched.  The default behavior can be adjusted by setting\\n``CMAKE_FIND_ROOT_PATH_MODE_INCLUDE``.  This behavior can be manually\\noverridden on a per-call basis using options:\\n\\n``CMAKE_FIND_ROOT_PATH_BOTH``\\n  Search in the order described above.\\n\\n``NO_CMAKE_FIND_ROOT_PATH``\\n  Do not use the ``CMAKE_FIND_ROOT_PATH`` variable.\\n\\n``ONLY_CMAKE_FIND_ROOT_PATH``\\n  Search only the re-rooted directories and directories below\\n  ``CMAKE_STAGING_PREFIX``.\\n\\nThe default search order is designed to be most-specific to\\nleast-specific for common use cases.\\nProjects may override the order by simply calling the command\\nmultiple times and using the ``NO_*`` options:\\n\\n find_file (<VAR> NAMES name PATHS paths... NO_DEFAULT_PATH)\\n find_file (<VAR> NAMES name)\\n\\nOnce one of the calls succeeds the result variable will be set\\nand stored in the cache so that no call will search again.\\n",
        "command"
    ],
    "find_library": [
        "find_library\\n------------\\n\\nA short-hand signature is:\\n\\n find_library (<VAR> name1 [path1 path2 ...])\\n\\nThe general signature is:\\n\\n find_library (\\n           <VAR>\\n           name | NAMES name1 [name2 ...] [NAMES_PER_DIR]\\n           [HINTS path1 [path2 ... ENV var]]\\n           [PATHS path1 [path2 ... ENV var]]\\n           [PATH_SUFFIXES suffix1 [suffix2 ...]]\\n           [DOC \\\"cache documentation string\\\"]\\n           [NO_DEFAULT_PATH]\\n           [NO_PACKAGE_ROOT_PATH]\\n           [NO_CMAKE_PATH]\\n           [NO_CMAKE_ENVIRONMENT_PATH]\\n           [NO_SYSTEM_ENVIRONMENT_PATH]\\n           [NO_CMAKE_SYSTEM_PATH]\\n           [CMAKE_FIND_ROOT_PATH_BOTH |\\n            ONLY_CMAKE_FIND_ROOT_PATH |\\n            NO_CMAKE_FIND_ROOT_PATH]\\n          )\\n\\nThis command is used to find a library.\\nA cache entry named by ``<VAR>`` is created to store the result\\nof this command.\\nIf the library is found the result is stored in the variable\\nand the search will not be repeated unless the variable is cleared.\\nIf nothing is found, the result will be\\n``<VAR>-NOTFOUND``, and the search will be attempted again the\\nnext time find_library is invoked with the same variable.\\n\\nOptions include:\\n\\n``NAMES``\\n  Specify one or more possible names for the library.\\n\\n  When using this to specify names with and without a version\\n  suffix, we recommend specifying the unversioned name first\\n  so that locally-built packages can be found before those\\n  provided by distributions.\\n\\n``HINTS``, ``PATHS``\\n  Specify directories to search in addition to the default locations.\\n  The ``ENV var`` sub-option reads paths from a system environment\\n  variable.\\n\\n``PATH_SUFFIXES``\\n  Specify additional subdirectories to check below each directory\\n  location otherwise considered.\\n\\n``DOC``\\n  Specify the documentation string for the ``<VAR>`` cache entry.\\n\\nIf ``NO_DEFAULT_PATH`` is specified, then no additional paths are\\nadded to the search.\\nIf ``NO_DEFAULT_PATH`` is not specified, the search process is as follows:\\n\\n1. If called from within a find module loaded by\\n   ``find_package(<PackageName>)``, search prefixes unique to the\\n   current package being found.  Specifically look in the\\n   ``<PackageName>_ROOT`` CMake variable and the\\n   ``<PackageName>_ROOT`` environment variable.\\n   The package root variables are maintained as a stack so if called from\\n   nested find modules, root paths from the parent's find module will be\\n   searched after paths from the current module,\\n   i.e. ``<CurrentPackage>_ROOT``, ``ENV{<CurrentPackage>_ROOT}``,\\n   ``<ParentPackage>_ROOT``, ``ENV{<ParentPackage>_ROOT}``, etc.\\n   This can be skipped if ``NO_PACKAGE_ROOT_PATH`` is passed.\\n   See policy ``CMP0074``.\\n\\n   * ``<prefix>/lib/<arch>`` if ``CMAKE_LIBRARY_ARCHITECTURE`` is set, and ``<prefix>/lib`` for each ``<prefix>`` in the ``<PackageName>_ROOT`` CMake variable and the ``<PackageName>_ROOT`` environment variable if called from within a find module loaded by ``find_package(<PackageName>)``\\n\\n2. Search paths specified in cmake-specific cache variables.\\n   These are intended to be used on the command line with a ``-DVAR=value``.\\n   The values are interpreted as :ref:`;-lists <CMake Language Lists>`.\\n   This can be skipped if ``NO_CMAKE_PATH`` is passed.\\n\\n   * ``<prefix>/lib/<arch>`` if ``CMAKE_LIBRARY_ARCHITECTURE`` is set, and ``<prefix>/lib`` for each ``<prefix>`` in ``CMAKE_PREFIX_PATH``\\n   * ``CMAKE_LIBRARY_PATH``\\n   * ``CMAKE_FRAMEWORK_PATH``\\n\\n3. Search paths specified in cmake-specific environment variables.\\n   These are intended to be set in the user's shell configuration,\\n   and therefore use the host's native path separator\\n   (``;`` on Windows and ``:`` on UNIX).\\n   This can be skipped if ``NO_CMAKE_ENVIRONMENT_PATH`` is passed.\\n\\n   * ``<prefix>/lib/<arch>`` if ``CMAKE_LIBRARY_ARCHITECTURE`` is set, and ``<prefix>/lib`` for each ``<prefix>`` in ``CMAKE_PREFIX_PATH``\\n   * ``CMAKE_LIBRARY_PATH``\\n   * ``CMAKE_FRAMEWORK_PATH``\\n\\n4. Search the paths specified by the ``HINTS`` option.\\n   These should be paths computed by system introspection, such as a\\n   hint provided by the location of another item already found.\\n   Hard-coded guesses should be specified with the ``PATHS`` option.\\n\\n5. Search the standard system environment variables.\\n   This can be skipped if ``NO_SYSTEM_ENVIRONMENT_PATH`` is an argument.\\n\\n   * Directories in ``LIB``. On Windows hosts: ``<prefix>/lib/<arch>`` if ``CMAKE_LIBRARY_ARCHITECTURE`` is set, and ``<prefix>/lib`` for each ``<prefix>/[s]bin`` in ``PATH``, and ``<entry>/lib`` for other entries in ``PATH``, and the directories in ``PATH`` itself.\\n\\n6. Search cmake variables defined in the Platform files\\n   for the current system.  This can be skipped if ``NO_CMAKE_SYSTEM_PATH``\\n   is passed.\\n\\n   * ``<prefix>/lib/<arch>`` if ``CMAKE_LIBRARY_ARCHITECTURE`` is set, and ``<prefix>/lib`` for each ``<prefix>`` in ``CMAKE_SYSTEM_PREFIX_PATH``\\n   * ``CMAKE_SYSTEM_LIBRARY_PATH``\\n   * ``CMAKE_SYSTEM_FRAMEWORK_PATH``\\n\\n7. Search the paths specified by the PATHS option\\n   or in the short-hand version of the command.\\n   These are typically hard-coded guesses.\\n\\nOn macOS the ``CMAKE_FIND_FRAMEWORK`` and\\n``CMAKE_FIND_APPBUNDLE`` variables determine the order of\\npreference between Apple-style and unix-style package components.\\n\\nThe CMake variable ``CMAKE_FIND_ROOT_PATH`` specifies one or more\\ndirectories to be prepended to all other search directories.  This\\neffectively \\\"re-roots\\\" the entire search under given locations.\\nPaths which are descendants of the ``CMAKE_STAGING_PREFIX`` are excluded\\nfrom this re-rooting, because that variable is always a path on the host system.\\nBy default the ``CMAKE_FIND_ROOT_PATH`` is empty.\\n\\nThe ``CMAKE_SYSROOT`` variable can also be used to specify exactly one\\ndirectory to use as a prefix.  Setting ``CMAKE_SYSROOT`` also has other\\neffects.  See the documentation for that variable for more.\\n\\nThese variables are especially useful when cross-compiling to\\npoint to the root directory of the target environment and CMake will\\nsearch there too.  By default at first the directories listed in\\n``CMAKE_FIND_ROOT_PATH`` are searched, then the ``CMAKE_SYSROOT``\\ndirectory is searched, and then the non-rooted directories will be\\nsearched.  The default behavior can be adjusted by setting\\n``CMAKE_FIND_ROOT_PATH_MODE_LIBRARY``.  This behavior can be manually\\noverridden on a per-call basis using options:\\n\\n``CMAKE_FIND_ROOT_PATH_BOTH``\\n  Search in the order described above.\\n\\n``NO_CMAKE_FIND_ROOT_PATH``\\n  Do not use the ``CMAKE_FIND_ROOT_PATH`` variable.\\n\\n``ONLY_CMAKE_FIND_ROOT_PATH``\\n  Search only the re-rooted directories and directories below\\n  ``CMAKE_STAGING_PREFIX``.\\n\\nThe default search order is designed to be most-specific to\\nleast-specific for common use cases.\\nProjects may override the order by simply calling the command\\nmultiple times and using the ``NO_*`` options:\\n\\n find_library (<VAR> NAMES name PATHS paths... NO_DEFAULT_PATH)\\n find_library (<VAR> NAMES name)\\n\\nOnce one of the calls succeeds the result variable will be set\\nand stored in the cache so that no call will search again.\\n\\nWhen more than one value is given to the ``NAMES`` option this command by\\ndefault will consider one name at a time and search every directory\\nfor it.  The ``NAMES_PER_DIR`` option tells this command to consider one\\ndirectory at a time and search for all names in it.\\n\\nEach library name given to the ``NAMES`` option is first considered\\nas a library file name and then considered with platform-specific\\nprefixes (e.g. ``lib``) and suffixes (e.g. ``.so``).  Therefore one\\nmay specify library file names such as ``libfoo.a`` directly.\\nThis can be used to locate static libraries on UNIX-like systems.\\n\\nIf the library found is a framework, then ``<VAR>`` will be set to the full\\npath to the framework ``<fullPath>/A.framework``.  When a full path to a\\nframework is used as a library, CMake will use a ``-framework A``, and a\\n``-F<fullPath>`` to link the framework to the target.\\n\\nIf the ``CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX`` variable is set all\\nsearch paths will be tested as normal, with the suffix appended, and with\\nall matches of ``lib/`` replaced with\\n``lib${CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX}/``.  This variable overrides\\nthe ``FIND_LIBRARY_USE_LIB32_PATHS``,\\n``FIND_LIBRARY_USE_LIBX32_PATHS``,\\nand ``FIND_LIBRARY_USE_LIB64_PATHS`` global properties.\\n\\nIf the ``FIND_LIBRARY_USE_LIB32_PATHS`` global property is set\\nall search paths will be tested as normal, with ``32/`` appended, and\\nwith all matches of ``lib/`` replaced with ``lib32/``.  This property is\\nautomatically set for the platforms that are known to need it if at\\nleast one of the languages supported by the ``project()`` command\\nis enabled.\\n\\nIf the ``FIND_LIBRARY_USE_LIBX32_PATHS`` global property is set\\nall search paths will be tested as normal, with ``x32/`` appended, and\\nwith all matches of ``lib/`` replaced with ``libx32/``.  This property is\\nautomatically set for the platforms that are known to need it if at\\nleast one of the languages supported by the ``project()`` command\\nis enabled.\\n\\nIf the ``FIND_LIBRARY_USE_LIB64_PATHS`` global property is set\\nall search paths will be tested as normal, with ``64/`` appended, and\\nwith all matches of ``lib/`` replaced with ``lib64/``.  This property is\\nautomatically set for the platforms that are known to need it if at\\nleast one of the languages supported by the ``project()`` command\\nis enabled.\\n",
        "command"
    ],
    "find_package": [
        "find_package\\n------------\\n\\nFind an external project, and load its settings.\\n\\nBasic Signature and Module Mode\\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\\n::\\n\\n find_package(<PackageName> [version] [EXACT] [QUIET] [MODULE]\\n              [REQUIRED] [[COMPONENTS] [components...]]\\n              [OPTIONAL_COMPONENTS components...]\\n              [NO_POLICY_SCOPE])\\n\\nFinds and loads settings from an external project.  ``<PackageName>_FOUND``\\nwill be set to indicate whether the package was found.  When the\\npackage is found package-specific information is provided through\\nvariables and :ref:`Imported Targets` documented by the package itself.  The\\n``QUIET`` option disables messages if the package cannot be found.  The\\n``REQUIRED`` option stops processing with an error message if the package\\ncannot be found.\\n\\nA package-specific list of required components may be listed after the\\n``COMPONENTS`` option (or after the ``REQUIRED`` option if present).\\nAdditional optional components may be listed after\\n``OPTIONAL_COMPONENTS``.  Available components and their influence on\\nwhether a package is considered to be found are defined by the target\\npackage.\\n\\nThe ``[version]`` argument requests a version with which the package found\\nshould be compatible (format is ``major[.minor[.patch[.tweak]]]``).  The\\n``EXACT`` option requests that the version be matched exactly.  If no\\n``[version]`` and/or component list is given to a recursive invocation\\ninside a find-module, the corresponding arguments are forwarded\\nautomatically from the outer call (including the ``EXACT`` flag for\\n``[version]``).  Version support is currently provided only on a\\npackage-by-package basis (see the Version Selection section below).\\n\\nSee the ``cmake_policy()`` command documentation for discussion\\nof the ``NO_POLICY_SCOPE`` option.\\n\\nThe command has two modes by which it searches for packages: \\\"Module\\\"\\nmode and \\\"Config\\\" mode.  The above signature selects Module mode.\\nIf no module is found the command falls back to Config mode, described\\nbelow. This fall back is disabled if the ``MODULE`` option is given.\\n\\nIn Module mode, CMake searches for a file called ``Find<PackageName>.cmake``\\nin the ``CMAKE_MODULE_PATH`` followed by the CMake installation.\\nIf the file is found, it is read and processed by CMake.  It is responsible\\nfor finding the package, checking the version, and producing any needed\\nmessages.  Some find-modules provide limited or no support for versioning;\\ncheck the module documentation.\\n\\nFull Signature and Config Mode\\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\\nUser code should generally look for packages using the above `basic\\nsignature`_.  The remainder of this command documentation specifies the\\nfull command signature and details of the search process.  Project\\nmaintainers wishing to provide a package to be found by this command\\nare encouraged to read on.\\n\\nThe complete Config mode command signature is::\\n\\n find_package(<PackageName> [version] [EXACT] [QUIET]\\n              [REQUIRED] [[COMPONENTS] [components...]]\\n              [CONFIG|NO_MODULE]\\n              [NO_POLICY_SCOPE]\\n              [NAMES name1 [name2 ...]]\\n              [CONFIGS config1 [config2 ...]]\\n              [HINTS path1 [path2 ... ]]\\n              [PATHS path1 [path2 ... ]]\\n              [PATH_SUFFIXES suffix1 [suffix2 ...]]\\n              [NO_DEFAULT_PATH]\\n              [NO_PACKAGE_ROOT_PATH]\\n              [NO_CMAKE_PATH]\\n              [NO_CMAKE_ENVIRONMENT_PATH]\\n              [NO_SYSTEM_ENVIRONMENT_PATH]\\n              [NO_CMAKE_PACKAGE_REGISTRY]\\n              [NO_CMAKE_BUILDS_PATH] # Deprecated; does nothing.\\n              [NO_CMAKE_SYSTEM_PATH]\\n              [NO_CMAKE_SYSTEM_PACKAGE_REGISTRY]\\n              [CMAKE_FIND_ROOT_PATH_BOTH |\\n               ONLY_CMAKE_FIND_ROOT_PATH |\\n               NO_CMAKE_FIND_ROOT_PATH])\\n\\nThe ``CONFIG`` option, the synonymous ``NO_MODULE`` option, or the use\\nof options not specified in the basic signature all enforce pure Config\\nmode.  In pure Config mode, the command skips Module mode search and\\nproceeds at once with Config mode search.\\n\\nConfig mode search attempts to locate a configuration file provided by the\\npackage to be found.  A cache entry called ``<PackageName>_DIR`` is created to\\nhold the directory containing the file.  By default the command\\nsearches for a package with the name ``<PackageName>``.  If the ``NAMES`` option\\nis given the names following it are used instead of ``<PackageName>``.\\nThe command searches for a file called ``<PackageName>Config.cmake`` or\\n``<lower-case-package-name>-config.cmake`` for each name specified.\\nA replacement set of possible configuration file names may be given\\nusing the ``CONFIGS`` option.  The search procedure is specified below.\\nOnce found, the configuration file is read and processed by CMake.\\nSince the file is provided by the package it already knows the\\nlocation of package contents.  The full path to the configuration file\\nis stored in the cmake variable ``<PackageName>_CONFIG``.\\n\\nAll configuration files which have been considered by CMake while\\nsearching for an installation of the package with an appropriate\\nversion are stored in the cmake variable ``<PackageName>_CONSIDERED_CONFIGS``,\\nthe associated versions in ``<PackageName>_CONSIDERED_VERSIONS``.\\n\\nIf the package configuration file cannot be found CMake will generate\\nan error describing the problem unless the ``QUIET`` argument is\\nspecified.  If ``REQUIRED`` is specified and the package is not found a\\nfatal error is generated and the configure step stops executing.  If\\n``<PackageName>_DIR`` has been set to a directory not containing a\\nconfiguration file CMake will ignore it and search from scratch.\\n\\nPackage maintainers providing CMake package configuration files are\\nencouraged to name and install them such that the Search Procedure\\noutlined below will find them without requiring use of additional options.\\n\\nVersion Selection\\n^^^^^^^^^^^^^^^^^\\n\\nWhen the ``[version]`` argument is given Config mode will only find a\\nversion of the package that claims compatibility with the requested\\nversion (format is ``major[.minor[.patch[.tweak]]]``).  If the ``EXACT``\\noption is given only a version of the package claiming an exact match\\nof the requested version may be found.  CMake does not establish any\\nconvention for the meaning of version numbers.  Package version\\nnumbers are checked by \\\"version\\\" files provided by the packages\\nthemselves.  For a candidate package configuration file\\n``<config-file>.cmake`` the corresponding version file is located next\\nto it and named either ``<config-file>-version.cmake`` or\\n``<config-file>Version.cmake``.  If no such version file is available\\nthen the configuration file is assumed to not be compatible with any\\nrequested version.  A basic version file containing generic version\\nmatching code can be created using the\\n``CMakePackageConfigHelpers`` module.  When a version file\\nis found it is loaded to check the requested version number.  The\\nversion file is loaded in a nested scope in which the following\\nvariables have been defined:\\n\\n``PACKAGE_FIND_NAME``\\n  the ``<PackageName>``\\n``PACKAGE_FIND_VERSION``\\n  full requested version string\\n``PACKAGE_FIND_VERSION_MAJOR``\\n  major version if requested, else 0\\n``PACKAGE_FIND_VERSION_MINOR``\\n  minor version if requested, else 0\\n``PACKAGE_FIND_VERSION_PATCH``\\n  patch version if requested, else 0\\n``PACKAGE_FIND_VERSION_TWEAK``\\n  tweak version if requested, else 0\\n``PACKAGE_FIND_VERSION_COUNT``\\n  number of version components, 0 to 4\\n\\nThe version file checks whether it satisfies the requested version and\\nsets these variables:\\n\\n``PACKAGE_VERSION``\\n  full provided version string\\n``PACKAGE_VERSION_EXACT``\\n  true if version is exact match\\n``PACKAGE_VERSION_COMPATIBLE``\\n  true if version is compatible\\n``PACKAGE_VERSION_UNSUITABLE``\\n  true if unsuitable as any version\\n\\nThese variables are checked by the ``find_package`` command to determine\\nwhether the configuration file provides an acceptable version.  They\\nare not available after the find_package call returns.  If the version\\nis acceptable the following variables are set:\\n\\n``<PackageName>_VERSION``\\n  full provided version string\\n``<PackageName>_VERSION_MAJOR``\\n  major version if provided, else 0\\n``<PackageName>_VERSION_MINOR``\\n  minor version if provided, else 0\\n``<PackageName>_VERSION_PATCH``\\n  patch version if provided, else 0\\n``<PackageName>_VERSION_TWEAK``\\n  tweak version if provided, else 0\\n``<PackageName>_VERSION_COUNT``\\n  number of version components, 0 to 4\\n\\nand the corresponding package configuration file is loaded.\\nWhen multiple package configuration files are available whose version files\\nclaim compatibility with the version requested it is unspecified which\\none is chosen: unless the variable ``CMAKE_FIND_PACKAGE_SORT_ORDER``\\nis set no attempt is made to choose a highest or closest version number.\\n\\nTo control the order in which ``find_package`` checks for compatibility use\\nthe two variables ``CMAKE_FIND_PACKAGE_SORT_ORDER`` and\\n``CMAKE_FIND_PACKAGE_SORT_DIRECTION``.\\nFor instance in order to select the highest version one can set::\\n\\n SET(CMAKE_FIND_PACKAGE_SORT_ORDER NATURAL)\\n SET(CMAKE_FIND_PACKAGE_SORT_DIRECTION DEC)\\n\\nbefore calling ``find_package``.\\n\\nSearch Procedure\\n^^^^^^^^^^^^^^^^\\n\\nCMake constructs a set of possible installation prefixes for the\\npackage.  Under each prefix several directories are searched for a\\nconfiguration file.  The tables below show the directories searched.\\nEach entry is meant for installation trees following Windows (W), UNIX\\n(U), or Apple (A) conventions::\\n\\n <prefix>/                                                       (W)\\n <prefix>/(cmake|CMake)/                                         (W)\\n <prefix>/<name>*/                                               (W)\\n <prefix>/<name>*/(cmake|CMake)/                                 (W)\\n <prefix>/(lib/<arch>|lib*|share)/cmake/<name>*/                 (U)\\n <prefix>/(lib/<arch>|lib*|share)/<name>*/                       (U)\\n <prefix>/(lib/<arch>|lib*|share)/<name>*/(cmake|CMake)/         (U)\\n <prefix>/<name>*/(lib/<arch>|lib*|share)/cmake/<name>*/         (W/U)\\n <prefix>/<name>*/(lib/<arch>|lib*|share)/<name>*/               (W/U)\\n <prefix>/<name>*/(lib/<arch>|lib*|share)/<name>*/(cmake|CMake)/ (W/U)\\n\\nOn systems supporting macOS Frameworks and Application Bundles the\\nfollowing directories are searched for frameworks or bundles\\ncontaining a configuration file::\\n\\n <prefix>/<name>.framework/Resources/                    (A)\\n <prefix>/<name>.framework/Resources/CMake/              (A)\\n <prefix>/<name>.framework/Versions/*/Resources/         (A)\\n <prefix>/<name>.framework/Versions/*/Resources/CMake/   (A)\\n <prefix>/<name>.app/Contents/Resources/                 (A)\\n <prefix>/<name>.app/Contents/Resources/CMake/           (A)\\n\\nIn all cases the ``<name>`` is treated as case-insensitive and corresponds\\nto any of the names specified (``<PackageName>`` or names given by ``NAMES``).\\n\\nPaths with ``lib/<arch>`` are enabled if the\\n``CMAKE_LIBRARY_ARCHITECTURE`` variable is set. ``lib*`` includes one\\nor more of the values ``lib64``, ``lib32``, ``libx32`` or ``lib`` (searched in\\nthat order).\\n\\n* Paths with ``lib64`` are searched on 64 bit platforms if the\\n  ``FIND_LIBRARY_USE_LIB64_PATHS`` property is set to ``TRUE``.\\n* Paths with ``lib32`` are searched on 32 bit platforms if the\\n  ``FIND_LIBRARY_USE_LIB32_PATHS`` property is set to ``TRUE``.\\n* Paths with ``libx32`` are searched on platforms using the x32 ABI\\n  if the ``FIND_LIBRARY_USE_LIBX32_PATHS`` property is set to ``TRUE``.\\n* The ``lib`` path is always searched.\\n\\nIf ``PATH_SUFFIXES`` is specified, the suffixes are appended to each\\n(W) or (U) directory entry one-by-one.\\n\\nThis set of directories is intended to work in cooperation with\\nprojects that provide configuration files in their installation trees.\\nDirectories above marked with (W) are intended for installations on\\nWindows where the prefix may point at the top of an application's\\ninstallation directory.  Those marked with (U) are intended for\\ninstallations on UNIX platforms where the prefix is shared by multiple\\npackages.  This is merely a convention, so all (W) and (U) directories\\nare still searched on all platforms.  Directories marked with (A) are\\nintended for installations on Apple platforms.  The\\n``CMAKE_FIND_FRAMEWORK`` and ``CMAKE_FIND_APPBUNDLE``\\nvariables determine the order of preference.\\n\\nThe set of installation prefixes is constructed using the following\\nsteps.  If ``NO_DEFAULT_PATH`` is specified all ``NO_*`` options are\\nenabled.\\n\\n1. Search paths specified in the ``<PackageName>_ROOT`` CMake\\n   variable and the ``<PackageName>_ROOT`` environment variable,\\n   where ``<PackageName>`` is the package to be found.\\n   The package root variables are maintained as a stack so if\\n   called from within a find module, root paths from the parent's find\\n   module will also be searched after paths for the current package.\\n   This can be skipped if ``NO_PACKAGE_ROOT_PATH`` is passed.\\n   See policy ``CMP0074``.\\n\\n2. Search paths specified in cmake-specific cache variables.  These\\n   are intended to be used on the command line with a ``-DVAR=value``.\\n   The values are interpreted as :ref:`;-lists <CMake Language Lists>`.\\n   This can be skipped if ``NO_CMAKE_PATH`` is passed::\\n\\n CMAKE_PREFIX_PATH\\n CMAKE_FRAMEWORK_PATH\\n CMAKE_APPBUNDLE_PATH\\n\\n3. Search paths specified in cmake-specific environment variables.\\n   These are intended to be set in the user's shell configuration,\\n   and therefore use the host's native path separator\\n   (``;`` on Windows and ``:`` on UNIX).\\n   This can be skipped if ``NO_CMAKE_ENVIRONMENT_PATH`` is passed::\\n\\n <PackageName>_DIR\\n CMAKE_PREFIX_PATH\\n CMAKE_FRAMEWORK_PATH\\n CMAKE_APPBUNDLE_PATH\\n\\n4. Search paths specified by the ``HINTS`` option.  These should be paths\\n   computed by system introspection, such as a hint provided by the\\n   location of another item already found.  Hard-coded guesses should\\n   be specified with the ``PATHS`` option.\\n\\n5. Search the standard system environment variables.  This can be\\n   skipped if ``NO_SYSTEM_ENVIRONMENT_PATH`` is passed.  Path entries\\n   ending in ``/bin`` or ``/sbin`` are automatically converted to their\\n   parent directories::\\n\\n PATH\\n\\n6. Search paths stored in the CMake :ref:`User Package Registry`.\\n   This can be skipped if ``NO_CMAKE_PACKAGE_REGISTRY`` is passed or by\\n   setting the ``CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY``\\n   to ``TRUE``.\\n   See the ``cmake-packages(7)`` manual for details on the user\\n   package registry.\\n\\n7. Search cmake variables defined in the Platform files for the\\n   current system.  This can be skipped if ``NO_CMAKE_SYSTEM_PATH`` is\\n   passed::\\n\\n CMAKE_SYSTEM_PREFIX_PATH\\n CMAKE_SYSTEM_FRAMEWORK_PATH\\n CMAKE_SYSTEM_APPBUNDLE_PATH\\n\\n8. Search paths stored in the CMake :ref:`System Package Registry`.\\n   This can be skipped if ``NO_CMAKE_SYSTEM_PACKAGE_REGISTRY`` is passed\\n   or by setting the\\n   ``CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY`` to ``TRUE``.\\n   See the ``cmake-packages(7)`` manual for details on the system\\n   package registry.\\n\\n9. Search paths specified by the ``PATHS`` option.  These are typically\\n   hard-coded guesses.\\n\\nThe CMake variable ``CMAKE_FIND_ROOT_PATH`` specifies one or more\\ndirectories to be prepended to all other search directories.  This\\neffectively \\\"re-roots\\\" the entire search under given locations.\\nPaths which are descendants of the ``CMAKE_STAGING_PREFIX`` are excluded\\nfrom this re-rooting, because that variable is always a path on the host system.\\nBy default the ``CMAKE_FIND_ROOT_PATH`` is empty.\\n\\nThe ``CMAKE_SYSROOT`` variable can also be used to specify exactly one\\ndirectory to use as a prefix.  Setting ``CMAKE_SYSROOT`` also has other\\neffects.  See the documentation for that variable for more.\\n\\nThese variables are especially useful when cross-compiling to\\npoint to the root directory of the target environment and CMake will\\nsearch there too.  By default at first the directories listed in\\n``CMAKE_FIND_ROOT_PATH`` are searched, then the ``CMAKE_SYSROOT``\\ndirectory is searched, and then the non-rooted directories will be\\nsearched.  The default behavior can be adjusted by setting\\n``CMAKE_FIND_ROOT_PATH_MODE_PACKAGE``.  This behavior can be manually\\noverridden on a per-call basis using options:\\n\\n``CMAKE_FIND_ROOT_PATH_BOTH``\\n  Search in the order described above.\\n\\n``NO_CMAKE_FIND_ROOT_PATH``\\n  Do not use the ``CMAKE_FIND_ROOT_PATH`` variable.\\n\\n``ONLY_CMAKE_FIND_ROOT_PATH``\\n  Search only the re-rooted directories and directories below\\n  ``CMAKE_STAGING_PREFIX``.\\n\\nThe default search order is designed to be most-specific to\\nleast-specific for common use cases.\\nProjects may override the order by simply calling the command\\nmultiple times and using the ``NO_*`` options:\\n\\n find_package (<PackageName> PATHS paths... NO_DEFAULT_PATH)\\n find_package (<PackageName>)\\n\\nOnce one of the calls succeeds the result variable will be set\\nand stored in the cache so that no call will search again.\\n\\nEvery non-REQUIRED ``find_package`` call can be disabled by setting the\\n``CMAKE_DISABLE_FIND_PACKAGE_<PackageName>`` variable to ``TRUE``.\\n\\nPackage File Interface Variables\\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\\nWhen loading a find module or package configuration file ``find_package``\\ndefines variables to provide information about the call arguments (and\\nrestores their original state before returning):\\n\\n``CMAKE_FIND_PACKAGE_NAME``\\n  the ``<PackageName>`` which is searched for\\n``<PackageName>_FIND_REQUIRED``\\n  true if ``REQUIRED`` option was given\\n``<PackageName>_FIND_QUIETLY``\\n  true if ``QUIET`` option was given\\n``<PackageName>_FIND_VERSION``\\n  full requested version string\\n``<PackageName>_FIND_VERSION_MAJOR``\\n  major version if requested, else 0\\n``<PackageName>_FIND_VERSION_MINOR``\\n  minor version if requested, else 0\\n``<PackageName>_FIND_VERSION_PATCH``\\n  patch version if requested, else 0\\n``<PackageName>_FIND_VERSION_TWEAK``\\n  tweak version if requested, else 0\\n``<PackageName>_FIND_VERSION_COUNT``\\n  number of version components, 0 to 4\\n``<PackageName>_FIND_VERSION_EXACT``\\n  true if ``EXACT`` option was given\\n``<PackageName>_FIND_COMPONENTS``\\n  list of requested components\\n``<PackageName>_FIND_REQUIRED_<c>``\\n  true if component ``<c>`` is required,\\n  false if component ``<c>`` is optional\\n\\nIn Module mode the loaded find module is responsible to honor the\\nrequest detailed by these variables; see the find module for details.\\nIn Config mode ``find_package`` handles ``REQUIRED``, ``QUIET``, and\\n``[version]`` options automatically but leaves it to the package\\nconfiguration file to handle components in a way that makes sense\\nfor the package.  The package configuration file may set\\n``<PackageName>_FOUND`` to false to tell ``find_package`` that component\\nrequirements are not satisfied.\\n",
        "command"
    ],
    "find_path": [
        "find_path\\n---------\\n\\nA short-hand signature is:\\n\\n find_path (<VAR> name1 [path1 path2 ...])\\n\\nThe general signature is:\\n\\n find_path (\\n           <VAR>\\n           name | NAMES name1 [name2 ...]\\n           [HINTS path1 [path2 ... ENV var]]\\n           [PATHS path1 [path2 ... ENV var]]\\n           [PATH_SUFFIXES suffix1 [suffix2 ...]]\\n           [DOC \\\"cache documentation string\\\"]\\n           [NO_DEFAULT_PATH]\\n           [NO_PACKAGE_ROOT_PATH]\\n           [NO_CMAKE_PATH]\\n           [NO_CMAKE_ENVIRONMENT_PATH]\\n           [NO_SYSTEM_ENVIRONMENT_PATH]\\n           [NO_CMAKE_SYSTEM_PATH]\\n           [CMAKE_FIND_ROOT_PATH_BOTH |\\n            ONLY_CMAKE_FIND_ROOT_PATH |\\n            NO_CMAKE_FIND_ROOT_PATH]\\n          )\\n\\nThis command is used to find a directory containing the named file.\\nA cache entry named by ``<VAR>`` is created to store the result\\nof this command.\\nIf the file in a directory is found the result is stored in the variable\\nand the search will not be repeated unless the variable is cleared.\\nIf nothing is found, the result will be\\n``<VAR>-NOTFOUND``, and the search will be attempted again the\\nnext time find_path is invoked with the same variable.\\n\\nOptions include:\\n\\n``NAMES``\\n  Specify one or more possible names for the file in a directory.\\n\\n  When using this to specify names with and without a version\\n  suffix, we recommend specifying the unversioned name first\\n  so that locally-built packages can be found before those\\n  provided by distributions.\\n\\n``HINTS``, ``PATHS``\\n  Specify directories to search in addition to the default locations.\\n  The ``ENV var`` sub-option reads paths from a system environment\\n  variable.\\n\\n``PATH_SUFFIXES``\\n  Specify additional subdirectories to check below each directory\\n  location otherwise considered.\\n\\n``DOC``\\n  Specify the documentation string for the ``<VAR>`` cache entry.\\n\\nIf ``NO_DEFAULT_PATH`` is specified, then no additional paths are\\nadded to the search.\\nIf ``NO_DEFAULT_PATH`` is not specified, the search process is as follows:\\n\\n1. If called from within a find module loaded by\\n   ``find_package(<PackageName>)``, search prefixes unique to the\\n   current package being found.  Specifically look in the\\n   ``<PackageName>_ROOT`` CMake variable and the\\n   ``<PackageName>_ROOT`` environment variable.\\n   The package root variables are maintained as a stack so if called from\\n   nested find modules, root paths from the parent's find module will be\\n   searched after paths from the current module,\\n   i.e. ``<CurrentPackage>_ROOT``, ``ENV{<CurrentPackage>_ROOT}``,\\n   ``<ParentPackage>_ROOT``, ``ENV{<ParentPackage>_ROOT}``, etc.\\n   This can be skipped if ``NO_PACKAGE_ROOT_PATH`` is passed.\\n   See policy ``CMP0074``.\\n\\n   * ``<prefix>/include/<arch>`` if ``CMAKE_LIBRARY_ARCHITECTURE`` is set, and ``<prefix>/include`` for each ``<prefix>`` in the ``<PackageName>_ROOT`` CMake variable and the ``<PackageName>_ROOT`` environment variable if called from within a find module loaded by ``find_package(<PackageName>)``\\n\\n2. Search paths specified in cmake-specific cache variables.\\n   These are intended to be used on the command line with a ``-DVAR=value``.\\n   The values are interpreted as :ref:`;-lists <CMake Language Lists>`.\\n   This can be skipped if ``NO_CMAKE_PATH`` is passed.\\n\\n   * ``<prefix>/include/<arch>`` if ``CMAKE_LIBRARY_ARCHITECTURE`` is set, and ``<prefix>/include`` for each ``<prefix>`` in ``CMAKE_PREFIX_PATH``\\n   * ``CMAKE_INCLUDE_PATH``\\n   * ``CMAKE_FRAMEWORK_PATH``\\n\\n3. Search paths specified in cmake-specific environment variables.\\n   These are intended to be set in the user's shell configuration,\\n   and therefore use the host's native path separator\\n   (``;`` on Windows and ``:`` on UNIX).\\n   This can be skipped if ``NO_CMAKE_ENVIRONMENT_PATH`` is passed.\\n\\n   * ``<prefix>/include/<arch>`` if ``CMAKE_LIBRARY_ARCHITECTURE`` is set, and ``<prefix>/include`` for each ``<prefix>`` in ``CMAKE_PREFIX_PATH``\\n   * ``CMAKE_INCLUDE_PATH``\\n   * ``CMAKE_FRAMEWORK_PATH``\\n\\n4. Search the paths specified by the ``HINTS`` option.\\n   These should be paths computed by system introspection, such as a\\n   hint provided by the location of another item already found.\\n   Hard-coded guesses should be specified with the ``PATHS`` option.\\n\\n5. Search the standard system environment variables.\\n   This can be skipped if ``NO_SYSTEM_ENVIRONMENT_PATH`` is an argument.\\n\\n   * Directories in ``INCLUDE``. On Windows hosts: ``<prefix>/include/<arch>`` if ``CMAKE_LIBRARY_ARCHITECTURE`` is set, and ``<prefix>/include`` for each ``<prefix>/[s]bin`` in ``PATH``, and ``<entry>/include`` for other entries in ``PATH``, and the directories in ``PATH`` itself.\\n\\n6. Search cmake variables defined in the Platform files\\n   for the current system.  This can be skipped if ``NO_CMAKE_SYSTEM_PATH``\\n   is passed.\\n\\n   * ``<prefix>/include/<arch>`` if ``CMAKE_LIBRARY_ARCHITECTURE`` is set, and ``<prefix>/include`` for each ``<prefix>`` in ``CMAKE_SYSTEM_PREFIX_PATH``\\n   * ``CMAKE_SYSTEM_INCLUDE_PATH``\\n   * ``CMAKE_SYSTEM_FRAMEWORK_PATH``\\n\\n7. Search the paths specified by the PATHS option\\n   or in the short-hand version of the command.\\n   These are typically hard-coded guesses.\\n\\nOn macOS the ``CMAKE_FIND_FRAMEWORK`` and\\n``CMAKE_FIND_APPBUNDLE`` variables determine the order of\\npreference between Apple-style and unix-style package components.\\n\\nThe CMake variable ``CMAKE_FIND_ROOT_PATH`` specifies one or more\\ndirectories to be prepended to all other search directories.  This\\neffectively \\\"re-roots\\\" the entire search under given locations.\\nPaths which are descendants of the ``CMAKE_STAGING_PREFIX`` are excluded\\nfrom this re-rooting, because that variable is always a path on the host system.\\nBy default the ``CMAKE_FIND_ROOT_PATH`` is empty.\\n\\nThe ``CMAKE_SYSROOT`` variable can also be used to specify exactly one\\ndirectory to use as a prefix.  Setting ``CMAKE_SYSROOT`` also has other\\neffects.  See the documentation for that variable for more.\\n\\nThese variables are especially useful when cross-compiling to\\npoint to the root directory of the target environment and CMake will\\nsearch there too.  By default at first the directories listed in\\n``CMAKE_FIND_ROOT_PATH`` are searched, then the ``CMAKE_SYSROOT``\\ndirectory is searched, and then the non-rooted directories will be\\nsearched.  The default behavior can be adjusted by setting\\n``CMAKE_FIND_ROOT_PATH_MODE_INCLUDE``.  This behavior can be manually\\noverridden on a per-call basis using options:\\n\\n``CMAKE_FIND_ROOT_PATH_BOTH``\\n  Search in the order described above.\\n\\n``NO_CMAKE_FIND_ROOT_PATH``\\n  Do not use the ``CMAKE_FIND_ROOT_PATH`` variable.\\n\\n``ONLY_CMAKE_FIND_ROOT_PATH``\\n  Search only the re-rooted directories and directories below\\n  ``CMAKE_STAGING_PREFIX``.\\n\\nThe default search order is designed to be most-specific to\\nleast-specific for common use cases.\\nProjects may override the order by simply calling the command\\nmultiple times and using the ``NO_*`` options:\\n\\n find_path (<VAR> NAMES name PATHS paths... NO_DEFAULT_PATH)\\n find_path (<VAR> NAMES name)\\n\\nOnce one of the calls succeeds the result variable will be set\\nand stored in the cache so that no call will search again.\\n\\nWhen searching for frameworks, if the file is specified as ``A/b.h``, then\\nthe framework search will look for ``A.framework/Headers/b.h``.  If that\\nis found the path will be set to the path to the framework.  CMake\\nwill convert this to the correct ``-F`` option to include the file.\\n",
        "command"
    ],
    "find_program": [
        "find_program\\n------------\\n\\nA short-hand signature is:\\n\\n find_program (<VAR> name1 [path1 path2 ...])\\n\\nThe general signature is:\\n\\n find_program (\\n           <VAR>\\n           name | NAMES name1 [name2 ...] [NAMES_PER_DIR]\\n           [HINTS path1 [path2 ... ENV var]]\\n           [PATHS path1 [path2 ... ENV var]]\\n           [PATH_SUFFIXES suffix1 [suffix2 ...]]\\n           [DOC \\\"cache documentation string\\\"]\\n           [NO_DEFAULT_PATH]\\n           [NO_PACKAGE_ROOT_PATH]\\n           [NO_CMAKE_PATH]\\n           [NO_CMAKE_ENVIRONMENT_PATH]\\n           [NO_SYSTEM_ENVIRONMENT_PATH]\\n           [NO_CMAKE_SYSTEM_PATH]\\n           [CMAKE_FIND_ROOT_PATH_BOTH |\\n            ONLY_CMAKE_FIND_ROOT_PATH |\\n            NO_CMAKE_FIND_ROOT_PATH]\\n          )\\n\\nThis command is used to find a program.\\nA cache entry named by ``<VAR>`` is created to store the result\\nof this command.\\nIf the program is found the result is stored in the variable\\nand the search will not be repeated unless the variable is cleared.\\nIf nothing is found, the result will be\\n``<VAR>-NOTFOUND``, and the search will be attempted again the\\nnext time find_program is invoked with the same variable.\\n\\nOptions include:\\n\\n``NAMES``\\n  Specify one or more possible names for the program.\\n\\n  When using this to specify names with and without a version\\n  suffix, we recommend specifying the unversioned name first\\n  so that locally-built packages can be found before those\\n  provided by distributions.\\n\\n``HINTS``, ``PATHS``\\n  Specify directories to search in addition to the default locations.\\n  The ``ENV var`` sub-option reads paths from a system environment\\n  variable.\\n\\n``PATH_SUFFIXES``\\n  Specify additional subdirectories to check below each directory\\n  location otherwise considered.\\n\\n``DOC``\\n  Specify the documentation string for the ``<VAR>`` cache entry.\\n\\nIf ``NO_DEFAULT_PATH`` is specified, then no additional paths are\\nadded to the search.\\nIf ``NO_DEFAULT_PATH`` is not specified, the search process is as follows:\\n\\n1. If called from within a find module loaded by\\n   ``find_package(<PackageName>)``, search prefixes unique to the\\n   current package being found.  Specifically look in the\\n   ``<PackageName>_ROOT`` CMake variable and the\\n   ``<PackageName>_ROOT`` environment variable.\\n   The package root variables are maintained as a stack so if called from\\n   nested find modules, root paths from the parent's find module will be\\n   searched after paths from the current module,\\n   i.e. ``<CurrentPackage>_ROOT``, ``ENV{<CurrentPackage>_ROOT}``,\\n   ``<ParentPackage>_ROOT``, ``ENV{<ParentPackage>_ROOT}``, etc.\\n   This can be skipped if ``NO_PACKAGE_ROOT_PATH`` is passed.\\n   See policy ``CMP0074``.\\n\\n   * ``<prefix>/[s]bin`` for each ``<prefix>`` in the ``<PackageName>_ROOT`` CMake variable and the ``<PackageName>_ROOT`` environment variable if called from within a find module loaded by ``find_package(<PackageName>)``\\n\\n2. Search paths specified in cmake-specific cache variables.\\n   These are intended to be used on the command line with a ``-DVAR=value``.\\n   The values are interpreted as :ref:`;-lists <CMake Language Lists>`.\\n   This can be skipped if ``NO_CMAKE_PATH`` is passed.\\n\\n   * ``<prefix>/[s]bin`` for each ``<prefix>`` in ``CMAKE_PREFIX_PATH``\\n   * ``CMAKE_PROGRAM_PATH``\\n   * ``CMAKE_APPBUNDLE_PATH``\\n\\n3. Search paths specified in cmake-specific environment variables.\\n   These are intended to be set in the user's shell configuration,\\n   and therefore use the host's native path separator\\n   (``;`` on Windows and ``:`` on UNIX).\\n   This can be skipped if ``NO_CMAKE_ENVIRONMENT_PATH`` is passed.\\n\\n   * ``<prefix>/[s]bin`` for each ``<prefix>`` in ``CMAKE_PREFIX_PATH``\\n   * ``CMAKE_PROGRAM_PATH``\\n   * ``CMAKE_APPBUNDLE_PATH``\\n\\n4. Search the paths specified by the ``HINTS`` option.\\n   These should be paths computed by system introspection, such as a\\n   hint provided by the location of another item already found.\\n   Hard-coded guesses should be specified with the ``PATHS`` option.\\n\\n5. Search the standard system environment variables.\\n   This can be skipped if ``NO_SYSTEM_ENVIRONMENT_PATH`` is an argument.\\n\\n   * ``PATH``\\n\\n6. Search cmake variables defined in the Platform files\\n   for the current system.  This can be skipped if ``NO_CMAKE_SYSTEM_PATH``\\n   is passed.\\n\\n   * ``<prefix>/[s]bin`` for each ``<prefix>`` in ``CMAKE_SYSTEM_PREFIX_PATH``\\n   * ``CMAKE_SYSTEM_PROGRAM_PATH``\\n   * ``CMAKE_SYSTEM_APPBUNDLE_PATH``\\n\\n7. Search the paths specified by the PATHS option\\n   or in the short-hand version of the command.\\n   These are typically hard-coded guesses.\\n\\nOn macOS the ``CMAKE_FIND_FRAMEWORK`` and\\n``CMAKE_FIND_APPBUNDLE`` variables determine the order of\\npreference between Apple-style and unix-style package components.\\n\\nThe CMake variable ``CMAKE_FIND_ROOT_PATH`` specifies one or more\\ndirectories to be prepended to all other search directories.  This\\neffectively \\\"re-roots\\\" the entire search under given locations.\\nPaths which are descendants of the ``CMAKE_STAGING_PREFIX`` are excluded\\nfrom this re-rooting, because that variable is always a path on the host system.\\nBy default the ``CMAKE_FIND_ROOT_PATH`` is empty.\\n\\nThe ``CMAKE_SYSROOT`` variable can also be used to specify exactly one\\ndirectory to use as a prefix.  Setting ``CMAKE_SYSROOT`` also has other\\neffects.  See the documentation for that variable for more.\\n\\nThese variables are especially useful when cross-compiling to\\npoint to the root directory of the target environment and CMake will\\nsearch there too.  By default at first the directories listed in\\n``CMAKE_FIND_ROOT_PATH`` are searched, then the ``CMAKE_SYSROOT``\\ndirectory is searched, and then the non-rooted directories will be\\nsearched.  The default behavior can be adjusted by setting\\n``CMAKE_FIND_ROOT_PATH_MODE_PROGRAM``.  This behavior can be manually\\noverridden on a per-call basis using options:\\n\\n``CMAKE_FIND_ROOT_PATH_BOTH``\\n  Search in the order described above.\\n\\n``NO_CMAKE_FIND_ROOT_PATH``\\n  Do not use the ``CMAKE_FIND_ROOT_PATH`` variable.\\n\\n``ONLY_CMAKE_FIND_ROOT_PATH``\\n  Search only the re-rooted directories and directories below\\n  ``CMAKE_STAGING_PREFIX``.\\n\\nThe default search order is designed to be most-specific to\\nleast-specific for common use cases.\\nProjects may override the order by simply calling the command\\nmultiple times and using the ``NO_*`` options:\\n\\n find_program (<VAR> NAMES name PATHS paths... NO_DEFAULT_PATH)\\n find_program (<VAR> NAMES name)\\n\\nOnce one of the calls succeeds the result variable will be set\\nand stored in the cache so that no call will search again.\\n\\nWhen more than one value is given to the ``NAMES`` option this command by\\ndefault will consider one name at a time and search every directory\\nfor it.  The ``NAMES_PER_DIR`` option tells this command to consider one\\ndirectory at a time and search for all names in it.\\n",
        "command"
    ],
    "fltk_wrap_ui": [
        "fltk_wrap_ui\\n------------\\n\\nCreate FLTK user interfaces Wrappers.\\n\\n::\\n\\n fltk_wrap_ui(resultingLibraryName source1\\n              source2 ... sourceN )\\n\\nProduce .h and .cxx files for all the .fl and .fld files listed.  The\\nresulting .h and .cxx files will be added to a variable named\\n``resultingLibraryName_FLTK_UI_SRCS`` which should be added to your\\nlibrary.\\n",
        "command"
    ],
    "foreach": [
        "foreach\\n-------\\n\\nEvaluate a group of commands for each value in a list.\\n\\n::\\n\\n foreach(loop_var arg1 arg2 ...)\\n   COMMAND1(ARGS ...)\\n   COMMAND2(ARGS ...)\\n   ...\\n endforeach(loop_var)\\n\\nAll commands between foreach and the matching endforeach are recorded\\nwithout being invoked.  Once the endforeach is evaluated, the recorded\\nlist of commands is invoked once for each argument listed in the\\noriginal foreach command.  Before each iteration of the loop\\n``${loop_var}`` will be set as a variable with the current value in the\\nlist.\\n\\n::\\n\\n foreach(loop_var RANGE total)\\n foreach(loop_var RANGE start stop [step])\\n\\nForeach can also iterate over a generated range of numbers.  There are\\nthree types of this iteration:\\n\\n* When specifying single number, the range will have elements [0, ... to\\n  \\\"total\\\"] (inclusive).\\n\\n* When specifying two numbers, the range will have elements from the\\n  first number to the second number (inclusive).\\n\\n* The third optional number is the increment used to iterate from the\\n  first number to the second number (inclusive).\\n\\n::\\n\\n foreach(loop_var IN [LISTS [list1 [...]]]\\n                     [ITEMS [item1 [...]]])\\n\\nIterates over a precise list of items.  The ``LISTS`` option names\\nlist-valued variables to be traversed, including empty elements (an\\nempty string is a zero-length list).  (Note macro\\narguments are not variables.)  The ``ITEMS`` option ends argument\\nparsing and includes all arguments following it in the iteration.\\n",
        "command"
    ],
    "function": [
        "function\\n--------\\n\\nStart recording a function for later invocation as a command::\\n\\n function(<name> [arg1 [arg2 [arg3 ...]]])\\n   COMMAND1(ARGS ...)\\n   COMMAND2(ARGS ...)\\n   ...\\n endfunction(<name>)\\n\\nDefine a function named ``<name>`` that takes arguments named ``arg1``,\\n``arg2``, ``arg3``, (...).\\nCommands listed after function, but before the matching\\n``endfunction()``, are not invoked until the function is invoked.\\nWhen it is invoked, the commands recorded in the function are first\\nmodified by replacing formal parameters (``${arg1}``) with the arguments\\npassed, and then invoked as normal commands.\\nIn addition to referencing the formal parameters you can reference the\\n``ARGC`` variable which will be set to the number of arguments passed\\ninto the function as well as ``ARGV0``, ``ARGV1``, ``ARGV2``, ...  which\\nwill have the actual values of the arguments passed in.\\nThis facilitates creating functions with optional arguments.\\nAdditionally ``ARGV`` holds the list of all arguments given to the\\nfunction and ``ARGN`` holds the list of arguments past the last expected\\nargument.\\nReferencing to ``ARGV#`` arguments beyond ``ARGC`` have undefined\\nbehavior. Checking that ``ARGC`` is greater than ``#`` is the only way\\nto ensure that ``ARGV#`` was passed to the function as an extra\\nargument.\\n\\nA function opens a new scope: see ``set(var PARENT_SCOPE)`` for\\ndetails.\\n\\nSee the ``cmake_policy()`` command documentation for the behavior\\nof policies inside functions.\\n",
        "command"
    ],
    "get_cmake_property": [
        "get_cmake_property\\n------------------\\n\\nGet a global property of the CMake instance.\\n\\n::\\n\\n get_cmake_property(VAR property)\\n\\nGet a global property from the CMake instance.  The value of the property is\\nstored in the variable ``VAR``.  If the property is not found, ``VAR``\\nwill be  set to \\\"NOTFOUND\\\".  See the ``cmake-properties(7)`` manual\\nfor available properties.\\n\\nSee also the ``get_property()`` command ``GLOBAL`` option.\\n\\nIn addition to global properties, this command (for historical reasons)\\nalso supports the ``VARIABLES`` and ``MACROS`` directory\\nproperties.  It also supports a special ``COMPONENTS`` global property that\\nlists the components given to the ``install()`` command.\\n",
        "command"
    ],
    "get_directory_property": [
        "get_directory_property\\n----------------------\\n\\nGet a property of ``DIRECTORY`` scope.\\n\\n::\\n\\n get_directory_property(<variable> [DIRECTORY <dir>] <prop-name>)\\n\\nStore a property of directory scope in the named ``<variable>``.\\nThe ``DIRECTORY`` argument specifies another directory from which\\nto retrieve the property value instead of the current directory.\\nThe specified directory must have already been traversed by CMake.\\n\\nIf the property is not defined for the nominated directory scope,\\nan empty string is returned.  In the case of ``INHERITED`` properties,\\nif the property is not found for the nominated directory scope,\\nthe search will chain to a parent scope as described for the\\n``define_property()`` command.\\n\\n::\\n\\n get_directory_property(<variable> [DIRECTORY <dir>]\\n                        DEFINITION <var-name>)\\n\\nGet a variable definition from a directory.  This form is useful to\\nget a variable definition from another directory.\\n\\nSee also the more general ``get_property()`` command.\\n",
        "command"
    ],
    "get_filename_component": [
        "get_filename_component\\n----------------------\\n\\nGet a specific component of a full filename.\\n\\n------------------------------------------------------------------------------\\n\\n::\\n\\n get_filename_component(<VAR> <FileName> <COMP> [CACHE])\\n\\nSet ``<VAR>`` to a component of ``<FileName>``, where ``<COMP>`` is one of:\\n\\n::\\n\\n DIRECTORY = Directory without file name\\n NAME      = File name without directory\\n EXT       = File name longest extension (.b.c from d/a.b.c)\\n NAME_WE   = File name without directory or longest extension\\n PATH      = Legacy alias for DIRECTORY (use for CMake <= 2.8.11)\\n\\nPaths are returned with forward slashes and have no trailing slashes.\\nThe longest file extension is always considered.  If the optional\\n``CACHE`` argument is specified, the result variable is added to the\\ncache.\\n\\n------------------------------------------------------------------------------\\n\\n::\\n\\n get_filename_component(<VAR> <FileName>\\n                        <COMP> [BASE_DIR <BASE_DIR>]\\n                        [CACHE])\\n\\nSet ``<VAR>`` to the absolute path of ``<FileName>``, where ``<COMP>`` is one\\nof:\\n\\n::\\n\\n ABSOLUTE  = Full path to file\\n REALPATH  = Full path to existing file with symlinks resolved\\n\\nIf the provided ``<FileName>`` is a relative path, it is evaluated relative\\nto the given base directory ``<BASE_DIR>``.  If no base directory is\\nprovided, the default base directory will be\\n``CMAKE_CURRENT_SOURCE_DIR``.\\n\\nPaths are returned with forward slashes and have no trailing slashes.  If the\\noptional ``CACHE`` argument is specified, the result variable is added to the\\ncache.\\n\\n------------------------------------------------------------------------------\\n\\n::\\n\\n get_filename_component(<VAR> <FileName>\\n                        PROGRAM [PROGRAM_ARGS <ARG_VAR>]\\n                        [CACHE])\\n\\nThe program in ``<FileName>`` will be found in the system search path or\\nleft as a full path.  If ``PROGRAM_ARGS`` is present with ``PROGRAM``, then\\nany command-line arguments present in the ``<FileName>`` string are split\\nfrom the program name and stored in ``<ARG_VAR>``.  This is used to\\nseparate a program name from its arguments in a command line string.\\n",
        "command"
    ],
    "get_property": [
        "get_property\\n------------\\n\\nGet a property.\\n\\n::\\n\\n get_property(<variable>\\n              <GLOBAL             |\\n               DIRECTORY [dir]    |\\n               TARGET    <target> |\\n               SOURCE    <source> |\\n               INSTALL   <file>   |\\n               TEST      <test>   |\\n               CACHE     <entry>  |\\n               VARIABLE>\\n              PROPERTY <name>\\n              [SET | DEFINED | BRIEF_DOCS | FULL_DOCS])\\n\\nGet one property from one object in a scope.  The first argument\\nspecifies the variable in which to store the result.  The second\\nargument determines the scope from which to get the property.  It must\\nbe one of the following:\\n\\n``GLOBAL``\\n  Scope is unique and does not accept a name.\\n\\n``DIRECTORY``\\n  Scope defaults to the current directory but another\\n  directory (already processed by CMake) may be named by full or\\n  relative path.\\n\\n``TARGET``\\n  Scope must name one existing target.\\n\\n``SOURCE``\\n  Scope must name one source file.\\n\\n``INSTALL``\\n  Scope must name one installed file path.\\n\\n``TEST``\\n  Scope must name one existing test.\\n\\n``CACHE``\\n  Scope must name one cache entry.\\n\\n``VARIABLE``\\n  Scope is unique and does not accept a name.\\n\\nThe required ``PROPERTY`` option is immediately followed by the name of\\nthe property to get.  If the property is not set an empty value is\\nreturned, although some properties support inheriting from a parent scope\\nif defined to behave that way (see ``define_property()``).\\n\\nIf the ``SET`` option is given the variable is set to a boolean\\nvalue indicating whether the property has been set.  If the ``DEFINED``\\noption is given the variable is set to a boolean value indicating\\nwhether the property has been defined such as with the\\n``define_property()`` command.\\nIf ``BRIEF_DOCS`` or ``FULL_DOCS`` is given then the variable is set to a\\nstring containing documentation for the requested property.  If\\ndocumentation is requested for a property that has not been defined\\n``NOTFOUND`` is returned.\\n",
        "command"
    ],
    "get_source_file_property": [
        "get_source_file_property\\n------------------------\\n\\nGet a property for a source file.\\n\\n::\\n\\n get_source_file_property(VAR file property)\\n\\nGet a property from a source file.  The value of the property is\\nstored in the variable ``VAR``.  If the source property is not found, the\\nbehavior depends on whether it has been defined to be an ``INHERITED`` property\\nor not (see ``define_property()``).  Non-inherited properties will set\\n``VAR`` to \\\"NOTFOUND\\\", whereas inherited properties will search the relevant\\nparent scope as described for the ``define_property()`` command and\\nif still unable to find the property, ``VAR`` will be set to an empty string.\\n\\nUse ``set_source_files_properties()`` to set property values.  Source\\nfile properties usually control how the file is built. One property that is\\nalways there is ``LOCATION``.\\n\\nSee also the more general ``get_property()`` command.\\n",
        "command"
    ],
    "get_target_property": [
        "get_target_property\\n-------------------\\n\\nGet a property from a target.\\n\\n::\\n\\n get_target_property(VAR target property)\\n\\nGet a property from a target.  The value of the property is stored in\\nthe variable ``VAR``.  If the target property is not found, the behavior\\ndepends on whether it has been defined to be an ``INHERITED`` property\\nor not (see ``define_property()``).  Non-inherited properties will\\nset ``VAR`` to \\\"NOTFOUND\\\", whereas inherited properties will search the\\nrelevant parent scope as described for the ``define_property()``\\ncommand and if still unable to find the property, ``VAR`` will be set to\\nan empty string.\\n\\nUse ``set_target_properties()`` to set target property values.\\nProperties are usually used to control how a target is built, but some\\nquery the target instead.  This command can get properties for any\\ntarget so far created.  The targets do not need to be in the current\\n``CMakeLists.txt`` file.\\n\\nSee also the more general ``get_property()`` command.\\n",
        "command"
    ],
    "get_test_property": [
        "get_test_property\\n-----------------\\n\\nGet a property of the test.\\n\\n::\\n\\n get_test_property(test property VAR)\\n\\nGet a property from the test.  The value of the property is stored in\\nthe variable ``VAR``.  If the test property is not found, the behavior\\ndepends on whether it has been defined to be an ``INHERITED`` property\\nor not (see ``define_property()``).  Non-inherited properties will\\nset ``VAR`` to \\\"NOTFOUND\\\", whereas inherited properties will search the\\nrelevant parent scope as described for the ``define_property()``\\ncommand and if still unable to find the property, ``VAR`` will be set to\\nan empty string.\\n\\nFor a list of standard properties you can type ``cmake --help-property-list``.\\n\\nSee also the more general ``get_property()`` command.\\n",
        "command"
    ],
    "if": [
        "if\\n--\\n\\nConditionally execute a group of commands.\\n\\n if(expression)\\n   # then section.\\n   COMMAND1(ARGS ...)\\n   COMMAND2(ARGS ...)\\n   #...\\n elseif(expression2)\\n   # elseif section.\\n   COMMAND1(ARGS ...)\\n   COMMAND2(ARGS ...)\\n   #...\\n else(expression)\\n   # else section.\\n   COMMAND1(ARGS ...)\\n   COMMAND2(ARGS ...)\\n   #...\\n endif(expression)\\n\\nEvaluates the given expression.  If the result is true, the commands\\nin the THEN section are invoked.  Otherwise, the commands in the else\\nsection are invoked.  The elseif and else sections are optional.  You\\nmay have multiple elseif clauses.  Note that the expression in the\\nelse and endif clause is optional.  Long expressions can be used and\\nthere is a traditional order of precedence.  Parenthetical expressions\\nare evaluated first followed by unary tests such as ``EXISTS``,\\n``COMMAND``, and ``DEFINED``.  Then any binary tests such as\\n``EQUAL``, ``LESS``, ``LESS_EQUAL``, ``GREATER``, ``GREATER_EQUAL``,\\n``STREQUAL``, ``STRLESS``, ``STRLESS_EQUAL``, ``STRGREATER``,\\n``STRGREATER_EQUAL``, ``VERSION_EQUAL``, ``VERSION_LESS``,\\n``VERSION_LESS_EQUAL``, ``VERSION_GREATER``, ``VERSION_GREATER_EQUAL``,\\nand ``MATCHES`` will be evaluated.  Then boolean ``NOT`` operators and\\nfinally boolean ``AND`` and then ``OR`` operators will be evaluated.\\n\\nPossible expressions are:\\n\\n``if(<constant>)``\\n True if the constant is ``1``, ``ON``, ``YES``, ``TRUE``, ``Y``,\\n or a non-zero number.  False if the constant is ``0``, ``OFF``,\\n ``NO``, ``FALSE``, ``N``, ``IGNORE``, ``NOTFOUND``, the empty string,\\n or ends in the suffix ``-NOTFOUND``.  Named boolean constants are\\n case-insensitive.  If the argument is not one of these specific\\n constants, it is treated as a variable or string and the following\\n signature is used.\\n\\n``if(<variable|string>)``\\n True if given a variable that is defined to a value that is not a false\\n constant.  False otherwise.  (Note macro arguments are not variables.)\\n\\n``if(NOT <expression>)``\\n True if the expression is not true.\\n\\n``if(<expr1> AND <expr2>)``\\n True if both expressions would be considered true individually.\\n\\n``if(<expr1> OR <expr2>)``\\n True if either expression would be considered true individually.\\n\\n``if(COMMAND command-name)``\\n True if the given name is a command, macro or function that can be\\n invoked.\\n\\n``if(POLICY policy-id)``\\n True if the given name is an existing policy (of the form ``CMP<NNNN>``).\\n\\n``if(TARGET target-name)``\\n True if the given name is an existing logical target name created\\n by a call to the ``add_executable()``, ``add_library()``,\\n or ``add_custom_target()`` command that has already been invoked\\n (in any directory).\\n\\n``if(TEST test-name)``\\n True if the given name is an existing test name created by the\\n ``add_test()`` command.\\n\\n``if(EXISTS path-to-file-or-directory)``\\n True if the named file or directory exists.  Behavior is well-defined\\n only for full paths.\\n\\n``if(file1 IS_NEWER_THAN file2)``\\n True if ``file1`` is newer than ``file2`` or if one of the two files doesn't\\n exist.  Behavior is well-defined only for full paths.  If the file\\n time stamps are exactly the same, an ``IS_NEWER_THAN`` comparison returns\\n true, so that any dependent build operations will occur in the event\\n of a tie.  This includes the case of passing the same file name for\\n both file1 and file2.\\n\\n``if(IS_DIRECTORY path-to-directory)``\\n True if the given name is a directory.  Behavior is well-defined only\\n for full paths.\\n\\n``if(IS_SYMLINK file-name)``\\n True if the given name is a symbolic link.  Behavior is well-defined\\n only for full paths.\\n\\n``if(IS_ABSOLUTE path)``\\n True if the given path is an absolute path.\\n\\n``if(<variable|string> MATCHES regex)``\\n True if the given string or variable's value matches the given regular\\n expression.  See :ref:`Regex Specification` for regex format.\\n ``()`` groups are captured in ``CMAKE_MATCH_<n>`` variables.\\n\\n``if(<variable|string> LESS <variable|string>)``\\n True if the given string or variable's value is a valid number and less\\n than that on the right.\\n\\n``if(<variable|string> GREATER <variable|string>)``\\n True if the given string or variable's value is a valid number and greater\\n than that on the right.\\n\\n``if(<variable|string> EQUAL <variable|string>)``\\n True if the given string or variable's value is a valid number and equal\\n to that on the right.\\n\\n``if(<variable|string> LESS_EQUAL <variable|string>)``\\n True if the given string or variable's value is a valid number and less\\n than or equal to that on the right.\\n\\n``if(<variable|string> GREATER_EQUAL <variable|string>)``\\n True if the given string or variable's value is a valid number and greater\\n than or equal to that on the right.\\n\\n``if(<variable|string> STRLESS <variable|string>)``\\n True if the given string or variable's value is lexicographically less\\n than the string or variable on the right.\\n\\n``if(<variable|string> STRGREATER <variable|string>)``\\n True if the given string or variable's value is lexicographically greater\\n than the string or variable on the right.\\n\\n``if(<variable|string> STREQUAL <variable|string>)``\\n True if the given string or variable's value is lexicographically equal\\n to the string or variable on the right.\\n\\n``if(<variable|string> STRLESS_EQUAL <variable|string>)``\\n True if the given string or variable's value is lexicographically less\\n than or equal to the string or variable on the right.\\n\\n``if(<variable|string> STRGREATER_EQUAL <variable|string>)``\\n True if the given string or variable's value is lexicographically greater\\n than or equal to the string or variable on the right.\\n\\n``if(<variable|string> VERSION_LESS <variable|string>)``\\n Component-wise integer version number comparison (version format is\\n ``major[.minor[.patch[.tweak]]]``, omitted components are treated as zero).\\n Any non-integer version component or non-integer trailing part of a version\\n component effectively truncates the string at that point.\\n\\n``if(<variable|string> VERSION_GREATER <variable|string>)``\\n Component-wise integer version number comparison (version format is\\n ``major[.minor[.patch[.tweak]]]``, omitted components are treated as zero).\\n Any non-integer version component or non-integer trailing part of a version\\n component effectively truncates the string at that point.\\n\\n``if(<variable|string> VERSION_EQUAL <variable|string>)``\\n Component-wise integer version number comparison (version format is\\n ``major[.minor[.patch[.tweak]]]``, omitted components are treated as zero).\\n Any non-integer version component or non-integer trailing part of a version\\n component effectively truncates the string at that point.\\n\\n``if(<variable|string> VERSION_LESS_EQUAL <variable|string>)``\\n Component-wise integer version number comparison (version format is\\n ``major[.minor[.patch[.tweak]]]``, omitted components are treated as zero).\\n Any non-integer version component or non-integer trailing part of a version\\n component effectively truncates the string at that point.\\n\\n``if(<variable|string> VERSION_GREATER_EQUAL <variable|string>)``\\n Component-wise integer version number comparison (version format is\\n ``major[.minor[.patch[.tweak]]]``, omitted components are treated as zero).\\n Any non-integer version component or non-integer trailing part of a version\\n component effectively truncates the string at that point.\\n\\n``if(<variable|string> IN_LIST <variable>)``\\n True if the given element is contained in the named list variable.\\n\\n``if(DEFINED <variable>)``\\n True if the given variable is defined.  It does not matter if the\\n variable is true or false just if it has been set.  (Note macro\\n arguments are not variables.)\\n\\n``if((expression) AND (expression OR (expression)))``\\n The expressions inside the parenthesis are evaluated first and then\\n the remaining expression is evaluated as in the previous examples.\\n Where there are nested parenthesis the innermost are evaluated as part\\n of evaluating the expression that contains them.\\n\\nThe if command was written very early in CMake's history, predating\\nthe ``${}`` variable evaluation syntax, and for convenience evaluates\\nvariables named by its arguments as shown in the above signatures.\\nNote that normal variable evaluation with ``${}`` applies before the if\\ncommand even receives the arguments.  Therefore code like::\\n\\n set(var1 OFF)\\n set(var2 \\\"var1\\\")\\n if(${var2})\\n\\nappears to the if command as::\\n\\n if(var1)\\n\\nand is evaluated according to the ``if(<variable>)`` case documented\\nabove.  The result is ``OFF`` which is false.  However, if we remove the\\n``${}`` from the example then the command sees::\\n\\n if(var2)\\n\\nwhich is true because ``var2`` is defined to \\\"var1\\\" which is not a false\\nconstant.\\n\\nAutomatic evaluation applies in the other cases whenever the\\nabove-documented signature accepts ``<variable|string>``:\\n\\n* The left hand argument to ``MATCHES`` is first checked to see if it is\\n  a defined variable, if so the variable's value is used, otherwise the\\n  original value is used.\\n\\n* If the left hand argument to ``MATCHES`` is missing it returns false\\n  without error\\n\\n* Both left and right hand arguments to ``LESS``, ``GREATER``, ``EQUAL``,\\n  ``LESS_EQUAL``, and ``GREATER_EQUAL``, are independently tested to see if\\n  they are defined variables, if so their defined values are used otherwise\\n  the original value is used.\\n\\n* Both left and right hand arguments to ``STRLESS``, ``STRGREATER``,\\n  ``STREQUAL``, ``STRLESS_EQUAL``, and ``STRGREATER_EQUAL`` are independently\\n  tested to see if they are defined variables, if so their defined values are\\n  used otherwise the original value is used.\\n\\n* Both left and right hand arguments to ``VERSION_LESS``,\\n  ``VERSION_GREATER``, ``VERSION_EQUAL``, ``VERSION_LESS_EQUAL``, and\\n  ``VERSION_GREATER_EQUAL`` are independently tested to see if they are defined\\n  variables, if so their defined values are used otherwise the original value\\n  is used.\\n\\n* The right hand argument to ``NOT`` is tested to see if it is a boolean\\n  constant, if so the value is used, otherwise it is assumed to be a\\n  variable and it is dereferenced.\\n\\n* The left and right hand arguments to ``AND`` and ``OR`` are independently\\n  tested to see if they are boolean constants, if so they are used as\\n  such, otherwise they are assumed to be variables and are dereferenced.\\n\\nTo prevent ambiguity, potential variable or keyword names can be\\nspecified in a :ref:`Quoted Argument` or a :ref:`Bracket Argument`.\\nA quoted or bracketed variable or keyword will be interpreted as a\\nstring and not dereferenced or interpreted.\\nSee policy ``CMP0054``.\\n",
        "command"
    ],
    "include": [
        "include\\n-------\\n\\nLoad and run CMake code from a file or module.\\n\\n::\\n\\n include(<file|module> [OPTIONAL] [RESULT_VARIABLE <VAR>]\\n                       [NO_POLICY_SCOPE])\\n\\nLoad and run CMake code from the file given.  Variable reads and\\nwrites access the scope of the caller (dynamic scoping).  If ``OPTIONAL``\\nis present, then no error is raised if the file does not exist.  If\\n``RESULT_VARIABLE`` is given the variable will be set to the full filename\\nwhich has been included or NOTFOUND if it failed.\\n\\nIf a module is specified instead of a file, the file with name\\n``<modulename>.cmake`` is searched first in ``CMAKE_MODULE_PATH``,\\nthen in the CMake module directory.  There is one exception to this: if\\nthe file which calls ``include()`` is located itself in the CMake builtin\\nmodule directory, then first the CMake builtin module directory is searched and\\n``CMAKE_MODULE_PATH`` afterwards.  See also policy ``CMP0017``.\\n\\nSee the ``cmake_policy()`` command documentation for discussion of the\\n``NO_POLICY_SCOPE`` option.\\n",
        "command"
    ],
    "include_directories": [
        "include_directories\\n-------------------\\n\\nAdd include directories to the build.\\n\\n::\\n\\n include_directories([AFTER|BEFORE] [SYSTEM] dir1 [dir2 ...])\\n\\nAdd the given directories to those the compiler uses to search for\\ninclude files.  Relative paths are interpreted as relative to the\\ncurrent source directory.\\n\\nThe include directories are added to the ``INCLUDE_DIRECTORIES``\\ndirectory property for the current ``CMakeLists`` file.  They are also\\nadded to the ``INCLUDE_DIRECTORIES`` target property for each\\ntarget in the current ``CMakeLists`` file.  The target property values\\nare the ones used by the generators.\\n\\nBy default the directories specified are appended onto the current list of\\ndirectories.  This default behavior can be changed by setting\\n``CMAKE_INCLUDE_DIRECTORIES_BEFORE`` to ``ON``.  By using\\n``AFTER`` or ``BEFORE`` explicitly, you can select between appending and\\nprepending, independent of the default.\\n\\nIf the ``SYSTEM`` option is given, the compiler will be told the\\ndirectories are meant as system include directories on some platforms.\\nSignalling this setting might achieve effects such as the compiler\\nskipping warnings, or these fixed-install system files not being\\nconsidered in dependency calculations - see compiler docs.\\n\\nArguments to ``include_directories`` may use \\\"generator expressions\\\" with\\nthe syntax \\\"$<...>\\\".  See the ``cmake-generator-expressions(7)``\\nmanual for available expressions.  See the ``cmake-buildsystem(7)``\\nmanual for more on defining buildsystem properties.\\n\\n.. note::\\n\\n  Prefer the ``target_include_directories()`` command to add include\\n  directories to individual targets and optionally propagate/export them\\n  to dependents.\\n",
        "command"
    ],
    "include_external_msproject": [
        "include_external_msproject\\n--------------------------\\n\\nInclude an external Microsoft project file in a workspace.\\n\\n::\\n\\n include_external_msproject(projectname location\\n                            [TYPE projectTypeGUID]\\n                            [GUID projectGUID]\\n                            [PLATFORM platformName]\\n                            dep1 dep2 ...)\\n\\nIncludes an external Microsoft project in the generated workspace\\nfile.  Currently does nothing on UNIX.  This will create a target\\nnamed [projectname].  This can be used in the ``add_dependencies()``\\ncommand to make things depend on the external project.\\n\\n``TYPE``, ``GUID`` and ``PLATFORM`` are optional parameters that allow one to\\nspecify the type of project, id (GUID) of the project and the name of\\nthe target platform.  This is useful for projects requiring values\\nother than the default (e.g.  WIX projects).\\n\\nIf the imported project has different configuration names than the\\ncurrent project, set the ``MAP_IMPORTED_CONFIG_<CONFIG>``\\ntarget property to specify the mapping.\\n",
        "command"
    ],
    "include_guard": [
        "include_guard\\n-------------\\n\\nProvides an include guard for the file currently being processed by CMake.\\n\\n::\\n\\n include_guard([DIRECTORY|GLOBAL])\\n\\nSets up an include guard for the current CMake file (see the\\n``CMAKE_CURRENT_LIST_FILE`` variable documentation).\\n\\nCMake will end its processing of the current file at the location of the\\n``include_guard()`` command if the current file has already been\\nprocessed for the applicable scope (see below). This provides functionality\\nsimilar to the include guards commonly used in source headers or to the\\n``#pragma once`` directive. If the current file has been processed previously\\nfor the applicable scope, the effect is as though ``return()`` had been\\ncalled. Do not call this command from inside a function being defined within\\nthe current file.\\n\\nAn optional argument specifying the scope of the guard may be provided.\\nPossible values for the option are:\\n\\n``DIRECTORY``\\n  The include guard applies within the current directory and below. The file\\n  will only be included once within this directory scope, but may be included\\n  again by other files outside of this directory (i.e. a parent directory or\\n  another directory not pulled in by ``add_subdirectory()`` or\\n  ``include()`` from the current file or its children).\\n\\n``GLOBAL``\\n  The include guard applies globally to the whole build. The current file\\n  will only be included once regardless of the scope.\\n\\nIf no arguments given, ``include_guard`` has the same scope as a variable,\\nmeaning that the include guard effect is isolated by the most recent\\nfunction scope or current directory if no inner function scopes exist.\\nIn this case the command behavior is the same as:\\n\\n if(__CURRENT_FILE_VAR__)\\n   return()\\n endif()\\n set(__CURRENT_FILE_VAR__ TRUE)\\n",
        "command"
    ],
    "include_regular_expression": [
        "include_regular_expression\\n--------------------------\\n\\nSet the regular expression used for dependency checking.\\n\\n::\\n\\n include_regular_expression(regex_match [regex_complain])\\n\\nSet the regular expressions used in dependency checking.  Only files\\nmatching ``regex_match`` will be traced as dependencies.  Only files\\nmatching ``regex_complain`` will generate warnings if they cannot be found\\n(standard header paths are not searched).  The defaults are:\\n\\n::\\n\\n regex_match    = \\\"^.*$\\\" (match everything)\\n regex_complain = \\\"^$\\\" (match empty string only)\\n",
        "command"
    ],
    "install": [
        "install\\n-------\\n\\nSpecify rules to run at install time.\\n\\nSynopsis\\n^^^^^^^^\\n\\n install(TARGETS <target>... [...])\\n install({FILES | PROGRAMS} <file>... DESTINATION <dir> [...])\\n install(DIRECTORY <dir>... DESTINATION <dir> [...])\\n install(SCRIPT <file> [...])\\n install(CODE <code> [...])\\n install(EXPORT <export-name> DESTINATION <dir> [...])\\n\\nIntroduction\\n^^^^^^^^^^^^\\n\\nThis command generates installation rules for a project.  Rules\\nspecified by calls to this command within a source directory are\\nexecuted in order during installation.  The order across directories\\nis not defined.\\n\\nThere are multiple signatures for this command.  Some of them define\\ninstallation options for files and targets.  Options common to\\nmultiple signatures are covered here but they are valid only for\\nsignatures that specify them.  The common options are:\\n\\n``DESTINATION``\\n  Specify the directory on disk to which a file will be installed.\\n  If a full path (with a leading slash or drive letter) is given\\n  it is used directly.  If a relative path is given it is interpreted\\n  relative to the value of the ``CMAKE_INSTALL_PREFIX`` variable.\\n  The prefix can be relocated at install time using the ``DESTDIR``\\n  mechanism explained in the ``CMAKE_INSTALL_PREFIX`` variable\\n  documentation.\\n\\n``PERMISSIONS``\\n  Specify permissions for installed files.  Valid permissions are\\n  ``OWNER_READ``, ``OWNER_WRITE``, ``OWNER_EXECUTE``, ``GROUP_READ``,\\n  ``GROUP_WRITE``, ``GROUP_EXECUTE``, ``WORLD_READ``, ``WORLD_WRITE``,\\n  ``WORLD_EXECUTE``, ``SETUID``, and ``SETGID``.  Permissions that do\\n  not make sense on certain platforms are ignored on those platforms.\\n\\n``CONFIGURATIONS``\\n  Specify a list of build configurations for which the install rule\\n  applies (Debug, Release, etc.). Note that the values specified for\\n  this option only apply to options listed AFTER the ``CONFIGURATIONS``\\n  option. For example, to set separate install paths for the Debug and\\n  Release configurations, do the following:\\n\\n  .. code-block:: cmake\\n\\n    install(TARGETS target\\n            CONFIGURATIONS Debug\\n            RUNTIME DESTINATION Debug/bin)\\n    install(TARGETS target\\n            CONFIGURATIONS Release\\n            RUNTIME DESTINATION Release/bin)\\n\\n  Note that ``CONFIGURATIONS`` appears BEFORE ``RUNTIME DESTINATION``.\\n\\n``COMPONENT``\\n  Specify an installation component name with which the install rule\\n  is associated, such as \\\"runtime\\\" or \\\"development\\\".  During\\n  component-specific installation only install rules associated with\\n  the given component name will be executed.  During a full installation\\n  all components are installed unless marked with ``EXCLUDE_FROM_ALL``.\\n  If ``COMPONENT`` is not provided a default component \\\"Unspecified\\\" is\\n  created.  The default component name may be controlled with the\\n  ``CMAKE_INSTALL_DEFAULT_COMPONENT_NAME`` variable.\\n\\n``EXCLUDE_FROM_ALL``\\n  Specify that the file is excluded from a full installation and only\\n  installed as part of a component-specific installation\\n\\n``RENAME``\\n  Specify a name for an installed file that may be different from the\\n  original file.  Renaming is allowed only when a single file is\\n  installed by the command.\\n\\n``OPTIONAL``\\n  Specify that it is not an error if the file to be installed does\\n  not exist.\\n\\nCommand signatures that install files may print messages during\\ninstallation.  Use the ``CMAKE_INSTALL_MESSAGE`` variable\\nto control which messages are printed.\\n\\nMany of the ``install()`` variants implicitly create the directories\\ncontaining the installed files. If\\n``CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS`` is set, these\\ndirectories will be created with the permissions specified. Otherwise,\\nthey will be created according to the uname rules on Unix-like platforms.\\nWindows platforms are unaffected.\\n\\nInstalling Targets\\n^^^^^^^^^^^^^^^^^^\\n\\n::\\n\\n install(TARGETS targets... [EXPORT <export-name>]\\n         [[ARCHIVE|LIBRARY|RUNTIME|OBJECTS|FRAMEWORK|BUNDLE|\\n           PRIVATE_HEADER|PUBLIC_HEADER|RESOURCE]\\n          [DESTINATION <dir>]\\n          [PERMISSIONS permissions...]\\n          [CONFIGURATIONS [Debug|Release|...]]\\n          [COMPONENT <component>]\\n          [NAMELINK_COMPONENT <component>]\\n          [OPTIONAL] [EXCLUDE_FROM_ALL]\\n          [NAMELINK_ONLY|NAMELINK_SKIP]\\n         ] [...]\\n         [INCLUDES DESTINATION [<dir> ...]]\\n         )\\n\\nThe ``TARGETS`` form specifies rules for installing targets from a\\nproject.  There are several kinds of target files that may be installed:\\n\\n``ARCHIVE``\\n  Static libraries are treated as ``ARCHIVE`` targets, except those\\n  marked with the ``FRAMEWORK`` property on macOS (see ``FRAMEWORK``\\n  below.) For DLL platforms (all Windows-based systems including\\n  Cygwin), the DLL import library is treated as an ``ARCHIVE`` target.\\n\\n``LIBRARY``\\n  Module libraries are always treated as ``LIBRARY`` targets. For non-\\n  DLL platforms shared libraries are treated as ``LIBRARY`` targets,\\n  except those marked with the ``FRAMEWORK`` property on macOS (see\\n  ``FRAMEWORK`` below.)\\n\\n``RUNTIME``\\n  Executables are treated as ``RUNTIME`` objects, except those marked\\n  with the ``MACOSX_BUNDLE`` property on macOS (see ``BUNDLE`` below.)\\n  For DLL platforms (all Windows-based systems including Cygwin), the\\n  DLL part of a shared library is treated as a ``RUNTIME`` target.\\n\\n``OBJECTS``\\n  Object libraries (a simple group of object files) are always treated\\n  as ``OBJECTS`` targets.\\n\\n``FRAMEWORK``\\n  Both static and shared libraries marked with the ``FRAMEWORK``\\n  property are treated as ``FRAMEWORK`` targets on macOS.\\n\\n``BUNDLE``\\n  Executables marked with the ``MACOSX_BUNDLE`` property are treated as\\n  ``BUNDLE`` targets on macOS.\\n\\n``PUBLIC_HEADER``\\n  Any ``PUBLIC_HEADER`` files associated with a library are installed in\\n  the destination specified by the ``PUBLIC_HEADER`` argument on non-Apple\\n  platforms. Rules defined by this argument are ignored for ``FRAMEWORK``\\n  libraries on Apple platforms because the associated files are installed\\n  into the appropriate locations inside the framework folder. See\\n  ``PUBLIC_HEADER`` for details.\\n\\n``PRIVATE_HEADER``\\n  Similar to ``PUBLIC_HEADER``, but for ``PRIVATE_HEADER`` files. See\\n  ``PRIVATE_HEADER`` for details.\\n\\n``RESOURCE``\\n  Similar to ``PUBLIC_HEADER`` and ``PRIVATE_HEADER``, but for\\n  ``RESOURCE`` files. See ``RESOURCE`` for details.\\n\\nFor each of these arguments given, the arguments following them only apply\\nto the target or file type specified in the argument. If none is given, the\\ninstallation properties apply to all target types. If only one is given then\\nonly targets of that type will be installed (which can be used to install\\njust a DLL or just an import library.)\\n\\nIn addition to the common options listed above, each target can accept\\nthe following additional arguments:\\n\\n``NAMELINK_COMPONENT``\\n  On some platforms a versioned shared library has a symbolic link such\\n  as::\\n\\n   lib<name>.so -> lib<name>.so.1\\n\\n where ``lib<name>.so.1`` is the soname of the library and ``lib<name>.so``\\n is a \\\"namelink\\\" allowing linkers to find the library when given\\n ``-l<name>``. The ``NAMELINK_COMPONENT`` option is similar to the\\n ``COMPONENT`` option, but it changes the installation component of a shared\\n library namelink if one is generated. If not specified, this defaults to the\\n value of ``COMPONENT``. It is an error to use this parameter outside of a\\n ``LIBRARY`` block.\\n\\n Consider the following example:\\n\\n .. code-block:: cmake\\n\\n   install(TARGETS mylib\\n           LIBRARY\\n             DESTINATION lib\\n             COMPONENT Libraries\\n             NAMELINK_COMPONENT Development\\n           PUBLIC_HEADER\\n             DESTINATION include\\n             COMPONENT Development\\n          )\\n\\n In this scenario, if you choose to install only the ``Development``\\n component, both the headers and namelink will be installed without the\\n library. (If you don't also install the ``Libraries`` component, the\\n namelink will be a dangling symlink, and projects that link to the library\\n will have build errors.) If you install only the ``Libraries`` component,\\n only the library will be installed, without the headers and namelink.\\n\\n This option is typically used for package managers that have separate\\n runtime and development packages. For example, on Debian systems, the\\n library is expected to be in the runtime package, and the headers and\\n namelink are expected to be in the development package.\\n\\n See the :prop_tgt:`VERSION` and :prop_tgt:`SOVERSION` target properties for\\n details on creating versioned shared libraries.\\n\\n``NAMELINK_ONLY``\\n  This option causes the installation of only the namelink when a library\\n  target is installed. On platforms where versioned shared libraries do not\\n  have namelinks or when a library is not versioned, the ``NAMELINK_ONLY``\\n  option installs nothing. It is an error to use this parameter outside of a\\n  ``LIBRARY`` block.\\n\\n  When ``NAMELINK_ONLY`` is given, either ``NAMELINK_COMPONENT`` or\\n  ``COMPONENT`` may be used to specify the installation component of the\\n  namelink, but ``COMPONENT`` should generally be preferred.\\n\\n``NAMELINK_SKIP``\\n  Similar to ``NAMELINK_ONLY``, but it has the opposite effect: it causes the\\n  installation of library files other than the namelink when a library target\\n  is installed. When neither ``NAMELINK_ONLY`` or ``NAMELINK_SKIP`` are given,\\n  both portions are installed. On platforms where versioned shared libraries\\n  do not have symlinks or when a library is not versioned, ``NAMELINK_SKIP``\\n  installs the library. It is an error to use this parameter outside of a\\n  ``LIBRARY`` block.\\n\\n  If ``NAMELINK_SKIP`` is specified, ``NAMELINK_COMPONENT`` has no effect. It\\n  is not recommended to use ``NAMELINK_SKIP`` in conjunction with\\n  ``NAMELINK_COMPONENT``.\\n\\nThe ``install(TARGETS)`` command can also accept the following options at the\\ntop level:\\n\\n``EXPORT``\\n  This option associates the installed target files with an export called\\n  ``<export-name>``.  It must appear before any target options.  To actually\\n  install the export file itself, call ``install(EXPORT)``, documented below.\\n\\n``INCLUDES DESTINATION``\\n  This option specifies a list of directories which will be added to the\\n  ``INTERFACE_INCLUDE_DIRECTORIES`` target property of the\\n  ``<targets>`` when exported by the ``install(EXPORT)`` command. If a\\n  relative path is specified, it is treated as relative to the\\n  ``$<INSTALL_PREFIX>``.\\n\\nOne or more groups of properties may be specified in a single call to\\nthe ``TARGETS`` form of this command.  A target may be installed more than\\nonce to different locations.  Consider hypothetical targets ``myExe``,\\n``mySharedLib``, and ``myStaticLib``.  The code:\\n\\n install(TARGETS myExe mySharedLib myStaticLib\\n         RUNTIME DESTINATION bin\\n         LIBRARY DESTINATION lib\\n         ARCHIVE DESTINATION lib/static)\\n install(TARGETS mySharedLib DESTINATION /some/full/path)\\n\\nwill install ``myExe`` to ``<prefix>/bin`` and ``myStaticLib`` to\\n``<prefix>/lib/static``.  On non-DLL platforms ``mySharedLib`` will be\\ninstalled to ``<prefix>/lib`` and ``/some/full/path``.  On DLL platforms\\nthe ``mySharedLib`` DLL will be installed to ``<prefix>/bin`` and\\n``/some/full/path`` and its import library will be installed to\\n``<prefix>/lib/static`` and ``/some/full/path``.\\n\\n:ref:`Interface Libraries` may be listed among the targets to install.\\nThey install no artifacts but will be included in an associated ``EXPORT``.\\nIf :ref:`Object Libraries` are listed but given no destination for their\\nobject files, they will be exported as :ref:`Interface Libraries`.\\nThis is sufficient to satisfy transitive usage requirements of other\\ntargets that link to the object libraries in their implementation.\\n\\nInstalling a target with the ``EXCLUDE_FROM_ALL`` target property\\nset to ``TRUE`` has undefined behavior.\\n\\n``install(TARGETS)`` can install targets that were created in\\nother directories.  When using such cross-directory install rules, running\\n``make install`` (or similar) from a subdirectory will not guarantee that\\ntargets from other directories are up-to-date.  You can use\\n``target_link_libraries()`` or ``add_dependencies()``\\nto ensure that such out-of-directory targets are built before the\\nsubdirectory-specific install rules are run.\\n\\nThe install destination given to the target install ``DESTINATION`` may\\nuse \\\"generator expressions\\\" with the syntax ``$<...>``.  See the\\n``cmake-generator-expressions(7)`` manual for available expressions.\\n\\nInstalling Files\\n^^^^^^^^^^^^^^^^\\n\\n::\\n\\n install(<FILES|PROGRAMS> files... DESTINATION <dir>\\n         [PERMISSIONS permissions...]\\n         [CONFIGURATIONS [Debug|Release|...]]\\n         [COMPONENT <component>]\\n         [RENAME <name>] [OPTIONAL] [EXCLUDE_FROM_ALL])\\n\\nThe ``FILES`` form specifies rules for installing files for a project.\\nFile names given as relative paths are interpreted with respect to the\\ncurrent source directory.  Files installed by this form are by default\\ngiven permissions ``OWNER_WRITE``, ``OWNER_READ``, ``GROUP_READ``, and\\n``WORLD_READ`` if no ``PERMISSIONS`` argument is given.\\n\\nThe ``PROGRAMS`` form is identical to the ``FILES`` form except that the\\ndefault permissions for the installed file also include ``OWNER_EXECUTE``,\\n``GROUP_EXECUTE``, and ``WORLD_EXECUTE``.  This form is intended to install\\nprograms that are not targets, such as shell scripts.  Use the ``TARGETS``\\nform to install targets built within the project.\\n\\nThe list of ``files...`` given to ``FILES`` or ``PROGRAMS`` may use\\n\\\"generator expressions\\\" with the syntax ``$<...>``.  See the\\n``cmake-generator-expressions(7)`` manual for available expressions.\\nHowever, if any item begins in a generator expression it must evaluate\\nto a full path.\\n\\nThe install destination given to the files install ``DESTINATION`` may\\nuse \\\"generator expressions\\\" with the syntax ``$<...>``.  See the\\n``cmake-generator-expressions(7)`` manual for available expressions.\\n\\nInstalling Directories\\n^^^^^^^^^^^^^^^^^^^^^^\\n\\n::\\n\\n install(DIRECTORY dirs... DESTINATION <dir>\\n         [FILE_PERMISSIONS permissions...]\\n         [DIRECTORY_PERMISSIONS permissions...]\\n         [USE_SOURCE_PERMISSIONS] [OPTIONAL] [MESSAGE_NEVER]\\n         [CONFIGURATIONS [Debug|Release|...]]\\n         [COMPONENT <component>] [EXCLUDE_FROM_ALL]\\n         [FILES_MATCHING]\\n         [[PATTERN <pattern> | REGEX <regex>]\\n          [EXCLUDE] [PERMISSIONS permissions...]] [...])\\n\\nThe ``DIRECTORY`` form installs contents of one or more directories to a\\ngiven destination.  The directory structure is copied verbatim to the\\ndestination.  The last component of each directory name is appended to\\nthe destination directory but a trailing slash may be used to avoid\\nthis because it leaves the last component empty.  Directory names\\ngiven as relative paths are interpreted with respect to the current\\nsource directory.  If no input directory names are given the\\ndestination directory will be created but nothing will be installed\\ninto it.  The ``FILE_PERMISSIONS`` and ``DIRECTORY_PERMISSIONS`` options\\nspecify permissions given to files and directories in the destination.\\nIf ``USE_SOURCE_PERMISSIONS`` is specified and ``FILE_PERMISSIONS`` is not,\\nfile permissions will be copied from the source directory structure.\\nIf no permissions are specified files will be given the default\\npermissions specified in the ``FILES`` form of the command, and the\\ndirectories will be given the default permissions specified in the\\n``PROGRAMS`` form of the command.\\n\\nThe ``MESSAGE_NEVER`` option disables file installation status output.\\n\\nInstallation of directories may be controlled with fine granularity\\nusing the ``PATTERN`` or ``REGEX`` options.  These \\\"match\\\" options specify a\\nglobbing pattern or regular expression to match directories or files\\nencountered within input directories.  They may be used to apply\\ncertain options (see below) to a subset of the files and directories\\nencountered.  The full path to each input file or directory (with\\nforward slashes) is matched against the expression.  A ``PATTERN`` will\\nmatch only complete file names: the portion of the full path matching\\nthe pattern must occur at the end of the file name and be preceded by\\na slash.  A ``REGEX`` will match any portion of the full path but it may\\nuse ``/`` and ``$`` to simulate the ``PATTERN`` behavior.  By default all\\nfiles and directories are installed whether or not they are matched.\\nThe ``FILES_MATCHING`` option may be given before the first match option\\nto disable installation of files (but not directories) not matched by\\nany expression.  For example, the code\\n\\n install(DIRECTORY src/ DESTINATION include/myproj\\n         FILES_MATCHING PATTERN \\\"*.h\\\")\\n\\nwill extract and install header files from a source tree.\\n\\nSome options may follow a ``PATTERN`` or ``REGEX`` expression and are applied\\nonly to files or directories matching them.  The ``EXCLUDE`` option will\\nskip the matched file or directory.  The ``PERMISSIONS`` option overrides\\nthe permissions setting for the matched file or directory.  For\\nexample the code\\n\\n install(DIRECTORY icons scripts/ DESTINATION share/myproj\\n         PATTERN \\\"CVS\\\" EXCLUDE\\n         PATTERN \\\"scripts/*\\\"\\n         PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ\\n                     GROUP_EXECUTE GROUP_READ)\\n\\nwill install the ``icons`` directory to ``share/myproj/icons`` and the\\n``scripts`` directory to ``share/myproj``.  The icons will get default\\nfile permissions, the scripts will be given specific permissions, and any\\n``CVS`` directories will be excluded.\\n\\nThe list of ``dirs...`` given to ``DIRECTORY`` and the install destination\\ngiven to the directory install ``DESTINATION`` may use \\\"generator expressions\\\"\\nwith the syntax ``$<...>``.  See the ``cmake-generator-expressions(7)``\\nmanual for available expressions.\\n\\nCustom Installation Logic\\n^^^^^^^^^^^^^^^^^^^^^^^^^\\n\\n::\\n\\n install([[SCRIPT <file>] [CODE <code>]]\\n         [COMPONENT <component>] [EXCLUDE_FROM_ALL] [...])\\n\\nThe ``SCRIPT`` form will invoke the given CMake script files during\\ninstallation.  If the script file name is a relative path it will be\\ninterpreted with respect to the current source directory.  The ``CODE``\\nform will invoke the given CMake code during installation.  Code is\\nspecified as a single argument inside a double-quoted string.  For\\nexample, the code\\n\\n install(CODE \\\"MESSAGE(\\\\\\\"Sample install message.\\\\\\\")\\\")\\n\\nwill print a message during installation.\\n\\nInstalling Exports\\n^^^^^^^^^^^^^^^^^^\\n\\n::\\n\\n install(EXPORT <export-name> DESTINATION <dir>\\n         [NAMESPACE <namespace>] [[FILE <name>.cmake]|\\n         [PERMISSIONS permissions...]\\n         [CONFIGURATIONS [Debug|Release|...]]\\n         [EXPORT_LINK_INTERFACE_LIBRARIES]\\n         [COMPONENT <component>]\\n         [EXCLUDE_FROM_ALL])\\n install(EXPORT_ANDROID_MK <export-name> DESTINATION <dir> [...])\\n\\nThe ``EXPORT`` form generates and installs a CMake file containing code to\\nimport targets from the installation tree into another project.\\nTarget installations are associated with the export ``<export-name>``\\nusing the ``EXPORT`` option of the ``install(TARGETS)`` signature\\ndocumented above.  The ``NAMESPACE`` option will prepend ``<namespace>`` to\\nthe target names as they are written to the import file.  By default\\nthe generated file will be called ``<export-name>.cmake`` but the ``FILE``\\noption may be used to specify a different name.  The value given to\\nthe ``FILE`` option must be a file name with the ``.cmake`` extension.\\nIf a ``CONFIGURATIONS`` option is given then the file will only be installed\\nwhen one of the named configurations is installed.  Additionally, the\\ngenerated import file will reference only the matching target\\nconfigurations.  The ``EXPORT_LINK_INTERFACE_LIBRARIES`` keyword, if\\npresent, causes the contents of the properties matching\\n``(IMPORTED_)?LINK_INTERFACE_LIBRARIES(_<CONFIG>)?`` to be exported, when\\npolicy ``CMP0022`` is ``NEW``.\\n\\nWhen a ``COMPONENT`` option is given, the listed ``<component>`` implicitly\\ndepends on all components mentioned in the export set. The exported\\n``<name>.cmake`` file will require each of the exported components to be\\npresent in order for dependent projects to build properly. For example, a\\nproject may define components ``Runtime`` and ``Development``, with shared\\nlibraries going into the ``Runtime`` component and static libraries and\\nheaders going into the ``Development`` component. The export set would also\\ntypically be part of the ``Development`` component, but it would export\\ntargets from both the ``Runtime`` and ``Development`` components. Therefore,\\nthe ``Runtime`` component would need to be installed if the ``Development``\\ncomponent was installed, but not vice versa. If the ``Development`` component\\nwas installed without the ``Runtime`` component, dependent projects that try\\nto link against it would have build errors. Package managers, such as APT and\\nRPM, typically handle this by listing the ``Runtime`` component as a dependency\\nof the ``Development`` component in the package metadata, ensuring that the\\nlibrary is always installed if the headers and CMake export file are present.\\n\\nIn addition to cmake language files, the ``EXPORT_ANDROID_MK`` mode maybe\\nused to specify an export to the android ndk build system.  This mode\\naccepts the same options as the normal export mode.  The Android\\nNDK supports the use of prebuilt libraries, both static and shared. This\\nallows cmake to build the libraries of a project and make them available\\nto an ndk build system complete with transitive dependencies, include flags\\nand defines required to use the libraries.\\n\\nThe ``EXPORT`` form is useful to help outside projects use targets built\\nand installed by the current project.  For example, the code\\n\\n install(TARGETS myexe EXPORT myproj DESTINATION bin)\\n install(EXPORT myproj NAMESPACE mp_ DESTINATION lib/myproj)\\n install(EXPORT_ANDROID_MK myexp DESTINATION share/ndk-modules)\\n\\nwill install the executable myexe to ``<prefix>/bin`` and code to import\\nit in the file ``<prefix>/lib/myproj/myproj.cmake`` and\\n``<prefix>/share/ndk-modules/Android.mk``.  An outside project\\nmay load this file with the include command and reference the ``myexe``\\nexecutable from the installation tree using the imported target name\\n``mp_myexe`` as if the target were built in its own tree.\\n\\n.. note::\\n  This command supercedes the ``install_targets()`` command and\\n  the ``PRE_INSTALL_SCRIPT`` and ``POST_INSTALL_SCRIPT``\\n  target properties.  It also replaces the ``FILES`` forms of the\\n  ``install_files()`` and ``install_programs()`` commands.\\n  The processing order of these install rules relative to\\n  those generated by ``install_targets()``,\\n  ``install_files()``, and ``install_programs()`` commands\\n  is not defined.\\n\\nGenerated Installation Script\\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\\nThe ``install()`` command generates a file, ``cmake_install.cmake``, inside\\nthe build directory, which is used internally by the generated install target\\nand by CPack. You can also invoke this script manually with ``cmake -P``. This\\nscript accepts several variables:\\n\\n``COMPONENT``\\n  Set this variable to install only a single CPack component as opposed to all\\n  of them. For example, if you only want to install the ``Development``\\n  component, run ``cmake -DCOMPONENT=Development -P cmake_install.cmake``.\\n\\n``BUILD_TYPE``\\n  Set this variable to change the build type if you are using a multi-config\\n  generator. For example, to install with the ``Debug`` configuration, run\\n  ``cmake -DBUILD_TYPE=Debug -P cmake_install.cmake``.\\n\\n``DESTDIR``\\n  This is an environment variable rather than a CMake variable. It allows you\\n  to change the installation prefix on UNIX systems. See ``DESTDIR`` for\\n  details.\\n",
        "command"
    ],
    "install_files": [
        "install_files\\n-------------\\n\\nDeprecated.  Use the ``install(FILES)`` command instead.\\n\\nThis command has been superceded by the ``install()`` command.  It is\\nprovided for compatibility with older CMake code.  The ``FILES`` form is\\ndirectly replaced by the ``FILES`` form of the ``install()``\\ncommand.  The regexp form can be expressed more clearly using the ``GLOB``\\nform of the ``file()`` command.\\n\\n::\\n\\n install_files(<dir> extension file file ...)\\n\\nCreate rules to install the listed files with the given extension into\\nthe given directory.  Only files existing in the current source tree\\nor its corresponding location in the binary tree may be listed.  If a\\nfile specified already has an extension, that extension will be\\nremoved first.  This is useful for providing lists of source files\\nsuch as foo.cxx when you want the corresponding foo.h to be installed.\\nA typical extension is '.h'.\\n\\n::\\n\\n install_files(<dir> regexp)\\n\\nAny files in the current source directory that match the regular\\nexpression will be installed.\\n\\n::\\n\\n install_files(<dir> FILES file file ...)\\n\\nAny files listed after the ``FILES`` keyword will be installed explicitly\\nfrom the names given.  Full paths are allowed in this form.\\n\\nThe directory ``<dir>`` is relative to the installation prefix, which is\\nstored in the variable ``CMAKE_INSTALL_PREFIX``.\\n",
        "command"
    ],
    "install_programs": [
        "install_programs\\n----------------\\n\\nDeprecated. Use the ``install(PROGRAMS)`` command instead.\\n\\nThis command has been superceded by the ``install()`` command.  It is\\nprovided for compatibility with older CMake code.  The ``FILES`` form is\\ndirectly replaced by the ``PROGRAMS`` form of the ``install()``\\ncommand.  The regexp form can be expressed more clearly using the ``GLOB``\\nform of the ``file()`` command.\\n\\n::\\n\\n install_programs(<dir> file1 file2 [file3 ...])\\n install_programs(<dir> FILES file1 [file2 ...])\\n\\nCreate rules to install the listed programs into the given directory.\\nUse the ``FILES`` argument to guarantee that the file list version of the\\ncommand will be used even when there is only one argument.\\n\\n::\\n\\n install_programs(<dir> regexp)\\n\\nIn the second form any program in the current source directory that\\nmatches the regular expression will be installed.\\n\\nThis command is intended to install programs that are not built by\\ncmake, such as shell scripts.  See the ``TARGETS`` form of the\\n``install()`` command to create installation rules for targets built\\nby cmake.\\n\\nThe directory ``<dir>`` is relative to the installation prefix, which is\\nstored in the variable ``CMAKE_INSTALL_PREFIX``.\\n",
        "command"
    ],
    "install_targets": [
        "install_targets\\n---------------\\n\\nDeprecated. Use the ``install(TARGETS)`` command instead.\\n\\nThis command has been superceded by the ``install()`` command.  It is\\nprovided for compatibility with older CMake code.\\n\\n::\\n\\n install_targets(<dir> [RUNTIME_DIRECTORY dir] target target)\\n\\nCreate rules to install the listed targets into the given directory.\\nThe directory ``<dir>`` is relative to the installation prefix, which is\\nstored in the variable ``CMAKE_INSTALL_PREFIX``.  If\\n``RUNTIME_DIRECTORY`` is specified, then on systems with special runtime\\nfiles (Windows DLL), the files will be copied to that directory.\\n",
        "command"
    ],
    "link_directories": [
        "link_directories\\n----------------\\n\\nAdd directories in which the linker will look for libraries.\\n\\n::\\n\\n link_directories([AFTER|BEFORE] directory1 [directory2 ...])\\n\\nAdd the paths in which the linker should search for libraries.\\nRelative paths given to this command are interpreted as relative to\\nthe current source directory, see ``CMP0015``.\\n\\nThe directories are added to the ``LINK_DIRECTORIES`` directory\\nproperty for the current ``CMakeLists.txt`` file, converting relative\\npaths to absolute as needed.\\nThe command will apply only to targets created after it is called.\\n\\nBy default the directories specified are appended onto the current list of\\ndirectories.  This default behavior can be changed by setting\\n``CMAKE_LINK_DIRECTORIES_BEFORE`` to ``ON``.  By using\\n``AFTER`` or ``BEFORE`` explicitly, you can select between appending and\\nprepending, independent of the default.\\n\\nArguments to ``link_directories`` may use \\\"generator expressions\\\" with\\nthe syntax \\\"$<...>\\\".  See the ``cmake-generator-expressions(7)``\\nmanual for available expressions.  See the ``cmake-buildsystem(7)``\\nmanual for more on defining buildsystem properties.\\n\\n.. note::\\n\\n  This command is rarely necessary and should be avoided where there are\\n  other choices.  Prefer to pass full absolute paths to libraries where\\n  possible, since this ensures the correct library will always be linked.\\n  The ``find_library()`` command provides the full path, which can\\n  generally be used directly in calls to ``target_link_libraries()``.\\n  Situations where a library search path may be needed include:\\n\\n  - Project generators like Xcode where the user can switch target\\n    architecture at build time, but a full path to a library cannot\\n    be used because it only provides one architecture (i.e. it is not\\n    a universal binary).\\n  - Libraries may themselves have other private library dependencies\\n    that expect to be found via ``RPATH`` mechanisms, but some linkers\\n    are not able to fully decode those paths (e.g. due to the presence\\n    of things like ``$ORIGIN``).\\n\\n  If a library search path must be provided, prefer to localize the effect\\n  where possible by using the ``target_link_directories()`` command\\n  rather than ``link_directories()``.  The target-specific command can also\\n  control how the search directories propagate to other dependent targets.\\n",
        "command"
    ],
    "link_libraries": [
        "link_libraries\\n--------------\\n\\nLink libraries to all targets added later.\\n\\n::\\n\\n link_libraries([item1 [item2 [...]]]\\n                [[debug|optimized|general] <item>] ...)\\n\\nSpecify libraries or flags to use when linking any targets created later in\\nthe current directory or below by commands such as ``add_executable()``\\nor ``add_library()``.  See the ``target_link_libraries()`` command\\nfor meaning of arguments.\\n\\n.. note::\\n  The ``target_link_libraries()`` command should be preferred whenever\\n  possible.  Library dependencies are chained automatically, so directory-wide\\n  specification of link libraries is rarely needed.\\n",
        "command"
    ],
    "list": [
        "list\\n----\\n\\nList operations.\\n\\nSynopsis\\n^^^^^^^^\\n\\n Reading\\n   list(LENGTH <list> <out-var>)\\n   list(GET <list> <element index> [<index> ...] <out-var>)\\n   list(JOIN <list> <glue> <out-var>)\\n   list(SUBLIST <list> <begin> <length> <out-var>)\\n\\n Search\\n   list(FIND <list> <value> <out-var>)\\n\\n Modification\\n   list(APPEND <list> [<element>...])\\n   list(FILTER <list> {INCLUDE | EXCLUDE} REGEX <regex>)\\n   list(INSERT <list> <index> [<element>...])\\n   list(REMOVE_ITEM <list> <value>...)\\n   list(REMOVE_AT <list> <index>...)\\n   list(REMOVE_DUPLICATES <list>)\\n   list(TRANSFORM <list> <ACTION> [...])\\n\\n Ordering\\n   list(REVERSE <list>)\\n   list(SORT <list> [...])\\n\\nIntroduction\\n^^^^^^^^^^^^\\n\\nThe list subcommands ``APPEND``, ``INSERT``, ``FILTER``, ``REMOVE_AT``,\\n``REMOVE_ITEM``, ``REMOVE_DUPLICATES``, ``REVERSE`` and ``SORT`` may create\\nnew values for the list within the current CMake variable scope.  Similar to\\nthe ``set()`` command, the LIST command creates new variable values in\\nthe current scope, even if the list itself is actually defined in a parent\\nscope.  To propagate the results of these operations upwards, use\\n``set()`` with ``PARENT_SCOPE``, ``set()`` with\\n``CACHE INTERNAL``, or some other means of value propagation.\\n\\n.. note::\\n\\n  A list in cmake is a ``;`` separated group of strings.  To create a\\n  list the set command can be used.  For example, ``set(var a b c d e)``\\n  creates a list with ``a;b;c;d;e``, and ``set(var \\\"a b c d e\\\")`` creates a\\n  string or a list with one item in it.   (Note macro arguments are not\\n  variables, and therefore cannot be used in LIST commands.)\\n\\n.. note::\\n\\n  When specifying index values, if ``<element index>`` is 0 or greater, it\\n  is indexed from the beginning of the list, with 0 representing the\\n  first list element.  If ``<element index>`` is -1 or lesser, it is indexed\\n  from the end of the list, with -1 representing the last list element.\\n  Be careful when counting with negative indices: they do not start from\\n  0.  -0 is equivalent to 0, the first list element.\\n\\nReading\\n^^^^^^^\\n\\n::\\n\\n list(LENGTH <list> <output variable>)\\n\\nReturns the list's length.\\n\\n::\\n\\n list(GET <list> <element index> [<element index> ...] <output variable>)\\n\\nReturns the list of elements specified by indices from the list.\\n\\n::\\n\\n list(JOIN <list> <glue> <output variable>)\\n\\nReturns a string joining all list's elements using the glue string.\\nTo join multiple strings, which are not part of a list, use ``JOIN`` operator\\nfrom ``string()`` command.\\n\\n::\\n\\n list(SUBLIST <list> <begin> <length> <output variable>)\\n\\nReturns a sublist of the given list.\\nIf ``<length>`` is 0, an empty list will be returned.\\nIf ``<length>`` is -1 or the list is smaller than ``<begin>+<length>`` then\\nthe remaining elements of the list starting at ``<begin>`` will be returned.\\n\\nSearch\\n^^^^^^\\n\\n::\\n\\n list(FIND <list> <value> <output variable>)\\n\\nReturns the index of the element specified in the list or -1\\nif it wasn't found.\\n\\nModification\\n^^^^^^^^^^^^\\n\\n::\\n\\n list(APPEND <list> [<element> ...])\\n\\nAppends elements to the list.\\n\\n::\\n\\n list(FILTER <list> <INCLUDE|EXCLUDE> REGEX <regular_expression>)\\n\\nIncludes or removes items from the list that match the mode's pattern.\\nIn ``REGEX`` mode, items will be matched against the given regular expression.\\n\\nFor more information on regular expressions see also the\\n``string()`` command.\\n\\n::\\n\\n list(INSERT <list> <element_index> <element> [<element> ...])\\n\\nInserts elements to the list to the specified location.\\n\\n::\\n\\n list(REMOVE_ITEM <list> <value> [<value> ...])\\n\\nRemoves the given items from the list.\\n\\n::\\n\\n list(REMOVE_AT <list> <index> [<index> ...])\\n\\nRemoves items at given indices from the list.\\n\\n::\\n\\n list(REMOVE_DUPLICATES <list>)\\n\\nRemoves duplicated items in the list.\\n\\n::\\n\\n list(TRANSFORM <list> <ACTION> [<SELECTOR>]\\n                       [OUTPUT_VARIABLE <output variable>])\\n\\nTransforms the list by applying an action to all or, by specifying a\\n``<SELECTOR>``, to the selected elements of the list, storing result in-place\\nor in the specified output variable.\\n\\n.. note::\\n\\n   ``TRANSFORM`` sub-command does not change the number of elements of the\\n   list. If a ``<SELECTOR>`` is specified, only some elements will be changed,\\n   the other ones will remain same as before the transformation.\\n\\n``<ACTION>`` specify the action to apply to the elements of list.\\nThe actions have exactly the same semantics as sub-commands of\\n``string()`` command.\\n\\nThe ``<ACTION>`` may be one of:\\n\\n``APPEND``, ``PREPEND``: Append, prepend specified value to each element of\\nthe list. ::\\n\\n list(TRANSFORM <list> <APPEND|PREPEND> <value> ...)\\n\\n``TOUPPER``, ``TOLOWER``: Convert each element of the list to upper, lower\\ncharacters. ::\\n\\n list(TRANSFORM <list> <TOLOWER|TOUPPER> ...)\\n\\n``STRIP``: Remove leading and trailing spaces from each element of the\\nlist. ::\\n\\n list(TRANSFORM <list> STRIP ...)\\n\\n``GENEX_STRIP``: Strip any\\n``generator expressions`` from each\\nelement of the list. ::\\n\\n list(TRANSFORM <list> GENEX_STRIP ...)\\n\\n``REPLACE``: Match the regular expression as many times as possible and\\nsubstitute the replacement expression for the match for each element\\nof the list\\n(Same semantic as ``REGEX REPLACE`` from ``string()`` command). ::\\n\\n list(TRANSFORM <list> REPLACE <regular_expression>\\n                               <replace_expression> ...)\\n\\n``<SELECTOR>`` select which elements of the list will be transformed. Only one\\ntype of selector can be specified at a time.\\n\\nThe ``<SELECTOR>`` may be one of:\\n\\n``AT``: Specify a list of indexes. ::\\n\\n list(TRANSFORM <list> <ACTION> AT <index> [<index> ...] ...)\\n\\n``FOR``: Specify a range with, optionally, an increment used to iterate over\\nthe range. ::\\n\\n list(TRANSFORM <list> <ACTION> FOR <start> <stop> [<step>] ...)\\n\\n``REGEX``: Specify a regular expression. Only elements matching the regular\\nexpression will be transformed. ::\\n\\n list(TRANSFORM <list> <ACTION> REGEX <regular_expression> ...)\\n\\nOrdering\\n^^^^^^^^\\n\\n::\\n\\n list(REVERSE <list>)\\n\\nReverses the contents of the list in-place.\\n\\n::\\n\\n list(SORT <list> [COMPARE <compare>] [CASE <case>] [ORDER <order>])\\n\\nSorts the list in-place alphabetically.\\nUse the ``COMPARE`` keyword to select the comparison method for sorting.\\nThe ``<compare>`` option should be one of:\\n\\n* ``STRING``: Sorts a list of strings alphabetically.  This is the\\n  default behavior if the ``COMPARE`` option is not given.\\n* ``FILE_BASENAME``: Sorts a list of pathnames of files by their basenames.\\n\\nUse the ``CASE`` keyword to select a case sensitive or case insensitive\\nsort mode.  The ``<case>`` option should be one of:\\n\\n* ``SENSITIVE``: List items are sorted in a case-sensitive manner.  This is\\n  the default behavior if the ``CASE`` option is not given.\\n* ``INSENSITIVE``: List items are sorted case insensitively.  The order of\\n  items which differ only by upper/lowercase is not specified.\\n\\nTo control the sort order, the ``ORDER`` keyword can be given.\\nThe ``<order>`` option should be one of:\\n\\n* ``ASCENDING``: Sorts the list in ascending order.  This is the default\\n  behavior when the ``ORDER`` option is not given.\\n* ``DESCENDING``: Sorts the list in descending order.\\n",
        "command"
    ],
    "load_cache": [
        "load_cache\\n----------\\n\\nLoad in the values from another project's CMake cache.\\n\\n::\\n\\n load_cache(pathToCacheFile READ_WITH_PREFIX\\n            prefix entry1...)\\n\\nRead the cache and store the requested entries in variables with their\\nname prefixed with the given prefix.  This only reads the values, and\\ndoes not create entries in the local project's cache.\\n\\n::\\n\\n load_cache(pathToCacheFile [EXCLUDE entry1...]\\n            [INCLUDE_INTERNALS entry1...])\\n\\nLoad in the values from another cache and store them in the local\\nproject's cache as internal entries.  This is useful for a project\\nthat depends on another project built in a different tree.  ``EXCLUDE``\\noption can be used to provide a list of entries to be excluded.\\n``INCLUDE_INTERNALS`` can be used to provide a list of internal entries to\\nbe included.  Normally, no internal entries are brought in.  Use of\\nthis form of the command is strongly discouraged, but it is provided\\nfor backward compatibility.\\n",
        "command"
    ],
    "load_command": [
        "load_command\\n------------\\n\\nDisallowed.  See CMake Policy ``CMP0031``.\\n\\nLoad a command into a running CMake.\\n\\n::\\n\\n load_command(COMMAND_NAME <loc1> [loc2 ...])\\n\\nThe given locations are searched for a library whose name is\\ncmCOMMAND_NAME.  If found, it is loaded as a module and the command is\\nadded to the set of available CMake commands.  Usually,\\n``try_compile()`` is used before this command to compile the\\nmodule.  If the command is successfully loaded a variable named\\n\\n::\\n\\n CMAKE_LOADED_COMMAND_<COMMAND_NAME>\\n\\nwill be set to the full path of the module that was loaded.  Otherwise\\nthe variable will not be set.\\n",
        "command"
    ],
    "macro": [
        "macro\\n-----\\n\\nStart recording a macro for later invocation as a command::\\n\\n macro(<name> [arg1 [arg2 [arg3 ...]]])\\n   COMMAND1(ARGS ...)\\n   COMMAND2(ARGS ...)\\n   ...\\n endmacro(<name>)\\n\\nDefine a macro named ``<name>`` that takes arguments named ``arg1``,\\n``arg2``, ``arg3``, (...).\\nCommands listed after macro, but before the matching\\n``endmacro()``, are not invoked until the macro is invoked.\\nWhen it is invoked, the commands recorded in the macro are first\\nmodified by replacing formal parameters (``${arg1}``) with the arguments\\npassed, and then invoked as normal commands.\\nIn addition to referencing the formal parameters you can reference the\\nvalues ``${ARGC}`` which will be set to the number of arguments passed\\ninto the function as well as ``${ARGV0}``, ``${ARGV1}``, ``${ARGV2}``,\\n...  which will have the actual values of the arguments passed in.\\nThis facilitates creating macros with optional arguments.\\nAdditionally ``${ARGV}`` holds the list of all arguments given to the\\nmacro and ``${ARGN}`` holds the list of arguments past the last expected\\nargument.\\nReferencing to ``${ARGV#}`` arguments beyond ``${ARGC}`` have undefined\\nbehavior. Checking that ``${ARGC}`` is greater than ``#`` is the only\\nway to ensure that ``${ARGV#}`` was passed to the function as an extra\\nargument.\\n\\nSee the ``cmake_policy()`` command documentation for the behavior\\nof policies inside macros.\\n\\nMacro Argument Caveats\\n^^^^^^^^^^^^^^^^^^^^^^\\n\\nNote that the parameters to a macro and values such as ``ARGN`` are\\nnot variables in the usual CMake sense.  They are string\\nreplacements much like the C preprocessor would do with a macro.\\nTherefore you will NOT be able to use commands like::\\n\\n if(ARGV1) # ARGV1 is not a variable\\n if(DEFINED ARGV2) # ARGV2 is not a variable\\n if(ARGC GREATER 2) # ARGC is not a variable\\n foreach(loop_var IN LISTS ARGN) # ARGN is not a variable\\n\\nIn the first case, you can use ``if(${ARGV1})``.\\nIn the second and third case, the proper way to check if an optional\\nvariable was passed to the macro is to use ``if(${ARGC} GREATER 2)``.\\nIn the last case, you can use ``foreach(loop_var ${ARGN})`` but this\\nwill skip empty arguments.\\nIf you need to include them, you can use::\\n\\n set(list_var \\\"${ARGN}\\\")\\n foreach(loop_var IN LISTS list_var)\\n\\nNote that if you have a variable with the same name in the scope from\\nwhich the macro is called, using unreferenced names will use the\\nexisting variable instead of the arguments. For example::\\n\\n macro(_BAR)\\n   foreach(arg IN LISTS ARGN)\\n     [...]\\n   endforeach()\\n endmacro()\\n\\n function(_FOO)\\n   _bar(x y z)\\n endfunction()\\n\\n _foo(a b c)\\n\\nWill loop over ``a;b;c`` and not over ``x;y;z`` as one might be expecting.\\nIf you want true CMake variables and/or better CMake scope control you\\nshould look at the function command.\\n",
        "command"
    ],
    "make_directory": [
        "make_directory\\n--------------\\n\\nDeprecated. Use the ``file(MAKE_DIRECTORY)`` command instead.\\n\\n::\\n\\n make_directory(directory)\\n\\nCreates the specified directory.  Full paths should be given.  Any\\nparent directories that do not exist will also be created.  Use with\\ncare.\\n",
        "command"
    ],
    "mark_as_advanced": [
        "mark_as_advanced\\n----------------\\n\\nMark cmake cached variables as advanced.\\n\\n::\\n\\n mark_as_advanced([CLEAR|FORCE] VAR [VAR2 ...])\\n\\nMark the named cached variables as advanced.  An advanced variable\\nwill not be displayed in any of the cmake GUIs unless the show\\nadvanced option is on.  If ``CLEAR`` is the first argument advanced\\nvariables are changed back to unadvanced.  If ``FORCE`` is the first\\nargument, then the variable is made advanced.  If neither ``FORCE`` nor\\n``CLEAR`` is specified, new values will be marked as advanced, but if the\\nvariable already has an advanced/non-advanced state, it will not be\\nchanged.\\n\\nIt does nothing in script mode.\\n",
        "command"
    ],
    "math": [
        "math\\n----\\n\\nMathematical expressions.\\n\\n::\\n\\n math(EXPR <output-variable> <math-expression> [OUTPUT_FORMAT <format>])\\n\\n``EXPR`` evaluates mathematical expression and returns result in the\\noutput variable.  Example mathematical expression is ``5 * (10 + 13)``.\\nSupported operators are ``+``, ``-``, ``*``, ``/``, ``%``, ``|``, ``&``,\\n``^``, ``~``, ``<<``, ``>>``, and ``(...)``.  They have the same meaning\\nas they do in C code.\\n\\nNumeric constants are evaluated in decimal or hexadecimal representation.\\n\\nThe result is formatted according to the option \\\"OUTPUT_FORMAT\\\" ,\\nwhere ``<format>`` is one of:\\n::\\n\\n HEXADECIMAL = Result in output variable will be formatted in C code\\n Hexadecimal notation.\\n DECIMAL = Result in output variable will be formatted in decimal notation.\\n\\nFor example::\\n\\n math(EXPR value \\\"100 * 0xA\\\" DECIMAL)  results in value is set to \\\"1000\\\"\\n math(EXPR value \\\"100 * 0xA\\\" HEXADECIMAL)  results in value is set to \\\"0x3e8\\\"\\n",
        "command"
    ],
    "message": [
        "message\\n-------\\n\\nDisplay a message to the user.\\n\\n::\\n\\n message([<mode>] \\\"message to display\\\" ...)\\n\\nThe optional ``<mode>`` keyword determines the type of message:\\n\\n::\\n\\n (none)         = Important information\\n STATUS         = Incidental information\\n WARNING        = CMake Warning, continue processing\\n AUTHOR_WARNING = CMake Warning (dev), continue processing\\n SEND_ERROR     = CMake Error, continue processing,\\n                               but skip generation\\n FATAL_ERROR    = CMake Error, stop processing and generation\\n DEPRECATION    = CMake Deprecation Error or Warning if variable\\n                  CMAKE_ERROR_DEPRECATED or CMAKE_WARN_DEPRECATED\\n                  is enabled, respectively, else no message.\\n\\nThe CMake command-line tool displays STATUS messages on stdout and all\\nother message types on stderr.  The CMake GUI displays all messages in\\nits log area.  The interactive dialogs (ccmake and CMakeSetup) show\\nSTATUS messages one at a time on a status line and other messages in\\ninteractive pop-up boxes.\\n\\nCMake Warning and Error message text displays using a simple markup\\nlanguage.  Non-indented text is formatted in line-wrapped paragraphs\\ndelimited by newlines.  Indented text is considered pre-formatted.\\n",
        "command"
    ],
    "option": [
        "option\\n------\\n\\nProvides an option that the user can optionally select.\\n\\n::\\n\\n option(<option_variable> \\\"help string describing option\\\"\\n        [initial value])\\n\\nProvide an option for the user to select as ``ON`` or ``OFF``.  If no\\ninitial value is provided, ``OFF`` is used.  If the option is already\\nset as a normal variable then the command does nothing\\n(see policy ``CMP0077``).\\n\\nIf you have options that depend on the values of other options, see\\nthe module help for ``CMakeDependentOption``.\\n",
        "command"
    ],
    "output_required_files": [
        "output_required_files\\n---------------------\\n\\nDisallowed.  See CMake Policy ``CMP0032``.\\n\\nApproximate C preprocessor dependency scanning.\\n\\nThis command exists only because ancient CMake versions provided it.\\nCMake handles preprocessor dependency scanning automatically using a\\nmore advanced scanner.\\n\\n::\\n\\n output_required_files(srcfile outputfile)\\n\\nOutputs a list of all the source files that are required by the\\nspecified srcfile.  This list is written into outputfile.  This is\\nsimilar to writing out the dependencies for srcfile except that it\\njumps from .h files into .cxx, .c and .cpp files if possible.\\n",
        "command"
    ],
    "project": [
        "project\\n-------\\n\\nSets project details such as name, version, etc. and enables languages.\\n\\n project(<PROJECT-NAME> [LANGUAGES] [<language-name>...])\\n project(<PROJECT-NAME>\\n         [VERSION <major>[.<minor>[.<patch>[.<tweak>]]]]\\n         [DESCRIPTION <project-description-string>]\\n         [HOMEPAGE_URL <url-string>]\\n         [LANGUAGES <language-name>...])\\n\\nSets the name of the project and stores the name in the\\n``PROJECT_NAME`` variable.  Additionally this sets variables\\n\\n* ``PROJECT_SOURCE_DIR``,\\n  ``<PROJECT-NAME>_SOURCE_DIR``\\n* ``PROJECT_BINARY_DIR``,\\n  ``<PROJECT-NAME>_BINARY_DIR``\\n\\nIf ``VERSION`` is specified, given components must be non-negative integers.\\nIf ``VERSION`` is not specified, the default version is the empty string.\\nThe ``VERSION`` option may not be used unless policy ``CMP0048`` is\\nset to ``NEW``.\\n\\nThe ``project()`` command stores the version number and its components\\nin variables\\n\\n* ``PROJECT_VERSION``,\\n  ``<PROJECT-NAME>_VERSION``\\n* ``PROJECT_VERSION_MAJOR``,\\n  ``<PROJECT-NAME>_VERSION_MAJOR``\\n* ``PROJECT_VERSION_MINOR``,\\n  ``<PROJECT-NAME>_VERSION_MINOR``\\n* ``PROJECT_VERSION_PATCH``,\\n  ``<PROJECT-NAME>_VERSION_PATCH``\\n* ``PROJECT_VERSION_TWEAK``,\\n  ``<PROJECT-NAME>_VERSION_TWEAK``\\n\\nVariables corresponding to unspecified versions are set to the empty string\\n(if policy ``CMP0048`` is set to ``NEW``).\\n\\nIf the optional ``DESCRIPTION`` is given, then ``PROJECT_DESCRIPTION``\\nand ``<PROJECT-NAME>_DESCRIPTION`` will be set to its argument.\\nThese variables will be cleared if ``DESCRIPTION`` is not given.\\nThe description is expected to be a relatively short string, usually no more\\nthan a few words.\\n\\nThe optional ``HOMEPAGE_URL`` sets the analogous variables\\n``PROJECT_HOMEPAGE_URL`` and ``<PROJECT-NAME>_HOMEPAGE_URL``.\\nWhen this option is given, the URL provided should be the canonical home for\\nthe project.\\nThese variables will be cleared if ``HOMEPAGE_URL`` is not given.\\n\\nNote that the description and homepage URL may be used as defaults for\\nthings like packaging meta-data, documentation, etc.\\n\\nOptionally you can specify which languages your project supports.\\nExample languages include ``C``, ``CXX`` (i.e.  C++), ``CUDA``,\\n``Fortran``, and ``ASM``.\\nBy default ``C`` and ``CXX`` are enabled if no language options are\\ngiven.  Specify language ``NONE``, or use the ``LANGUAGES`` keyword\\nand list no languages, to skip enabling any languages.\\n\\nIf enabling ``ASM``, list it last so that CMake can check whether\\ncompilers for other languages like ``C`` work for assembly too.\\n\\nIf a variable exists called ``CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE``,\\nthe file pointed to by that variable will be included as the last step of the\\nproject command.\\n\\nThe top-level ``CMakeLists.txt`` file for a project must contain a\\nliteral, direct call to the ``project()`` command; loading one\\nthrough the ``include()`` command is not sufficient.  If no such\\ncall exists CMake will implicitly add one to the top that enables the\\ndefault languages (``C`` and ``CXX``).  The name of the project set in\\nthe top level ``CMakeLists.txt`` file is available from the\\n``CMAKE_PROJECT_NAME`` variable, its description from\\n``CMAKE_PROJECT_DESCRIPTION``, its homepage URL from\\n``CMAKE_PROJECT_HOMEPAGE_URL`` and its version from\\n``CMAKE_PROJECT_VERSION``.\\n\\n.. note::\\n  Call the ``cmake_minimum_required()`` command at the beginning\\n  of the top-level ``CMakeLists.txt`` file even before calling the\\n  ``project()`` command.  It is important to establish version and\\n  policy settings before invoking other commands whose behavior they\\n  may affect.  See also policy ``CMP0000``.\\n",
        "command"
    ],
    "qt_wrap_cpp": [
        "qt_wrap_cpp\\n-----------\\n\\nCreate Qt Wrappers.\\n\\n::\\n\\n qt_wrap_cpp(resultingLibraryName DestName\\n             SourceLists ...)\\n\\nProduce moc files for all the .h files listed in the SourceLists.  The\\nmoc files will be added to the library using the ``DestName`` source list.\\n",
        "command"
    ],
    "qt_wrap_ui": [
        "qt_wrap_ui\\n----------\\n\\nCreate Qt user interfaces Wrappers.\\n\\n::\\n\\n qt_wrap_ui(resultingLibraryName HeadersDestName\\n            SourcesDestName SourceLists ...)\\n\\nProduce .h and .cxx files for all the .ui files listed in the\\n``SourceLists``.  The .h files will be added to the library using the\\n``HeadersDestNamesource`` list.  The .cxx files will be added to the\\nlibrary using the ``SourcesDestNamesource`` list.\\n",
        "command"
    ],
    "remove": [
        "remove\\n------\\n\\nDeprecated. Use the ``list(REMOVE_ITEM)`` command instead.\\n\\n::\\n\\n remove(VAR VALUE VALUE ...)\\n\\nRemoves ``VALUE`` from the variable ``VAR``.  This is typically used to\\nremove entries from a vector (e.g.  semicolon separated list).  ``VALUE``\\nis expanded.\\n",
        "command"
    ],
    "remove_definitions": [
        "remove_definitions\\n------------------\\n\\nRemoves -D define flags added by ``add_definitions()``.\\n\\n::\\n\\n remove_definitions(-DFOO -DBAR ...)\\n\\nRemoves flags (added by ``add_definitions()``) from the compiler\\ncommand line for sources in the current directory and below.\\n",
        "command"
    ],
    "return": [
        "return\\n------\\n\\nReturn from a file, directory or function.\\n\\n::\\n\\n return()\\n\\nReturns from a file, directory or function.  When this command is\\nencountered in an included file (via ``include()`` or\\n``find_package()``), it causes processing of the current file to stop\\nand control is returned to the including file.  If it is encountered in a\\nfile which is not included by another file, e.g.  a ``CMakeLists.txt``,\\ncontrol is returned to the parent directory if there is one.  If return is\\ncalled in a function, control is returned to the caller of the function.\\nNote that a macro is not a function and does not handle return like a\\nfunction does.\\n",
        "command"
    ],
    "separate_arguments": [
        "separate_arguments\\n------------------\\n\\nParse space-separated arguments into a semicolon-separated list.\\n\\n::\\n\\n separate_arguments(<var> <NATIVE|UNIX|WINDOWS>_COMMAND \\\"<args>\\\")\\n\\nParses a UNIX- or Windows-style command-line string \\\"<args>\\\" and\\nstores a semicolon-separated list of the arguments in ``<var>``.  The\\nentire command line must be given in one \\\"<args>\\\" argument.\\n\\nThe ``UNIX_COMMAND`` mode separates arguments by unquoted whitespace.  It\\nrecognizes both single-quote and double-quote pairs.  A backslash\\nescapes the next literal character (``\\\\\\\"`` is ``\\\"``); there are no special\\nescapes (``\\\\n`` is just ``n``).\\n\\nThe ``WINDOWS_COMMAND`` mode parses a Windows command-line using the same\\nsyntax the runtime library uses to construct argv at startup.  It\\nseparates arguments by whitespace that is not double-quoted.\\nBackslashes are literal unless they precede double-quotes.  See the\\nMSDN article Parsing C Command-Line Arguments for details.\\n\\nThe ``NATIVE_COMMAND`` mode parses a Windows command-line if the host\\nsystem is Windows, and a UNIX command-line otherwise.\\n\\n::\\n\\n separate_arguments(<var>)\\n\\nConvert the value of ``<var>`` to a semi-colon separated list.  All\\nspaces are replaced with ';'.  This helps with generating command\\nlines.\\n",
        "command"
    ],
    "set": [
        "set\\n---\\n\\nSet a normal, cache, or environment variable to a given value.\\nSee the :ref:`cmake-language(7) variables <CMake Language Variables>`\\ndocumentation for the scopes and interaction of normal variables\\nand cache entries.\\n\\nSignatures of this command that specify a ``<value>...`` placeholder\\nexpect zero or more arguments.  Multiple arguments will be joined as\\na :ref:`;-list <CMake Language Lists>` to form the actual variable\\nvalue to be set.  Zero arguments will cause normal variables to be\\nunset.  See the ``unset()`` command to unset variables explicitly.\\n\\nSet Normal Variable\\n^^^^^^^^^^^^^^^^^^^\\n\\n::\\n\\n set(<variable> <value>... [PARENT_SCOPE])\\n\\nSet the given ``<variable>`` in the current function or directory scope.\\n\\nIf the ``PARENT_SCOPE`` option is given the variable will be set in\\nthe scope above the current scope.  Each new directory or function\\ncreates a new scope.  This command will set the value of a variable\\ninto the parent directory or calling function (whichever is applicable\\nto the case at hand). The previous state of the variable's value stays the\\nsame in the current scope (e.g., if it was undefined before, it is still\\nundefined and if it had a value, it is still that value).\\n\\nSet Cache Entry\\n^^^^^^^^^^^^^^^\\n\\n::\\n\\n set(<variable> <value>... CACHE <type> <docstring> [FORCE])\\n\\nSet the given cache ``<variable>`` (cache entry).  Since cache entries\\nare meant to provide user-settable values this does not overwrite\\nexisting cache entries by default.  Use the ``FORCE`` option to\\noverwrite existing entries.\\n\\nThe ``<type>`` must be specified as one of:\\n\\n``BOOL``\\n  Boolean ``ON/OFF`` value.  ``cmake-gui(1)`` offers a checkbox.\\n\\n``FILEPATH``\\n  Path to a file on disk.  ``cmake-gui(1)`` offers a file dialog.\\n\\n``PATH``\\n  Path to a directory on disk.  ``cmake-gui(1)`` offers a file dialog.\\n\\n``STRING``\\n  A line of text.  ``cmake-gui(1)`` offers a text field or a\\n  drop-down selection if the ``STRINGS`` cache entry\\n  property is set.\\n\\n``INTERNAL``\\n  A line of text.  ``cmake-gui(1)`` does not show internal entries.\\n  They may be used to store variables persistently across runs.\\n  Use of this type implies ``FORCE``.\\n\\nThe ``<docstring>`` must be specified as a line of text providing\\na quick summary of the option for presentation to ``cmake-gui(1)``\\nusers.\\n\\nIf the cache entry does not exist prior to the call or the ``FORCE``\\noption is given then the cache entry will be set to the given value.\\nFurthermore, any normal variable binding in the current scope will\\nbe removed to expose the newly cached value to any immediately\\nfollowing evaluation.\\n\\nIt is possible for the cache entry to exist prior to the call but\\nhave no type set if it was created on the ``cmake(1)`` command\\nline by a user through the ``-D<var>=<value>`` option without\\nspecifying a type.  In this case the ``set`` command will add the\\ntype.  Furthermore, if the ``<type>`` is ``PATH`` or ``FILEPATH``\\nand the ``<value>`` provided on the command line is a relative path,\\nthen the ``set`` command will treat the path as relative to the\\ncurrent working directory and convert it to an absolute path.\\n\\nSet Environment Variable\\n^^^^^^^^^^^^^^^^^^^^^^^^\\n\\n::\\n\\n set(ENV{<variable>} <value>...)\\n\\nSet the current process environment ``<variable>`` to the given value.\\n",
        "command"
    ],
    "set_directory_properties": [
        "set_directory_properties\\n------------------------\\n\\nSet properties of the current directory and subdirectories in key-value pairs.\\n\\n::\\n\\n set_directory_properties(PROPERTIES prop1 value1 prop2 value2)\\n\\nSee :ref:`Directory Properties` for the list of properties known to CMake\\nand their individual documentation for the behavior of each property.\\n",
        "command"
    ],
    "set_property": [
        "set_property\\n------------\\n\\nSet a named property in a given scope.\\n\\n::\\n\\n set_property(<GLOBAL                            |\\n               DIRECTORY [dir]                   |\\n               TARGET    [target1 [target2 ...]] |\\n               SOURCE    [src1 [src2 ...]]       |\\n               INSTALL   [file1 [file2 ...]]     |\\n               TEST      [test1 [test2 ...]]     |\\n               CACHE     [entry1 [entry2 ...]]>\\n              [APPEND] [APPEND_STRING]\\n              PROPERTY <name> [value1 [value2 ...]])\\n\\nSet one property on zero or more objects of a scope.  The first\\nargument determines the scope in which the property is set.  It must\\nbe one of the following:\\n\\n``GLOBAL``\\n  Scope is unique and does not accept a name.\\n\\n``DIRECTORY``\\n  Scope defaults to the current directory but another\\n  directory (already processed by CMake) may be named by full or\\n  relative path.\\n\\n``TARGET``\\n  Scope may name zero or more existing targets.\\n\\n``SOURCE``\\n  Scope may name zero or more source files.  Note that source\\n  file properties are visible only to targets added in the same\\n  directory (CMakeLists.txt).\\n\\n``INSTALL``\\n  Scope may name zero or more installed file paths.\\n  These are made available to CPack to influence deployment.\\n\\n  Both the property key and value may use generator expressions.\\n  Specific properties may apply to installed files and/or directories.\\n\\n  Path components have to be separated by forward slashes,\\n  must be normalized and are case sensitive.\\n\\n  To reference the installation prefix itself with a relative path use \\\".\\\".\\n\\n  Currently installed file properties are only defined for\\n  the WIX generator where the given paths are relative\\n  to the installation prefix.\\n\\n``TEST``\\n  Scope may name zero or more existing tests.\\n\\n``CACHE``\\n  Scope must name zero or more cache existing entries.\\n\\nThe required ``PROPERTY`` option is immediately followed by the name of\\nthe property to set.  Remaining arguments are used to compose the\\nproperty value in the form of a semicolon-separated list.\\n\\nIf the ``APPEND`` option is given the list is appended to any existing\\nproperty value.  If the ``APPEND_STRING`` option is given the string is\\nappended to any existing property value as string, i.e. it results in a\\nlonger string and not a list of strings.  When using ``APPEND`` or\\n``APPEND_STRING`` with a property defined to support ``INHERITED``\\nbehavior (see ``define_property()``), no inheriting occurs when\\nfinding the initial value to append to.  If the property is not already\\ndirectly set in the nominated scope, the command will behave as though\\n``APPEND`` or ``APPEND_STRING`` had not been given.\\n\\nSee the ``cmake-properties(7)`` manual for a list of properties\\nin each scope.\\n",
        "command"
    ],
    "set_source_files_properties": [
        "set_source_files_properties\\n---------------------------\\n\\nSource files can have properties that affect how they are built.\\n\\n::\\n\\n set_source_files_properties([file1 [file2 [...]]]\\n                             PROPERTIES prop1 value1\\n                             [prop2 value2 [...]])\\n\\nSet properties associated with source files using a key/value paired\\nlist.  See :ref:`Source File Properties` for the list of properties known\\nto CMake.  Source file properties are visible only to targets added\\nin the same directory (CMakeLists.txt).\\n",
        "command"
    ],
    "set_target_properties": [
        "set_target_properties\\n---------------------\\n\\nTargets can have properties that affect how they are built.\\n\\n::\\n\\n set_target_properties(target1 target2 ...\\n                       PROPERTIES prop1 value1\\n                       prop2 value2 ...)\\n\\nSet properties on targets.  The syntax for the command is to list all\\nthe targets you want to change, and then provide the values you want to\\nset next.  You can use any prop value pair you want and extract it\\nlater with the ``get_property()`` or ``get_target_property()``\\ncommand.\\n\\nSee also the ``set_property(TARGET)`` command.\\n\\nSee :ref:`Target Properties` for the list of properties known to CMake.\\n",
        "command"
    ],
    "set_tests_properties": [
        "set_tests_properties\\n--------------------\\n\\nSet a property of the tests.\\n\\n::\\n\\n set_tests_properties(test1 [test2...] PROPERTIES prop1 value1 prop2 value2)\\n\\nSet a property for the tests.  If the test is not found, CMake\\nwill report an error.\\n``Generator expressions`` will be\\nexpanded the same as supported by the test's ``add_test()`` call.  See\\n:ref:`Test Properties` for the list of properties known to CMake.\\n",
        "command"
    ],
    "site_name": [
        "site_name\\n---------\\n\\nSet the given variable to the name of the computer.\\n\\n::\\n\\n site_name(variable)\\n",
        "command"
    ],
    "source_group": [
        "source_group\\n------------\\n\\nDefine a grouping for source files in IDE project generation.\\nThere are two different signatures to create source groups.\\n\\n::\\n\\n source_group(<name> [FILES <src>...] [REGULAR_EXPRESSION <regex>])\\n source_group(TREE <root> [PREFIX <prefix>] [FILES <src>...])\\n\\nDefines a group into which sources will be placed in project files.\\nThis is intended to set up file tabs in Visual Studio.\\nThe options are:\\n\\n``TREE``\\n CMake will automatically detect, from ``<src>`` files paths, source groups\\n it needs to create, to keep structure of source groups analogically to the\\n actual files and directories structure in the project. Paths of ``<src>``\\n files will be cut to be relative to ``<root>``.\\n\\n``PREFIX``\\n Source group and files located directly in ``<root>`` path, will be placed\\n in ``<prefix>`` source groups.\\n\\n``FILES``\\n Any source file specified explicitly will be placed in group\\n ``<name>``.  Relative paths are interpreted with respect to the\\n current source directory.\\n\\n``REGULAR_EXPRESSION``\\n Any source file whose name matches the regular expression will\\n be placed in group ``<name>``.\\n\\nIf a source file matches multiple groups, the *last* group that\\nexplicitly lists the file with ``FILES`` will be favored, if any.\\nIf no group explicitly lists the file, the *last* group whose\\nregular expression matches the file will be favored.\\n\\nThe ``<name>`` of the group and ``<prefix>`` argument may contain backslashes\\nto specify subgroups:\\n\\n source_group(outer\\\\\\\\inner ...)\\n source_group(TREE <root> PREFIX sources\\\\\\\\inc ...)\\n\\nFor backwards compatibility, the short-hand signature\\n\\n source_group(<name> <regex>)\\n\\nis equivalent to\\n\\n source_group(<name> REGULAR_EXPRESSION <regex>)\\n",
        "command"
    ],
    "string": [
        "string\\n------\\n\\nString operations.\\n\\nSynopsis\\n^^^^^^^^\\n\\n Search and Replace\\n   string(FIND <string> <substring> <out-var> [...])\\n   string(REPLACE <match-string> <replace-string> <out-var> <input>...)\\n\\n Regular Expressions\\n   string(REGEX MATCH <match-regex> <out-var> <input>...)\\n   string(REGEX MATCHALL <match-regex> <out-var> <input>...)\\n   string(REGEX REPLACE <match-regex> <replace-expr> <out-var> <input>...)\\n\\n Manipulation\\n   string(APPEND <string-var> [<input>...])\\n   string(PREPEND <string-var> [<input>...])\\n   string(CONCAT <out-var> [<input>...])\\n   string(JOIN <glue> <out-var> [<input>...])\\n   string(TOLOWER <string1> <out-var>)\\n   string(TOUPPER <string1> <out-var>)\\n   string(LENGTH <string> <out-var>)\\n   string(SUBSTRING <string> <begin> <length> <out-var>)\\n   string(STRIP <string> <out-var>)\\n   string(GENEX_STRIP <string> <out-var>)\\n\\n Comparison\\n   string(COMPARE <op> <string1> <string2> <out-var>)\\n\\n Hashing\\n   string(<HASH> <out-var> <input>)\\n\\n Generation\\n   string(ASCII <number>... <out-var>)\\n   string(CONFIGURE <string1> <out-var> [...])\\n   string(MAKE_C_IDENTIFIER <string> <out-var>)\\n   string(RANDOM [<option>...] <out-var>)\\n   string(TIMESTAMP <out-var> [<format string>] [UTC])\\n   string(UUID <out-var> ...)\\n\\nSearch and Replace\\n^^^^^^^^^^^^^^^^^^\\n\\n::\\n\\n string(FIND <string> <substring> <output variable> [REVERSE])\\n\\nReturn the position where the given substring was found in\\nthe supplied string.  If the ``REVERSE`` flag was used, the command will\\nsearch for the position of the last occurrence of the specified\\nsubstring.  If the substring is not found, a position of -1 is returned.\\n\\n::\\n\\n string(REPLACE <match_string>\\n        <replace_string> <output variable>\\n        <input> [<input>...])\\n\\nReplace all occurrences of ``match_string`` in the input\\nwith ``replace_string`` and store the result in the output.\\n\\nRegular Expressions\\n^^^^^^^^^^^^^^^^^^^\\n\\n::\\n\\n string(REGEX MATCH <regular_expression>\\n        <output variable> <input> [<input>...])\\n\\nMatch the regular expression once and store the match in the output variable.\\nAll ``<input>`` arguments are concatenated before matching.\\n\\n::\\n\\n string(REGEX MATCHALL <regular_expression>\\n        <output variable> <input> [<input>...])\\n\\nMatch the regular expression as many times as possible and store the matches\\nin the output variable as a list.\\nAll ``<input>`` arguments are concatenated before matching.\\n\\n::\\n\\n string(REGEX REPLACE <regular_expression>\\n        <replace_expression> <output variable>\\n        <input> [<input>...])\\n\\nMatch the regular expression as many times as possible and substitute the\\nreplacement expression for the match in the output.\\nAll ``<input>`` arguments are concatenated before matching.\\n\\nThe replace expression may refer to paren-delimited subexpressions of the\\nmatch using ``\\\\1``, ``\\\\2``, ..., ``\\\\9``.  Note that two backslashes (``\\\\\\\\1``)\\nare required in CMake code to get a backslash through argument parsing.\\n\\nRegex Specification\\n\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\n\\nThe following characters have special meaning in regular expressions:\\n\\n``^``\\n  Matches at beginning of input\\n``$``\\n  Matches at end of input\\n``.``\\n  Matches any single character\\n``\\\\<char>``\\n  Matches the single character specified by ``<char>``.  Use this to\\n  match special regex characters, e.g. ``\\\\.`` for a literal ``.``\\n  or ``\\\\\\\\`` for a literal backslash ``\\\\``.  Escaping a non-special\\n  character is unnecessary but allowed, e.g. ``\\\\a`` matches ``a``.\\n``[ ]``\\n  Matches any character(s) inside the brackets\\n``[^ ]``\\n  Matches any character(s) not inside the brackets\\n``-``\\n  Inside brackets, specifies an inclusive range between\\n  characters on either side e.g. ``[a-f]`` is ``[abcdef]``\\n  To match a literal ``-`` using brackets, make it the first\\n  or the last character e.g. ``[+*/-]`` matches basic\\n  mathematical operators.\\n``*``\\n  Matches preceding pattern zero or more times\\n``+``\\n  Matches preceding pattern one or more times\\n``?``\\n  Matches preceding pattern zero or once only\\n``|``\\n  Matches a pattern on either side of the ``|``\\n``()``\\n  Saves a matched subexpression, which can be referenced\\n  in the ``REGEX REPLACE`` operation. Additionally it is saved\\n  by all regular expression-related commands, including\\n  e.g. ``if(MATCHES)``, in the variables\\n  ``CMAKE_MATCH_<n>`` for ``<n>`` 0..9.\\n\\n``*``, ``+`` and ``?`` have higher precedence than concatenation.  ``|``\\nhas lower precedence than concatenation.  This means that the regular\\nexpression ``^ab+d$`` matches ``abbd`` but not ``ababd``, and the regular\\nexpression ``^(ab|cd)$`` matches ``ab`` but not ``abd``.\\n\\nCMake language :ref:`Escape Sequences` such as ``\\\\t``, ``\\\\r``, ``\\\\n``,\\nand ``\\\\\\\\`` may be used to construct literal tabs, carriage returns,\\nnewlines, and backslashes (respectively) to pass in a regex.  For example:\\n\\n* The quoted argument ``\\\"[ \\\\t\\\\r\\\\n]\\\"`` specifies a regex that matches\\n  any single whitespace character.\\n* The quoted argument ``\\\"[/\\\\\\\\]\\\"`` specifies a regex that matches\\n  a single forward slash ``/`` or backslash ``\\\\``.\\n* The quoted argument ``\\\"[A-Za-z0-9_]\\\"`` specifies a regex that matches\\n  any single \\\"word\\\" character in the C locale.\\n* The quoted argument ``\\\"\\\\\\\\(\\\\\\\\a\\\\\\\\+b\\\\\\\\)\\\"`` specifies a regex that matches\\n  the exact string ``(a+b)``.  Each ``\\\\\\\\`` is parsed in a quoted argument\\n  as just ``\\\\``, so the regex itself is actually ``\\\\(\\\\a\\\\+\\\\b\\\\)``.  This\\n  can alternatively be specified in a :ref:`bracket argument` without\\n  having to escape the backslashes, e.g. ``[[\\\\(\\\\a\\\\+\\\\b\\\\)]]``.\\n\\nManipulation\\n^^^^^^^^^^^^\\n\\n::\\n\\n string(APPEND <string variable> [<input>...])\\n\\nAppend all the input arguments to the string.\\n\\n::\\n\\n string(PREPEND <string variable> [<input>...])\\n\\nPrepend all the input arguments to the string.\\n\\n::\\n\\n string(CONCAT <output variable> [<input>...])\\n\\nConcatenate all the input arguments together and store\\nthe result in the named output variable.\\n\\n::\\n\\n string(JOIN <glue> <output variable> [<input>...])\\n\\nJoin all the input arguments together using the glue\\nstring and store the result in the named output variable.\\n\\nTo join list's elements, use preferably the ``JOIN`` operator\\nfrom ``list()`` command. This allows for the elements to have\\nspecial characters like ``;`` in them.\\n\\n::\\n\\n string(TOLOWER <string1> <output variable>)\\n\\nConvert string to lower characters.\\n\\n::\\n\\n string(TOUPPER <string1> <output variable>)\\n\\nConvert string to upper characters.\\n\\n::\\n\\n string(LENGTH <string> <output variable>)\\n\\nStore in an output variable a given string's length.\\n\\n::\\n\\n string(SUBSTRING <string> <begin> <length> <output variable>)\\n\\nStore in an output variable a substring of a given string.  If length is\\n``-1`` the remainder of the string starting at begin will be returned.\\nIf string is shorter than length then end of string is used instead.\\n\\n.. note::\\n  CMake 3.1 and below reported an error if length pointed past\\n  the end of string.\\n\\n::\\n\\n string(STRIP <string> <output variable>)\\n\\nStore in an output variable a substring of a given string with leading and\\ntrailing spaces removed.\\n\\n::\\n\\n string(GENEX_STRIP <input string> <output variable>)\\n\\nStrip any ``generator expressions``\\nfrom the ``input string`` and store the result in the ``output variable``.\\n\\nComparison\\n^^^^^^^^^^\\n\\n::\\n\\n string(COMPARE LESS <string1> <string2> <output variable>)\\n string(COMPARE GREATER <string1> <string2> <output variable>)\\n string(COMPARE EQUAL <string1> <string2> <output variable>)\\n string(COMPARE NOTEQUAL <string1> <string2> <output variable>)\\n string(COMPARE LESS_EQUAL <string1> <string2> <output variable>)\\n string(COMPARE GREATER_EQUAL <string1> <string2> <output variable>)\\n\\nCompare the strings and store true or false in the output variable.\\n\\nHashing\\n^^^^^^^\\n\\n::\\n\\n string(<HASH> <output variable> <input>)\\n\\nCompute a cryptographic hash of the input string.\\nThe supported ``<HASH>`` algorithm names are:\\n\\n``MD5``\\n  Message-Digest Algorithm 5, RFC 1321.\\n``SHA1``\\n  US Secure Hash Algorithm 1, RFC 3174.\\n``SHA224``\\n  US Secure Hash Algorithms, RFC 4634.\\n``SHA256``\\n  US Secure Hash Algorithms, RFC 4634.\\n``SHA384``\\n  US Secure Hash Algorithms, RFC 4634.\\n``SHA512``\\n  US Secure Hash Algorithms, RFC 4634.\\n``SHA3_224``\\n  Keccak SHA-3.\\n``SHA3_256``\\n  Keccak SHA-3.\\n``SHA3_384``\\n  Keccak SHA-3.\\n``SHA3_512``\\n  Keccak SHA-3.\\n\\nGeneration\\n^^^^^^^^^^\\n\\n::\\n\\n string(ASCII <number> [<number> ...] <output variable>)\\n\\nConvert all numbers into corresponding ASCII characters.\\n\\n::\\n\\n string(CONFIGURE <string1> <output variable>\\n        [@ONLY] [ESCAPE_QUOTES])\\n\\nTransform a string like ``configure_file()`` transforms a file.\\n\\n::\\n\\n string(MAKE_C_IDENTIFIER <input string> <output variable>)\\n\\nConvert each non-alphanumeric character in the ``<input string>`` to an\\nunderscore and store the result in the ``<output variable>``.  If the first\\ncharacter of the string is a digit, an underscore will also be prepended to\\nthe result.\\n\\n::\\n\\n string(RANDOM [LENGTH <length>] [ALPHABET <alphabet>]\\n        [RANDOM_SEED <seed>] <output variable>)\\n\\nReturn a random string of given length consisting of\\ncharacters from the given alphabet.  Default length is 5 characters\\nand default alphabet is all numbers and upper and lower case letters.\\nIf an integer ``RANDOM_SEED`` is given, its value will be used to seed the\\nrandom number generator.\\n\\n::\\n\\n string(TIMESTAMP <output variable> [<format string>] [UTC])\\n\\nWrite a string representation of the current date\\nand/or time to the output variable.\\n\\nShould the command be unable to obtain a timestamp the output variable\\nwill be set to the empty string \\\"\\\".\\n\\nThe optional ``UTC`` flag requests the current date/time representation to\\nbe in Coordinated Universal Time (UTC) rather than local time.\\n\\nThe optional ``<format string>`` may contain the following format\\nspecifiers:\\n\\n::\\n\\n %%        A literal percent sign (%).\\n %d        The day of the current month (01-31).\\n %H        The hour on a 24-hour clock (00-23).\\n %I        The hour on a 12-hour clock (01-12).\\n %j        The day of the current year (001-366).\\n %m        The month of the current year (01-12).\\n %b        Abbreviated month name (e.g. Oct).\\n %B        Full month name (e.g. October).\\n %M        The minute of the current hour (00-59).\\n %s        Seconds since midnight (UTC) 1-Jan-1970 (UNIX time).\\n %S        The second of the current minute.\\n           60 represents a leap second. (00-60)\\n %U        The week number of the current year (00-53).\\n %w        The day of the current week. 0 is Sunday. (0-6)\\n %a        Abbreviated weekday name (e.g. Fri).\\n %A        Full weekday name (e.g. Friday).\\n %y        The last two digits of the current year (00-99)\\n %Y        The current year.\\n\\nUnknown format specifiers will be ignored and copied to the output\\nas-is.\\n\\nIf no explicit ``<format string>`` is given it will default to:\\n\\n::\\n\\n %Y-%m-%dT%H:%M:%S    for local time.\\n %Y-%m-%dT%H:%M:%SZ   for UTC.\\n\\n.. note::\\n\\n  If the ``SOURCE_DATE_EPOCH`` environment variable is set,\\n  its value will be used instead of the current time.\\n  See https://reproducible-builds.org/specs/source-date-epoch/ for details.\\n\\n::\\n\\n string(UUID <output variable> NAMESPACE <namespace> NAME <name>\\n        TYPE <MD5|SHA1> [UPPER])\\n\\nCreate a universally unique identifier (aka GUID) as per RFC4122\\nbased on the hash of the combined values of ``<namespace>``\\n(which itself has to be a valid UUID) and ``<name>``.\\nThe hash algorithm can be either ``MD5`` (Version 3 UUID) or\\n``SHA1`` (Version 5 UUID).\\nA UUID has the format ``xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx``\\nwhere each `x` represents a lower case hexadecimal character.\\nWhere required an uppercase representation can be requested\\nwith the optional ``UPPER`` flag.\\n",
        "command"
    ],
    "subdir_depends": [
        "subdir_depends\\n--------------\\n\\nDisallowed.  See CMake Policy ``CMP0029``.\\n\\nDoes nothing.\\n\\n::\\n\\n subdir_depends(subdir dep1 dep2 ...)\\n\\nDoes not do anything.  This command used to help projects order\\nparallel builds correctly.  This functionality is now automatic.\\n",
        "command"
    ],
    "subdirs": [
        "subdirs\\n-------\\n\\nDeprecated. Use the ``add_subdirectory()`` command instead.\\n\\nAdd a list of subdirectories to the build.\\n\\n::\\n\\n subdirs(dir1 dir2 ...[EXCLUDE_FROM_ALL exclude_dir1 exclude_dir2 ...]\\n         [PREORDER] )\\n\\nAdd a list of subdirectories to the build.  The ``add_subdirectory()``\\ncommand should be used instead of ``subdirs`` although ``subdirs`` will still\\nwork.  This will cause any CMakeLists.txt files in the sub directories\\nto be processed by CMake.  Any directories after the ``PREORDER`` flag are\\ntraversed first by makefile builds, the ``PREORDER`` flag has no effect on\\nIDE projects.  Any directories after the ``EXCLUDE_FROM_ALL`` marker will\\nnot be included in the top level makefile or project file.  This is\\nuseful for having CMake create makefiles or projects for a set of\\nexamples in a project.  You would want CMake to generate makefiles or\\nproject files for all the examples at the same time, but you would not\\nwant them to show up in the top level project or be built each time\\nmake is run from the top.\\n",
        "command"
    ],
    "target_compile_definitions": [
        "target_compile_definitions\\n--------------------------\\n\\nAdd compile definitions to a target.\\n\\n::\\n\\n target_compile_definitions(<target>\\n   <INTERFACE|PUBLIC|PRIVATE> [items1...]\\n   [<INTERFACE|PUBLIC|PRIVATE> [items2...] ...])\\n\\nSpecify compile definitions to use when compiling a given ``<target>``.  The\\nnamed ``<target>`` must have been created by a command such as\\n``add_executable()`` or ``add_library()`` and must not be an\\n:ref:`ALIAS target <Alias Targets>`.\\n\\nThe ``INTERFACE``, ``PUBLIC`` and ``PRIVATE`` keywords are required to\\nspecify the scope of the following arguments.  ``PRIVATE`` and ``PUBLIC``\\nitems will populate the ``COMPILE_DEFINITIONS`` property of\\n``<target>``. ``PUBLIC`` and ``INTERFACE`` items will populate the\\n``INTERFACE_COMPILE_DEFINITIONS`` property of ``<target>``.\\n(:ref:`IMPORTED targets <Imported Targets>` only support ``INTERFACE`` items.)\\nThe following arguments specify compile definitions.  Repeated calls for the\\nsame ``<target>`` append items in the order called.\\n\\nArguments to ``target_compile_definitions`` may use \\\"generator expressions\\\"\\nwith the syntax ``$<...>``.  See the ``cmake-generator-expressions(7)``\\nmanual for available expressions.  See the ``cmake-buildsystem(7)``\\nmanual for more on defining buildsystem properties.\\n\\nAny leading ``-D`` on an item will be removed.  Empty items are ignored.\\nFor example, the following are all equivalent:\\n\\n target_compile_definitions(foo PUBLIC FOO)\\n target_compile_definitions(foo PUBLIC -DFOO)  # -D removed\\n target_compile_definitions(foo PUBLIC \\\"\\\" FOO) # \\\"\\\" ignored\\n target_compile_definitions(foo PUBLIC -D FOO) # -D becomes \\\"\\\", then ignored\\n",
        "command"
    ],
    "target_compile_features": [
        "target_compile_features\\n-----------------------\\n\\nAdd expected compiler features to a target.\\n\\n::\\n\\n target_compile_features(<target> <PRIVATE|PUBLIC|INTERFACE> <feature> [...])\\n\\nSpecify compiler features required when compiling a given target.  If the\\nfeature is not listed in the ``CMAKE_C_COMPILE_FEATURES`` variable\\nor ``CMAKE_CXX_COMPILE_FEATURES`` variable,\\nthen an error will be reported by CMake.  If the use of the feature requires\\nan additional compiler flag, such as ``-std=gnu++11``, the flag will be added\\nautomatically.\\n\\nThe ``INTERFACE``, ``PUBLIC`` and ``PRIVATE`` keywords are required to\\nspecify the scope of the features.  ``PRIVATE`` and ``PUBLIC`` items will\\npopulate the ``COMPILE_FEATURES`` property of ``<target>``.\\n``PUBLIC`` and ``INTERFACE`` items will populate the\\n``INTERFACE_COMPILE_FEATURES`` property of ``<target>``.\\n(:ref:`IMPORTED targets <Imported Targets>` only support ``INTERFACE`` items.)\\nRepeated calls for the same ``<target>`` append items.\\n\\nThe named ``<target>`` must have been created by a command such as\\n``add_executable()`` or ``add_library()`` and must not be an\\n:ref:`ALIAS target <Alias Targets>`.\\n\\nArguments to ``target_compile_features`` may use \\\"generator expressions\\\"\\nwith the syntax ``$<...>``.\\nSee the ``cmake-generator-expressions(7)`` manual for available\\nexpressions.  See the ``cmake-compile-features(7)`` manual for\\ninformation on compile features and a list of supported compilers.\\n",
        "command"
    ],
    "target_compile_options": [
        "target_compile_options\\n----------------------\\n\\nAdd compile options to a target.\\n\\n::\\n\\n target_compile_options(<target> [BEFORE]\\n   <INTERFACE|PUBLIC|PRIVATE> [items1...]\\n   [<INTERFACE|PUBLIC|PRIVATE> [items2...] ...])\\n\\nSpecify compile options to use when compiling a given target.  The\\nnamed ``<target>`` must have been created by a command such as\\n``add_executable()`` or ``add_library()`` and must not be an\\n:ref:`ALIAS target <Alias Targets>`.\\n\\nIf ``BEFORE`` is specified, the content will be prepended to the property\\ninstead of being appended.\\n\\nThis command can be used to add any options, but\\nalternative commands exist to add preprocessor definitions\\n(``target_compile_definitions()`` and ``add_compile_definitions()``)\\nor include directories (``target_include_directories()`` and\\n``include_directories()``).  See documentation of the\\n``directory`` and\\n``target`` ``COMPILE_OPTIONS`` properties.\\n\\nThe ``INTERFACE``, ``PUBLIC`` and ``PRIVATE`` keywords are required to\\nspecify the scope of the following arguments.  ``PRIVATE`` and ``PUBLIC``\\nitems will populate the ``COMPILE_OPTIONS`` property of\\n``<target>``.  ``PUBLIC`` and ``INTERFACE`` items will populate the\\n``INTERFACE_COMPILE_OPTIONS`` property of ``<target>``.\\n(:ref:`IMPORTED targets <Imported Targets>` only support ``INTERFACE`` items.)\\nThe following arguments specify compile options.  Repeated calls for the same\\n``<target>`` append items in the order called.\\n\\nArguments to ``target_compile_options`` may use \\\"generator expressions\\\"\\nwith the syntax ``$<...>``. See the ``cmake-generator-expressions(7)``\\nmanual for available expressions.  See the ``cmake-buildsystem(7)``\\nmanual for more on defining buildsystem properties.\\n\\nThe final set of compile or link options used for a target is constructed by\\naccumulating options from the current target and the usage requirements of\\nit dependencies.  The set of options is de-duplicated to avoid repetition.\\nWhile beneficial for individual options, the de-duplication step can break\\nup option groups.  For example, ``-D A -D B`` becomes ``-D A B``.  One may\\nspecify a group of options using shell-like quoting along with a ``SHELL:``\\nprefix.  The ``SHELL:`` prefix is dropped and the rest of the option string\\nis parsed using the ``separate_arguments()`` ``UNIX_COMMAND`` mode.\\nFor example, ``\\\"SHELL:-D A\\\" \\\"SHELL:-D B\\\"`` becomes ``-D A -D B``.\\n",
        "command"
    ],
    "target_include_directories": [
        "target_include_directories\\n--------------------------\\n\\nAdd include directories to a target.\\n\\n::\\n\\n target_include_directories(<target> [SYSTEM] [BEFORE]\\n   <INTERFACE|PUBLIC|PRIVATE> [items1...]\\n   [<INTERFACE|PUBLIC|PRIVATE> [items2...] ...])\\n\\nSpecify include directories to use when compiling a given target.\\nThe named ``<target>`` must have been created by a command such\\nas ``add_executable()`` or ``add_library()`` and must not be an\\n:ref:`ALIAS target <Alias Targets>`.\\n\\nIf ``BEFORE`` is specified, the content will be prepended to the property\\ninstead of being appended.\\n\\nThe ``INTERFACE``, ``PUBLIC`` and ``PRIVATE`` keywords are required to specify\\nthe scope of the following arguments.  ``PRIVATE`` and ``PUBLIC`` items will\\npopulate the ``INCLUDE_DIRECTORIES`` property of ``<target>``.\\n``PUBLIC`` and ``INTERFACE`` items will populate the\\n``INTERFACE_INCLUDE_DIRECTORIES`` property of ``<target>``.\\n(:ref:`IMPORTED targets <Imported Targets>` only support ``INTERFACE`` items.)\\nThe following arguments specify include directories.\\n\\nSpecified include directories may be absolute paths or relative paths.\\nRepeated calls for the same <target> append items in the order called.  If\\n``SYSTEM`` is specified, the compiler will be told the\\ndirectories are meant as system include directories on some platforms\\n(signalling this setting might achieve effects such as the compiler\\nskipping warnings, or these fixed-install system files not being\\nconsidered in dependency calculations - see compiler docs).  If ``SYSTEM``\\nis used together with ``PUBLIC`` or ``INTERFACE``, the\\n``INTERFACE_SYSTEM_INCLUDE_DIRECTORIES`` target property will be\\npopulated with the specified directories.\\n\\nArguments to ``target_include_directories`` may use \\\"generator expressions\\\"\\nwith the syntax ``$<...>``.  See the ``cmake-generator-expressions(7)``\\nmanual for available expressions.  See the ``cmake-buildsystem(7)``\\nmanual for more on defining buildsystem properties.\\n\\nInclude directories usage requirements commonly differ between the build-tree\\nand the install-tree.  The ``BUILD_INTERFACE`` and ``INSTALL_INTERFACE``\\ngenerator expressions can be used to describe separate usage requirements\\nbased on the usage location.  Relative paths are allowed within the\\n``INSTALL_INTERFACE`` expression and are interpreted relative to the\\ninstallation prefix.  For example:\\n\\n target_include_directories(mylib PUBLIC\\n   $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/mylib>\\n   $<INSTALL_INTERFACE:include/mylib>  # <prefix>/include/mylib\\n )\\n\\nCreating Relocatable Packages\\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\\n\\nNote that it is not advisable to populate the ``INSTALL_INTERFACE`` of the\\n``INTERFACE_INCLUDE_DIRECTORIES`` of a target with absolute paths to the include\\ndirectories of dependencies.  That would hard-code into installed packages\\nthe include directory paths for dependencies\\n**as found on the machine the package was made on**.\\n\\nThe ``INSTALL_INTERFACE`` of the ``INTERFACE_INCLUDE_DIRECTORIES`` is only\\nsuitable for specifying the required include directories for headers\\nprovided with the target itself, not those provided by the transitive\\ndependencies listed in its ``INTERFACE_LINK_LIBRARIES`` target\\nproperty.  Those dependencies should themselves be targets that specify\\ntheir own header locations in ``INTERFACE_INCLUDE_DIRECTORIES``.\\n\\nSee the :ref:`Creating Relocatable Packages` section of the\\n``cmake-packages(7)`` manual for discussion of additional care\\nthat must be taken when specifying usage requirements while creating\\npackages for redistribution.\\n",
        "command"
    ],
    "target_link_directories": [
        "target_link_directories\\n-----------------------\\n\\nAdd link directories to a target.\\n\\n::\\n\\n target_link_directories(<target> [BEFORE]\\n   <INTERFACE|PUBLIC|PRIVATE> [items1...]\\n   [<INTERFACE|PUBLIC|PRIVATE> [items2...] ...])\\n\\nSpecify the paths in which the linker should search for libraries when\\nlinking a given target.  Each item can be an absolute or relative path,\\nwith the latter being interpreted as relative to the current source\\ndirectory.  These items will be added to the link command.\\n\\nThe named ``<target>`` must have been created by a command such as\\n``add_executable()`` or ``add_library()`` and must not be an\\n:ref:`ALIAS target <Alias Targets>`.\\n\\nThe ``INTERFACE``, ``PUBLIC`` and ``PRIVATE`` keywords are required to\\nspecify the scope of the items that follow them.  ``PRIVATE`` and\\n``PUBLIC`` items will populate the ``LINK_DIRECTORIES`` property\\nof ``<target>``.  ``PUBLIC`` and ``INTERFACE`` items will populate the\\n``INTERFACE_LINK_DIRECTORIES`` property of ``<target>``\\n(:ref:`IMPORTED targets <Imported Targets>` only support ``INTERFACE`` items).\\nEach item specifies a link directory and will be converted to an absolute\\npath if necessary before adding it to the relevant property.  Repeated\\ncalls for the same ``<target>`` append items in the order called.\\n\\nIf ``BEFORE`` is specified, the content will be prepended to the relevant\\nproperty instead of being appended.\\n\\nArguments to ``target_link_directories`` may use \\\"generator expressions\\\"\\nwith the syntax ``$<...>``. See the ``cmake-generator-expressions(7)``\\nmanual for available expressions.  See the ``cmake-buildsystem(7)``\\nmanual for more on defining buildsystem properties.\\n\\n.. note::\\n\\n  This command is rarely necessary and should be avoided where there are\\n  other choices.  Prefer to pass full absolute paths to libraries where\\n  possible, since this ensures the correct library will always be linked.\\n  The ``find_library()`` command provides the full path, which can\\n  generally be used directly in calls to ``target_link_libraries()``.\\n  Situations where a library search path may be needed include:\\n\\n  - Project generators like Xcode where the user can switch target\\n    architecture at build time, but a full path to a library cannot\\n    be used because it only provides one architecture (i.e. it is not\\n    a universal binary).\\n  - Libraries may themselves have other private library dependencies\\n    that expect to be found via ``RPATH`` mechanisms, but some linkers\\n    are not able to fully decode those paths (e.g. due to the presence\\n    of things like ``$ORIGIN``).\\n",
        "command"
    ],
    "target_link_libraries": [
        "target_link_libraries\\n---------------------\\n\\nSpecify libraries or flags to use when linking a given target and/or\\nits dependents.  :ref:`Usage requirements <Target Usage Requirements>`\\nfrom linked library targets will be propagated.  Usage requirements\\nof a target's dependencies affect compilation of its own sources.\\n\\nOverview\\n^^^^^^^^\\n\\nThis command has several signatures as detailed in subsections below.\\nAll of them have the general form::\\n\\n target_link_libraries(<target> ... <item>... ...)\\n\\nThe named ``<target>`` must have been created by a command such as\\n``add_executable()`` or ``add_library()`` and must not be an\\n:ref:`ALIAS target <Alias Targets>`.  If policy ``CMP0079`` is not\\nset to ``NEW`` then the target must have been created in the current\\ndirectory.  Repeated calls for the same ``<target>`` append items in\\nthe order called.\\n\\nEach ``<item>`` may be:\\n\\n* **A library target name**: The generated link line will have the\\n  full path to the linkable library file associated with the target.\\n  The buildsystem will have a dependency to re-link ``<target>`` if\\n  the library file changes.\\n\\n  The named target must be created by ``add_library()`` within\\n  the project or as an :ref:`IMPORTED library <Imported Targets>`.\\n  If it is created within the project an ordering dependency will\\n  automatically be added in the build system to make sure the named\\n  library target is up-to-date before the ``<target>`` links.\\n\\n  If an imported library has the ``IMPORTED_NO_SONAME``\\n  target property set, CMake may ask the linker to search for\\n  the library instead of using the full path\\n  (e.g. ``/usr/lib/libfoo.so`` becomes ``-lfoo``).\\n\\n  The full path to the target's artifact will be quoted/escaped for\\n  the shell automatically.\\n\\n* **A full path to a library file**: The generated link line will\\n  normally preserve the full path to the file. The buildsystem will\\n  have a dependency to re-link ``<target>`` if the library file changes.\\n\\n  There are some cases where CMake may ask the linker to search for\\n  the library (e.g. ``/usr/lib/libfoo.so`` becomes ``-lfoo``), such\\n  as when a shared library is detected to have no ``SONAME`` field.\\n  See policy ``CMP0060`` for discussion of another case.\\n\\n  If the library file is in a Mac OSX framework, the ``Headers`` directory\\n  of the framework will also be processed as a\\n  :ref:`usage requirement <Target Usage Requirements>`.  This has the same\\n  effect as passing the framework directory as an include directory.\\n\\n  On :ref:`Visual Studio Generators` for VS 2010 and above, library files\\n  ending in ``.targets`` will be treated as MSBuild targets files and\\n  imported into generated project files.  This is not supported by other\\n  generators.\\n\\n  The full path to the library file will be quoted/escaped for\\n  the shell automatically.\\n\\n* **A plain library name**: The generated link line will ask the linker\\n  to search for the library (e.g. ``foo`` becomes ``-lfoo`` or ``foo.lib``).\\n\\n  The library name/flag is treated as a command-line string fragment and\\n  will be used with no extra quoting or escaping.\\n\\n* **A link flag**: Item names starting with ``-``, but not ``-l`` or\\n  ``-framework``, are treated as linker flags.  Note that such flags will\\n  be treated like any other library link item for purposes of transitive\\n  dependencies, so they are generally safe to specify only as private link\\n  items that will not propagate to dependents.\\n\\n  Link flags specified here are inserted into the link command in the same\\n  place as the link libraries. This might not be correct, depending on\\n  the linker. Use the ``LINK_OPTIONS`` target property or\\n  ``target_link_options()`` command to add link\\n  flags explicitly. The flags will then be placed at the toolchain-defined\\n  flag position in the link command.\\n\\n  The link flag is treated as a command-line string fragment and\\n  will be used with no extra quoting or escaping.\\n\\n* **A generator expression**: A ``$<...>`` :manual:`generator expression\\n  <cmake-generator-expressions(7)>` may evaluate to any of the above\\n  items or to a :ref:`;-list <CMake Language Lists>` of them.\\n  If the ``...`` contains any ``;`` characters, e.g. after evaluation\\n  of a ``${list}`` variable, be sure to use an explicitly quoted\\n  argument ``\\\"$<...>\\\"`` so that this command receives it as a\\n  single ``<item>``.\\n\\n  Additionally, a generator expression may be used as a fragment of\\n  any of the above items, e.g. ``foo$<1:_d>``.\\n\\n  Note that generator expressions will not be used in OLD handling of\\n  policy ``CMP0003`` or policy ``CMP0004``.\\n\\n* A ``debug``, ``optimized``, or ``general`` keyword immediately followed\\n  by another ``<item>``.  The item following such a keyword will be used\\n  only for the corresponding build configuration.  The ``debug`` keyword\\n  corresponds to the ``Debug`` configuration (or to configurations named\\n  in the ``DEBUG_CONFIGURATIONS`` global property if it is set).\\n  The ``optimized`` keyword corresponds to all other configurations.  The\\n  ``general`` keyword corresponds to all configurations, and is purely\\n  optional.  Higher granularity may be achieved for per-configuration\\n  rules by creating and linking to\\n  :ref:`IMPORTED library targets <Imported Targets>`.\\n  These keywords are interpreted immediately by this command and therefore\\n  have no special meaning when produced by a generator expression.\\n\\nItems containing ``::``, such as ``Foo::Bar``, are assumed to be\\n:ref:`IMPORTED <Imported Targets>` or :ref:`ALIAS <Alias Targets>` library\\ntarget names and will cause an error if no such target exists.\\nSee policy ``CMP0028``.\\n\\nSee the ``cmake-buildsystem(7)`` manual for more on defining\\nbuildsystem properties.\\n\\nLibraries for a Target and/or its Dependents\\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\\n::\\n\\n target_link_libraries(<target>\\n                       <PRIVATE|PUBLIC|INTERFACE> <item>...\\n                      [<PRIVATE|PUBLIC|INTERFACE> <item>...]...)\\n\\nThe ``PUBLIC``, ``PRIVATE`` and ``INTERFACE`` keywords can be used to\\nspecify both the link dependencies and the link interface in one command.\\nLibraries and targets following ``PUBLIC`` are linked to, and are made\\npart of the link interface.  Libraries and targets following ``PRIVATE``\\nare linked to, but are not made part of the link interface.  Libraries\\nfollowing ``INTERFACE`` are appended to the link interface and are not\\nused for linking ``<target>``.\\n\\nLibraries for both a Target and its Dependents\\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\\n::\\n\\n target_link_libraries(<target> <item>...)\\n\\nLibrary dependencies are transitive by default with this signature.\\nWhen this target is linked into another target then the libraries\\nlinked to this target will appear on the link line for the other\\ntarget too.  This transitive \\\"link interface\\\" is stored in the\\n``INTERFACE_LINK_LIBRARIES`` target property and may be overridden\\nby setting the property directly.  When ``CMP0022`` is not set to\\n``NEW``, transitive linking is built in but may be overridden by the\\n``LINK_INTERFACE_LIBRARIES`` property.  Calls to other signatures\\nof this command may set the property making any libraries linked\\nexclusively by this signature private.\\n\\nLibraries for a Target and/or its Dependents (Legacy)\\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\\n::\\n\\n target_link_libraries(<target>\\n                       <LINK_PRIVATE|LINK_PUBLIC> <lib>...\\n                      [<LINK_PRIVATE|LINK_PUBLIC> <lib>...]...)\\n\\nThe ``LINK_PUBLIC`` and ``LINK_PRIVATE`` modes can be used to specify both\\nthe link dependencies and the link interface in one command.\\n\\nThis signature is for compatibility only.  Prefer the ``PUBLIC`` or\\n``PRIVATE`` keywords instead.\\n\\nLibraries and targets following ``LINK_PUBLIC`` are linked to, and are\\nmade part of the ``INTERFACE_LINK_LIBRARIES``.  If policy\\n``CMP0022`` is not ``NEW``, they are also made part of the\\n``LINK_INTERFACE_LIBRARIES``.  Libraries and targets following\\n``LINK_PRIVATE`` are linked to, but are not made part of the\\n``INTERFACE_LINK_LIBRARIES`` (or ``LINK_INTERFACE_LIBRARIES``).\\n\\nLibraries for Dependents Only (Legacy)\\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\\n::\\n\\n target_link_libraries(<target> LINK_INTERFACE_LIBRARIES <item>...)\\n\\nThe ``LINK_INTERFACE_LIBRARIES`` mode appends the libraries to the\\n``INTERFACE_LINK_LIBRARIES`` target property instead of using them\\nfor linking.  If policy ``CMP0022`` is not ``NEW``, then this mode\\nalso appends libraries to the ``LINK_INTERFACE_LIBRARIES`` and its\\nper-configuration equivalent.\\n\\nThis signature is for compatibility only.  Prefer the ``INTERFACE`` mode\\ninstead.\\n\\nLibraries specified as ``debug`` are wrapped in a generator expression to\\ncorrespond to debug builds.  If policy ``CMP0022`` is\\nnot ``NEW``, the libraries are also appended to the\\n``LINK_INTERFACE_LIBRARIES_DEBUG``\\nproperty (or to the properties corresponding to configurations listed in\\nthe ``DEBUG_CONFIGURATIONS`` global property if it is set).\\nLibraries specified as ``optimized`` are appended to the\\n``INTERFACE_LINK_LIBRARIES`` property.  If policy ``CMP0022``\\nis not ``NEW``, they are also appended to the\\n``LINK_INTERFACE_LIBRARIES`` property.  Libraries specified as\\n``general`` (or without any keyword) are treated as if specified for both\\n``debug`` and ``optimized``.\\n\\nLinking Object Libraries\\n^^^^^^^^^^^^^^^^^^^^^^^^\\n\\n:ref:`Object Libraries` may be used as the ``<target>`` (first) argument\\nof ``target_link_libraries`` to specify dependencies of their sources\\non other libraries.  For example, the code\\n\\n add_library(A SHARED a.c)\\n target_compile_definitions(A PUBLIC A)\\n\\n add_library(obj OBJECT obj.c)\\n target_compile_definitions(obj PUBLIC OBJ)\\n target_link_libraries(obj PUBLIC A)\\n\\ncompiles ``obj.c`` with ``-DA -DOBJ`` and establishes usage requirements\\nfor ``obj`` that propagate to its dependents.\\n\\nNormal libraries and executables may link to :ref:`Object Libraries`\\nto get their objects and usage requirements.  Continuing the above\\nexample, the code\\n\\n add_library(B SHARED b.c)\\n target_link_libraries(B PUBLIC obj)\\n\\ncompiles ``b.c`` with ``-DA -DOBJ``, creates shared library ``B``\\nwith object files from ``b.c`` and ``obj.c``, and links ``B`` to ``A``.\\nFurthermore, the code\\n\\n add_executable(main main.c)\\n target_link_libraries(main B)\\n\\ncompiles ``main.c`` with ``-DA -DOBJ`` and links executable ``main``\\nto ``B`` and ``A``.  The object library's usage requirements are\\npropagated transitively through ``B``, but its object files are not.\\n\\n:ref:`Object Libraries` may \\\"link\\\" to other object libraries to get\\nusage requirements, but since they do not have a link step nothing\\nis done with their object files.  Continuing from the above example,\\nthe code:\\n\\n add_library(obj2 OBJECT obj2.c)\\n target_link_libraries(obj2 PUBLIC obj)\\n\\n add_executable(main2 main2.c)\\n target_link_libraries(main2 obj2)\\n\\ncompiles ``obj2.c`` with ``-DA -DOBJ``, creates executable ``main2``\\nwith object files from ``main2.c`` and ``obj2.c``, and links ``main2``\\nto ``A``.\\n\\nIn other words, when :ref:`Object Libraries` appear in a target's\\n``INTERFACE_LINK_LIBRARIES`` property they will be\\ntreated as :ref:`Interface Libraries`, but when they appear in\\na target's ``LINK_LIBRARIES`` property their object files\\nwill be included in the link too.\\n\\nCyclic Dependencies of Static Libraries\\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\\nThe library dependency graph is normally acyclic (a DAG), but in the case\\nof mutually-dependent ``STATIC`` libraries CMake allows the graph to\\ncontain cycles (strongly connected components).  When another target links\\nto one of the libraries, CMake repeats the entire connected component.\\nFor example, the code\\n\\n add_library(A STATIC a.c)\\n add_library(B STATIC b.c)\\n target_link_libraries(A B)\\n target_link_libraries(B A)\\n add_executable(main main.c)\\n target_link_libraries(main A)\\n\\nlinks ``main`` to ``A B A B``.  While one repetition is usually\\nsufficient, pathological object file and symbol arrangements can require\\nmore.  One may handle such cases by using the\\n``LINK_INTERFACE_MULTIPLICITY`` target property or by manually\\nrepeating the component in the last ``target_link_libraries`` call.\\nHowever, if two archives are really so interdependent they should probably\\nbe combined into a single archive, perhaps by using :ref:`Object Libraries`.\\n\\nCreating Relocatable Packages\\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\\n\\nNote that it is not advisable to populate the\\n``INTERFACE_LINK_LIBRARIES`` of a target with absolute paths to dependencies.\\nThat would hard-code into installed packages the library file paths\\nfor dependencies **as found on the machine the package was made on**.\\n\\nSee the :ref:`Creating Relocatable Packages` section of the\\n``cmake-packages(7)`` manual for discussion of additional care\\nthat must be taken when specifying usage requirements while creating\\npackages for redistribution.\\n",
        "command"
    ],
    "target_link_options": [
        "target_link_options\\n-------------------\\n\\nAdd link options to a target.\\n\\n::\\n\\n target_link_options(<target> [BEFORE]\\n   <INTERFACE|PUBLIC|PRIVATE> [items1...]\\n   [<INTERFACE|PUBLIC|PRIVATE> [items2...] ...])\\n\\nSpecify link options to use when linking a given target.  The\\nnamed ``<target>`` must have been created by a command such as\\n``add_executable()`` or ``add_library()`` and must not be an\\n:ref:`ALIAS target <Alias Targets>`.\\n\\nIf ``BEFORE`` is specified, the content will be prepended to the property\\ninstead of being appended.\\n\\nThis command can be used to add any options, but\\nalternative commands exist to add libraries\\n(``target_link_libraries()`` and ``link_libraries()``).\\nSee documentation of the ``directory`` and\\n``target`` ``LINK_OPTIONS`` properties.\\n\\nThe ``INTERFACE``, ``PUBLIC`` and ``PRIVATE`` keywords are required to\\nspecify the scope of the following arguments.  ``PRIVATE`` and ``PUBLIC``\\nitems will populate the ``LINK_OPTIONS`` property of\\n``<target>``.  ``PUBLIC`` and ``INTERFACE`` items will populate the\\n``INTERFACE_LINK_OPTIONS`` property of ``<target>``.\\n(:ref:`IMPORTED targets <Imported Targets>` only support ``INTERFACE`` items.)\\nThe following arguments specify link options.  Repeated calls for the same\\n``<target>`` append items in the order called.\\n\\nArguments to ``target_link_options`` may use \\\"generator expressions\\\"\\nwith the syntax ``$<...>``. See the ``cmake-generator-expressions(7)``\\nmanual for available expressions.  See the ``cmake-buildsystem(7)``\\nmanual for more on defining buildsystem properties.\\n\\nThe final set of compile or link options used for a target is constructed by\\naccumulating options from the current target and the usage requirements of\\nit dependencies.  The set of options is de-duplicated to avoid repetition.\\nWhile beneficial for individual options, the de-duplication step can break\\nup option groups.  For example, ``-D A -D B`` becomes ``-D A B``.  One may\\nspecify a group of options using shell-like quoting along with a ``SHELL:``\\nprefix.  The ``SHELL:`` prefix is dropped and the rest of the option string\\nis parsed using the ``separate_arguments()`` ``UNIX_COMMAND`` mode.\\nFor example, ``\\\"SHELL:-D A\\\" \\\"SHELL:-D B\\\"`` becomes ``-D A -D B``.\\n\\nTo pass options to the linker tool, each compiler driver has is own syntax.\\nThe ``LINKER:`` prefix can be used to specify, in a portable way, options\\nto pass to the linker tool. The ``LINKER:`` prefix is replaced by the required\\ndriver option and the rest of the option string defines linker arguments using\\n``,`` as separator. These arguments will be formatted according to the\\n``CMAKE_<LANG>_LINKER_WRAPPER_FLAG`` and\\n``CMAKE_<LANG>_LINKER_WRAPPER_FLAG_SEP`` variables.\\n\\nFor example, ``\\\"LINKER:-z,defs\\\"`` becomes ``-Xlinker -z -Xlinker defs`` for\\n``Clang`` and ``-Wl,-z,defs`` for ``GNU GCC``.\\n\\nThe ``LINKER:`` prefix can be specified as part of a ``SHELL:`` prefix\\nexpression.\\n\\nThe ``LINKER:`` prefix supports, as alternate syntax, specification of\\narguments using ``SHELL:`` prefix and space as separator. Previous example\\nbecomes ``\\\"LINKER:SHELL:-z defs\\\"``.\\n\\n.. note::\\n\\n  Specifying ``SHELL:`` prefix elsewhere than at the beginning of the\\n  ``LINKER:`` prefix is not supported.\\n",
        "command"
    ],
    "target_sources": [
        "target_sources\\n--------------\\n\\nAdd sources to a target.\\n\\n::\\n\\n target_sources(<target>\\n   <INTERFACE|PUBLIC|PRIVATE> [items1...]\\n   [<INTERFACE|PUBLIC|PRIVATE> [items2...] ...])\\n\\nSpecify sources to use when compiling a given target.  Relative\\nsource file paths are interpreted as being relative to the current\\nsource directory (i.e. ``CMAKE_CURRENT_SOURCE_DIR``).  The\\nnamed ``<target>`` must have been created by a command such as\\n``add_executable()`` or ``add_library()`` and must not be an\\n:ref:`ALIAS target <Alias Targets>`.\\n\\nThe ``INTERFACE``, ``PUBLIC`` and ``PRIVATE`` keywords are required to\\nspecify the scope of the following arguments.  ``PRIVATE`` and ``PUBLIC``\\nitems will populate the ``SOURCES`` property of\\n``<target>``.  ``PUBLIC`` and ``INTERFACE`` items will populate the\\n``INTERFACE_SOURCES`` property of ``<target>``.\\n(:ref:`IMPORTED targets <Imported Targets>` only support ``INTERFACE`` items.)\\nThe following arguments specify sources.  Repeated calls for the same\\n``<target>`` append items in the order called.\\n\\nArguments to ``target_sources`` may use \\\"generator expressions\\\"\\nwith the syntax ``$<...>``. See the ``cmake-generator-expressions(7)``\\nmanual for available expressions.  See the ``cmake-buildsystem(7)``\\nmanual for more on defining buildsystem properties.\\n\\nSee also the ``CMP0076`` policy for older behavior related to the\\nhandling of relative source file paths.\\n",
        "command"
    ],
    "try_compile": [
        "try_compile\\n-----------\\n\\nTry building some code.\\n\\nTry Compiling Whole Projects\\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\\n::\\n\\n try_compile(RESULT_VAR <bindir> <srcdir>\\n             <projectName> [<targetName>] [CMAKE_FLAGS <flags>...]\\n             [OUTPUT_VARIABLE <var>])\\n\\nTry building a project.  The success or failure of the ``try_compile``,\\ni.e. ``TRUE`` or ``FALSE`` respectively, is returned in ``RESULT_VAR``.\\n\\nIn this form, ``<srcdir>`` should contain a complete CMake project with a\\n``CMakeLists.txt`` file and all sources.  The ``<bindir>`` and ``<srcdir>``\\nwill not be deleted after this command is run.  Specify ``<targetName>`` to\\nbuild a specific target instead of the ``all`` or ``ALL_BUILD`` target.  See\\nbelow for the meaning of other options.\\n\\nTry Compiling Source Files\\n^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\\n::\\n\\n try_compile(RESULT_VAR <bindir> <srcfile|SOURCES srcfile...>\\n             [CMAKE_FLAGS <flags>...]\\n             [COMPILE_DEFINITIONS <defs>...]\\n             [LINK_LIBRARIES <libs>...]\\n             [OUTPUT_VARIABLE <var>]\\n             [COPY_FILE <fileName> [COPY_FILE_ERROR <var>]]\\n             [<LANG>_STANDARD <std>]\\n             [<LANG>_STANDARD_REQUIRED <bool>]\\n             [<LANG>_EXTENSIONS <bool>]\\n             )\\n\\nTry building an executable from one or more source files.  The success or\\nfailure of the ``try_compile``, i.e. ``TRUE`` or ``FALSE`` respectively, is\\nreturned in ``RESULT_VAR``.\\n\\nIn this form the user need only supply one or more source files that include a\\ndefinition for ``main``.  CMake will create a ``CMakeLists.txt`` file to build\\nthe source(s) as an executable that looks something like this::\\n\\n add_definitions(<expanded COMPILE_DEFINITIONS from caller>)\\n include_directories(${INCLUDE_DIRECTORIES})\\n link_directories(${LINK_DIRECTORIES})\\n add_executable(cmTryCompileExec <srcfile>...)\\n target_link_libraries(cmTryCompileExec ${LINK_LIBRARIES})\\n\\nThe options are:\\n\\n``CMAKE_FLAGS <flags>...``\\n  Specify flags of the form ``-DVAR:TYPE=VALUE`` to be passed to\\n  the ``cmake`` command-line used to drive the test build.\\n  The above example shows how values for variables\\n  ``INCLUDE_DIRECTORIES``, ``LINK_DIRECTORIES``, and ``LINK_LIBRARIES``\\n  are used.\\n\\n``COMPILE_DEFINITIONS <defs>...``\\n  Specify ``-Ddefinition`` arguments to pass to ``add_definitions``\\n  in the generated test project.\\n\\n``COPY_FILE <fileName>``\\n  Copy the linked executable to the given ``<fileName>``.\\n\\n``COPY_FILE_ERROR <var>``\\n  Use after ``COPY_FILE`` to capture into variable ``<var>`` any error\\n  message encountered while trying to copy the file.\\n\\n``LINK_LIBRARIES <libs>...``\\n  Specify libraries to be linked in the generated project.\\n  The list of libraries may refer to system libraries and to\\n  :ref:`Imported Targets <Imported Targets>` from the calling project.\\n\\n  If this option is specified, any ``-DLINK_LIBRARIES=...`` value\\n  given to the ``CMAKE_FLAGS`` option will be ignored.\\n\\n``OUTPUT_VARIABLE <var>``\\n  Store the output from the build process the given variable.\\n\\n``<LANG>_STANDARD <std>``\\n  Specify the ``C_STANDARD``, ``CXX_STANDARD``,\\n  or ``CUDA_STANDARD`` target property of the generated project.\\n\\n``<LANG>_STANDARD_REQUIRED <bool>``\\n  Specify the ``C_STANDARD_REQUIRED``,\\n  ``CXX_STANDARD_REQUIRED``, or ``CUDA_STANDARD_REQUIRED``\\n  target property of the generated project.\\n\\n``<LANG>_EXTENSIONS <bool>``\\n  Specify the ``C_EXTENSIONS``, ``CXX_EXTENSIONS``,\\n  or ``CUDA_EXTENSIONS`` target property of the generated project.\\n\\nIn this version all files in ``<bindir>/CMakeFiles/CMakeTmp`` will be\\ncleaned automatically.  For debugging, ``--debug-trycompile`` can be\\npassed to ``cmake`` to avoid this clean.  However, multiple sequential\\n``try_compile`` operations reuse this single output directory.  If you use\\n``--debug-trycompile``, you can only debug one ``try_compile`` call at a time.\\nThe recommended procedure is to protect all ``try_compile`` calls in your\\nproject by ``if(NOT DEFINED RESULT_VAR)`` logic, configure with cmake\\nall the way through once, then delete the cache entry associated with\\nthe try_compile call of interest, and then re-run cmake again with\\n``--debug-trycompile``.\\n\\nOther Behavior Settings\\n^^^^^^^^^^^^^^^^^^^^^^^\\n\\nIf set, the following variables are passed in to the generated\\ntry_compile CMakeLists.txt to initialize compile target properties with\\ndefault values:\\n\\n* ``CMAKE_ENABLE_EXPORTS``\\n* ``CMAKE_LINK_SEARCH_START_STATIC``\\n* ``CMAKE_LINK_SEARCH_END_STATIC``\\n* ``CMAKE_POSITION_INDEPENDENT_CODE``\\n\\nIf ``CMP0056`` is set to ``NEW``, then\\n``CMAKE_EXE_LINKER_FLAGS`` is passed in as well.\\n\\nThe current setting of ``CMP0065`` is set in the generated project.\\n\\nSet the ``CMAKE_TRY_COMPILE_CONFIGURATION`` variable to choose\\na build configuration.\\n\\nSet the ``CMAKE_TRY_COMPILE_TARGET_TYPE`` variable to specify\\nthe type of target used for the source file signature.\\n\\nSet the ``CMAKE_TRY_COMPILE_PLATFORM_VARIABLES`` variable to specify\\nvariables that must be propagated into the test project.  This variable is\\nmeant for use only in toolchain files.\\n\\nIf ``CMP0067`` is set to ``NEW``, or any of the ``<LANG>_STANDARD``,\\n``<LANG>_STANDARD_REQUIRED``, or ``<LANG>_EXTENSIONS`` options are used,\\nthen the language standard variables are honored:\\n\\n* ``CMAKE_C_STANDARD``\\n* ``CMAKE_C_STANDARD_REQUIRED``\\n* ``CMAKE_C_EXTENSIONS``\\n* ``CMAKE_CXX_STANDARD``\\n* ``CMAKE_CXX_STANDARD_REQUIRED``\\n* ``CMAKE_CXX_EXTENSIONS``\\n* ``CMAKE_CUDA_STANDARD``\\n* ``CMAKE_CUDA_STANDARD_REQUIRED``\\n* ``CMAKE_CUDA_EXTENSIONS``\\n\\nTheir values are used to set the corresponding target properties in\\nthe generated project (unless overridden by an explicit option).\\n",
        "command"
    ],
    "try_run": [
        "try_run\\n-------\\n\\nTry compiling and then running some code.\\n\\nTry Compiling and Running Source Files\\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\\n::\\n\\n try_run(RUN_RESULT_VAR COMPILE_RESULT_VAR\\n         bindir srcfile [CMAKE_FLAGS <flags>...]\\n         [COMPILE_DEFINITIONS <defs>...]\\n         [LINK_LIBRARIES <libs>...]\\n         [COMPILE_OUTPUT_VARIABLE <var>]\\n         [RUN_OUTPUT_VARIABLE <var>]\\n         [OUTPUT_VARIABLE <var>]\\n         [ARGS <args>...])\\n\\nTry compiling a ``<srcfile>``.  Returns ``TRUE`` or ``FALSE`` for success\\nor failure in ``COMPILE_RESULT_VAR``.  If the compile succeeded, runs the\\nexecutable and returns its exit code in ``RUN_RESULT_VAR``.  If the\\nexecutable was built, but failed to run, then ``RUN_RESULT_VAR`` will be\\nset to ``FAILED_TO_RUN``.  See the ``try_compile()`` command for\\ninformation on how the test project is constructed to build the source file.\\n\\nThe options are:\\n\\n``CMAKE_FLAGS <flags>...``\\n  Specify flags of the form ``-DVAR:TYPE=VALUE`` to be passed to\\n  the ``cmake`` command-line used to drive the test build.\\n  The example in ``try_compile()`` shows how values for variables\\n  ``INCLUDE_DIRECTORIES``, ``LINK_DIRECTORIES``, and ``LINK_LIBRARIES``\\n  are used.\\n\\n``COMPILE_DEFINITIONS <defs>...``\\n  Specify ``-Ddefinition`` arguments to pass to ``add_definitions``\\n  in the generated test project.\\n\\n``COMPILE_OUTPUT_VARIABLE <var>``\\n  Report the compile step build output in a given variable.\\n\\n``LINK_LIBRARIES <libs>...``\\n  Specify libraries to be linked in the generated project.\\n  The list of libraries may refer to system libraries and to\\n  :ref:`Imported Targets <Imported Targets>` from the calling project.\\n\\n  If this option is specified, any ``-DLINK_LIBRARIES=...`` value\\n  given to the ``CMAKE_FLAGS`` option will be ignored.\\n\\n``OUTPUT_VARIABLE <var>``\\n  Report the compile build output and the output from running the executable\\n  in the given variable.  This option exists for legacy reasons.  Prefer\\n  ``COMPILE_OUTPUT_VARIABLE`` and ``RUN_OUTPUT_VARIABLE`` instead.\\n\\n``RUN_OUTPUT_VARIABLE <var>``\\n  Report the output from running the executable in a given variable.\\n\\nOther Behavior Settings\\n^^^^^^^^^^^^^^^^^^^^^^^\\n\\nSet the ``CMAKE_TRY_COMPILE_CONFIGURATION`` variable to choose\\na build configuration.\\n\\nBehavior when Cross Compiling\\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\\nWhen cross compiling, the executable compiled in the first step\\nusually cannot be run on the build host.  The ``try_run`` command checks\\nthe ``CMAKE_CROSSCOMPILING`` variable to detect whether CMake is in\\ncross-compiling mode.  If that is the case, it will still try to compile\\nthe executable, but it will not try to run the executable unless the\\n``CMAKE_CROSSCOMPILING_EMULATOR`` variable is set.  Instead it\\nwill create cache variables which must be filled by the user or by\\npresetting them in some CMake script file to the values the executable\\nwould have produced if it had been run on its actual target platform.\\nThese cache entries are:\\n\\n``<RUN_RESULT_VAR>``\\n  Exit code if the executable were to be run on the target platform.\\n\\n``<RUN_RESULT_VAR>__TRYRUN_OUTPUT``\\n  Output from stdout and stderr if the executable were to be run on\\n  the target platform.  This is created only if the\\n  ``RUN_OUTPUT_VARIABLE`` or ``OUTPUT_VARIABLE`` option was used.\\n\\nIn order to make cross compiling your project easier, use ``try_run``\\nonly if really required.  If you use ``try_run``, use the\\n``RUN_OUTPUT_VARIABLE`` or ``OUTPUT_VARIABLE`` options only if really\\nrequired.  Using them will require that when cross-compiling, the cache\\nvariables will have to be set manually to the output of the executable.\\nYou can also \\\"guard\\\" the calls to ``try_run`` with an ``if()``\\nblock checking the ``CMAKE_CROSSCOMPILING`` variable and\\nprovide an easy-to-preset alternative for this case.\\n",
        "command"
    ],
    "unset": [
        "unset\\n-----\\n\\nUnset a variable, cache variable, or environment variable.\\n\\n::\\n\\n unset(<variable> [CACHE | PARENT_SCOPE])\\n\\nRemoves a normal variable from the current scope, causing it\\nto become undefined.  If ``CACHE`` is present, then a cache variable\\nis removed instead of a normal variable.  Note that when evaluating\\n:ref:`Variable References` of the form ``${VAR}``, CMake first searches\\nfor a normal variable with that name.  If no such normal variable exists,\\nCMake will then search for a cache entry with that name.  Because of this\\nunsetting a normal variable can expose a cache variable that was previously\\nhidden.  To force a variable reference of the form ``${VAR}`` to return an\\nempty string, use ``set(<variable> \\\"\\\")``, which clears the normal variable\\nbut leaves it defined.\\n\\nIf ``PARENT_SCOPE`` is present then the variable is removed from the scope\\nabove the current scope.  See the same option in the ``set()`` command\\nfor further details.\\n\\n``<variable>`` can be an environment variable such as:\\n\\n::\\n\\n unset(ENV{LD_LIBRARY_PATH})\\n\\nin which case the variable will be removed from the current\\nenvironment.\\n",
        "command"
    ],
    "use_mangled_mesa": [
        "use_mangled_mesa\\n----------------\\n\\nDisallowed.  See CMake Policy ``CMP0030``.\\n\\nCopy mesa headers for use in combination with system GL.\\n\\n::\\n\\n use_mangled_mesa(PATH_TO_MESA OUTPUT_DIRECTORY)\\n\\nThe path to mesa includes, should contain gl_mangle.h.  The mesa\\nheaders are copied to the specified output directory.  This allows\\nmangled mesa headers to override other GL headers by being added to\\nthe include directory path earlier.\\n",
        "command"
    ],
    "utility_source": [
        "utility_source\\n--------------\\n\\nDisallowed.  See CMake Policy ``CMP0034``.\\n\\nSpecify the source tree of a third-party utility.\\n\\n::\\n\\n utility_source(cache_entry executable_name\\n                path_to_source [file1 file2 ...])\\n\\nWhen a third-party utility's source is included in the distribution,\\nthis command specifies its location and name.  The cache entry will\\nnot be set unless the ``path_to_source`` and all listed files exist.  It\\nis assumed that the source tree of the utility will have been built\\nbefore it is needed.\\n\\nWhen cross compiling CMake will print a warning if a ``utility_source()``\\ncommand is executed, because in many cases it is used to build an\\nexecutable which is executed later on.  This doesn't work when cross\\ncompiling, since the executable can run only on their target platform.\\nSo in this case the cache entry has to be adjusted manually so it\\npoints to an executable which is runnable on the build host.\\n",
        "command"
    ],
    "variable_requires": [
        "variable_requires\\n-----------------\\n\\nDisallowed.  See CMake Policy ``CMP0035``.\\n\\nUse the ``if()`` command instead.\\n\\nAssert satisfaction of an option's required variables.\\n\\n::\\n\\n variable_requires(TEST_VARIABLE RESULT_VARIABLE\\n                   REQUIRED_VARIABLE1\\n                   REQUIRED_VARIABLE2 ...)\\n\\nThe first argument (``TEST_VARIABLE``) is the name of the variable to be\\ntested, if that variable is false nothing else is done.  If\\n``TEST_VARIABLE`` is true, then the next argument (``RESULT_VARIABLE``)\\nis a variable that is set to true if all the required variables are set.\\nThe rest of the arguments are variables that must be true or not set\\nto NOTFOUND to avoid an error.  If any are not true, an error is\\nreported.\\n",
        "command"
    ],
    "variable_watch": [
        "variable_watch\\n--------------\\n\\nWatch the CMake variable for change.\\n\\n::\\n\\n variable_watch(<variable name> [<command to execute>])\\n\\nIf the specified variable changes, the message will be printed about\\nthe variable being changed.  If the command is specified, the command\\nwill be executed.  The command will receive the following arguments:\\nCOMMAND(<variable> <access> <value> <current list file> <stack>)\\n",
        "command"
    ],
    "while": [
        "while\\n-----\\n\\nEvaluate a group of commands while a condition is true\\n\\n::\\n\\n while(condition)\\n   COMMAND1(ARGS ...)\\n   COMMAND2(ARGS ...)\\n   ...\\n endwhile(condition)\\n\\nAll commands between while and the matching ``endwhile()`` are recorded\\nwithout being invoked.  Once the ``endwhile()`` is evaluated, the\\nrecorded list of commands is invoked as long as the condition is true.  The\\ncondition is evaluated using the same logic as the ``if()`` command.\\n",
        "command"
    ],
    "write_file": [
        "write_file\\n----------\\n\\nDeprecated. Use the ``file(WRITE)`` command instead.\\n\\n::\\n\\n write_file(filename \\\"message to write\\\"... [APPEND])\\n\\nThe first argument is the file name, the rest of the arguments are\\nmessages to write.  If the argument ``APPEND`` is specified, then the\\nmessage will be appended.\\n\\nNOTE 1: ``file(WRITE)``  and ``file(APPEND)``  do exactly\\nthe same as this one but add some more functionality.\\n\\nNOTE 2: When using ``write_file`` the produced file cannot be used as an\\ninput to CMake (CONFIGURE_FILE, source file ...) because it will lead\\nto an infinite loop.  Use ``configure_file()`` if you want to\\ngenerate input files to CMake.\\n",
        "command"
    ],
    "DEBUG_OUTPUT_NAME": [
        "<CONFIG>_OUTPUT_NAME\\n--------------------\\n\\nOld per-configuration target file base name.\\nUse ``OUTPUT_NAME_<CONFIG>`` instead.\\n\\nThis is a configuration-specific version of the ``OUTPUT_NAME``\\ntarget property.\\n",
        "property"
    ],
    "RELEASE_OUTPUT_NAME": [
        "<CONFIG>_OUTPUT_NAME\\n--------------------\\n\\nOld per-configuration target file base name.\\nUse ``OUTPUT_NAME_<CONFIG>`` instead.\\n\\nThis is a configuration-specific version of the ``OUTPUT_NAME``\\ntarget property.\\n",
        "property"
    ],
    "DEBUG_POSTFIX": [
        "DEBUG_POSTFIX\\n-------------\\n\\nSee target property <CONFIG>_POSTFIX.\\n\\nThis property is a special case of the more-general <CONFIG>_POSTFIX\\nproperty for the DEBUG configuration.\\n",
        "property"
    ],
    "RELEASE_POSTFIX": [
        "<CONFIG>_POSTFIX\\n----------------\\n\\nPostfix to append to the target file name for configuration <CONFIG>.\\n\\nWhen building with configuration <CONFIG> the value of this property\\nis appended to the target file name built on disk.  For non-executable\\ntargets, this property is initialized by the value of the variable\\nCMAKE_<CONFIG>_POSTFIX if it is set when a target is created.  This\\nproperty is ignored on the Mac for Frameworks and App Bundles.\\n",
        "property"
    ],
    "C_CLANG_TIDY": [
        "<LANG>_CLANG_TIDY\\n-----------------\\n\\nThis property is implemented only when ``<LANG>`` is ``C`` or ``CXX``.\\n\\nSpecify a :ref:`;-list <CMake Language Lists>` containing a command\\nline for the ``clang-tidy`` tool.  The :ref:`Makefile Generators`\\nand the ``Ninja`` generator will run this tool along with the\\ncompiler and report a warning if the tool reports any problems.\\n\\nThis property is initialized by the value of\\nthe ``CMAKE_<LANG>_CLANG_TIDY`` variable if it is set\\nwhen a target is created.\\n",
        "property"
    ],
    "CXX_CLANG_TIDY": [
        "<LANG>_CLANG_TIDY\\n-----------------\\n\\nThis property is implemented only when ``<LANG>`` is ``C`` or ``CXX``.\\n\\nSpecify a :ref:`;-list <CMake Language Lists>` containing a command\\nline for the ``clang-tidy`` tool.  The :ref:`Makefile Generators`\\nand the ``Ninja`` generator will run this tool along with the\\ncompiler and report a warning if the tool reports any problems.\\n\\nThis property is initialized by the value of\\nthe ``CMAKE_<LANG>_CLANG_TIDY`` variable if it is set\\nwhen a target is created.\\n",
        "property"
    ],
    "C_COMPILER_LAUNCHER": [
        "<LANG>_COMPILER_LAUNCHER\\n------------------------\\n\\nThis property is implemented only when ``<LANG>`` is ``C``, ``CXX``,\\n``Fortran``, or ``CUDA``.\\n\\nSpecify a :ref:`;-list <CMake Language Lists>` containing a command line\\nfor a compiler launching tool. The :ref:`Makefile Generators` and the\\n``Ninja`` generator will run this tool and pass the compiler and\\nits arguments to the tool. Some example tools are distcc and ccache.\\n\\nThis property is initialized by the value of\\nthe ``CMAKE_<LANG>_COMPILER_LAUNCHER`` variable if it is set\\nwhen a target is created.\\n",
        "property"
    ],
    "CXX_COMPILER_LAUNCHER": [
        "<LANG>_COMPILER_LAUNCHER\\n------------------------\\n\\nThis property is implemented only when ``<LANG>`` is ``C``, ``CXX``,\\n``Fortran``, or ``CUDA``.\\n\\nSpecify a :ref:`;-list <CMake Language Lists>` containing a command line\\nfor a compiler launching tool. The :ref:`Makefile Generators` and the\\n``Ninja`` generator will run this tool and pass the compiler and\\nits arguments to the tool. Some example tools are distcc and ccache.\\n\\nThis property is initialized by the value of\\nthe ``CMAKE_<LANG>_COMPILER_LAUNCHER`` variable if it is set\\nwhen a target is created.\\n",
        "property"
    ],
    "C_CPPCHECK": [
        "<LANG>_CPPCHECK\\n---------------\\n\\nThis property is supported only when ``<LANG>`` is ``C`` or ``CXX``.\\n\\nSpecify a :ref:`;-list <CMake Language Lists>` containing a command line\\nfor the ``cppcheck`` static analysis tool.  The :ref:`Makefile Generators`\\nand the ``Ninja`` generator will run ``cppcheck`` along with the\\ncompiler and report any problems.\\n\\nThis property is initialized by the value of the\\n``CMAKE_<LANG>_CPPCHECK`` variable if it is set when a target is\\ncreated.\\n",
        "property"
    ],
    "CXX_CPPCHECK": [
        "<LANG>_CPPCHECK\\n---------------\\n\\nThis property is supported only when ``<LANG>`` is ``C`` or ``CXX``.\\n\\nSpecify a :ref:`;-list <CMake Language Lists>` containing a command line\\nfor the ``cppcheck`` static analysis tool.  The :ref:`Makefile Generators`\\nand the ``Ninja`` generator will run ``cppcheck`` along with the\\ncompiler and report any problems.\\n\\nThis property is initialized by the value of the\\n``CMAKE_<LANG>_CPPCHECK`` variable if it is set when a target is\\ncreated.\\n",
        "property"
    ],
    "C_CPPLINT": [
        "<LANG>_CPPLINT\\n--------------\\n\\nThis property is supported only when ``<LANG>`` is ``C`` or ``CXX``.\\n\\nSpecify a :ref:`;-list <CMake Language Lists>` containing a command line\\nfor the ``cpplint`` style checker.  The :ref:`Makefile Generators` and the\\n``Ninja`` generator will run ``cpplint`` along with the compiler\\nand report any problems.\\n\\nThis property is initialized by the value of the\\n``CMAKE_<LANG>_CPPLINT`` variable if it is set when a target is\\ncreated.\\n",
        "property"
    ],
    "CXX_CPPLINT": [
        "<LANG>_CPPLINT\\n--------------\\n\\nThis property is supported only when ``<LANG>`` is ``C`` or ``CXX``.\\n\\nSpecify a :ref:`;-list <CMake Language Lists>` containing a command line\\nfor the ``cpplint`` style checker.  The :ref:`Makefile Generators` and the\\n``Ninja`` generator will run ``cpplint`` along with the compiler\\nand report any problems.\\n\\nThis property is initialized by the value of the\\n``CMAKE_<LANG>_CPPLINT`` variable if it is set when a target is\\ncreated.\\n",
        "property"
    ],
    "C_INCLUDE_WHAT_YOU_USE": [
        "<LANG>_INCLUDE_WHAT_YOU_USE\\n---------------------------\\n\\nThis property is implemented only when ``<LANG>`` is ``C`` or ``CXX``.\\n\\nSpecify a :ref:`;-list <CMake Language Lists>` containing a command\\nline for the ``include-what-you-use`` tool.  The :ref:`Makefile Generators`\\nand the ``Ninja`` generator will run this tool along with the\\ncompiler and report a warning if the tool reports any problems.\\n\\nThis property is initialized by the value of\\nthe ``CMAKE_<LANG>_INCLUDE_WHAT_YOU_USE`` variable if it is set\\nwhen a target is created.\\n",
        "property"
    ],
    "CXX_INCLUDE_WHAT_YOU_USE": [
        "<LANG>_INCLUDE_WHAT_YOU_USE\\n---------------------------\\n\\nThis property is implemented only when ``<LANG>`` is ``C`` or ``CXX``.\\n\\nSpecify a :ref:`;-list <CMake Language Lists>` containing a command\\nline for the ``include-what-you-use`` tool.  The :ref:`Makefile Generators`\\nand the ``Ninja`` generator will run this tool along with the\\ncompiler and report a warning if the tool reports any problems.\\n\\nThis property is initialized by the value of\\nthe ``CMAKE_<LANG>_INCLUDE_WHAT_YOU_USE`` variable if it is set\\nwhen a target is created.\\n",
        "property"
    ],
    "C_VISIBILITY_PRESET": [
        "<LANG>_VISIBILITY_PRESET\\n------------------------\\n\\nValue for symbol visibility compile flags\\n\\nThe ``<LANG>_VISIBILITY_PRESET`` property determines the value passed in a\\nvisibility related compile option, such as ``-fvisibility=`` for ``<LANG>``.\\nThis property affects compilation in sources of all types of targets\\n(subject to policy ``CMP0063``).\\n\\nThis property is initialized by the value of the\\n``CMAKE_<LANG>_VISIBILITY_PRESET`` variable if it is set when a\\ntarget is created.\\n",
        "property"
    ],
    "CXX_VISIBILITY_PRESET": [
        "<LANG>_VISIBILITY_PRESET\\n------------------------\\n\\nValue for symbol visibility compile flags\\n\\nThe ``<LANG>_VISIBILITY_PRESET`` property determines the value passed in a\\nvisibility related compile option, such as ``-fvisibility=`` for ``<LANG>``.\\nThis property affects compilation in sources of all types of targets\\n(subject to policy ``CMP0063``).\\n\\nThis property is initialized by the value of the\\n``CMAKE_<LANG>_VISIBILITY_PRESET`` variable if it is set when a\\ntarget is created.\\n",
        "property"
    ],
    "ABSTRACT": [
        "ABSTRACT\\n--------\\n\\nIs this source file an abstract class.\\n\\nA property on a source file that indicates if the source file\\nrepresents a class that is abstract.  This only makes sense for\\nlanguages that have a notion of an abstract class and it is only used\\nby some tools that wrap classes into other languages.\\n",
        "property"
    ],
    "ADDITIONAL_MAKE_CLEAN_FILES": [
        "ADDITIONAL_MAKE_CLEAN_FILES\\n---------------------------\\n\\nAdditional files to clean during the make clean stage.\\n\\nA list of files that will be cleaned as a part of the \\\"make clean\\\"\\nstage.\\n",
        "property"
    ],
    "ADVANCED": [
        "ADVANCED\\n--------\\n\\nTrue if entry should be hidden by default in GUIs.\\n\\nThis is a boolean value indicating whether the entry is considered\\ninteresting only for advanced configuration.  The mark_as_advanced()\\ncommand modifies this property.\\n",
        "property"
    ],
    "ALIASED_TARGET": [
        "ALIASED_TARGET\\n--------------\\n\\nName of target aliased by this target.\\n\\nIf this is an :ref:`Alias Target <Alias Targets>`, this property contains\\nthe name of the target aliased.\\n",
        "property"
    ],
    "ALLOW_DUPLICATE_CUSTOM_TARGETS": [
        "ALLOW_DUPLICATE_CUSTOM_TARGETS\\n------------------------------\\n\\nAllow duplicate custom targets to be created.\\n\\nNormally CMake requires that all targets built in a project have\\nglobally unique logical names (see policy CMP0002).  This is necessary\\nto generate meaningful project file names in Xcode and VS IDE\\ngenerators.  It also allows the target names to be referenced\\nunambiguously.\\n\\nMakefile generators are capable of supporting duplicate custom target\\nnames.  For projects that care only about Makefile generators and do\\nnot wish to support Xcode or VS IDE generators, one may set this\\nproperty to true to allow duplicate custom targets.  The property\\nallows multiple add_custom_target command calls in different\\ndirectories to specify the same target name.  However, setting this\\nproperty will cause non-Makefile generators to produce an error and\\nrefuse to generate the project.\\n",
        "property"
    ],
    "ANDROID_ANT_ADDITIONAL_OPTIONS": [
        "ANDROID_ANT_ADDITIONAL_OPTIONS\\n------------------------------\\n\\nSet the additional options for Android Ant build system. This is\\na string value containing all command line options for the Ant build.\\nThis property is initialized by the value of the\\n``CMAKE_ANDROID_ANT_ADDITIONAL_OPTIONS`` variable if it is\\nset when a target is created.\\n",
        "property"
    ],
    "ANDROID_API": [
        "ANDROID_API\\n-----------\\n\\nWhen :ref:`Cross Compiling for Android with NVIDIA Nsight Tegra Visual Studio\\nEdition`, this property sets the Android target API version (e.g. ``15``).\\nThe version number must be a positive decimal integer.  This property is\\ninitialized by the value of the ``CMAKE_ANDROID_API`` variable if\\nit is set when a target is created.\\n",
        "property"
    ],
    "ANDROID_API_MIN": [
        "ANDROID_API_MIN\\n---------------\\n\\nSet the Android MIN API version (e.g. ``9``).  The version number\\nmust be a positive decimal integer.  This property is initialized by\\nthe value of the ``CMAKE_ANDROID_API_MIN`` variable if it is set\\nwhen a target is created.  Native code builds using this API version.\\n",
        "property"
    ],
    "ANDROID_ARCH": [
        "ANDROID_ARCH\\n------------\\n\\nWhen :ref:`Cross Compiling for Android with NVIDIA Nsight Tegra Visual Studio\\nEdition`, this property sets the Android target architecture.\\n\\nThis is a string property that could be set to the one of\\nthe following values:\\n\\n* ``armv7-a``: \\\"ARMv7-A (armv7-a)\\\"\\n* ``armv7-a-hard``: \\\"ARMv7-A, hard-float ABI (armv7-a)\\\"\\n* ``arm64-v8a``: \\\"ARMv8-A, 64bit (arm64-v8a)\\\"\\n* ``x86``: \\\"x86 (x86)\\\"\\n* ``x86_64``: \\\"x86_64 (x86_64)\\\"\\n\\nThis property is initialized by the value of the\\n``CMAKE_ANDROID_ARCH`` variable if it is set\\nwhen a target is created.\\n",
        "property"
    ],
    "ANDROID_ASSETS_DIRECTORIES": [
        "ANDROID_ASSETS_DIRECTORIES\\n--------------------------\\n\\nSet the Android assets directories to copy into the main assets\\nfolder before build. This a string property that contains the\\ndirectory paths separated by semicolon.\\nThis property is initialized by the value of the\\n``CMAKE_ANDROID_ASSETS_DIRECTORIES`` variable if it is set when\\na target is created.\\n",
        "property"
    ],
    "ANDROID_GUI": [
        "ANDROID_GUI\\n-----------\\n\\nWhen :ref:`Cross Compiling for Android with NVIDIA Nsight Tegra Visual Studio\\nEdition`, this property specifies whether to build an executable as an\\napplication package on Android.\\n\\nWhen this property is set to true the executable when built for Android\\nwill be created as an application package.  This property is initialized\\nby the value of the ``CMAKE_ANDROID_GUI`` variable if it is set\\nwhen a target is created.\\n\\nAdd the ``AndroidManifest.xml`` source file explicitly to the\\ntarget ``add_executable()`` command invocation to specify the\\nroot directory of the application package source.\\n",
        "property"
    ],
    "ANDROID_JAR_DEPENDENCIES": [
        "ANDROID_JAR_DEPENDENCIES\\n------------------------\\n\\nSet the Android property that specifies JAR dependencies.\\nThis is a string value property. This property is initialized\\nby the value of the ``CMAKE_ANDROID_JAR_DEPENDENCIES``\\nvariable if it is set when a target is created.\\n",
        "property"
    ],
    "ANDROID_JAR_DIRECTORIES": [
        "ANDROID_JAR_DIRECTORIES\\n-----------------------\\n\\nSet the Android property that specifies directories to search for\\nthe JAR libraries.\\n\\nThis a string property that contains the directory paths separated by\\nsemicolons. This property is initialized by the value of the\\n``CMAKE_ANDROID_JAR_DIRECTORIES`` variable if it is set when\\na target is created.\\n\\nContents of ``ANDROID_JAR_DIRECTORIES`` may use \\\"generator expressions\\\"\\nwith the syntax ``$<...>``.  See the ``cmake-generator-expressions(7)``\\nmanual for available expressions.\\n",
        "property"
    ],
    "ANDROID_JAVA_SOURCE_DIR": [
        "ANDROID_JAVA_SOURCE_DIR\\n-----------------------\\n\\nSet the Android property that defines the Java source code root directories.\\nThis a string property that contains the directory paths separated by semicolon.\\nThis property is initialized by the value of the\\n``CMAKE_ANDROID_JAVA_SOURCE_DIR`` variable if it is set\\nwhen a target is created.\\n",
        "property"
    ],
    "ANDROID_NATIVE_LIB_DEPENDENCIES": [
        "ANDROID_NATIVE_LIB_DEPENDENCIES\\n-------------------------------\\n\\nSet the Android property that specifies the .so dependencies.\\nThis is a string property.\\n\\nThis property is initialized by the value of the\\n``CMAKE_ANDROID_NATIVE_LIB_DEPENDENCIES`` variable if it is set\\nwhen a target is created.\\n\\nContents of ``ANDROID_NATIVE_LIB_DEPENDENCIES`` may use\\n\\\"generator expressions\\\" with the syntax ``$<...>``. See the\\n``cmake-generator-expressions(7)`` manual for\\navailable expressions.\\n",
        "property"
    ],
    "ANDROID_NATIVE_LIB_DIRECTORIES": [
        "ANDROID_NATIVE_LIB_DIRECTORIES\\n------------------------------\\n\\nSet the Android property that specifies directories to search for the\\n.so libraries.\\n\\nThis a string property that contains the directory paths separated\\nby semicolons.\\n\\nThis property is initialized by the value of the\\n``CMAKE_ANDROID_NATIVE_LIB_DIRECTORIES`` variable if it is set when a\\ntarget is created.\\n\\nContents of ``ANDROID_NATIVE_LIB_DIRECTORIES`` may use \\\"generator expressions\\\"\\nwith the syntax ``$<...>``.  See the ``cmake-generator-expressions(7)``\\nmanual for available expressions.\\n",
        "property"
    ],
    "ANDROID_PROCESS_MAX": [
        "ANDROID_PROCESS_MAX\\n-------------------\\n\\nSet the Android property that defines the maximum number of a\\nparallel Android NDK compiler processes (e.g. ``4``).\\nThis property is initialized by the value of the\\n``CMAKE_ANDROID_PROCESS_MAX`` variable if it is set\\nwhen a target is created.\\n",
        "property"
    ],
    "ANDROID_PROGUARD": [
        "ANDROID_PROGUARD\\n----------------\\n\\nWhen this property is set to true that enables the ProGuard tool to shrink,\\noptimize, and obfuscate the code by removing unused code and renaming\\nclasses, fields, and methods with semantically obscure names.\\nThis property is initialized by the value of the\\n``CMAKE_ANDROID_PROGUARD`` variable if it is set\\nwhen a target is created.\\n",
        "property"
    ],
    "ANDROID_PROGUARD_CONFIG_PATH": [
        "ANDROID_PROGUARD_CONFIG_PATH\\n----------------------------\\n\\nSet the Android property that specifies the location of the ProGuard\\nconfig file. Leave empty to use the default one.\\nThis a string property that contains the path to ProGuard config file.\\nThis property is initialized by the value of the\\n``CMAKE_ANDROID_PROGUARD_CONFIG_PATH`` variable if it is set\\nwhen a target is created.\\n",
        "property"
    ],
    "ANDROID_SECURE_PROPS_PATH": [
        "ANDROID_SECURE_PROPS_PATH\\n-------------------------\\n\\nSet the Android property that states the location of the secure properties file.\\nThis is a string property that contains the file path.\\nThis property is initialized by the value of the\\n``CMAKE_ANDROID_SECURE_PROPS_PATH`` variable\\nif it is set when a target is created.\\n",
        "property"
    ],
    "ANDROID_SKIP_ANT_STEP": [
        "ANDROID_SKIP_ANT_STEP\\n---------------------\\n\\nSet the Android property that defines whether or not to skip the Ant build step.\\nThis is a boolean property initialized by the value of the\\n``CMAKE_ANDROID_SKIP_ANT_STEP`` variable if it is set when a target is created.\\n",
        "property"
    ],
    "ANDROID_STL_TYPE": [
        "ANDROID_STL_TYPE\\n----------------\\n\\nWhen :ref:`Cross Compiling for Android with NVIDIA Nsight Tegra Visual Studio\\nEdition`, this property specifies the type of STL support for the project.\\nThis is a string property that could set to the one of the following values:\\n\\n``none``\\n  No C++ Support\\n``system``\\n  Minimal C++ without STL\\n``gabi++_static``\\n  GAbi++ Static\\n``gabi++_shared``\\n  GAbi++ Shared\\n``gnustl_static``\\n  GNU libstdc++ Static\\n``gnustl_shared``\\n  GNU libstdc++ Shared\\n``stlport_static``\\n  STLport Static\\n``stlport_shared``\\n  STLport Shared\\n\\nThis property is initialized by the value of the\\n``CMAKE_ANDROID_STL_TYPE`` variable if it is set when a target is\\ncreated.\\n",
        "property"
    ],
    "ARCHIVE_OUTPUT_DIRECTORY": [
        "ARCHIVE_OUTPUT_DIRECTORY\\n------------------------\\n\\nOutput directory in which to build :ref:`ARCHIVE <Archive Output Artifacts>` target files.\\n\\nThis property specifies the directory into which archive target files\\nshould be built.  The property value may use\\n``generator expressions``.\\nMulti-configuration generators (VS, Xcode) append a per-configuration\\nsubdirectory to the specified directory unless a generator expression\\nis used.\\n\\nThis property is initialized by the value of the variable\\nCMAKE_ARCHIVE_OUTPUT_DIRECTORY if it is set when a target is created.\\n\\nSee also the ``ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>`` target property.\\n",
        "property"
    ],
    "ARCHIVE_OUTPUT_DIRECTORY_DEBUG": [
        "ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>\\n---------------------------------\\n\\nPer-configuration output directory for\\n:ref:`ARCHIVE <Archive Output Artifacts>` target files.\\n\\nThis is a per-configuration version of the\\n``ARCHIVE_OUTPUT_DIRECTORY`` target property, but\\nmulti-configuration generators (VS, Xcode) do NOT append a\\nper-configuration subdirectory to the specified directory.  This\\nproperty is initialized by the value of the\\n``CMAKE_ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>`` variable if\\nit is set when a target is created.\\n\\nContents of ``ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>`` may use\\n``generator expressions``.\\n",
        "property"
    ],
    "ARCHIVE_OUTPUT_DIRECTORY_RELEASE": [
        "ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>\\n---------------------------------\\n\\nPer-configuration output directory for\\n:ref:`ARCHIVE <Archive Output Artifacts>` target files.\\n\\nThis is a per-configuration version of the\\n``ARCHIVE_OUTPUT_DIRECTORY`` target property, but\\nmulti-configuration generators (VS, Xcode) do NOT append a\\nper-configuration subdirectory to the specified directory.  This\\nproperty is initialized by the value of the\\n``CMAKE_ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>`` variable if\\nit is set when a target is created.\\n\\nContents of ``ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>`` may use\\n``generator expressions``.\\n",
        "property"
    ],
    "ARCHIVE_OUTPUT_NAME": [
        "ARCHIVE_OUTPUT_NAME\\n-------------------\\n\\nOutput name for :ref:`ARCHIVE <Archive Output Artifacts>` target files.\\n\\nThis property specifies the base name for archive target files.  It\\noverrides ``OUTPUT_NAME`` and ``OUTPUT_NAME_<CONFIG>``\\nproperties.\\n\\nSee also the ``ARCHIVE_OUTPUT_NAME_<CONFIG>`` target property.\\n",
        "property"
    ],
    "ARCHIVE_OUTPUT_NAME_DEBUG": [
        "ARCHIVE_OUTPUT_NAME_<CONFIG>\\n----------------------------\\n\\nPer-configuration output name for\\n:ref:`ARCHIVE <Archive Output Artifacts>` target files.\\n\\nThis is the configuration-specific version of the\\n``ARCHIVE_OUTPUT_NAME`` target property.\\n",
        "property"
    ],
    "ARCHIVE_OUTPUT_NAME_RELEASE": [
        "ARCHIVE_OUTPUT_NAME_<CONFIG>\\n----------------------------\\n\\nPer-configuration output name for\\n:ref:`ARCHIVE <Archive Output Artifacts>` target files.\\n\\nThis is the configuration-specific version of the\\n``ARCHIVE_OUTPUT_NAME`` target property.\\n",
        "property"
    ],
    "ATTACHED_FILES": [
        "ATTACHED_FILES\\n--------------\\n\\nAttach a list of files to a dashboard submission.\\n\\nSet this property to a list of files that will be encoded and\\nsubmitted to the dashboard as an addition to the test result.\\n",
        "property"
    ],
    "ATTACHED_FILES_ON_FAIL": [
        "ATTACHED_FILES_ON_FAIL\\n----------------------\\n\\nAttach a list of files to a dashboard submission if the test fails.\\n\\nSame as ``ATTACHED_FILES``, but these files will only be\\nincluded if the test does not pass.\\n",
        "property"
    ],
    "AUTOGEN_BUILD_DIR": [
        "AUTOGEN_BUILD_DIR\\n-----------------\\n\\nDirectory where ``AUTOMOC``, ``AUTOUIC`` and ``AUTORCC``\\ngenerate files for the target.\\n\\nThe directory is created on demand and automatically added to the\\n``ADDITIONAL_MAKE_CLEAN_FILES``.\\n\\nWhen unset or empty the directory ``<dir>/<target-name>_autogen`` is used where\\n``<dir>`` is ``CMAKE_CURRENT_BINARY_DIR`` and ``<target-name>``\\nis ``NAME``.\\n\\nBy default ``AUTOGEN_BUILD_DIR`` is unset.\\n\\nSee the ``cmake-qt(7)`` manual for more information on using CMake\\nwith Qt.\\n",
        "property"
    ],
    "AUTOGEN_PARALLEL": [
        "AUTOGEN_PARALLEL\\n----------------\\n\\nNumber of parallel ``moc`` or ``uic`` processes to start when using\\n``AUTOMOC`` and ``AUTOUIC``.\\n\\nThe custom `<origin>_autogen` target starts a number of threads of which\\neach one parses a source file and on demand starts a ``moc`` or ``uic``\\nprocess.  ``AUTOGEN_PARALLEL`` controls how many parallel threads\\n(and therefore ``moc`` or ``uic`` processes) are started.\\n\\n- An empty (or unset) value or the string ``AUTO`` sets the number of\\n  threads/processes to the number of physical CPUs on the host system.\\n- A positive non zero integer value sets the exact thread/process count.\\n- Otherwise a single thread/process is started.\\n\\nBy default ``AUTOGEN_PARALLEL`` is initialized from\\n``CMAKE_AUTOGEN_PARALLEL``.\\n\\nSee the ``cmake-qt(7)`` manual for more information on using CMake\\nwith Qt.\\n",
        "property"
    ],
    "AUTOGEN_SOURCE_GROUP": [
        "AUTOGEN_SOURCE_GROUP\\n--------------------\\n\\nName of the  ``source_group()`` for ``AUTOMOC`` and\\n``AUTORCC`` generated files.\\n\\nFiles generated by ``AUTOMOC`` and ``AUTORCC`` are not always\\nknown at configure time and therefore can't be passed to\\n``source_group()``.\\n``AUTOGEN_SOURCE_GROUP`` an be used instead to generate or select\\na source group for ``AUTOMOC`` and ``AUTORCC`` generated files.\\n\\nFor ``AUTOMOC`` and ``AUTORCC`` specific overrides see\\n``AUTOMOC_SOURCE_GROUP`` and ``AUTORCC_SOURCE_GROUP``\\nrespectively.\\n",
        "property"
    ],
    "AUTOGEN_TARGETS_FOLDER": [
        "AUTOGEN_TARGETS_FOLDER\\n----------------------\\n\\nName of ``FOLDER`` for ``*_autogen`` targets that are added\\nautomatically by CMake for targets for which ``AUTOMOC`` is enabled.\\n\\nIf not set, CMake uses the ``FOLDER`` property of the parent target as a\\ndefault value for this property.  See also the documentation for the\\n``FOLDER`` target property and the ``AUTOMOC`` target property.\\n",
        "property"
    ],
    "AUTOGEN_TARGET_DEPENDS": [
        "AUTOGEN_TARGET_DEPENDS\\n----------------------\\n\\nTarget dependencies of the corresponding ``_autogen`` target.\\n\\nTargets which have their ``AUTOMOC`` or ``AUTOUIC`` property\\n``ON`` have a corresponding ``_autogen`` target which is used to auto generate\\n``moc`` and ``uic`` files.  As this ``_autogen`` target is created at\\ngenerate-time, it is not possible to define dependencies of it,\\nsuch as to create inputs for the ``moc`` or ``uic`` executable.\\n\\nThe ``AUTOGEN_TARGET_DEPENDS`` target property can be set instead to a\\nlist of dependencies of the ``_autogen`` target.  Dependencies can be target\\nnames or file names.\\n\\nSee the ``cmake-qt(7)`` manual for more information on using CMake\\nwith Qt.\\n\\nUse cases\\n^^^^^^^^^\\n\\nIf ``AUTOMOC`` or ``AUTOUIC`` depends on a file that is either\\n\\n- a ``GENERATED`` non C++ file (e.g. a ``GENERATED`` ``.json``\\n  or ``.ui`` file) or\\n- a ``GENERATED`` C++ file that isn't recognized by ``AUTOMOC``\\n  and ``AUTOUIC`` because it's skipped by ``SKIP_AUTOMOC``,\\n  ``SKIP_AUTOUIC``, ``SKIP_AUTOGEN`` or ``CMP0071`` or\\n- a file that isn't in the target's sources\\n\\nit must added to ``AUTOGEN_TARGET_DEPENDS``.\\n",
        "property"
    ],
    "AUTOMOC": [
        "AUTOMOC\\n-------\\n\\nShould the target be processed with automoc (for Qt projects).\\n\\nAUTOMOC is a boolean specifying whether CMake will handle the Qt ``moc``\\npreprocessor automatically, i.e.  without having to use the\\n``QT4_WRAP_CPP()`` or QT5_WRAP_CPP() macro.\\nCurrently Qt4 and Qt5 are supported.\\n\\nWhen this property is set ``ON``, CMake will scan the header and\\nsource files at build time and invoke moc accordingly.\\n\\n* If an ``#include`` statement like ``#include \\\"moc_<basename>.cpp\\\"`` is found,\\n  a macro from ``AUTOMOC_MACRO_NAMES`` is expected to appear in the\\n  ``<basename>.h(xx)`` header file. ``moc`` is run on the header\\n  file to generate ``moc_<basename>.cpp`` in the\\n  ``<AUTOGEN_BUILD_DIR>/include`` directory which is automatically added\\n  to the target's ``INCLUDE_DIRECTORIES``.\\n  This allows the compiler to find the included ``moc_<basename>.cpp`` file\\n  regardless of the location the original source.\\n\\n  * For ``multi configuration generators``,\\n    the include directory is ``<AUTOGEN_BUILD_DIR>/include_<CONFIG>``.\\n\\n  * See ``AUTOGEN_BUILD_DIR``.\\n\\n* If an ``#include`` statement like ``#include \\\"<basename>.moc\\\"`` is found,\\n  a macro from ``AUTOMOC_MACRO_NAMES`` is expected to appear in the\\n  source file and ``moc`` is run on the source file itself.\\n\\n* Header files that are not included by an ``#include \\\"moc_<basename>.cpp\\\"``\\n  statement are nonetheless scanned for a macro out of\\n  ``AUTOMOC_MACRO_NAMES``.\\n  The resulting ``moc_<basename>.cpp`` files are generated in custom\\n  directories and automatically included in a generated\\n  ``<AUTOGEN_BUILD_DIR>/mocs_compilation.cpp`` file,\\n  which is compiled as part of the target.\\n\\n  * The custom directories with checksum\\n    based names help to avoid name collisions for ``moc`` files with the same\\n    ``<basename>``.\\n\\n  * See ``AUTOGEN_BUILD_DIR``.\\n\\n* Additionally, header files with the same base name as a source file,\\n  (like ``<basename>.h``) or ``_p`` appended to the base name (like\\n  ``<basename>_p.h``), are scanned for a macro out of\\n  ``AUTOMOC_MACRO_NAMES``, and if found, ``moc``\\n  is also executed on those files.\\n\\n* ``AUTOMOC`` always checks multiple header alternative extensions,\\n  such as ``hpp``, ``hxx``, etc. when searching for headers.\\n\\n* ``AUTOMOC`` looks for the ``Q_PLUGIN_METADATA`` macro and reruns the\\n  ``moc`` when the file addressed by the ``FILE`` argument of the macro changes.\\n\\nThis property is initialized by the value of the ``CMAKE_AUTOMOC``\\nvariable if it is set when a target is created.\\n\\nAdditional command line options for ``moc`` can be set via the\\n``AUTOMOC_MOC_OPTIONS`` property.\\n\\nBy enabling the ``CMAKE_AUTOMOC_RELAXED_MODE`` variable the\\nrules for searching the files which will be processed by ``moc`` can be relaxed.\\nSee the documentation for this variable for more details.\\n\\nThe global property ``AUTOGEN_TARGETS_FOLDER`` can be used to group the\\nautomoc targets together in an IDE, e.g.  in MSVS.\\n\\nThe global property ``AUTOGEN_SOURCE_GROUP`` can be used to group\\nfiles generated by ``AUTOMOC`` together in an IDE, e.g.  in MSVS.\\n\\nAdditional macro names to search for can be added to\\n``AUTOMOC_MACRO_NAMES``.\\n\\nAdditional ``moc`` dependency file names can be extracted from source code\\nby using ``AUTOMOC_DEPEND_FILTERS``.\\n\\nCompiler pre definitions for ``moc`` are written to a ``moc_predefs.h`` file\\nwhich is controlled by ``AUTOMOC_COMPILER_PREDEFINES``.\\n\\nSource C++ files can be excluded from ``AUTOMOC`` processing by\\nenabling ``SKIP_AUTOMOC`` or the broader ``SKIP_AUTOGEN``.\\n\\nThe number of parallel ``moc`` processes to start can be modified by\\nsetting ``AUTOGEN_PARALLEL``.\\n\\nSee the ``cmake-qt(7)`` manual for more information on using CMake\\nwith Qt.\\n",
        "property"
    ],
    "AUTOMOC_COMPILER_PREDEFINES": [
        "AUTOMOC_COMPILER_PREDEFINES\\n---------------------------\\n\\nBoolean value used by ``AUTOMOC`` to determine if the\\ncompiler pre definitions file ``moc_predefs.h`` should be generated.\\n\\nCMake generates a ``moc_predefs.h`` file with compiler pre definitions\\nfrom the output of the command defined in\\n``CMAKE_CXX_COMPILER_PREDEFINES_COMMAND``\\nwhen\\n\\n- ``AUTOMOC`` is enabled,\\n- ``AUTOMOC_COMPILER_PREDEFINES`` is enabled,\\n- ``CMAKE_CXX_COMPILER_PREDEFINES_COMMAND`` isn't empty and\\n- the Qt version is greater or equal 5.8.\\n\\nThe ``moc_predefs.h`` file, which is generated in ``AUTOGEN_BUILD_DIR``,\\nis passed to ``moc`` as the argument to the ``--include`` option.\\n\\nBy default ``AUTOMOC_COMPILER_PREDEFINES`` is initialized from\\n``CMAKE_AUTOMOC_COMPILER_PREDEFINES``, which is ON by default.\\n\\nSee the ``cmake-qt(7)`` manual for more information on using CMake\\nwith Qt.\\n",
        "property"
    ],
    "AUTOMOC_DEPEND_FILTERS": [
        "AUTOMOC_DEPEND_FILTERS\\n----------------------\\n\\nFilter definitions used by ``AUTOMOC`` to extract file names from a\\nsource file that are registered as additional dependencies for the\\n``moc`` file of the source file.\\n\\nFilters are defined as ``KEYWORD;REGULAR_EXPRESSION`` pairs. First the file\\ncontent is searched for ``KEYWORD``. If it is found at least once, then file\\nnames are extracted by successively searching for ``REGULAR_EXPRESSION`` and\\ntaking the first match group.\\n\\nThe file name found in the first match group is searched for\\n\\n- first in the vicinity of the source file\\n- and afterwards in the target's ``INCLUDE_DIRECTORIES``.\\n\\nIf any of the extracted files changes, then the ``moc`` file for the source\\nfile gets rebuilt even when the source file itself doesn't change.\\n\\nIf any of the extracted files is ``GENERATED`` or if it is not in the\\ntarget's sources, then it might be necessary to add it to the\\n``_autogen`` target  dependencies.\\nSee ``AUTOGEN_TARGET_DEPENDS`` for reference.\\n\\nBy default ``AUTOMOC_DEPEND_FILTERS`` is initialized from\\n``CMAKE_AUTOMOC_DEPEND_FILTERS``, which is empty by default.\\n\\nSee the ``cmake-qt(7)`` manual for more information on using CMake\\nwith Qt.\\n\\n\\nExample 1\\n^^^^^^^^^\\n\\nA header file ``my_class.hpp`` uses a custom macro ``JSON_FILE_MACRO`` which\\nis defined in an other header ``macros.hpp``.\\nWe want the ``moc`` file of ``my_class.hpp`` to depend on the file name\\nargument of ``JSON_FILE_MACRO``::\\n\\n // my_class.hpp\\n class My_Class : public QObject\\n {\\n   Q_OBJECT\\n   JSON_FILE_MACRO ( \\\"info.json\\\" )\\n ...\\n };\\n\\nIn ``CMakeLists.txt`` we add a filter to\\n``CMAKE_AUTOMOC_DEPEND_FILTERS`` like this::\\n\\n list( APPEND CMAKE_AUTOMOC_DEPEND_FILTERS\\n   \\\"JSON_FILE_MACRO\\\"\\n   \\\"[\\\\n][ \\\\t]*JSON_FILE_MACRO[ \\\\t]*\\\\\\\\([ \\\\t]*\\\\\\\"([^\\\\\\\"]+)\\\\\\\"\\\"\\n )\\n\\nWe assume ``info.json`` is a plain (not ``GENERATED``) file that is\\nlisted in the target's source.  Therefore we do not need to add it to\\n``AUTOGEN_TARGET_DEPENDS``.\\n\\nExample 2\\n^^^^^^^^^\\n\\nIn the target ``my_target`` a header file ``complex_class.hpp`` uses a\\ncustom macro ``JSON_BASED_CLASS`` which is defined in an other header\\n``macros.hpp``::\\n\\n // macros.hpp\\n ...\\n #define JSON_BASED_CLASS(name, json) \\\\\\n class name : public QObject \\\\\\n { \\\\\\n   Q_OBJECT \\\\\\n   Q_PLUGIN_METADATA(IID \\\"demo\\\" FILE json) \\\\\\n   name() {} \\\\\\n };\\n ...\\n\\n::\\n\\n // complex_class.hpp\\n #pragma once\\n JSON_BASED_CLASS(Complex_Class, \\\"meta.json\\\")\\n // end of file\\n\\nSince ``complex_class.hpp`` doesn't contain a ``Q_OBJECT`` macro it would be\\nignored by ``AUTOMOC``.  We change this by adding ``JSON_BASED_CLASS``\\nto ``CMAKE_AUTOMOC_MACRO_NAMES``::\\n\\n list(APPEND CMAKE_AUTOMOC_MACRO_NAMES \\\"JSON_BASED_CLASS\\\")\\n\\nWe want the ``moc`` file of ``complex_class.hpp`` to depend on\\n``meta.json``.  So we add a filter to\\n``CMAKE_AUTOMOC_DEPEND_FILTERS``::\\n\\n list(APPEND CMAKE_AUTOMOC_DEPEND_FILTERS\\n   \\\"JSON_BASED_CLASS\\\"\\n   \\\"[\\\\n^][ \\\\t]*JSON_BASED_CLASS[ \\\\t]*\\\\\\\\([^,]*,[ \\\\t]*\\\\\\\"([^\\\\\\\"]+)\\\\\\\"\\\"\\n )\\n\\nAdditionally we assume ``meta.json`` is ``GENERATED`` which is\\nwhy we have to add it to ``AUTOGEN_TARGET_DEPENDS``::\\n\\n set_property(TARGET my_target APPEND PROPERTY AUTOGEN_TARGET_DEPENDS \\\"meta.json\\\")\\n",
        "property"
    ],
    "AUTOMOC_MACRO_NAMES": [
        "AUTOMOC_MACRO_NAMES\\n-------------------\\n\\nA :ref:`;-list <CMake Language Lists>` list of macro names used by\\n``AUTOMOC`` to determine if a C++ file needs to be processed by ``moc``.\\n\\nThis property is only used if the ``AUTOMOC`` property is ``ON``\\nfor this target.\\n\\nWhen running ``AUTOMOC``, CMake searches for the strings listed in\\n``AUTOMOC_MACRO_NAMES`` in C++ source and header files.\\nIf any of the strings is found\\n\\n- as the first non space string on a new line or\\n- as the first non space string after a ``{`` on a new line,\\n\\nthen the file will be processed by ``moc``.\\n\\nBy default ``AUTOMOC_MACRO_NAMES`` is initialized from\\n``CMAKE_AUTOMOC_MACRO_NAMES``.\\n\\nSee the ``cmake-qt(7)`` manual for more information on using CMake\\nwith Qt.\\n\\nExample\\n^^^^^^^\\n\\nIn this case the ``Q_OBJECT`` macro is hidden inside another macro\\ncalled ``CUSTOM_MACRO``.  To let CMake know that source files that contain\\n``CUSTOM_MACRO`` need to be ``moc`` processed, we call::\\n\\n set_property(TARGET tgt APPEND PROPERTY AUTOMOC_MACRO_NAMES \\\"CUSTOM_MACRO\\\")\\n",
        "property"
    ],
    "AUTOMOC_MOC_OPTIONS": [
        "AUTOMOC_MOC_OPTIONS\\n-------------------\\n\\nAdditional options for moc when using ``AUTOMOC``\\n\\nThis property is only used if the ``AUTOMOC`` property is ``ON``\\nfor this target.  In this case, it holds additional command line\\noptions which will be used when ``moc`` is executed during the build, i.e.\\nit is equivalent to the optional ``OPTIONS`` argument of the\\n``qt4_wrap_cpp()`` macro.\\n\\nBy default it is empty.\\n\\nSee the ``cmake-qt(7)`` manual for more information on using CMake\\nwith Qt.\\n",
        "property"
    ],
    "AUTOMOC_SOURCE_GROUP": [
        "AUTOMOC_SOURCE_GROUP\\n--------------------\\n\\nName of the  ``source_group()`` for ``AUTOMOC`` generated files.\\n\\nWhen set this is used instead of ``AUTOGEN_SOURCE_GROUP`` for\\nfiles generated by ``AUTOMOC``.\\n",
        "property"
    ],
    "AUTOMOC_TARGETS_FOLDER": [
        "AUTOMOC_TARGETS_FOLDER\\n----------------------\\n\\nName of ``FOLDER`` for ``*_autogen`` targets that are added automatically by\\nCMake for targets for which ``AUTOMOC`` is enabled.\\n\\nThis property is obsolete.  Use ``AUTOGEN_TARGETS_FOLDER`` instead.\\n\\nIf not set, CMake uses the ``FOLDER`` property of the parent target as a\\ndefault value for this property.  See also the documentation for the\\n``FOLDER`` target property and the ``AUTOMOC`` target property.\\n",
        "property"
    ],
    "AUTORCC": [
        "AUTORCC\\n-------\\n\\nShould the target be processed with autorcc (for Qt projects).\\n\\n``AUTORCC`` is a boolean specifying whether CMake will handle\\nthe Qt ``rcc`` code generator automatically, i.e. without having to use\\nthe ``QT4_ADD_RESOURCES()`` or ``QT5_ADD_RESOURCES()``\\nmacro.  Currently Qt4 and Qt5 are supported.\\n\\nWhen this property is ``ON``, CMake will handle ``.qrc`` files added\\nas target sources at build time and invoke ``rcc`` accordingly.\\nThis property is initialized by the value of the ``CMAKE_AUTORCC``\\nvariable if it is set when a target is created.\\n\\nBy default ``AUTORCC`` is processed inside a\\n``custom command``.\\nIf the ``.qrc`` file is ``GENERATED`` though, a\\n``custom target`` is used instead.\\n\\nAdditional command line options for rcc can be set via the\\n``AUTORCC_OPTIONS`` source file property on the ``.qrc`` file.\\n\\nThe global property ``AUTOGEN_TARGETS_FOLDER`` can be used to group\\nthe autorcc targets together in an IDE, e.g. in MSVS.\\n\\nThe global property ``AUTOGEN_SOURCE_GROUP`` can be used to group\\nfiles generated by ``AUTORCC`` together in an IDE, e.g.  in MSVS.\\n\\nWhen there are multiple ``.qrc`` files with the same name, CMake will\\ngenerate unspecified unique names for ``rcc``.  Therefore if\\n``Q_INIT_RESOURCE()`` or ``Q_CLEANUP_RESOURCE()`` need to be used the\\n``.qrc`` file name must be unique.\\n\\nSource files can be excluded from ``AUTORCC`` processing by\\nenabling ``SKIP_AUTORCC`` or the broader ``SKIP_AUTOGEN``.\\n\\nSee the ``cmake-qt(7)`` manual for more information on using CMake\\nwith Qt.\\n",
        "property"
    ],
    "AUTORCC_OPTIONS": [
        "AUTORCC_OPTIONS\\n---------------\\n\\nAdditional options for ``rcc`` when using ``AUTORCC``\\n\\nThis property holds additional command line options which will be used when\\n``rcc`` is executed during the build via ``AUTORCC``, i.e. it is equivalent to the\\noptional ``OPTIONS`` argument of the ``qt4_add_resources()`` macro.\\n\\nBy default it is empty.\\n\\nThe options set on the ``.qrc`` source file may override\\n``AUTORCC_OPTIONS`` set on the target.\\n\\nEXAMPLE\\n^^^^^^^\\n\\n # ...\\n set_property(SOURCE resources.qrc PROPERTY AUTORCC_OPTIONS \\\"--compress;9\\\")\\n # ...\\n\\nAUTORCC_OPTIONS\\n---------------\\n\\nAdditional options for ``rcc`` when using ``AUTORCC``\\n\\nThis property holds additional command line options which will be used\\nwhen ``rcc`` is executed during the build via ``AUTORCC``,\\ni.e. it is equivalent to the optional ``OPTIONS`` argument of the\\n``qt4_add_resources()`` macro.\\n\\nBy default it is empty.\\n\\nThis property is initialized by the value of the\\n``CMAKE_AUTORCC_OPTIONS`` variable if it is set when a target is\\ncreated.\\n\\nThe options set on the target may be overridden by ``AUTORCC_OPTIONS``\\nset on the ``.qrc`` source file.\\n\\nSee the ``cmake-qt(7)`` manual for more information on using CMake\\nwith Qt.\\n\\nEXAMPLE\\n^^^^^^^\\n\\n # ...\\n set_property(TARGET tgt PROPERTY AUTORCC_OPTIONS \\\"--compress;9\\\")\\n # ...\\n",
        "property"
    ],
    "AUTORCC_SOURCE_GROUP": [
        "AUTORCC_SOURCE_GROUP\\n--------------------\\n\\nName of the  ``source_group()`` for ``AUTORCC`` generated files.\\n\\nWhen set this is used instead of ``AUTOGEN_SOURCE_GROUP`` for\\nfiles generated by ``AUTORCC``.\\n",
        "property"
    ],
    "AUTOUIC": [
        "AUTOUIC\\n-------\\n\\nShould the target be processed with autouic (for Qt projects).\\n\\n``AUTOUIC`` is a boolean specifying whether CMake will handle\\nthe Qt ``uic`` code generator automatically, i.e. without having to use\\nthe ``QT4_WRAP_UI()`` or ``QT5_WRAP_UI()`` macro. Currently\\nQt4 and Qt5 are supported.\\n\\nWhen this property is ``ON``, CMake will scan the source files at build time\\nand invoke ``uic`` accordingly.  If an ``#include`` statement like\\n``#include \\\"ui_foo.h\\\"`` is found in ``source.cpp``, a ``foo.ui`` file is\\nsearched for first in the vicinity of ``source.cpp`` and afterwards in the\\noptional ``AUTOUIC_SEARCH_PATHS`` of the target.\\n``uic`` is run on the ``foo.ui`` file to generate ``ui_foo.h`` in the directory\\n``<AUTOGEN_BUILD_DIR>/include``,\\nwhich is automatically added to the target's ``INCLUDE_DIRECTORIES``.\\n\\n* For ``multi configuration generators``,\\n  the include directory is ``<AUTOGEN_BUILD_DIR>/include_<CONFIG>``.\\n\\n* See ``AUTOGEN_BUILD_DIR``.\\n\\nThis property is initialized by the value of the ``CMAKE_AUTOUIC``\\nvariable if it is set when a target is created.\\n\\nAdditional command line options for ``uic`` can be set via the\\n``AUTOUIC_OPTIONS`` source file property on the ``foo.ui`` file.\\nThe global property ``AUTOGEN_TARGETS_FOLDER`` can be used to group the\\nautouic targets together in an IDE, e.g. in MSVS.\\n\\nSource files can be excluded from ``AUTOUIC`` processing by\\nenabling ``SKIP_AUTOUIC`` or the broader ``SKIP_AUTOGEN``.\\n\\nThe number of parallel ``uic`` processes to start can be modified by\\nsetting ``AUTOGEN_PARALLEL``.\\n\\nSee the ``cmake-qt(7)`` manual for more information on using CMake\\nwith Qt.\\n",
        "property"
    ],
    "AUTOUIC_OPTIONS": [
        "AUTOUIC_OPTIONS\\n---------------\\n\\nAdditional options for ``uic`` when using ``AUTOUIC``\\n\\nThis property holds additional command line options\\nwhich will be used when ``uic`` is executed during the build via\\n``AUTOUIC``, i.e. it is equivalent to the optional ``OPTIONS``\\nargument of the ``qt4_wrap_ui()`` macro.\\n\\nBy default it is empty.\\n\\nThe options set on the ``.ui`` source file may override\\n``AUTOUIC_OPTIONS`` set on the target.\\n\\nEXAMPLE\\n^^^^^^^\\n\\n # ...\\n set_property(SOURCE widget.ui PROPERTY AUTOUIC_OPTIONS \\\"--no-protection\\\")\\n # ...\\n\\nAUTOUIC_OPTIONS\\n---------------\\n\\nAdditional options for ``uic`` when using ``AUTOUIC``\\n\\nThis property holds additional command line options which will be used when\\n``uic`` is executed during the build via ``AUTOUIC``, i.e. it is\\nequivalent to the optional ``OPTIONS`` argument of the\\n``qt4_wrap_ui()`` macro.\\n\\nBy default it is empty.\\n\\nThis property is initialized by the value of the\\n``CMAKE_AUTOUIC_OPTIONS`` variable if it is set when a target is\\ncreated.\\n\\nThe options set on the target may be overridden by ``AUTOUIC_OPTIONS``\\nset on the ``.ui`` source file.\\n\\nThis property may use \\\"generator expressions\\\" with the syntax ``$<...>``.\\nSee the ``cmake-generator-expressions(7)`` manual for available\\nexpressions.\\n\\nSee the ``cmake-qt(7)`` manual for more information on using CMake\\nwith Qt.\\n\\nEXAMPLE\\n^^^^^^^\\n\\n # ...\\n set_property(TARGET tgt PROPERTY AUTOUIC_OPTIONS \\\"--no-protection\\\")\\n # ...\\n",
        "property"
    ],
    "AUTOUIC_SEARCH_PATHS": [
        "AUTOUIC_SEARCH_PATHS\\n--------------------\\n\\nSearch path list used by ``AUTOUIC`` to find included\\n``.ui`` files.\\n\\nThis property is initialized by the value of the\\n``CMAKE_AUTOUIC_SEARCH_PATHS`` variable if it is set\\nwhen a target is created. Otherwise it is empty.\\n\\nSee the ``cmake-qt(7)`` manual for more information on using CMake\\nwith Qt.\\n",
        "property"
    ],
    "BINARY_DIR": [
        "BINARY_DIR\\n----------\\n\\nThis read-only directory property reports absolute path to the binary\\ndirectory corresponding to the source on which it is read.\\n\\nBINARY_DIR\\n----------\\n\\nThis read-only property reports the value of the\\n``CMAKE_CURRENT_BINARY_DIR`` variable in the directory in which\\nthe target was defined.\\n",
        "property"
    ],
    "BUILDSYSTEM_TARGETS": [
        "BUILDSYSTEM_TARGETS\\n-------------------\\n\\nThis read-only directory property contains a\\n:ref:`;-list <CMake Language Lists>` of buildsystem targets added in the\\ndirectory by calls to the ``add_library()``, ``add_executable()``,\\nand ``add_custom_target()`` commands.  The list does not include any\\n:ref:`Imported Targets` or :ref:`Alias Targets`, but does include\\n:ref:`Interface Libraries`.  Each entry in the list is the logical name\\nof a target, suitable to pass to the ``get_property()`` command\\n``TARGET`` option.\\n",
        "property"
    ],
    "BUILD_RPATH": [
        "BUILD_RPATH\\n-----------\\n\\nA :ref:`;-list <CMake Language Lists>` specifying runtime path (``RPATH``)\\nentries to add to binaries linked in the build tree (for platforms that\\nsupport it).  The entries will *not* be used for binaries in the install\\ntree.  See also the ``INSTALL_RPATH`` target property.\\n\\nThis property is initialized by the value of the variable\\n``CMAKE_BUILD_RPATH`` if it is set when a target is created.\\n",
        "property"
    ],
    "BUILD_WITH_INSTALL_NAME_DIR": [
        "BUILD_WITH_INSTALL_NAME_DIR\\n---------------------------\\n\\n``BUILD_WITH_INSTALL_NAME_DIR`` is a boolean specifying whether the macOS\\n``install_name`` of a target in the build tree uses the directory given by\\n``INSTALL_NAME_DIR``.  This setting only applies to targets on macOS.\\n\\nThis property is initialized by the value of the variable\\n``CMAKE_BUILD_WITH_INSTALL_NAME_DIR`` if it is set when a target is\\ncreated.\\n\\nIf this property is not set and policy ``CMP0068`` is not ``NEW``, the\\nvalue of ``BUILD_WITH_INSTALL_RPATH`` is used in its place.\\n",
        "property"
    ],
    "BUILD_WITH_INSTALL_RPATH": [
        "BUILD_WITH_INSTALL_RPATH\\n------------------------\\n\\n``BUILD_WITH_INSTALL_RPATH`` is a boolean specifying whether to link the target\\nin the build tree with the ``INSTALL_RPATH``.  This takes precedence\\nover ``SKIP_BUILD_RPATH`` and avoids the need for relinking before\\ninstallation.\\n\\nThis property is initialized by the value of the\\n``CMAKE_BUILD_WITH_INSTALL_RPATH`` variable if it is set when a target\\nis created.\\n\\nIf policy ``CMP0068`` is not ``NEW``, this property also controls use of\\n``INSTALL_NAME_DIR`` in the build tree on macOS.  Either way, the\\n``BUILD_WITH_INSTALL_NAME_DIR`` target property takes precedence.\\n",
        "property"
    ],
    "BUNDLE": [
        "BUNDLE\\n------\\n\\nThis target is a ``CFBundle`` on the macOS.\\n\\nIf a module library target has this property set to true it will be\\nbuilt as a ``CFBundle`` when built on the mac.  It will have the directory\\nstructure required for a ``CFBundle`` and will be suitable to be used for\\ncreating Browser Plugins or other application resources.\\n",
        "property"
    ],
    "BUNDLE_EXTENSION": [
        "BUNDLE_EXTENSION\\n----------------\\n\\nThe file extension used to name a ``BUNDLE``, a ``FRAMEWORK``,\\nor a ``MACOSX_BUNDLE`` target on the macOS and iOS.\\n\\nThe default value is ``bundle``, ``framework``, or ``app`` for the respective\\ntarget types.\\n",
        "property"
    ],
    "CACHE_VARIABLES": [
        "CACHE_VARIABLES\\n---------------\\n\\nList of cache variables available in the current directory.\\n\\nThis read-only property specifies the list of CMake cache variables\\ncurrently defined.  It is intended for debugging purposes.\\n",
        "property"
    ],
    "CLEAN_NO_CUSTOM": [
        "CLEAN_NO_CUSTOM\\n---------------\\n\\nSet to true to tell :ref:`Makefile Generators` not to remove the outputs of\\ncustom commands for this directory during the ``make clean`` operation.\\nThis is ignored on other generators because it is not possible to implement.\\n",
        "property"
    ],
    "CMAKE_CONFIGURE_DEPENDS": [
        "CMAKE_CONFIGURE_DEPENDS\\n-----------------------\\n\\nTell CMake about additional input files to the configuration process.\\nIf any named file is modified the build system will re-run CMake to\\nre-configure the file and generate the build system again.\\n\\nSpecify files as a semicolon-separated list of paths.  Relative paths\\nare interpreted as relative to the current source directory.\\n",
        "property"
    ],
    "CMAKE_CXX_KNOWN_FEATURES": [
        "CMAKE_CXX_KNOWN_FEATURES\\n------------------------\\n\\nList of C++ features known to this version of CMake.\\n\\nThe features listed in this global property may be known to be available to the\\nC++ compiler.  If the feature is available with the C++ compiler, it will\\nbe listed in the ``CMAKE_CXX_COMPILE_FEATURES`` variable.\\n\\nThe features listed here may be used with the ``target_compile_features()``\\ncommand.  See the ``cmake-compile-features(7)`` manual for information on\\ncompile features and a list of supported compilers.\\n\\n\\nThe features known to this version of CMake are:\\n\\n``cxx_std_98``\\n  Compiler mode is aware of C++ 98.\\n\\n``cxx_std_11``\\n  Compiler mode is aware of C++ 11.\\n\\n``cxx_std_14``\\n  Compiler mode is aware of C++ 14.\\n\\n``cxx_std_17``\\n  Compiler mode is aware of C++ 17.\\n\\n``cxx_std_20``\\n  Compiler mode is aware of C++ 20.\\n\\n``cxx_aggregate_default_initializers``\\n  Aggregate default initializers, as defined in N3605_.\\n\\n  .. _N3605: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3605.html\\n\\n``cxx_alias_templates``\\n  Template aliases, as defined in N2258_.\\n\\n  .. _N2258: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2258.pdf\\n\\n``cxx_alignas``\\n  Alignment control ``alignas``, as defined in N2341_.\\n\\n  .. _N2341: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2341.pdf\\n\\n``cxx_alignof``\\n  Alignment control ``alignof``, as defined in N2341_.\\n\\n  .. _N2341: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2341.pdf\\n\\n``cxx_attributes``\\n  Generic attributes, as defined in N2761_.\\n\\n  .. _N2761: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2761.pdf\\n\\n``cxx_attribute_deprecated``\\n  ``[[deprecated]]`` attribute, as defined in N3760_.\\n\\n  .. _N3760: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3760.html\\n\\n``cxx_auto_type``\\n  Automatic type deduction, as defined in N1984_.\\n\\n  .. _N1984: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n1984.pdf\\n\\n``cxx_binary_literals``\\n  Binary literals, as defined in N3472_.\\n\\n  .. _N3472: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3472.pdf\\n\\n``cxx_constexpr``\\n  Constant expressions, as defined in N2235_.\\n\\n  .. _N2235: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2235.pdf\\n\\n``cxx_contextual_conversions``\\n  Contextual conversions, as defined in N3323_.\\n\\n  .. _N3323: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3323.pdf\\n\\n``cxx_decltype_incomplete_return_types``\\n  Decltype on incomplete return types, as defined in N3276_.\\n\\n  .. _N3276 : http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3276.pdf\\n\\n``cxx_decltype``\\n  Decltype, as defined in N2343_.\\n\\n  .. _N2343: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2343.pdf\\n\\n``cxx_decltype_auto``\\n  ``decltype(auto)`` semantics, as defined in N3638_.\\n\\n  .. _N3638: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3638.html\\n\\n``cxx_default_function_template_args``\\n  Default template arguments for function templates, as defined in DR226_\\n\\n  .. _DR226: http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#226\\n\\n``cxx_defaulted_functions``\\n  Defaulted functions, as defined in N2346_.\\n\\n  .. _N2346: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2346.htm\\n\\n``cxx_defaulted_move_initializers``\\n  Defaulted move initializers, as defined in N3053_.\\n\\n  .. _N3053: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3053.html\\n\\n``cxx_delegating_constructors``\\n  Delegating constructors, as defined in N1986_.\\n\\n  .. _N1986: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n1986.pdf\\n\\n``cxx_deleted_functions``\\n  Deleted functions, as defined in N2346_.\\n\\n  .. _N2346: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2346.htm\\n\\n``cxx_digit_separators``\\n  Digit separators, as defined in N3781_.\\n\\n  .. _N3781: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3781.pdf\\n\\n``cxx_enum_forward_declarations``\\n  Enum forward declarations, as defined in N2764_.\\n\\n  .. _N2764: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2764.pdf\\n\\n``cxx_explicit_conversions``\\n  Explicit conversion operators, as defined in N2437_.\\n\\n  .. _N2437: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2437.pdf\\n\\n``cxx_extended_friend_declarations``\\n  Extended friend declarations, as defined in N1791_.\\n\\n  .. _N1791: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1791.pdf\\n\\n``cxx_extern_templates``\\n  Extern templates, as defined in N1987_.\\n\\n  .. _N1987: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n1987.htm\\n\\n``cxx_final``\\n  Override control ``final`` keyword, as defined in N2928_, N3206_ and N3272_.\\n\\n  .. _N2928: http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2009/n2928.htm\\n  .. _N3206: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3206.htm\\n  .. _N3272: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3272.htm\\n\\n``cxx_func_identifier``\\n  Predefined ``__func__`` identifier, as defined in N2340_.\\n\\n  .. _N2340: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2340.htm\\n\\n``cxx_generalized_initializers``\\n  Initializer lists, as defined in N2672_.\\n\\n  .. _N2672: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2672.htm\\n\\n``cxx_generic_lambdas``\\n  Generic lambdas, as defined in N3649_.\\n\\n  .. _N3649: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3649.html\\n\\n``cxx_inheriting_constructors``\\n  Inheriting constructors, as defined in N2540_.\\n\\n  .. _N2540: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2540.htm\\n\\n``cxx_inline_namespaces``\\n  Inline namespaces, as defined in N2535_.\\n\\n  .. _N2535: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2535.htm\\n\\n``cxx_lambdas``\\n  Lambda functions, as defined in N2927_.\\n\\n  .. _N2927: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2927.pdf\\n\\n``cxx_lambda_init_captures``\\n  Initialized lambda captures, as defined in N3648_.\\n\\n  .. _N3648: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3648.html\\n\\n``cxx_local_type_template_args``\\n  Local and unnamed types as template arguments, as defined in N2657_.\\n\\n  .. _N2657: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2657.htm\\n\\n``cxx_long_long_type``\\n  ``long long`` type, as defined in N1811_.\\n\\n  .. _N1811: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1811.pdf\\n\\n``cxx_noexcept``\\n  Exception specifications, as defined in N3050_.\\n\\n  .. _N3050: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3050.html\\n\\n``cxx_nonstatic_member_init``\\n  Non-static data member initialization, as defined in N2756_.\\n\\n  .. _N2756: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2756.htm\\n\\n``cxx_nullptr``\\n  Null pointer, as defined in N2431_.\\n\\n  .. _N2431: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2431.pdf\\n\\n``cxx_override``\\n  Override control ``override`` keyword, as defined in N2928_, N3206_\\n  and N3272_.\\n\\n  .. _N2928: http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2009/n2928.htm\\n  .. _N3206: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3206.htm\\n  .. _N3272: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3272.htm\\n\\n``cxx_range_for``\\n  Range-based for, as defined in N2930_.\\n\\n  .. _N2930: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2930.html\\n\\n``cxx_raw_string_literals``\\n  Raw string literals, as defined in N2442_.\\n\\n  .. _N2442: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2442.htm\\n\\n``cxx_reference_qualified_functions``\\n  Reference qualified functions, as defined in N2439_.\\n\\n  .. _N2439: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2439.htm\\n\\n``cxx_relaxed_constexpr``\\n  Relaxed constexpr, as defined in N3652_.\\n\\n  .. _N3652: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3652.html\\n\\n``cxx_return_type_deduction``\\n  Return type deduction on normal functions, as defined in N3386_.\\n\\n  .. _N3386: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3386.html\\n\\n``cxx_right_angle_brackets``\\n  Right angle bracket parsing, as defined in N1757_.\\n\\n  .. _N1757: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1757.html\\n\\n``cxx_rvalue_references``\\n  R-value references, as defined in N2118_.\\n\\n  .. _N2118: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2118.html\\n\\n``cxx_sizeof_member``\\n  Size of non-static data members, as defined in N2253_.\\n\\n  .. _N2253: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2253.html\\n\\n``cxx_static_assert``\\n  Static assert, as defined in N1720_.\\n\\n  .. _N1720: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1720.html\\n\\n``cxx_strong_enums``\\n  Strongly typed enums, as defined in N2347_.\\n\\n  .. _N2347: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2347.pdf\\n\\n``cxx_thread_local``\\n  Thread-local variables, as defined in N2659_.\\n\\n  .. _N2659: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2659.htm\\n\\n``cxx_trailing_return_types``\\n  Automatic function return type, as defined in N2541_.\\n\\n  .. _N2541: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2541.htm\\n\\n``cxx_unicode_literals``\\n  Unicode string literals, as defined in N2442_.\\n\\n  .. _N2442: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2442.htm\\n\\n``cxx_uniform_initialization``\\n  Uniform initialization, as defined in N2640_.\\n\\n  .. _N2640: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2640.pdf\\n\\n``cxx_unrestricted_unions``\\n  Unrestricted unions, as defined in N2544_.\\n\\n  .. _N2544: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2544.pdf\\n\\n``cxx_user_literals``\\n  User-defined literals, as defined in N2765_.\\n\\n  .. _N2765: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2765.pdf\\n\\n``cxx_variable_templates``\\n  Variable templates, as defined in N3651_.\\n\\n  .. _N3651: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3651.pdf\\n\\n``cxx_variadic_macros``\\n  Variadic macros, as defined in N1653_.\\n\\n  .. _N1653: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1653.htm\\n\\n``cxx_variadic_templates``\\n  Variadic templates, as defined in N2242_.\\n\\n  .. _N2242: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2242.pdf\\n\\n``cxx_template_template_parameters``\\n  Template template parameters, as defined in ``ISO/IEC 14882:1998``.\\n",
        "property"
    ],
    "CMAKE_C_KNOWN_FEATURES": [
        "CMAKE_C_KNOWN_FEATURES\\n----------------------\\n\\nList of C features known to this version of CMake.\\n\\nThe features listed in this global property may be known to be available to the\\nC compiler.  If the feature is available with the C compiler, it will\\nbe listed in the ``CMAKE_C_COMPILE_FEATURES`` variable.\\n\\nThe features listed here may be used with the ``target_compile_features()``\\ncommand.  See the ``cmake-compile-features(7)`` manual for information on\\ncompile features and a list of supported compilers.\\n\\nThe features known to this version of CMake are:\\n\\n``c_std_90``\\n  Compiler mode is aware of C 90.\\n\\n``c_std_99``\\n  Compiler mode is aware of C 99.\\n\\n``c_std_11``\\n  Compiler mode is aware of C 11.\\n\\n``c_function_prototypes``\\n  Function prototypes, as defined in ``ISO/IEC 9899:1990``.\\n\\n``c_restrict``\\n  ``restrict`` keyword, as defined in ``ISO/IEC 9899:1999``.\\n\\n``c_static_assert``\\n  Static assert, as defined in ``ISO/IEC 9899:2011``.\\n\\n``c_variadic_macros``\\n  Variadic macros, as defined in ``ISO/IEC 9899:1999``.\\n",
        "property"
    ],
    "COMMON_LANGUAGE_RUNTIME": [
        "COMMON_LANGUAGE_RUNTIME\\n-----------------------\\n\\nBy setting this target property, the target is configured to build with\\n``C++/CLI`` support.\\n\\nThe Visual Studio generator defines the ``clr`` parameter depending on\\nthe value of ``COMMON_LANGUAGE_RUNTIME``:\\n\\n* property not set: native C++ (i.e. default)\\n* property set but empty: mixed unmanaged/managed C++\\n* property set to any non empty value: managed C++\\n\\nSupported values: ``\\\"\\\"``, ``\\\"pure\\\"``, ``\\\"safe\\\"``\\n\\nThis property is only evaluated :ref:`Visual Studio Generators` for\\nVS 2010 and above.\\n\\nTo be able to build managed C++ targets with VS 2017 and above the component\\n``C++/CLI support`` must be installed, which may not be done by default.\\n\\nSee also ``IMPORTED_COMMON_LANGUAGE_RUNTIME``\\n",
        "property"
    ],
    "COMPATIBLE_INTERFACE_BOOL": [
        "COMPATIBLE_INTERFACE_BOOL\\n-------------------------\\n\\nProperties which must be compatible with their link interface\\n\\nThe ``COMPATIBLE_INTERFACE_BOOL`` property may contain a list of\\nproperties for this target which must be consistent when evaluated as a\\nboolean with the ``INTERFACE`` variant of the property in all linked\\ndependees.  For example, if a property ``FOO`` appears in the list, then\\nfor each dependee, the ``INTERFACE_FOO`` property content in all of its\\ndependencies must be consistent with each other, and with the ``FOO``\\nproperty in the depender.\\n\\nConsistency in this sense has the meaning that if the property is set,\\nthen it must have the same boolean value as all others, and if the\\nproperty is not set, then it is ignored.\\n\\nNote that for each dependee, the set of properties specified in this\\nproperty must not intersect with the set specified in any of the other\\n:ref:`Compatible Interface Properties`.\\n",
        "property"
    ],
    "COMPATIBLE_INTERFACE_NUMBER_MAX": [
        "COMPATIBLE_INTERFACE_NUMBER_MAX\\n-------------------------------\\n\\nProperties whose maximum value from the link interface will be used.\\n\\nThe ``COMPATIBLE_INTERFACE_NUMBER_MAX`` property may contain a list of\\nproperties for this target whose maximum value may be read at generate\\ntime when evaluated in the ``INTERFACE`` variant of the property in all\\nlinked dependees.  For example, if a property ``FOO`` appears in the list,\\nthen for each dependee, the ``INTERFACE_FOO`` property content in all of\\nits dependencies will be compared with each other and with the ``FOO``\\nproperty in the depender.  When reading the ``FOO`` property at generate\\ntime, the maximum value will be returned. If the property is not set,\\nthen it is ignored.\\n\\nNote that for each dependee, the set of properties specified in this\\nproperty must not intersect with the set specified in any of the other\\n:ref:`Compatible Interface Properties`.\\n",
        "property"
    ],
    "COMPATIBLE_INTERFACE_NUMBER_MIN": [
        "COMPATIBLE_INTERFACE_NUMBER_MIN\\n-------------------------------\\n\\nProperties whose maximum value from the link interface will be used.\\n\\nThe ``COMPATIBLE_INTERFACE_NUMBER_MIN`` property may contain a list of\\nproperties for this target whose minimum value may be read at generate\\ntime when evaluated in the ``INTERFACE`` variant of the property of all\\nlinked dependees.  For example, if a\\nproperty ``FOO`` appears in the list, then for each dependee, the\\n``INTERFACE_FOO`` property content in all of its dependencies will be\\ncompared with each other and with the ``FOO`` property in the depender.\\nWhen reading the ``FOO`` property at generate time, the minimum value\\nwill be returned.  If the property is not set, then it is ignored.\\n\\nNote that for each dependee, the set of properties specified in this\\nproperty must not intersect with the set specified in any of the other\\n:ref:`Compatible Interface Properties`.\\n",
        "property"
    ],
    "COMPATIBLE_INTERFACE_STRING": [
        "COMPATIBLE_INTERFACE_STRING\\n---------------------------\\n\\nProperties which must be string-compatible with their link interface\\n\\nThe ``COMPATIBLE_INTERFACE_STRING`` property may contain a list of\\nproperties for this target which must be the same when evaluated as a\\nstring in the ``INTERFACE`` variant of the property all linked dependees.\\nFor example, if a property ``FOO`` appears in the list, then for each\\ndependee, the ``INTERFACE_FOO`` property content in all of its\\ndependencies must be equal with each other, and with the ``FOO`` property\\nin the depender.  If the property is not set, then it is ignored.\\n\\nNote that for each dependee, the set of properties specified in this\\nproperty must not intersect with the set specified in any of the other\\n:ref:`Compatible Interface Properties`.\\n",
        "property"
    ],
    "COMPILE_DEFINITIONS": [
        "COMPILE_DEFINITIONS\\n-------------------\\n\\nPreprocessor definitions for compiling a directory's sources.\\n\\nThis property specifies the list of options given so far to the\\n``add_compile_definitions()`` (or ``add_definitions()``) command.\\n\\nThe ``COMPILE_DEFINITIONS`` property may be set to a semicolon-separated\\nlist of preprocessor definitions using the syntax ``VAR`` or ``VAR=value``.\\nFunction-style definitions are not supported.  CMake will\\nautomatically escape the value correctly for the native build system\\n(note that CMake language syntax may require escapes to specify some\\nvalues).\\n\\nThis property will be initialized in each directory by its value in the\\ndirectory's parent.\\n\\nCMake will automatically drop some definitions that are not supported\\nby the native build tool.\\n\\nDisclaimer: Most native build tools have poor support for escaping\\ncertain values.  CMake has work-arounds for many cases but some values\\nmay just not be possible to pass correctly.  If a value does not seem\\nto be escaped correctly, do not attempt to work-around the problem by\\nadding escape sequences to the value.  Your work-around may break in a\\nfuture version of CMake that has improved escape support.  Instead\\nconsider defining the macro in a (configured) header file.  Then\\nreport the limitation.  Known limitations include::\\n\\n #          - broken almost everywhere\\n ;          - broken in VS IDE 7.0 and Borland Makefiles\\n ,          - broken in VS IDE\\n %          - broken in some cases in NMake\\n & |        - broken in some cases on MinGW\\n ^ < > \\\\\\\"   - broken in most Make tools on Windows\\n\\nCMake does not reject these values outright because they do work in\\nsome cases.  Use with caution.\\n\\nContents of ``COMPILE_DEFINITIONS`` may use \\\"generator expressions\\\" with\\nthe syntax ``$<...>``.  See the ``cmake-generator-expressions(7)``\\nmanual for available expressions.  See the ``cmake-buildsystem(7)``\\nmanual for more on defining buildsystem properties.\\n\\nThe corresponding ``COMPILE_DEFINITIONS_<CONFIG>`` property may\\nbe set to specify per-configuration definitions.  Generator expressions\\nshould be preferred instead of setting the alternative property.\\n\\nCOMPILE_DEFINITIONS\\n-------------------\\n\\nPreprocessor definitions for compiling a source file.\\n\\nThe COMPILE_DEFINITIONS property may be set to a semicolon-separated\\nlist of preprocessor definitions using the syntax VAR or VAR=value.\\nFunction-style definitions are not supported.  CMake will\\nautomatically escape the value correctly for the native build system\\n(note that CMake language syntax may require escapes to specify some\\nvalues).  This property may be set on a per-configuration basis using\\nthe name COMPILE_DEFINITIONS_<CONFIG> where <CONFIG> is an upper-case\\nname (ex.  \\\"COMPILE_DEFINITIONS_DEBUG\\\").\\n\\nCMake will automatically drop some definitions that are not supported\\nby the native build tool.  Xcode does not support per-configuration\\ndefinitions on source files.\\n\\nDisclaimer: Most native build tools have poor support for escaping\\ncertain values.  CMake has work-arounds for many cases but some values\\nmay just not be possible to pass correctly.  If a value does not seem\\nto be escaped correctly, do not attempt to work-around the problem by\\nadding escape sequences to the value.  Your work-around may break in a\\nfuture version of CMake that has improved escape support.  Instead\\nconsider defining the macro in a (configured) header file.  Then\\nreport the limitation.  Known limitations include::\\n\\n #          - broken almost everywhere\\n ;          - broken in VS IDE 7.0 and Borland Makefiles\\n ,          - broken in VS IDE\\n %          - broken in some cases in NMake\\n & |        - broken in some cases on MinGW\\n ^ < > \\\\\\\"   - broken in most Make tools on Windows\\n\\nCMake does not reject these values outright because they do work in\\nsome cases.  Use with caution.\\n\\nContents of ``COMPILE_DEFINITIONS`` may use \\\"generator expressions\\\"\\nwith the syntax ``$<...>``.  See the ``cmake-generator-expressions(7)``\\nmanual for available expressions.  However, ``Xcode``\\ndoes not support per-config per-source settings, so expressions\\nthat depend on the build configuration are not allowed with that\\ngenerator.\\n\\nGenerator expressions should be preferred instead of setting the alternative per-configuration\\nproperty.\\n\\nCOMPILE_DEFINITIONS\\n-------------------\\n\\nPreprocessor definitions for compiling a target's sources.\\n\\nThe ``COMPILE_DEFINITIONS`` property may be set to a semicolon-separated\\nlist of preprocessor definitions using the syntax ``VAR`` or ``VAR=value``.\\nFunction-style definitions are not supported.  CMake will\\nautomatically escape the value correctly for the native build system\\n(note that CMake language syntax may require escapes to specify some\\nvalues).\\n\\nCMake will automatically drop some definitions that are not supported\\nby the native build tool.\\n\\nDisclaimer: Most native build tools have poor support for escaping\\ncertain values.  CMake has work-arounds for many cases but some values\\nmay just not be possible to pass correctly.  If a value does not seem\\nto be escaped correctly, do not attempt to work-around the problem by\\nadding escape sequences to the value.  Your work-around may break in a\\nfuture version of CMake that has improved escape support.  Instead\\nconsider defining the macro in a (configured) header file.  Then\\nreport the limitation.  Known limitations include::\\n\\n #          - broken almost everywhere\\n ;          - broken in VS IDE 7.0 and Borland Makefiles\\n ,          - broken in VS IDE\\n %          - broken in some cases in NMake\\n & |        - broken in some cases on MinGW\\n ^ < > \\\\\\\"   - broken in most Make tools on Windows\\n\\nCMake does not reject these values outright because they do work in\\nsome cases.  Use with caution.\\n\\nContents of ``COMPILE_DEFINITIONS`` may use \\\"generator expressions\\\" with the\\nsyntax ``$<...>``.  See the ``cmake-generator-expressions(7)`` manual\\nfor available expressions.  See the ``cmake-buildsystem(7)`` manual\\nfor more on defining buildsystem properties.\\n\\nThe corresponding ``COMPILE_DEFINITIONS_<CONFIG>`` property may\\nbe set to specify per-configuration definitions.  Generator expressions\\nshould be preferred instead of setting the alternative property.\\n",
        "property"
    ],
    "COMPILE_DEFINITIONS_DEBUG": [
        "COMPILE_DEFINITIONS_<CONFIG>\\n----------------------------\\n\\nIgnored.  See CMake Policy ``CMP0043``.\\n\\nPer-configuration preprocessor definitions in a directory.\\n\\nThis is the configuration-specific version of ``COMPILE_DEFINITIONS``\\nwhere ``<CONFIG>`` is an upper-case name (ex. ``COMPILE_DEFINITIONS_DEBUG``).\\n\\nThis property will be initialized in each directory by its value in\\nthe directory's parent.\\n\\nContents of ``COMPILE_DEFINITIONS_<CONFIG>`` may use \\\"generator expressions\\\"\\nwith the syntax ``$<...>``.  See the ``cmake-generator-expressions(7)``\\nmanual for available expressions.  See the ``cmake-buildsystem(7)``\\nmanual for more on defining buildsystem properties.\\n\\nGenerator expressions should be preferred instead of setting this property.\\n\\nCOMPILE_DEFINITIONS_<CONFIG>\\n----------------------------\\n\\nIgnored.  See CMake Policy ``CMP0043``.\\n\\nPer-configuration preprocessor definitions on a source file.\\n\\nThis is the configuration-specific version of COMPILE_DEFINITIONS.\\nNote that Xcode does not support per-configuration source file flags\\nso this property will be ignored by the Xcode generator.\\n\\nCOMPILE_DEFINITIONS_<CONFIG>\\n----------------------------\\n\\nIgnored.  See CMake Policy ``CMP0043``.\\n\\nPer-configuration preprocessor definitions on a target.\\n\\nThis is the configuration-specific version of ``COMPILE_DEFINITIONS``\\nwhere ``<CONFIG>`` is an upper-case name (ex. ``COMPILE_DEFINITIONS_DEBUG``).\\n\\nContents of ``COMPILE_DEFINITIONS_<CONFIG>`` may use \\\"generator expressions\\\"\\nwith the syntax ``$<...>``.  See the ``cmake-generator-expressions(7)``\\nmanual for available expressions.  See the ``cmake-buildsystem(7)``\\nmanual for more on defining buildsystem properties.\\n\\nGenerator expressions should be preferred instead of setting this property.\\n",
        "property"
    ],
    "COMPILE_DEFINITIONS_RELEASE": [
        "COMPILE_DEFINITIONS_<CONFIG>\\n----------------------------\\n\\nIgnored.  See CMake Policy ``CMP0043``.\\n\\nPer-configuration preprocessor definitions in a directory.\\n\\nThis is the configuration-specific version of ``COMPILE_DEFINITIONS``\\nwhere ``<CONFIG>`` is an upper-case name (ex. ``COMPILE_DEFINITIONS_DEBUG``).\\n\\nThis property will be initialized in each directory by its value in\\nthe directory's parent.\\n\\nContents of ``COMPILE_DEFINITIONS_<CONFIG>`` may use \\\"generator expressions\\\"\\nwith the syntax ``$<...>``.  See the ``cmake-generator-expressions(7)``\\nmanual for available expressions.  See the ``cmake-buildsystem(7)``\\nmanual for more on defining buildsystem properties.\\n\\nGenerator expressions should be preferred instead of setting this property.\\n\\nCOMPILE_DEFINITIONS_<CONFIG>\\n----------------------------\\n\\nIgnored.  See CMake Policy ``CMP0043``.\\n\\nPer-configuration preprocessor definitions on a source file.\\n\\nThis is the configuration-specific version of COMPILE_DEFINITIONS.\\nNote that Xcode does not support per-configuration source file flags\\nso this property will be ignored by the Xcode generator.\\n\\nCOMPILE_DEFINITIONS_<CONFIG>\\n----------------------------\\n\\nIgnored.  See CMake Policy ``CMP0043``.\\n\\nPer-configuration preprocessor definitions on a target.\\n\\nThis is the configuration-specific version of ``COMPILE_DEFINITIONS``\\nwhere ``<CONFIG>`` is an upper-case name (ex. ``COMPILE_DEFINITIONS_DEBUG``).\\n\\nContents of ``COMPILE_DEFINITIONS_<CONFIG>`` may use \\\"generator expressions\\\"\\nwith the syntax ``$<...>``.  See the ``cmake-generator-expressions(7)``\\nmanual for available expressions.  See the ``cmake-buildsystem(7)``\\nmanual for more on defining buildsystem properties.\\n\\nGenerator expressions should be preferred instead of setting this property.\\n",
        "property"
    ],
    "COMPILE_FEATURES": [
        "COMPILE_FEATURES\\n----------------\\n\\nCompiler features enabled for this target.\\n\\nThe list of features in this property are a subset of the features listed\\nin the ``CMAKE_CXX_COMPILE_FEATURES`` variable.\\n\\nContents of ``COMPILE_FEATURES`` may use \\\"generator expressions\\\" with the\\nsyntax ``$<...>``.  See the ``cmake-generator-expressions(7)`` manual for\\navailable expressions.  See the ``cmake-compile-features(7)`` manual\\nfor information on compile features and a list of supported compilers.\\n",
        "property"
    ],
    "COMPILE_FLAGS": [
        "COMPILE_FLAGS\\n-------------\\n\\nAdditional flags to be added when compiling this source file.\\n\\nThe ``COMPILE_FLAGS`` property, managed as a string, sets additional compiler\\nflags used to build source files.  Use ``COMPILE_DEFINITIONS`` to pass\\nadditional preprocessor definitions.\\n\\nContents of ``COMPILE_FLAGS`` may use \\\"generator expressions\\\"\\nwith the syntax ``$<...>``.  See the ``cmake-generator-expressions(7)``\\nmanual for available expressions.  However, ``Xcode``\\ndoes not support per-config per-source settings, so expressions\\nthat depend on the build configuration are not allowed with that\\ngenerator.\\n\\n.. note::\\n\\n  This property has been superseded by the ``COMPILE_OPTIONS`` property.\\n\\nCOMPILE_FLAGS\\n-------------\\n\\nAdditional flags to use when compiling this target's sources.\\n\\nThe ``COMPILE_FLAGS`` property sets additional compiler flags used to\\nbuild sources within the target.  Use ``COMPILE_DEFINITIONS``\\nto pass additional preprocessor definitions.\\n\\nThis property is deprecated.  Use the ``COMPILE_OPTIONS``\\nproperty or the ``target_compile_options()`` command instead.\\n",
        "property"
    ],
    "COMPILE_OPTIONS": [
        "COMPILE_OPTIONS\\n---------------\\n\\nList of options to pass to the compiler.\\n\\nThis property holds a :ref:`;-list <CMake Language Lists>` of options\\ngiven so far to the ``add_compile_options()`` command.\\n\\nThis property is used to initialize the ``COMPILE_OPTIONS`` target\\nproperty when a target is created, which is used by the generators to set\\nthe options for the compiler.\\n\\nContents of ``COMPILE_OPTIONS`` may use \\\"generator expressions\\\" with the\\nsyntax ``$<...>``.  See the ``cmake-generator-expressions(7)`` manual\\nfor available expressions.  See the ``cmake-buildsystem(7)`` manual\\nfor more on defining buildsystem properties.\\n\\nCOMPILE_OPTIONS\\n---------------\\n\\nList of additional options to pass to the compiler.\\n\\nThis property holds a :ref:`;-list <CMake Language Lists>` of options\\nand will be added to the list of compile flags when this\\nsource file builds.  Use ``COMPILE_DEFINITIONS`` to pass\\nadditional preprocessor definitions and ``INCLUDE_DIRECTORIES`` to pass\\nadditional include directories.\\n\\nContents of ``COMPILE_OPTIONS`` may use \\\"generator expressions\\\" with the\\nsyntax ``$<...>``.  See the ``cmake-generator-expressions(7)`` manual\\nfor available expressions.  However, ``Xcode``\\ndoes not support per-config per-source settings, so expressions\\nthat depend on the build configuration are not allowed with that\\ngenerator.\\n\\n.. note::\\n\\n  This property should be preferred over the ``COMPILE_FLAGS`` property.\\n\\nCOMPILE_OPTIONS\\n---------------\\n\\nList of options to pass to the compiler.\\n\\nThis property holds a :ref:`;-list <CMake Language Lists>` of options\\nspecified so far for its target.  Use the ``target_compile_options()``\\ncommand to append more options.\\n\\nThis property is initialized by the ``COMPILE_OPTIONS`` directory\\nproperty when a target is created, and is used by the generators to set\\nthe options for the compiler.\\n\\nContents of ``COMPILE_OPTIONS`` may use \\\"generator expressions\\\" with the\\nsyntax ``$<...>``.  See the ``cmake-generator-expressions(7)`` manual\\nfor available expressions.  See the ``cmake-buildsystem(7)`` manual\\nfor more on defining buildsystem properties.\\n",
        "property"
    ],
    "COMPILE_PDB_NAME": [
        "COMPILE_PDB_NAME\\n----------------\\n\\nOutput name for the MS debug symbol ``.pdb`` file generated by the\\ncompiler while building source files.\\n\\nThis property specifies the base name for the debug symbols file.\\nIf not set, the default is unspecified.\\n\\n.. note::\\n The compiler-generated program database files are specified by the\\n ``/Fd`` compiler flag and are not the same as linker-generated\\n program database files specified by the ``/pdb`` linker flag.\\n Use the ``PDB_NAME`` property to specify the latter.\\n",
        "property"
    ],
    "COMPILE_PDB_NAME_DEBUG": [
        "COMPILE_PDB_NAME_<CONFIG>\\n-------------------------\\n\\nPer-configuration output name for the MS debug symbol ``.pdb`` file\\ngenerated by the compiler while building source files.\\n\\nThis is the configuration-specific version of ``COMPILE_PDB_NAME``.\\n\\n.. note::\\n The compiler-generated program database files are specified by the\\n ``/Fd`` compiler flag and are not the same as linker-generated\\n program database files specified by the ``/pdb`` linker flag.\\n Use the ``PDB_NAME_<CONFIG>`` property to specify the latter.\\n",
        "property"
    ],
    "COMPILE_PDB_NAME_RELEASE": [
        "COMPILE_PDB_NAME_<CONFIG>\\n-------------------------\\n\\nPer-configuration output name for the MS debug symbol ``.pdb`` file\\ngenerated by the compiler while building source files.\\n\\nThis is the configuration-specific version of ``COMPILE_PDB_NAME``.\\n\\n.. note::\\n The compiler-generated program database files are specified by the\\n ``/Fd`` compiler flag and are not the same as linker-generated\\n program database files specified by the ``/pdb`` linker flag.\\n Use the ``PDB_NAME_<CONFIG>`` property to specify the latter.\\n",
        "property"
    ],
    "COMPILE_PDB_OUTPUT_DIRECTORY": [
        "COMPILE_PDB_OUTPUT_DIRECTORY\\n----------------------------\\n\\nOutput directory for the MS debug symbol ``.pdb`` file\\ngenerated by the compiler while building source files.\\n\\nThis property specifies the directory into which the MS debug symbols\\nwill be placed by the compiler.  This property is initialized by the\\nvalue of the ``CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY`` variable\\nif it is set when a target is created.\\n\\n.. note::\\n The compiler-generated program database files are specified by the\\n ``/Fd`` compiler flag and are not the same as linker-generated\\n program database files specified by the ``/pdb`` linker flag.\\n Use the ``PDB_OUTPUT_DIRECTORY`` property to specify the latter.\\n",
        "property"
    ],
    "COMPILE_PDB_OUTPUT_DIRECTORY_DEBUG": [
        "COMPILE_PDB_OUTPUT_DIRECTORY_<CONFIG>\\n-------------------------------------\\n\\nPer-configuration output directory for the MS debug symbol ``.pdb`` file\\ngenerated by the compiler while building source files.\\n\\nThis is a per-configuration version of\\n``COMPILE_PDB_OUTPUT_DIRECTORY``,\\nbut multi-configuration generators (VS, Xcode) do NOT append a\\nper-configuration subdirectory to the specified directory.  This\\nproperty is initialized by the value of the\\n``CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY_<CONFIG>`` variable\\nif it is set when a target is created.\\n\\n.. note::\\n The compiler-generated program database files are specified by the\\n ``/Fd`` compiler flag and are not the same as linker-generated\\n program database files specified by the ``/pdb`` linker flag.\\n Use the ``PDB_OUTPUT_DIRECTORY_<CONFIG>`` property to specify the latter.\\n",
        "property"
    ],
    "COMPILE_PDB_OUTPUT_DIRECTORY_RELEASE": [
        "COMPILE_PDB_OUTPUT_DIRECTORY_<CONFIG>\\n-------------------------------------\\n\\nPer-configuration output directory for the MS debug symbol ``.pdb`` file\\ngenerated by the compiler while building source files.\\n\\nThis is a per-configuration version of\\n``COMPILE_PDB_OUTPUT_DIRECTORY``,\\nbut multi-configuration generators (VS, Xcode) do NOT append a\\nper-configuration subdirectory to the specified directory.  This\\nproperty is initialized by the value of the\\n``CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY_<CONFIG>`` variable\\nif it is set when a target is created.\\n\\n.. note::\\n The compiler-generated program database files are specified by the\\n ``/Fd`` compiler flag and are not the same as linker-generated\\n program database files specified by the ``/pdb`` linker flag.\\n Use the ``PDB_OUTPUT_DIRECTORY_<CONFIG>`` property to specify the latter.\\n",
        "property"
    ],
    "COST": [
        "COST\\n----\\n\\nSet this to a floating point value. Tests in a test set will be run in descending order of cost.\\n\\nThis property describes the cost of a test.  You can explicitly set\\nthis value; tests with higher COST values will run first.\\n",
        "property"
    ],
    "CPACK_DESKTOP_SHORTCUTS": [
        "CPACK_DESKTOP_SHORTCUTS\\n-----------------------\\n\\nSpecies a list of shortcut names that should be created on the Desktop\\nfor this file.\\n\\nThe property is currently only supported by the WIX generator.\\n",
        "property"
    ],
    "CPACK_NEVER_OVERWRITE": [
        "CPACK_NEVER_OVERWRITE\\n---------------------\\n\\nRequest that this file not be overwritten on install or reinstall.\\n\\nThe property is currently only supported by the WIX generator.\\n",
        "property"
    ],
    "CPACK_PERMANENT": [
        "CPACK_PERMANENT\\n---------------\\n\\nRequest that this file not be removed on uninstall.\\n\\nThe property is currently only supported by the WIX generator.\\n",
        "property"
    ],
    "CPACK_STARTUP_SHORTCUTS": [
        "CPACK_STARTUP_SHORTCUTS\\n-----------------------\\n\\nSpecies a list of shortcut names that should be created in the Startup folder\\nfor this file.\\n\\nThe property is currently only supported by the WIX generator.\\n",
        "property"
    ],
    "CPACK_START_MENU_SHORTCUTS": [
        "CPACK_START_MENU_SHORTCUTS\\n--------------------------\\n\\nSpecies a list of shortcut names that should be created in the Start Menu\\nfor this file.\\n\\nThe property is currently only supported by the WIX generator.\\n",
        "property"
    ],
    "CPACK_WIX_ACL": [
        "CPACK_WIX_ACL\\n-------------\\n\\nSpecifies access permissions for files or directories\\ninstalled by a WiX installer.\\n\\nThe property can contain multiple list entries,\\neach of which has to match the following format.\\n\\n::\\n\\n <user>[@<domain>]=<permission>[,<permission>]\\n\\n``<user>`` and ``<domain>`` specify the windows user and domain for which the\\n``<Permission>`` element should be generated.\\n\\n``<permission>`` is any of the YesNoType attributes listed here::\\n\\n http://wixtoolset.org/documentation/manual/v3/xsd/wix/permission.html\\n",
        "property"
    ],
    "CROSSCOMPILING_EMULATOR": [
        "CROSSCOMPILING_EMULATOR\\n-----------------------\\n\\nUse the given emulator to run executables created when crosscompiling.\\nThis command will be added as a prefix to ``add_test()``,\\n``add_custom_command()``, and ``add_custom_target()`` commands\\nfor built target system executables.\\n\\nThis property is initialized by the value of the\\n``CMAKE_CROSSCOMPILING_EMULATOR`` variable if it is set when a target\\nis created.\\n",
        "property"
    ],
    "CUDA_EXTENSIONS": [
        "CUDA_EXTENSIONS\\n---------------\\n\\nBoolean specifying whether compiler specific extensions are requested.\\n\\nThis property specifies whether compiler specific extensions should be\\nused.  For some compilers, this results in adding a flag such\\nas ``-std=gnu++11`` instead of ``-std=c++11`` to the compile line.  This\\nproperty is ``ON`` by default. The basic CUDA/C++ standard level is\\ncontrolled by the ``CUDA_STANDARD`` target property.\\n\\nSee the ``cmake-compile-features(7)`` manual for information on\\ncompile features and a list of supported compilers.\\n\\nThis property is initialized by the value of\\nthe ``CMAKE_CUDA_EXTENSIONS`` variable if it is set when a target\\nis created.\\n",
        "property"
    ],
    "CUDA_PTX_COMPILATION": [
        "CUDA_PTX_COMPILATION\\n--------------------\\n\\nCompile CUDA sources to ``.ptx`` files instead of ``.obj`` files\\nwithin :ref:`Object Libraries`.\\n\\nFor example:\\n\\n add_library(myptx OBJECT a.cu b.cu)\\n set_property(TARGET myptx PROPERTY CUDA_PTX_COMPILATION ON)\\n",
        "property"
    ],
    "CUDA_RESOLVE_DEVICE_SYMBOLS": [
        "CUDA_RESOLVE_DEVICE_SYMBOLS\\n---------------------------\\n\\nCUDA only: Enables device linking for the specific static library target\\n\\nIf set this will enable device linking on this static library target. Normally\\ndevice linking is deferred until a shared library or executable is generated,\\nallowing for multiple static libraries to resolve device symbols at the same\\ntime.\\n\\nFor instance:\\n\\n set_property(TARGET mystaticlib PROPERTY CUDA_RESOLVE_DEVICE_SYMBOLS ON)\\n",
        "property"
    ],
    "CUDA_SEPARABLE_COMPILATION": [
        "CUDA_SEPARABLE_COMPILATION\\n--------------------------\\n\\nCUDA only: Enables separate compilation of device code\\n\\nIf set this will enable separable compilation for all CUDA files for\\nthe given target.\\n\\nFor instance:\\n\\n set_property(TARGET myexe PROPERTY CUDA_SEPARABLE_COMPILATION ON)\\n\\nThis property is initialized by the value of the\\n``CMAKE_CUDA_SEPARABLE_COMPILATION`` variable if it is set when a\\ntarget is created.\\n",
        "property"
    ],
    "CUDA_STANDARD": [
        "CUDA_STANDARD\\n-------------\\n\\nThe CUDA/C++ standard whose features are requested to build this target.\\n\\nThis property specifies the CUDA/C++ standard whose features are requested\\nto build this target.  For some compilers, this results in adding a\\nflag such as ``-std=gnu++11`` to the compile line.\\n\\nSupported values are ``98``, ``11``, ``14``.\\n\\nIf the value requested does not result in a compile flag being added for\\nthe compiler in use, a previous standard flag will be added instead.  This\\nmeans that using:\\n\\n set_property(TARGET tgt PROPERTY CUDA_STANDARD 11)\\n\\nwith a compiler which does not support ``-std=gnu++11`` or an equivalent\\nflag will not result in an error or warning, but will instead add the\\n``-std=gnu++98`` flag if supported.  This \\\"decay\\\" behavior may be controlled\\nwith the ``CUDA_STANDARD_REQUIRED`` target property.\\nAdditionally, the ``CUDA_EXTENSIONS`` target property may be used to\\ncontrol whether compiler-specific extensions are enabled on a per-target basis.\\n\\nSee the ``cmake-compile-features(7)`` manual for information on\\ncompile features and a list of supported compilers.\\n\\nThis property is initialized by the value of\\nthe ``CMAKE_CUDA_STANDARD`` variable if it is set when a target\\nis created.\\n",
        "property"
    ],
    "CUDA_STANDARD_REQUIRED": [
        "CUDA_STANDARD_REQUIRED\\n----------------------\\n\\nBoolean describing whether the value of ``CUDA_STANDARD`` is a requirement.\\n\\nIf this property is set to ``ON``, then the value of the\\n``CUDA_STANDARD`` target property is treated as a requirement.  If this\\nproperty is ``OFF`` or unset, the ``CUDA_STANDARD`` target property is\\ntreated as optional and may \\\"decay\\\" to a previous standard if the requested is\\nnot available.  For compilers that have no notion of a standard level, such as\\nMSVC, this has no effect.\\n\\nSee the ``cmake-compile-features(7)`` manual for information on\\ncompile features and a list of supported compilers.\\n\\nThis property is initialized by the value of\\nthe ``CMAKE_CUDA_STANDARD_REQUIRED`` variable if it is set when a\\ntarget is created.\\n",
        "property"
    ],
    "CXX_EXTENSIONS": [
        "CXX_EXTENSIONS\\n--------------\\n\\nBoolean specifying whether compiler specific extensions are requested.\\n\\nThis property specifies whether compiler specific extensions should be\\nused.  For some compilers, this results in adding a flag such\\nas ``-std=gnu++11`` instead of ``-std=c++11`` to the compile line.  This\\nproperty is ``ON`` by default. The basic C++ standard level is\\ncontrolled by the ``CXX_STANDARD`` target property.\\n\\nSee the ``cmake-compile-features(7)`` manual for information on\\ncompile features and a list of supported compilers.\\n\\nThis property is initialized by the value of\\nthe ``CMAKE_CXX_EXTENSIONS`` variable if it is set when a target\\nis created.\\n",
        "property"
    ],
    "CXX_STANDARD": [
        "CXX_STANDARD\\n------------\\n\\nThe C++ standard whose features are requested to build this target.\\n\\nThis property specifies the C++ standard whose features are requested\\nto build this target.  For some compilers, this results in adding a\\nflag such as ``-std=gnu++11`` to the compile line.  For compilers that\\nhave no notion of a standard level, such as Microsoft Visual C++ before\\n2015 Update 3, this has no effect.\\n\\nSupported values are ``98``, ``11``, ``14``, ``17``, and ``20``.\\n\\nIf the value requested does not result in a compile flag being added for\\nthe compiler in use, a previous standard flag will be added instead.  This\\nmeans that using:\\n\\n set_property(TARGET tgt PROPERTY CXX_STANDARD 11)\\n\\nwith a compiler which does not support ``-std=gnu++11`` or an equivalent\\nflag will not result in an error or warning, but will instead add the\\n``-std=gnu++98`` flag if supported.  This \\\"decay\\\" behavior may be controlled\\nwith the ``CXX_STANDARD_REQUIRED`` target property.\\nAdditionally, the ``CXX_EXTENSIONS`` target property may be used to\\ncontrol whether compiler-specific extensions are enabled on a per-target basis.\\n\\nSee the ``cmake-compile-features(7)`` manual for information on\\ncompile features and a list of supported compilers.\\n\\nThis property is initialized by the value of\\nthe ``CMAKE_CXX_STANDARD`` variable if it is set when a target\\nis created.\\n",
        "property"
    ],
    "CXX_STANDARD_REQUIRED": [
        "CXX_STANDARD_REQUIRED\\n---------------------\\n\\nBoolean describing whether the value of ``CXX_STANDARD`` is a requirement.\\n\\nIf this property is set to ``ON``, then the value of the\\n``CXX_STANDARD`` target property is treated as a requirement.  If this\\nproperty is ``OFF`` or unset, the ``CXX_STANDARD`` target property is\\ntreated as optional and may \\\"decay\\\" to a previous standard if the requested is\\nnot available.  For compilers that have no notion of a standard level, such as\\nMSVC, this has no effect.\\n\\nSee the ``cmake-compile-features(7)`` manual for information on\\ncompile features and a list of supported compilers.\\n\\nThis property is initialized by the value of\\nthe ``CMAKE_CXX_STANDARD_REQUIRED`` variable if it is set when a\\ntarget is created.\\n",
        "property"
    ],
    "C_EXTENSIONS": [
        "C_EXTENSIONS\\n------------\\n\\nBoolean specifying whether compiler specific extensions are requested.\\n\\nThis property specifies whether compiler specific extensions should be\\nused.  For some compilers, this results in adding a flag such\\nas ``-std=gnu11`` instead of ``-std=c11`` to the compile line.  This\\nproperty is ``ON`` by default. The basic C standard level is\\ncontrolled by the ``C_STANDARD`` target property.\\n\\nSee the ``cmake-compile-features(7)`` manual for information on\\ncompile features and a list of supported compilers.\\n\\nThis property is initialized by the value of\\nthe ``CMAKE_C_EXTENSIONS`` variable if it is set when a target\\nis created.\\n",
        "property"
    ],
    "C_STANDARD": [
        "C_STANDARD\\n----------\\n\\nThe C standard whose features are requested to build this target.\\n\\nThis property specifies the C standard whose features are requested\\nto build this target.  For some compilers, this results in adding a\\nflag such as ``-std=gnu11`` to the compile line.  For compilers that\\nhave no notion of a standard level, such as Microsoft Visual C++ before\\n2015 Update 3, this has no effect.\\n\\nSupported values are ``90``, ``99`` and ``11``.\\n\\nIf the value requested does not result in a compile flag being added for\\nthe compiler in use, a previous standard flag will be added instead.  This\\nmeans that using:\\n\\n set_property(TARGET tgt PROPERTY C_STANDARD 11)\\n\\nwith a compiler which does not support ``-std=gnu11`` or an equivalent\\nflag will not result in an error or warning, but will instead add the\\n``-std=gnu99`` or ``-std=gnu90`` flag if supported.  This \\\"decay\\\" behavior may\\nbe controlled with the ``C_STANDARD_REQUIRED`` target property.\\nAdditionally, the ``C_EXTENSIONS`` target property may be used to\\ncontrol whether compiler-specific extensions are enabled on a per-target basis.\\n\\nSee the ``cmake-compile-features(7)`` manual for information on\\ncompile features and a list of supported compilers.\\n\\nThis property is initialized by the value of\\nthe ``CMAKE_C_STANDARD`` variable if it is set when a target\\nis created.\\n",
        "property"
    ],
    "C_STANDARD_REQUIRED": [
        "C_STANDARD_REQUIRED\\n-------------------\\n\\nBoolean describing whether the value of ``C_STANDARD`` is a requirement.\\n\\nIf this property is set to ``ON``, then the value of the\\n``C_STANDARD`` target property is treated as a requirement.  If this\\nproperty is ``OFF`` or unset, the ``C_STANDARD`` target property is\\ntreated as optional and may \\\"decay\\\" to a previous standard if the requested is\\nnot available.  For compilers that have no notion of a standard level, such as\\nMSVC, this has no effect.\\n\\nSee the ``cmake-compile-features(7)`` manual for information on\\ncompile features and a list of supported compilers.\\n\\nThis property is initialized by the value of\\nthe ``CMAKE_C_STANDARD_REQUIRED`` variable if it is set when a\\ntarget is created.\\n",
        "property"
    ],
    "DEBUG_CONFIGURATIONS": [
        "DEBUG_CONFIGURATIONS\\n--------------------\\n\\nSpecify which configurations are for debugging.\\n\\nThe value must be a semi-colon separated list of configuration names.\\nCurrently this property is used only by the ``target_link_libraries()``\\ncommand.  Additional uses may be defined in the future.\\n\\nThis property must be set at the top level of the project and before\\nthe first ``target_link_libraries()`` command invocation.  If any entry in\\nthe list does not match a valid configuration for the project the\\nbehavior is undefined.\\n",
        "property"
    ],
    "DEFINE_SYMBOL": [
        "DEFINE_SYMBOL\\n-------------\\n\\nDefine a symbol when compiling this target's sources.\\n\\nDEFINE_SYMBOL sets the name of the preprocessor symbol defined when\\ncompiling sources in a shared library.  If not set here then it is set\\nto target_EXPORTS by default (with some substitutions if the target is\\nnot a valid C identifier).  This is useful for headers to know whether\\nthey are being included from inside their library or outside to\\nproperly setup dllexport/dllimport decorations.\\n",
        "property"
    ],
    "DEFINITIONS": [
        "DEFINITIONS\\n-----------\\n\\nFor CMake 2.4 compatibility only.  Use ``COMPILE_DEFINITIONS``\\ninstead.\\n\\nThis read-only property specifies the list of flags given so far to\\nthe ``add_definitions()`` command.  It is intended for debugging\\npurposes.  Use the ``COMPILE_DEFINITIONS`` directory property\\ninstead.\\n\\nThis built-in read-only property does not exist if policy\\n``CMP0059`` is set to ``NEW``.\\n",
        "property"
    ],
    "DEPENDS": [
        "DEPENDS\\n-------\\n\\nSpecifies that this test should only be run after the specified list of tests.\\n\\nSet this to a list of tests that must finish before this test is run. The\\nresults of those tests are not considered, the dependency relationship is\\npurely for order of execution (i.e. it is really just a *run after*\\nrelationship). Consider using test fixtures with setup tests if a dependency\\nwith successful completion is required (see ``FIXTURES_REQUIRED``).\\n",
        "property"
    ],
    "DEPLOYMENT_ADDITIONAL_FILES": [
        "DEPLOYMENT_ADDITIONAL_FILES\\n---------------------------\\n\\nSet the WinCE project ``AdditionalFiles`` in ``DeploymentTool`` in ``.vcproj``\\nfiles generated by the ``Visual Studio 9 2008`` generator.\\nThis is useful when you want to debug on remote WinCE device.\\nSpecify additional files that will be copied to the device.\\nFor example:\\n\\n set_property(TARGET ${TARGET} PROPERTY\\n   DEPLOYMENT_ADDITIONAL_FILES \\\"english.lng|local_folder|remote_folder|0\\\"\\n   \\\"german.lng|local_folder|remote_folder|0\\\")\\n\\nproduces::\\n\\n <DeploymentTool AdditionalFiles=\\\"english.lng|local_folder|remote_folder|0;german.lng|local_folder|remote_folder|0\\\" ... />\\n",
        "property"
    ],
    "DEPLOYMENT_REMOTE_DIRECTORY": [
        "DEPLOYMENT_REMOTE_DIRECTORY\\n---------------------------\\n\\nSet the WinCE project ``RemoteDirectory`` in ``DeploymentTool`` and\\n``RemoteExecutable`` in ``DebuggerTool`` in ``.vcproj`` files generated\\nby the ``Visual Studio 9 2008`` generator.\\nThis is useful when you want to debug on remote WinCE device.\\nFor example:\\n\\n set_property(TARGET ${TARGET} PROPERTY\\n   DEPLOYMENT_REMOTE_DIRECTORY \\\"\\\\\\\\FlashStorage\\\")\\n\\nproduces::\\n\\n <DeploymentTool RemoteDirectory=\\\"\\\\FlashStorage\\\" ... />\\n <DebuggerTool RemoteExecutable=\\\"\\\\FlashStorage\\\\target_file\\\" ... />\\n",
        "property"
    ],
    "DISABLED": [
        "DISABLED\\n--------\\n\\nIf set to true, the test will be skipped and its status will be 'Not Run'. A\\nDISABLED test will not be counted in the total number of tests and its\\ncompletion status will be reported to CDash as 'Disabled'.\\n\\nA DISABLED test does not participate in test fixture dependency resolution.\\nIf a DISABLED test has fixture requirements defined in its\\n``FIXTURES_REQUIRED`` property, it will not cause setup or cleanup\\ntests for those fixtures to be added to the test set.\\n\\nIf a test with the ``FIXTURES_SETUP`` property set is DISABLED, the\\nfixture behavior will be as though that setup test was passing and any test\\ncase requiring that fixture will still run.\\n",
        "property"
    ],
    "DISABLED_FEATURES": [
        "DISABLED_FEATURES\\n-----------------\\n\\nList of features which are disabled during the CMake run.\\n\\nList of features which are disabled during the CMake run.  By default\\nit contains the names of all packages which were not found.  This is\\ndetermined using the <NAME>_FOUND variables.  Packages which are\\nsearched QUIET are not listed.  A project can add its own features to\\nthis list.  This property is used by the macros in\\nFeatureSummary.cmake.\\n",
        "property"
    ],
    "DOTNET_TARGET_FRAMEWORK_VERSION": [
        "DOTNET_TARGET_FRAMEWORK_VERSION\\n-------------------------------\\n\\nSpecify the .NET target framework version.\\n\\nUsed to specify the .NET target framework version for C++/CLI.  For\\nexample, \\\"v4.5\\\".\\n\\nThis property is only evaluated for :ref:`Visual Studio Generators`\\nVS 2010 and above.\\n\\nCan be initialized for all targets using the variable\\n``CMAKE_DOTNET_TARGET_FRAMEWORK_VERSION``.\\n",
        "property"
    ],
    "ECLIPSE_EXTRA_CPROJECT_CONTENTS": [
        "ECLIPSE_EXTRA_CPROJECT_CONTENTS\\n-------------------------------\\n\\nAdditional contents to be inserted into the generated Eclipse cproject file.\\n\\nThe cproject file defines the CDT specific information. Some third party IDE's\\nare based on Eclipse with the addition of other information specific to that IDE.\\nThrough this property, it is possible to add this additional contents to\\nthe generated project.\\nIt is expected to contain valid XML.\\n\\nAlso see the ``ECLIPSE_EXTRA_NATURES`` property.\\n",
        "property"
    ],
    "ECLIPSE_EXTRA_NATURES": [
        "ECLIPSE_EXTRA_NATURES\\n---------------------\\n\\nList of natures to add to the generated Eclipse project file.\\n\\nEclipse projects specify language plugins by using natures. This property\\nshould be set to the unique identifier for a nature (which looks like a Java\\npackage name).\\n\\nAlso see the ``ECLIPSE_EXTRA_CPROJECT_CONTENTS`` property.\\n",
        "property"
    ],
    "ENABLED_FEATURES": [
        "ENABLED_FEATURES\\n----------------\\n\\nList of features which are enabled during the CMake run.\\n\\nList of features which are enabled during the CMake run.  By default\\nit contains the names of all packages which were found.  This is\\ndetermined using the <NAME>_FOUND variables.  Packages which are\\nsearched QUIET are not listed.  A project can add its own features to\\nthis list.  This property is used by the macros in\\nFeatureSummary.cmake.\\n",
        "property"
    ],
    "ENABLED_LANGUAGES": [
        "ENABLED_LANGUAGES\\n-----------------\\n\\nRead-only property that contains the list of currently enabled languages\\n\\nSet to list of currently enabled languages.\\n",
        "property"
    ],
    "ENABLE_EXPORTS": [
        "ENABLE_EXPORTS\\n--------------\\n\\nSpecify whether an executable exports symbols for loadable modules.\\n\\nNormally an executable does not export any symbols because it is the\\nfinal program.  It is possible for an executable to export symbols to\\nbe used by loadable modules.  When this property is set to true CMake\\nwill allow other targets to \\\"link\\\" to the executable with the\\n``TARGET_LINK_LIBRARIES()`` command.  On all platforms a target-level\\ndependency on the executable is created for targets that link to it.\\nFor DLL platforms an import library will be created for the exported\\nsymbols and then used for linking.  All Windows-based systems\\nincluding Cygwin are DLL platforms.  For non-DLL platforms that\\nrequire all symbols to be resolved at link time, such as macOS, the\\nmodule will \\\"link\\\" to the executable using a flag like\\n``-bundle_loader``.  For other non-DLL platforms the link rule is simply\\nignored since the dynamic loader will automatically bind symbols when\\nthe module is loaded.\\n\\nThis property is initialized by the value of the variable\\n``CMAKE_ENABLE_EXPORTS`` if it is set when a target is created.\\n",
        "property"
    ],
    "ENVIRONMENT": [
        "ENVIRONMENT\\n-----------\\n\\nSpecify environment variables that should be defined for running a test.\\n\\nIf set to a list of environment variables and values of the form\\nMYVAR=value those environment variables will be defined while running\\nthe test.  The environment is restored to its previous state after the\\ntest is done.\\n",
        "property"
    ],
    "EXCLUDE_FROM_ALL": [
        "EXCLUDE_FROM_ALL\\n----------------\\n\\nExclude the directory from the all target of its parent.\\n\\nA property on a directory that indicates if its targets are excluded\\nfrom the default build target.  If it is not, then with a Makefile for\\nexample typing make will cause the targets to be built.  The same\\nconcept applies to the default build of other generators.\\n\\nEXCLUDE_FROM_ALL\\n----------------\\n\\nExclude the target from the all target.\\n\\nA property on a target that indicates if the target is excluded from\\nthe default build target.  If it is not, then with a Makefile for\\nexample typing make will cause this target to be built.  The same\\nconcept applies to the default build of other generators.  Installing\\na target with EXCLUDE_FROM_ALL set to true has undefined behavior.\\n",
        "property"
    ],
    "EXCLUDE_FROM_DEFAULT_BUILD": [
        "EXCLUDE_FROM_DEFAULT_BUILD\\n--------------------------\\n\\nExclude target from \\\"Build Solution\\\".\\n\\nThis property is only used by Visual Studio generators.\\nWhen set to TRUE, the target will not be built when you press \\\"Build\\nSolution\\\".\\n",
        "property"
    ],
    "EXCLUDE_FROM_DEFAULT_BUILD_DEBUG": [
        "EXCLUDE_FROM_DEFAULT_BUILD_<CONFIG>\\n-----------------------------------\\n\\nPer-configuration version of target exclusion from \\\"Build Solution\\\".\\n\\nThis is the configuration-specific version of\\nEXCLUDE_FROM_DEFAULT_BUILD.  If the generic EXCLUDE_FROM_DEFAULT_BUILD\\nis also set on a target, EXCLUDE_FROM_DEFAULT_BUILD_<CONFIG> takes\\nprecedence in configurations for which it has a value.\\n",
        "property"
    ],
    "EXCLUDE_FROM_DEFAULT_BUILD_RELEASE": [
        "EXCLUDE_FROM_DEFAULT_BUILD_<CONFIG>\\n-----------------------------------\\n\\nPer-configuration version of target exclusion from \\\"Build Solution\\\".\\n\\nThis is the configuration-specific version of\\nEXCLUDE_FROM_DEFAULT_BUILD.  If the generic EXCLUDE_FROM_DEFAULT_BUILD\\nis also set on a target, EXCLUDE_FROM_DEFAULT_BUILD_<CONFIG> takes\\nprecedence in configurations for which it has a value.\\n",
        "property"
    ],
    "EXPORT_NAME": [
        "EXPORT_NAME\\n-----------\\n\\nExported name for target files.\\n\\nThis sets the name for the IMPORTED target generated when it this\\ntarget is is exported.  If not set, the logical target name is used by\\ndefault.\\n",
        "property"
    ],
    "EXPORT_PROPERTIES": [
        "EXPORT_PROPERTIES\\n-----------------\\n\\nList additional properties to export for a target.\\n\\nThis property contains a list of property names that should be exported by\\nthe ``install(EXPORT)`` and ``export()`` commands.  By default\\nonly a limited number of properties are exported. This property can be used\\nto additionally export other properties as well.\\n\\nProperties starting with ``INTERFACE_`` or ``IMPORTED_`` are not allowed as\\nthey are reserved for internal CMake use.\\n\\nProperties containing generator expressions are also not allowed.\\n",
        "property"
    ],
    "EXTERNAL_OBJECT": [
        "EXTERNAL_OBJECT\\n---------------\\n\\nIf set to true then this is an object file.\\n\\nIf this property is set to true then the source file is really an\\nobject file and should not be compiled.  It will still be linked into\\nthe target though.\\n",
        "property"
    ],
    "EchoString": [
        "EchoString\\n----------\\n\\nA message to be displayed when the target is built.\\n\\nA message to display on some generators (such as makefiles) when the\\ntarget is built.\\n",
        "property"
    ],
    "FAIL_REGULAR_EXPRESSION": [
        "FAIL_REGULAR_EXPRESSION\\n-----------------------\\n\\nIf the output matches this regular expression the test will fail.\\n\\nIf set, if the output matches one of specified regular expressions,\\nthe test will fail.  Example:\\n\\n set_tests_properties(mytest PROPERTIES\\n   FAIL_REGULAR_EXPRESSION \\\"[^a-z]Error;ERROR;Failed\\\"\\n )\\n\\n``FAIL_REGULAR_EXPRESSION`` expects a list of regular expressions.\\n",
        "property"
    ],
    "FIND_LIBRARY_USE_LIB32_PATHS": [
        "FIND_LIBRARY_USE_LIB32_PATHS\\n----------------------------\\n\\nWhether the ``find_library()`` command should automatically search\\n``lib32`` directories.\\n\\n``FIND_LIBRARY_USE_LIB32_PATHS`` is a boolean specifying whether the\\n``find_library()`` command should automatically search the ``lib32``\\nvariant of directories called ``lib`` in the search path when building 32-bit\\nbinaries.\\n\\nSee also the ``CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX`` variable.\\n",
        "property"
    ],
    "FIND_LIBRARY_USE_LIB64_PATHS": [
        "FIND_LIBRARY_USE_LIB64_PATHS\\n----------------------------\\n\\nWhether ``find_library()`` should automatically search lib64\\ndirectories.\\n\\nFIND_LIBRARY_USE_LIB64_PATHS is a boolean specifying whether the\\n``find_library()`` command should automatically search the lib64\\nvariant of directories called lib in the search path when building\\n64-bit binaries.\\n\\nSee also the ``CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX`` variable.\\n",
        "property"
    ],
    "FIND_LIBRARY_USE_LIBX32_PATHS": [
        "FIND_LIBRARY_USE_LIBX32_PATHS\\n-----------------------------\\n\\nWhether the ``find_library()`` command should automatically search\\n``libx32`` directories.\\n\\n``FIND_LIBRARY_USE_LIBX32_PATHS`` is a boolean specifying whether the\\n``find_library()`` command should automatically search the ``libx32``\\nvariant of directories called ``lib`` in the search path when building\\nx32-abi binaries.\\n\\nSee also the ``CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX`` variable.\\n",
        "property"
    ],
    "FIND_LIBRARY_USE_OPENBSD_VERSIONING": [
        "FIND_LIBRARY_USE_OPENBSD_VERSIONING\\n-----------------------------------\\n\\nWhether ``find_library()`` should find OpenBSD-style shared\\nlibraries.\\n\\nThis property is a boolean specifying whether the\\n``find_library()`` command should find shared libraries with\\nOpenBSD-style versioned extension: \\\".so.<major>.<minor>\\\".  The\\nproperty is set to true on OpenBSD and false on other platforms.\\n",
        "property"
    ],
    "FIXTURES_CLEANUP": [
        "FIXTURES_CLEANUP\\n----------------\\n\\nSpecifies a list of fixtures for which the test is to be treated as a cleanup\\ntest. These fixture names are distinct from test case names and are not\\nrequired to have any similarity to the names of tests associated with them.\\n\\nFixture cleanup tests are ordinary tests with all of the usual test\\nfunctionality. Setting the ``FIXTURES_CLEANUP`` property for a test has two\\nprimary effects:\\n\\n- CTest will ensure the test executes after all other tests which list any of\\n  the fixtures in its ``FIXTURES_REQUIRED`` property.\\n\\n- If CTest is asked to run only a subset of tests (e.g. using regular\\n  expressions or the ``--rerun-failed`` option) and the cleanup test is not in\\n  the set of tests to run, it will automatically be added if any tests in the\\n  set require any fixture listed in ``FIXTURES_CLEANUP``.\\n\\nA cleanup test can have multiple fixtures listed in its ``FIXTURES_CLEANUP``\\nproperty. It will execute only once for the whole CTest run, not once for each\\nfixture. A fixture can also have more than one cleanup test defined. If there\\nare multiple cleanup tests for a fixture, projects can control their order with\\nthe usual ``DEPENDS`` test property if necessary.\\n\\nA cleanup test is allowed to require other fixtures, but not any fixture listed\\nin its ``FIXTURES_CLEANUP`` property. For example:\\n\\n # Ok: Dependent fixture is different to cleanup\\n set_tests_properties(cleanupFoo PROPERTIES\\n   FIXTURES_CLEANUP  Foo\\n   FIXTURES_REQUIRED Bar\\n )\\n\\n # Error: cannot require same fixture as cleanup\\n set_tests_properties(cleanupFoo PROPERTIES\\n   FIXTURES_CLEANUP  Foo\\n   FIXTURES_REQUIRED Foo\\n )\\n\\nCleanup tests will execute even if setup or regular tests for that fixture fail\\nor are skipped.\\n\\nSee ``FIXTURES_REQUIRED`` for a more complete discussion of how to use\\ntest fixtures.\\n",
        "property"
    ],
    "FIXTURES_REQUIRED": [
        "FIXTURES_REQUIRED\\n-----------------\\n\\nSpecifies a list of fixtures the test requires. Fixture names are case\\nsensitive and they are not required to have any similarity to test names.\\n\\nFixtures are a way to attach setup and cleanup tasks to a set of tests. If a\\ntest requires a given fixture, then all tests marked as setup tasks for that\\nfixture will be executed first (once for the whole set of tests, not once per\\ntest requiring the fixture). After all tests requiring a particular fixture\\nhave completed, CTest will ensure all tests marked as cleanup tasks for that\\nfixture are then executed. Tests are marked as setup tasks with the\\n``FIXTURES_SETUP`` property and as cleanup tasks with the\\n``FIXTURES_CLEANUP`` property. If any of a fixture's setup tests fail,\\nall tests listing that fixture in their ``FIXTURES_REQUIRED`` property will not\\nbe executed. The cleanup tests for the fixture will always be executed, even if\\nsome setup tests fail.\\n\\nWhen CTest is asked to execute only a subset of tests (e.g. by the use of\\nregular expressions or when run with the ``--rerun-failed`` command line\\noption), it will automatically add any setup or cleanup tests for fixtures\\nrequired by any of the tests that are in the execution set. This behavior can\\nbe overridden with the ``-FS``, ``-FC`` and ``-FA`` command line options to\\n``ctest(1)`` if desired.\\n\\nSince setup and cleanup tasks are also tests, they can have an ordering\\nspecified by the ``DEPENDS`` test property just like any other tests.\\nThis can be exploited to implement setup or cleanup using multiple tests for a\\nsingle fixture to modularise setup or cleanup logic.\\n\\nThe concept of a fixture is different to that of a resource specified by\\n``RESOURCE_LOCK``, but they may be used together. A fixture defines a\\nset of tests which share setup and cleanup requirements, whereas a resource\\nlock has the effect of ensuring a particular set of tests do not run in\\nparallel. Some situations may need both, such as setting up a database,\\nserialising test access to that database and deleting the database again at the\\nend. For such cases, tests would populate both ``FIXTURES_REQUIRED`` and\\n``RESOURCE_LOCK`` to combine the two behaviours. Names used for\\n``RESOURCE_LOCK`` have no relationship with names of fixtures, so note\\nthat a resource lock does not imply a fixture and vice versa.\\n\\nConsider the following example which represents a database test scenario\\nsimilar to that mentioned above:\\n\\n add_test(NAME testsDone   COMMAND emailResults)\\n add_test(NAME fooOnly     COMMAND testFoo)\\n add_test(NAME dbOnly      COMMAND testDb)\\n add_test(NAME dbWithFoo   COMMAND testDbWithFoo)\\n add_test(NAME createDB    COMMAND initDB)\\n add_test(NAME setupUsers  COMMAND userCreation)\\n add_test(NAME cleanupDB   COMMAND deleteDB)\\n add_test(NAME cleanupFoo  COMMAND removeFoos)\\n\\n set_tests_properties(setupUsers PROPERTIES DEPENDS createDB)\\n\\n set_tests_properties(createDB   PROPERTIES FIXTURES_SETUP    DB)\\n set_tests_properties(setupUsers PROPERTIES FIXTURES_SETUP    DB)\\n set_tests_properties(cleanupDB  PROPERTIES FIXTURES_CLEANUP  DB)\\n set_tests_properties(cleanupFoo PROPERTIES FIXTURES_CLEANUP  Foo)\\n set_tests_properties(testsDone  PROPERTIES FIXTURES_CLEANUP  \\\"DB;Foo\\\")\\n\\n set_tests_properties(fooOnly    PROPERTIES FIXTURES_REQUIRED Foo)\\n set_tests_properties(dbOnly     PROPERTIES FIXTURES_REQUIRED DB)\\n set_tests_properties(dbWithFoo  PROPERTIES FIXTURES_REQUIRED \\\"DB;Foo\\\")\\n\\n set_tests_properties(dbOnly dbWithFoo createDB setupUsers cleanupDB\\n                      PROPERTIES RESOURCE_LOCK DbAccess)\\n\\nKey points from this example:\\n\\n- Two fixtures are defined: ``DB`` and ``Foo``. Tests can require a single\\n  fixture as ``fooOnly`` and ``dbOnly`` do, or they can depend on multiple\\n  fixtures like ``dbWithFoo`` does.\\n\\n- A ``DEPENDS`` relationship is set up to ensure ``setupUsers`` happens after\\n  ``createDB``, both of which are setup tests for the ``DB`` fixture and will\\n  therefore be executed before the ``dbOnly`` and ``dbWithFoo`` tests\\n  automatically.\\n\\n- No explicit ``DEPENDS`` relationships were needed to make the setup tests run\\n  before or the cleanup tests run after the regular tests.\\n\\n- The ``Foo`` fixture has no setup tests defined, only a single cleanup test.\\n\\n- ``testsDone`` is a cleanup test for both the ``DB`` and ``Foo`` fixtures.\\n  Therefore, it will only execute once regular tests for both fixtures have\\n  finished (i.e. after ``fooOnly``, ``dbOnly`` and ``dbWithFoo``). No\\n  ``DEPENDS`` relationship was specified for ``testsDone``, so it is free to\\n  run before, after or concurrently with other cleanup tests for either\\n  fixture.\\n\\n- The setup and cleanup tests never list the fixtures they are for in their own\\n  ``FIXTURES_REQUIRED`` property, as that would result in a dependency on\\n  themselves and be considered an error.\\n",
        "property"
    ],
    "FIXTURES_SETUP": [
        "FIXTURES_SETUP\\n--------------\\n\\nSpecifies a list of fixtures for which the test is to be treated as a setup\\ntest. These fixture names are distinct from test case names and are not\\nrequired to have any similarity to the names of tests associated with them.\\n\\nFixture setup tests are ordinary tests with all of the usual test\\nfunctionality. Setting the ``FIXTURES_SETUP`` property for a test has two\\nprimary effects:\\n\\n- CTest will ensure the test executes before any other test which lists the\\n  fixture name(s) in its ``FIXTURES_REQUIRED`` property.\\n\\n- If CTest is asked to run only a subset of tests (e.g. using regular\\n  expressions or the ``--rerun-failed`` option) and the setup test is not in\\n  the set of tests to run, it will automatically be added if any tests in the\\n  set require any fixture listed in ``FIXTURES_SETUP``.\\n\\nA setup test can have multiple fixtures listed in its ``FIXTURES_SETUP``\\nproperty. It will execute only once for the whole CTest run, not once for each\\nfixture. A fixture can also have more than one setup test defined. If there are\\nmultiple setup tests for a fixture, projects can control their order with the\\nusual ``DEPENDS`` test property if necessary.\\n\\nA setup test is allowed to require other fixtures, but not any fixture listed\\nin its ``FIXTURES_SETUP`` property. For example:\\n\\n # Ok: dependent fixture is different to setup\\n set_tests_properties(setupFoo PROPERTIES\\n   FIXTURES_SETUP    Foo\\n   FIXTURES_REQUIRED Bar\\n )\\n\\n # Error: cannot require same fixture as setup\\n set_tests_properties(setupFoo PROPERTIES\\n   FIXTURES_SETUP    Foo\\n   FIXTURES_REQUIRED Foo\\n )\\n\\nIf any of a fixture's setup tests fail, none of the tests listing that fixture\\nin its ``FIXTURES_REQUIRED`` property will be run. Cleanup tests will,\\nhowever, still be executed.\\n\\nSee ``FIXTURES_REQUIRED`` for a more complete discussion of how to use\\ntest fixtures.\\n",
        "property"
    ],
    "FOLDER": [
        "FOLDER\\n------\\n\\nSet the folder name. Use to organize targets in an IDE.\\n\\nTargets with no FOLDER property will appear as top level entities in\\nIDEs like Visual Studio.  Targets with the same FOLDER property value\\nwill appear next to each other in a folder of that name.  To nest\\nfolders, use FOLDER values such as 'GUI/Dialogs' with '/' characters\\nseparating folder levels.\\n\\nThis property is initialized by the value of the variable\\n``CMAKE_FOLDER`` if it is set when a target is created.\\n",
        "property"
    ],
    "FRAMEWORK": [
        "FRAMEWORK\\n---------\\n\\nBuild ``SHARED`` or ``STATIC`` library as Framework Bundle on the macOS and iOS.\\n\\nIf such a library target has this property set to ``TRUE`` it will be\\nbuilt as a framework when built on the macOS and iOS.  It will have the\\ndirectory structure required for a framework and will be suitable to\\nbe used with the ``-framework`` option\\n\\nTo customize ``Info.plist`` file in the framework, use\\n``MACOSX_FRAMEWORK_INFO_PLIST`` target property.\\n\\nFor macOS see also the ``FRAMEWORK_VERSION`` target property.\\n\\nExample of creation ``dynamicFramework``:\\n\\n add_library(dynamicFramework SHARED\\n             dynamicFramework.c\\n             dynamicFramework.h\\n )\\n set_target_properties(dynamicFramework PROPERTIES\\n   FRAMEWORK TRUE\\n   FRAMEWORK_VERSION C\\n   MACOSX_FRAMEWORK_IDENTIFIER com.cmake.dynamicFramework\\n   MACOSX_FRAMEWORK_INFO_PLIST Info.plist\\n   # \\\"current version\\\" in semantic format in Mach-O binary file\\n   VERSION 16.4.0\\n   # \\\"compatibility version\\\" in semantic format in Mach-O binary file\\n   SOVERSION 1.0.0\\n   PUBLIC_HEADER dynamicFramework.h\\n   XCODE_ATTRIBUTE_CODE_SIGN_IDENTITY \\\"iPhone Developer\\\"\\n )\\n",
        "property"
    ],
    "FRAMEWORK_VERSION": [
        "FRAMEWORK_VERSION\\n-----------------\\n\\nVersion of a framework created using the ``FRAMEWORK`` target\\nproperty (e.g. ``A``).\\n\\nThis property only affects macOS, as iOS doesn't have versioned\\ndirectory structure.\\n",
        "property"
    ],
    "Fortran_FORMAT": [
        "Fortran_FORMAT\\n--------------\\n\\nSet to FIXED or FREE to indicate the Fortran source layout.\\n\\nThis property tells CMake whether a given Fortran source file uses\\nfixed-format or free-format.  CMake will pass the corresponding format\\nflag to the compiler.  Consider using the target-wide Fortran_FORMAT\\nproperty if all source files in a target share the same format.\\n\\nFortran_FORMAT\\n--------------\\n\\nSet to FIXED or FREE to indicate the Fortran source layout.\\n\\nThis property tells CMake whether the Fortran source files in a target\\nuse fixed-format or free-format.  CMake will pass the corresponding\\nformat flag to the compiler.  Use the source-specific Fortran_FORMAT\\nproperty to change the format of a specific source file.  If the\\nvariable CMAKE_Fortran_FORMAT is set when a target is created its\\nvalue is used to initialize this property.\\n",
        "property"
    ],
    "Fortran_MODULE_DIRECTORY": [
        "Fortran_MODULE_DIRECTORY\\n------------------------\\n\\nSpecify output directory for Fortran modules provided by the target.\\n\\nIf the target contains Fortran source files that provide modules and\\nthe compiler supports a module output directory this specifies the\\ndirectory in which the modules will be placed.  When this property is\\nnot set the modules will be placed in the build directory\\ncorresponding to the target's source directory.  If the variable\\nCMAKE_Fortran_MODULE_DIRECTORY is set when a target is created its\\nvalue is used to initialize this property.\\n\\nNote that some compilers will automatically search the module output\\ndirectory for modules USEd during compilation but others will not.  If\\nyour sources USE modules their location must be specified by\\nINCLUDE_DIRECTORIES regardless of this property.\\n",
        "property"
    ],
    "GENERATED": [
        "GENERATED\\n---------\\n\\nIs this source file generated as part of the build or CMake process.\\n\\nTells the internal CMake engine that a source file is generated by an outside\\nprocess such as another build step, or the execution of CMake itself. This\\ninformation is then used to exempt the file from any existence or validity\\nchecks. Generated files are created by the execution of commands such as\\n``add_custom_command()`` and ``file(GENERATE)``.\\n\\nWhen a generated file created by an ``add_custom_command()`` command\\nis explicitly listed as a source file for any target in the same\\ndirectory scope (which usually means the same ``CMakeLists.txt`` file),\\nCMake will automatically create a dependency to make sure the file is\\ngenerated before building that target.\\n\\nGenerated sources may be hidden in some IDE tools, while in others they might\\nbe shown. For the special case of sources generated by CMake's ``AUTOMOC``\\nor ``AUTORCC`` functionality, the ``AUTOGEN_SOURCE_GROUP``,\\n``AUTOMOC_SOURCE_GROUP`` and ``AUTORCC_SOURCE_GROUP`` target\\nproperties may influence where the generated sources are grouped in the project's\\nfile lists.\\n",
        "property"
    ],
    "GENERATOR_FILE_NAME": [
        "GENERATOR_FILE_NAME\\n-------------------\\n\\nGenerator's file for this target.\\n\\nAn internal property used by some generators to record the name of the\\nproject or dsp file associated with this target.  Note that at\\nconfigure time, this property is only set for targets created by\\ninclude_external_msproject().\\n",
        "property"
    ],
    "GENERATOR_IS_MULTI_CONFIG": [
        "GENERATOR_IS_MULTI_CONFIG\\n-------------------------\\n\\nRead-only property that is true on multi-configuration generators.\\n\\nTrue when using a multi-configuration generator\\n(such as :ref:`Visual Studio Generators` or ``Xcode``).\\nMulti-config generators use ``CMAKE_CONFIGURATION_TYPES``\\nas the set of configurations and ignore ``CMAKE_BUILD_TYPE``.\\n",
        "property"
    ],
    "GLOBAL_DEPENDS_DEBUG_MODE": [
        "GLOBAL_DEPENDS_DEBUG_MODE\\n-------------------------\\n\\nEnable global target dependency graph debug mode.\\n\\nCMake automatically analyzes the global inter-target dependency graph\\nat the beginning of native build system generation.  This property\\ncauses it to display details of its analysis to stderr.\\n",
        "property"
    ],
    "GLOBAL_DEPENDS_NO_CYCLES": [
        "GLOBAL_DEPENDS_NO_CYCLES\\n------------------------\\n\\nDisallow global target dependency graph cycles.\\n\\nCMake automatically analyzes the global inter-target dependency graph\\nat the beginning of native build system generation.  It reports an\\nerror if the dependency graph contains a cycle that does not consist\\nof all STATIC library targets.  This property tells CMake to disallow\\nall cycles completely, even among static libraries.\\n",
        "property"
    ],
    "GNUtoMS": [
        "GNUtoMS\\n-------\\n\\nConvert GNU import library (.dll.a) to MS format (.lib).\\n\\nWhen linking a shared library or executable that exports symbols using\\nGNU tools on Windows (MinGW/MSYS) with Visual Studio installed convert\\nthe import library (.dll.a) from GNU to MS format (.lib).  Both import\\nlibraries will be installed by install(TARGETS) and exported by\\ninstall(EXPORT) and export() to be linked by applications with either\\nGNU- or MS-compatible tools.\\n\\nIf the variable CMAKE_GNUtoMS is set when a target is created its\\nvalue is used to initialize this property.  The variable must be set\\nprior to the first command that enables a language such as project()\\nor enable_language().  CMake provides the variable as an option to the\\nuser automatically when configuring on Windows with GNU tools.\\n",
        "property"
    ],
    "HAS_CXX": [
        "HAS_CXX\\n-------\\n\\nLink the target using the C++ linker tool (obsolete).\\n\\nThis is equivalent to setting the LINKER_LANGUAGE property to CXX.\\nSee that property's documentation for details.\\n",
        "property"
    ],
    "HEADER_FILE_ONLY": [
        "HEADER_FILE_ONLY\\n----------------\\n\\nIs this source file only a header file.\\n\\nA property on a source file that indicates if the source file is a\\nheader file with no associated implementation.  This is set\\nautomatically based on the file extension and is used by CMake to\\ndetermine if certain dependency information should be computed.\\n\\nBy setting this property to ``ON``, you can disable compilation of\\nthe given source file, even if it should be compiled because it is\\npart of the library's/executable's sources.\\n\\nThis is useful if you have some source files which you somehow\\npre-process, and then add these pre-processed sources via\\n``add_library()`` or ``add_executable()``. Normally, in IDE,\\nthere would be no reference of the original sources, only of these\\npre-processed sources. So by setting this property for all the original\\nsource files to ``ON``, and then either calling ``add_library()``\\nor ``add_executable()`` while passing both the pre-processed\\nsources and the original sources, or by using ``target_sources()``\\nto add original source files will do exactly what would one expect, i.e.\\nthe original source files would be visible in IDE, and will not be built.\\n",
        "property"
    ],
    "HELPSTRING": [
        "HELPSTRING\\n----------\\n\\nHelp associated with entry in GUIs.\\n\\nThis string summarizes the purpose of an entry to help users set it\\nthrough a CMake GUI.\\n",
        "property"
    ],
    "IMPLICIT_DEPENDS_INCLUDE_TRANSFORM": [
        "IMPLICIT_DEPENDS_INCLUDE_TRANSFORM\\n----------------------------------\\n\\nSpecify #include line transforms for dependencies in a directory.\\n\\nThis property specifies rules to transform macro-like #include lines\\nduring implicit dependency scanning of C and C++ source files.  The\\nlist of rules must be semicolon-separated with each entry of the form\\n\\\"A_MACRO(%)=value-with-%\\\" (the % must be literal).  During dependency\\nscanning occurrences of A_MACRO(...) on #include lines will be\\nreplaced by the value given with the macro argument substituted for\\n'%'.  For example, the entry\\n\\n::\\n\\n MYDIR(%)=<mydir/%>\\n\\nwill convert lines of the form\\n\\n::\\n\\n #include MYDIR(myheader.h)\\n\\nto\\n\\n::\\n\\n #include <mydir/myheader.h>\\n\\nallowing the dependency to be followed.\\n\\nThis property applies to sources in all targets within a directory.\\nThe property value is initialized in each directory by its value in\\nthe directory's parent.\\n\\nIMPLICIT_DEPENDS_INCLUDE_TRANSFORM\\n----------------------------------\\n\\nSpecify #include line transforms for dependencies in a target.\\n\\nThis property specifies rules to transform macro-like #include lines\\nduring implicit dependency scanning of C and C++ source files.  The\\nlist of rules must be semicolon-separated with each entry of the form\\n\\\"A_MACRO(%)=value-with-%\\\" (the % must be literal).  During dependency\\nscanning occurrences of A_MACRO(...) on #include lines will be\\nreplaced by the value given with the macro argument substituted for\\n'%'.  For example, the entry\\n\\n::\\n\\n MYDIR(%)=<mydir/%>\\n\\nwill convert lines of the form\\n\\n::\\n\\n #include MYDIR(myheader.h)\\n\\nto\\n\\n::\\n\\n #include <mydir/myheader.h>\\n\\nallowing the dependency to be followed.\\n\\nThis property applies to sources in the target on which it is set.\\n",
        "property"
    ],
    "IMPORTED": [
        "IMPORTED\\n--------\\n\\nRead-only indication of whether a target is IMPORTED.\\n\\nThe boolean value of this property is ``True`` for targets created with\\nthe IMPORTED option to ``add_executable()`` or ``add_library()``.\\nIt is ``False`` for targets built within the project.\\n",
        "property"
    ],
    "IMPORTED_COMMON_LANGUAGE_RUNTIME": [
        "IMPORTED_COMMON_LANGUAGE_RUNTIME\\n--------------------------------\\n\\nProperty to define if the target uses ``C++/CLI``.\\n\\nIgnored for non-imported targets.\\n\\nSee also the ``COMMON_LANGUAGE_RUNTIME`` target property.\\n",
        "property"
    ],
    "IMPORTED_CONFIGURATIONS": [
        "IMPORTED_CONFIGURATIONS\\n-----------------------\\n\\nConfigurations provided for an IMPORTED target.\\n\\nSet this to the list of configuration names available for an IMPORTED\\ntarget.  The names correspond to configurations defined in the project\\nfrom which the target is imported.  If the importing project uses a\\ndifferent set of configurations the names may be mapped using the\\nMAP_IMPORTED_CONFIG_<CONFIG> property.  Ignored for non-imported\\ntargets.\\n",
        "property"
    ],
    "IMPORTED_GLOBAL": [
        "IMPORTED_GLOBAL\\n---------------\\n\\nIndication of whether an :ref:`IMPORTED target <Imported Targets>` is\\nglobally visible.\\n\\nThe boolean value of this property is True for targets created with the\\n``IMPORTED`` ``GLOBAL`` options to ``add_executable()`` or\\n``add_library()``. It is always False for targets built within the\\nproject.\\n\\nFor targets created with the ``IMPORTED`` option to\\n``add_executable()`` or ``add_library()`` but without the\\nadditional option ``GLOBAL`` this is False, too. However, setting this\\nproperty for such a locally ``IMPORTED`` target to True promotes that\\ntarget to global scope. This promotion can only be done in the same\\ndirectory where that ``IMPORTED`` target was created in the first place.\\n\\nOnce an imported target has been made global, it cannot be changed back to\\nnon-global. Therefore, if a project sets this property, it may only\\nprovide a value of True. CMake will issue an error if the project tries to\\nset the property to a non-True value, even if the value was already False.\\n",
        "property"
    ],
    "IMPORTED_IMPLIB": [
        "IMPORTED_IMPLIB\\n---------------\\n\\nFull path to the import library for an IMPORTED target.\\n\\nSet this to the location of the \\\".lib\\\" part of a windows DLL.  Ignored\\nfor non-imported targets.\\n",
        "property"
    ],
    "IMPORTED_IMPLIB_DEBUG": [
        "IMPORTED_IMPLIB_<CONFIG>\\n------------------------\\n\\n<CONFIG>-specific version of IMPORTED_IMPLIB property.\\n\\nConfiguration names correspond to those provided by the project from\\nwhich the target is imported.\\n",
        "property"
    ],
    "IMPORTED_IMPLIB_RELEASE": [
        "IMPORTED_IMPLIB_<CONFIG>\\n------------------------\\n\\n<CONFIG>-specific version of IMPORTED_IMPLIB property.\\n\\nConfiguration names correspond to those provided by the project from\\nwhich the target is imported.\\n",
        "property"
    ],
    "IMPORTED_LIBNAME": [
        "IMPORTED_LIBNAME\\n----------------\\n\\nSpecify the link library name for an :ref:`imported <Imported Targets>`\\n:ref:`Interface Library <Interface Libraries>`.\\n\\nAn interface library builds no library file itself but does specify\\nusage requirements for its consumers.  The ``IMPORTED_LIBNAME``\\nproperty may be set to specify a single library name to be placed\\non the link line in place of the interface library target name as\\na requirement for using the interface.\\n\\nThis property is intended for use in naming libraries provided by\\na platform SDK for which the full path to a library file may not\\nbe known.  The value may be a plain library name such as ``foo``\\nbut may *not* be a path (e.g. ``/usr/lib/libfoo.so``) or a flag\\n(e.g. ``-Wl,...``).  The name is never treated as a library target\\nname even if it happens to name one.\\n\\nThe ``IMPORTED_LIBNAME`` property is allowed only on\\n:ref:`imported <Imported Targets>` :ref:`Interface Libraries`\\nand is rejected on targets of other types (for which\\nthe ``IMPORTED_LOCATION`` target property may be used).\\n",
        "property"
    ],
    "IMPORTED_LIBNAME_DEBUG": [
        "IMPORTED_LIBNAME_<CONFIG>\\n-------------------------\\n\\n<CONFIG>-specific version of ``IMPORTED_LIBNAME`` property.\\n\\nConfiguration names correspond to those provided by the project from\\nwhich the target is imported.\\n",
        "property"
    ],
    "IMPORTED_LIBNAME_RELEASE": [
        "IMPORTED_LIBNAME_<CONFIG>\\n-------------------------\\n\\n<CONFIG>-specific version of ``IMPORTED_LIBNAME`` property.\\n\\nConfiguration names correspond to those provided by the project from\\nwhich the target is imported.\\n",
        "property"
    ],
    "IMPORTED_LINK_DEPENDENT_LIBRARIES": [
        "IMPORTED_LINK_DEPENDENT_LIBRARIES\\n---------------------------------\\n\\nDependent shared libraries of an imported shared library.\\n\\nShared libraries may be linked to other shared libraries as part of\\ntheir implementation.  On some platforms the linker searches for the\\ndependent libraries of shared libraries they are including in the\\nlink.  Set this property to the list of dependent shared libraries of\\nan imported library.  The list should be disjoint from the list of\\ninterface libraries in the INTERFACE_LINK_LIBRARIES property.  On\\nplatforms requiring dependent shared libraries to be found at link\\ntime CMake uses this list to add appropriate files or paths to the\\nlink command line.  Ignored for non-imported targets.\\n",
        "property"
    ],
    "IMPORTED_LINK_DEPENDENT_LIBRARIES_DEBUG": [
        "IMPORTED_LINK_DEPENDENT_LIBRARIES_<CONFIG>\\n------------------------------------------\\n\\n<CONFIG>-specific version of IMPORTED_LINK_DEPENDENT_LIBRARIES.\\n\\nConfiguration names correspond to those provided by the project from\\nwhich the target is imported.  If set, this property completely\\noverrides the generic property for the named configuration.\\n",
        "property"
    ],
    "IMPORTED_LINK_DEPENDENT_LIBRARIES_RELEASE": [
        "IMPORTED_LINK_DEPENDENT_LIBRARIES_<CONFIG>\\n------------------------------------------\\n\\n<CONFIG>-specific version of IMPORTED_LINK_DEPENDENT_LIBRARIES.\\n\\nConfiguration names correspond to those provided by the project from\\nwhich the target is imported.  If set, this property completely\\noverrides the generic property for the named configuration.\\n",
        "property"
    ],
    "IMPORTED_LINK_INTERFACE_LANGUAGES": [
        "IMPORTED_LINK_INTERFACE_LANGUAGES\\n---------------------------------\\n\\nLanguages compiled into an IMPORTED static library.\\n\\nSet this to the list of languages of source files compiled to produce\\na STATIC IMPORTED library (such as \\\"C\\\" or \\\"CXX\\\").  CMake accounts for\\nthese languages when computing how to link a target to the imported\\nlibrary.  For example, when a C executable links to an imported C++\\nstatic library CMake chooses the C++ linker to satisfy language\\nruntime dependencies of the static library.\\n\\nThis property is ignored for targets that are not STATIC libraries.\\nThis property is ignored for non-imported targets.\\n",
        "property"
    ],
    "IMPORTED_LINK_INTERFACE_LANGUAGES_DEBUG": [
        "IMPORTED_LINK_INTERFACE_LANGUAGES_<CONFIG>\\n------------------------------------------\\n\\n<CONFIG>-specific version of IMPORTED_LINK_INTERFACE_LANGUAGES.\\n\\nConfiguration names correspond to those provided by the project from\\nwhich the target is imported.  If set, this property completely\\noverrides the generic property for the named configuration.\\n",
        "property"
    ],
    "IMPORTED_LINK_INTERFACE_LANGUAGES_RELEASE": [
        "IMPORTED_LINK_INTERFACE_LANGUAGES_<CONFIG>\\n------------------------------------------\\n\\n<CONFIG>-specific version of IMPORTED_LINK_INTERFACE_LANGUAGES.\\n\\nConfiguration names correspond to those provided by the project from\\nwhich the target is imported.  If set, this property completely\\noverrides the generic property for the named configuration.\\n",
        "property"
    ],
    "IMPORTED_LINK_INTERFACE_LIBRARIES": [
        "IMPORTED_LINK_INTERFACE_LIBRARIES\\n---------------------------------\\n\\nTransitive link interface of an IMPORTED target.\\n\\nSet this to the list of libraries whose interface is included when an\\nIMPORTED library target is linked to another target.  The libraries\\nwill be included on the link line for the target.  Unlike the\\nLINK_INTERFACE_LIBRARIES property, this property applies to all\\nimported target types, including STATIC libraries.  This property is\\nignored for non-imported targets.\\n\\nThis property is ignored if the target also has a non-empty\\nINTERFACE_LINK_LIBRARIES property.\\n\\nThis property is deprecated.  Use INTERFACE_LINK_LIBRARIES instead.\\n",
        "property"
    ],
    "IMPORTED_LINK_INTERFACE_LIBRARIES_DEBUG": [
        "IMPORTED_LINK_INTERFACE_LIBRARIES_<CONFIG>\\n------------------------------------------\\n\\n<CONFIG>-specific version of IMPORTED_LINK_INTERFACE_LIBRARIES.\\n\\nConfiguration names correspond to those provided by the project from\\nwhich the target is imported.  If set, this property completely\\noverrides the generic property for the named configuration.\\n\\nThis property is ignored if the target also has a non-empty\\nINTERFACE_LINK_LIBRARIES property.\\n\\nThis property is deprecated.  Use INTERFACE_LINK_LIBRARIES instead.\\n",
        "property"
    ],
    "IMPORTED_LINK_INTERFACE_LIBRARIES_RELEASE": [
        "IMPORTED_LINK_INTERFACE_LIBRARIES_<CONFIG>\\n------------------------------------------\\n\\n<CONFIG>-specific version of IMPORTED_LINK_INTERFACE_LIBRARIES.\\n\\nConfiguration names correspond to those provided by the project from\\nwhich the target is imported.  If set, this property completely\\noverrides the generic property for the named configuration.\\n\\nThis property is ignored if the target also has a non-empty\\nINTERFACE_LINK_LIBRARIES property.\\n\\nThis property is deprecated.  Use INTERFACE_LINK_LIBRARIES instead.\\n",
        "property"
    ],
    "IMPORTED_LINK_INTERFACE_MULTIPLICITY": [
        "IMPORTED_LINK_INTERFACE_MULTIPLICITY\\n------------------------------------\\n\\nRepetition count for cycles of IMPORTED static libraries.\\n\\nThis is LINK_INTERFACE_MULTIPLICITY for IMPORTED targets.\\n",
        "property"
    ],
    "IMPORTED_LINK_INTERFACE_MULTIPLICITY_DEBUG": [
        "IMPORTED_LINK_INTERFACE_MULTIPLICITY_<CONFIG>\\n---------------------------------------------\\n\\n<CONFIG>-specific version of IMPORTED_LINK_INTERFACE_MULTIPLICITY.\\n\\nIf set, this property completely overrides the generic property for\\nthe named configuration.\\n",
        "property"
    ],
    "IMPORTED_LINK_INTERFACE_MULTIPLICITY_RELEASE": [
        "IMPORTED_LINK_INTERFACE_MULTIPLICITY_<CONFIG>\\n---------------------------------------------\\n\\n<CONFIG>-specific version of IMPORTED_LINK_INTERFACE_MULTIPLICITY.\\n\\nIf set, this property completely overrides the generic property for\\nthe named configuration.\\n",
        "property"
    ],
    "IMPORTED_LOCATION": [
        "IMPORTED_LOCATION\\n-----------------\\n\\nFull path to the main file on disk for an IMPORTED target.\\n\\nSet this to the location of an IMPORTED target file on disk.  For\\nexecutables this is the location of the executable file.  For bundles\\non macOS this is the location of the executable file inside\\nContents/MacOS under the application bundle folder.  For static\\nlibraries and modules this is the location of the library or module.\\nFor shared libraries on non-DLL platforms this is the location of the\\nshared library.  For frameworks on macOS this is the location of the\\nlibrary file symlink just inside the framework folder.  For DLLs this\\nis the location of the \\\".dll\\\" part of the library.  For UNKNOWN\\nlibraries this is the location of the file to be linked.  Ignored for\\nnon-imported targets.\\n\\nProjects may skip IMPORTED_LOCATION if the configuration-specific\\nproperty IMPORTED_LOCATION_<CONFIG> is set.  To get the location of an\\nimported target read one of the LOCATION or LOCATION_<CONFIG>\\nproperties.\\n",
        "property"
    ],
    "IMPORTED_LOCATION_DEBUG": [
        "IMPORTED_LOCATION_<CONFIG>\\n--------------------------\\n\\n<CONFIG>-specific version of IMPORTED_LOCATION property.\\n\\nConfiguration names correspond to those provided by the project from\\nwhich the target is imported.\\n",
        "property"
    ],
    "IMPORTED_LOCATION_RELEASE": [
        "IMPORTED_LOCATION_<CONFIG>\\n--------------------------\\n\\n<CONFIG>-specific version of IMPORTED_LOCATION property.\\n\\nConfiguration names correspond to those provided by the project from\\nwhich the target is imported.\\n",
        "property"
    ],
    "IMPORTED_NO_SONAME": [
        "IMPORTED_NO_SONAME\\n------------------\\n\\nSpecifies that an IMPORTED shared library target has no \\\"soname\\\".\\n\\nSet this property to true for an imported shared library file that has\\nno \\\"soname\\\" field.  CMake may adjust generated link commands for some\\nplatforms to prevent the linker from using the path to the library in\\nplace of its missing soname.  Ignored for non-imported targets.\\n",
        "property"
    ],
    "IMPORTED_NO_SONAME_DEBUG": [
        "IMPORTED_NO_SONAME_<CONFIG>\\n---------------------------\\n\\n<CONFIG>-specific version of IMPORTED_NO_SONAME property.\\n\\nConfiguration names correspond to those provided by the project from\\nwhich the target is imported.\\n",
        "property"
    ],
    "IMPORTED_NO_SONAME_RELEASE": [
        "IMPORTED_NO_SONAME_<CONFIG>\\n---------------------------\\n\\n<CONFIG>-specific version of IMPORTED_NO_SONAME property.\\n\\nConfiguration names correspond to those provided by the project from\\nwhich the target is imported.\\n",
        "property"
    ],
    "IMPORTED_OBJECTS": [
        "IMPORTED_OBJECTS\\n----------------\\n\\n:ref:`;-list <CMake Language Lists>` of absolute paths to the object\\nfiles on disk for an :ref:`imported <Imported targets>`\\n:ref:`object library <object libraries>`.\\n\\nIgnored for non-imported targets.\\n\\nProjects may skip ``IMPORTED_OBJECTS`` if the configuration-specific\\nproperty ``IMPORTED_OBJECTS_<CONFIG>`` is set instead.\\n",
        "property"
    ],
    "IMPORTED_OBJECTS_DEBUG": [
        "IMPORTED_OBJECTS_<CONFIG>\\n-------------------------\\n\\n<CONFIG>-specific version of ``IMPORTED_OBJECTS`` property.\\n\\nConfiguration names correspond to those provided by the project from\\nwhich the target is imported.\\n",
        "property"
    ],
    "IMPORTED_OBJECTS_RELEASE": [
        "IMPORTED_OBJECTS_<CONFIG>\\n-------------------------\\n\\n<CONFIG>-specific version of ``IMPORTED_OBJECTS`` property.\\n\\nConfiguration names correspond to those provided by the project from\\nwhich the target is imported.\\n",
        "property"
    ],
    "IMPORTED_SONAME": [
        "IMPORTED_SONAME\\n---------------\\n\\nThe \\\"soname\\\" of an IMPORTED target of shared library type.\\n\\nSet this to the \\\"soname\\\" embedded in an imported shared library.  This\\nis meaningful only on platforms supporting the feature.  Ignored for\\nnon-imported targets.\\n",
        "property"
    ],
    "IMPORTED_SONAME_DEBUG": [
        "IMPORTED_SONAME_<CONFIG>\\n------------------------\\n\\n<CONFIG>-specific version of IMPORTED_SONAME property.\\n\\nConfiguration names correspond to those provided by the project from\\nwhich the target is imported.\\n",
        "property"
    ],
    "IMPORTED_SONAME_RELEASE": [
        "IMPORTED_SONAME_<CONFIG>\\n------------------------\\n\\n<CONFIG>-specific version of IMPORTED_SONAME property.\\n\\nConfiguration names correspond to those provided by the project from\\nwhich the target is imported.\\n",
        "property"
    ],
    "IMPORT_PREFIX": [
        "IMPORT_PREFIX\\n-------------\\n\\nWhat comes before the import library name.\\n\\nSimilar to the target property PREFIX, but used for import libraries\\n(typically corresponding to a DLL) instead of regular libraries.  A\\ntarget property that can be set to override the prefix (such as \\\"lib\\\")\\non an import library name.\\n",
        "property"
    ],
    "IMPORT_SUFFIX": [
        "IMPORT_SUFFIX\\n-------------\\n\\nWhat comes after the import library name.\\n\\nSimilar to the target property SUFFIX, but used for import libraries\\n(typically corresponding to a DLL) instead of regular libraries.  A\\ntarget property that can be set to override the suffix (such as\\n\\\".lib\\\") on an import library name.\\n",
        "property"
    ],
    "INCLUDE_DIRECTORIES": [
        "INCLUDE_DIRECTORIES\\n-------------------\\n\\nList of preprocessor include file search directories.\\n\\nThis property specifies the list of directories given so far to the\\n``include_directories()`` command.\\n\\nThis property is used to populate the ``INCLUDE_DIRECTORIES``\\ntarget property, which is used by the generators to set the include\\ndirectories for the compiler.\\n\\nIn addition to accepting values from that command, values may be set\\ndirectly on any directory using the ``set_property()`` command, and can be\\nset on the current directory using the ``set_directory_properties()``\\ncommand.  A directory gets its initial value from its parent directory if it has\\none.  The initial value of the ``INCLUDE_DIRECTORIES`` target property\\ncomes from the value of this property.  Both directory and target property\\nvalues are adjusted by calls to the ``include_directories()`` command.\\nCalls to ``set_property()`` or ``set_directory_properties()``,\\nhowever, will update the directory property value without updating target\\nproperty values.  Therefore direct property updates must be made before\\ncalls to ``add_executable()`` or ``add_library()`` for targets\\nthey are meant to affect.\\n\\nThe target property values are used by the generators to set the\\ninclude paths for the compiler.\\n\\nContents of ``INCLUDE_DIRECTORIES`` may use \\\"generator expressions\\\" with\\nthe syntax ``$<...>``.  See the ``cmake-generator-expressions(7)``\\nmanual for available expressions.  See the ``cmake-buildsystem(7)``\\nmanual for more on defining buildsystem properties.\\n\\nINCLUDE_DIRECTORIES\\n-------------------\\n\\nList of preprocessor include file search directories.\\n\\nThis property holds a :ref:`;-list <CMake Language Lists>` of paths\\nand will be added to the list of include directories when this\\nsource file builds. These directories will take precedence over directories\\ndefined at target level except for ``Xcode`` generator due to technical\\nlimitations.\\n\\nRelative paths should not be added to this property directly.\\n\\nContents of ``INCLUDE_DIRECTORIES`` may use \\\"generator expressions\\\" with\\nthe syntax ``$<...>``.  See the ``cmake-generator-expressions(7)`` manual\\nfor available expressions.  However, ``Xcode`` does not support\\nper-config per-source settings, so expressions that depend on the build\\nconfiguration are not allowed with that generator.\\n\\nINCLUDE_DIRECTORIES\\n-------------------\\n\\nList of preprocessor include file search directories.\\n\\nThis property specifies the list of directories given so far to the\\n``target_include_directories()`` command.  In addition to accepting\\nvalues from that command, values may be set directly on any\\ntarget using the ``set_property()`` command.  A target gets its\\ninitial value for this property from the value of the\\n``INCLUDE_DIRECTORIES`` directory property.  Both directory and\\ntarget property values are adjusted by calls to the\\n``include_directories()`` command.\\n\\nThe value of this property is used by the generators to set the include\\npaths for the compiler.\\n\\nRelative paths should not be added to this property directly. Use one of\\nthe commands above instead to handle relative paths.\\n\\nContents of ``INCLUDE_DIRECTORIES`` may use \\\"generator expressions\\\" with\\nthe syntax ``$<...>``.  See the ``cmake-generator-expressions(7)``\\nmanual for available expressions.  See the ``cmake-buildsystem(7)``\\nmanual for more on defining buildsystem properties.\\n",
        "property"
    ],
    "INCLUDE_REGULAR_EXPRESSION": [
        "INCLUDE_REGULAR_EXPRESSION\\n--------------------------\\n\\nInclude file scanning regular expression.\\n\\nThis property specifies the regular expression used during\\ndependency scanning to match include files that should be followed.\\nSee the ``include_regular_expression()`` command for a high-level\\ninterface to set this property.\\n",
        "property"
    ],
    "INSTALL_NAME_DIR": [
        "INSTALL_NAME_DIR\\n----------------\\n\\nMac OSX directory name for installed targets.\\n\\nINSTALL_NAME_DIR is a string specifying the directory portion of the\\n\\\"install_name\\\" field of shared libraries on Mac OSX to use in the\\ninstalled targets.\\n\\nThis property is initialized by the value of the variable\\n``CMAKE_INSTALL_NAME_DIR`` if it is set when a target is\\ncreated.\\n",
        "property"
    ],
    "INSTALL_RPATH": [
        "INSTALL_RPATH\\n-------------\\n\\nThe rpath to use for installed targets.\\n\\nA semicolon-separated list specifying the rpath to use in installed\\ntargets (for platforms that support it).  This property is initialized\\nby the value of the variable CMAKE_INSTALL_RPATH if it is set when a\\ntarget is created.\\n",
        "property"
    ],
    "INSTALL_RPATH_USE_LINK_PATH": [
        "INSTALL_RPATH_USE_LINK_PATH\\n---------------------------\\n\\nAdd paths to linker search and installed rpath.\\n\\nINSTALL_RPATH_USE_LINK_PATH is a boolean that if set to true will\\nappend directories in the linker search path and outside the project\\nto the INSTALL_RPATH.  This property is initialized by the value of\\nthe variable CMAKE_INSTALL_RPATH_USE_LINK_PATH if it is set when a\\ntarget is created.\\n",
        "property"
    ],
    "INTERFACE_AUTOUIC_OPTIONS": [
        "INTERFACE_AUTOUIC_OPTIONS\\n-------------------------\\n\\nList of interface options to pass to uic.\\n\\nTargets may populate this property to publish the options\\nrequired to use when invoking ``uic``.  Consuming targets can add entries to their\\nown ``AUTOUIC_OPTIONS`` property such as\\n``$<TARGET_PROPERTY:foo,INTERFACE_AUTOUIC_OPTIONS>`` to use the uic options\\nspecified in the interface of ``foo``. This is done automatically by\\nthe ``target_link_libraries()`` command.\\n\\nThis property supports generator expressions.  See the\\n``cmake-generator-expressions(7)`` manual for available expressions.\\n",
        "property"
    ],
    "INTERFACE_COMPILE_DEFINITIONS": [
        "INTERFACE_COMPILE_DEFINITIONS\\n-----------------------------\\n\\n\\nList of public compile definitions requirements for a library.\\n\\nTargets may populate this property to publish the compile definitions\\nrequired to compile against the headers for the target.  The ``target_compile_definitions()``\\ncommand populates this property with values given to the ``PUBLIC`` and\\n``INTERFACE`` keywords.  Projects may also get and set the property directly.\\n\\nWhen target dependencies are specified using ``target_link_libraries()``,\\nCMake will read this property from all target dependencies to determine the\\nbuild properties of the consumer.\\n\\nContents of ``INTERFACE_COMPILE_DEFINITIONS`` may use \\\"generator expressions\\\"\\nwith the syntax ``$<...>``.  See the ``cmake-generator-expressions(7)``\\nmanual for available expressions.  See the ``cmake-buildsystem(7)``\\n-manual for more on defining buildsystem properties.\\n",
        "property"
    ],
    "INTERFACE_COMPILE_FEATURES": [
        "INTERFACE_COMPILE_FEATURES\\n--------------------------\\n\\n\\nList of public compile features requirements for a library.\\n\\nTargets may populate this property to publish the compile features\\nrequired to compile against the headers for the target.  The ``target_compile_features()``\\ncommand populates this property with values given to the ``PUBLIC`` and\\n``INTERFACE`` keywords.  Projects may also get and set the property directly.\\n\\nWhen target dependencies are specified using ``target_link_libraries()``,\\nCMake will read this property from all target dependencies to determine the\\nbuild properties of the consumer.\\n\\nContents of ``INTERFACE_COMPILE_FEATURES`` may use \\\"generator expressions\\\"\\nwith the syntax ``$<...>``.  See the ``cmake-generator-expressions(7)``\\nmanual for available expressions.  See the ``cmake-buildsystem(7)``\\n-manual for more on defining buildsystem properties.\\n\\nSee the ``cmake-compile-features(7)`` manual for information on compile\\nfeatures and a list of supported compilers.\\n",
        "property"
    ],
    "INTERFACE_COMPILE_OPTIONS": [
        "INTERFACE_COMPILE_OPTIONS\\n-------------------------\\n\\n\\nList of public compile options requirements for a library.\\n\\nTargets may populate this property to publish the compile options\\nrequired to compile against the headers for the target.  The ``target_compile_options()``\\ncommand populates this property with values given to the ``PUBLIC`` and\\n``INTERFACE`` keywords.  Projects may also get and set the property directly.\\n\\nWhen target dependencies are specified using ``target_link_libraries()``,\\nCMake will read this property from all target dependencies to determine the\\nbuild properties of the consumer.\\n\\nContents of ``INTERFACE_COMPILE_OPTIONS`` may use \\\"generator expressions\\\"\\nwith the syntax ``$<...>``.  See the ``cmake-generator-expressions(7)``\\nmanual for available expressions.  See the ``cmake-buildsystem(7)``\\n-manual for more on defining buildsystem properties.\\n",
        "property"
    ],
    "INTERFACE_INCLUDE_DIRECTORIES": [
        "INTERFACE_INCLUDE_DIRECTORIES\\n-----------------------------\\n\\n\\nList of public include directories requirements for a library.\\n\\nTargets may populate this property to publish the include directories\\nrequired to compile against the headers for the target.  The ``target_include_directories()``\\ncommand populates this property with values given to the ``PUBLIC`` and\\n``INTERFACE`` keywords.  Projects may also get and set the property directly.\\n\\nWhen target dependencies are specified using ``target_link_libraries()``,\\nCMake will read this property from all target dependencies to determine the\\nbuild properties of the consumer.\\n\\nContents of ``INTERFACE_INCLUDE_DIRECTORIES`` may use \\\"generator expressions\\\"\\nwith the syntax ``$<...>``.  See the ``cmake-generator-expressions(7)``\\nmanual for available expressions.  See the ``cmake-buildsystem(7)``\\n-manual for more on defining buildsystem properties.\\n\\nInclude directories usage requirements commonly differ between the build-tree\\nand the install-tree.  The ``BUILD_INTERFACE`` and ``INSTALL_INTERFACE``\\ngenerator expressions can be used to describe separate usage requirements\\nbased on the usage location.  Relative paths are allowed within the\\n``INSTALL_INTERFACE`` expression and are interpreted relative to the\\ninstallation prefix.  For example:\\n\\n target_include_directories(mylib INTERFACE\\n   $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/mylib>\\n   $<INSTALL_INTERFACE:include/mylib>  # <prefix>/include/mylib\\n )\\n\\nCreating Relocatable Packages\\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\\n\\nNote that it is not advisable to populate the ``INSTALL_INTERFACE`` of the\\n``INTERFACE_INCLUDE_DIRECTORIES`` of a target with absolute paths to the include\\ndirectories of dependencies.  That would hard-code into installed packages\\nthe include directory paths for dependencies\\n**as found on the machine the package was made on**.\\n\\nThe ``INSTALL_INTERFACE`` of the ``INTERFACE_INCLUDE_DIRECTORIES`` is only\\nsuitable for specifying the required include directories for headers\\nprovided with the target itself, not those provided by the transitive\\ndependencies listed in its ``INTERFACE_LINK_LIBRARIES`` target\\nproperty.  Those dependencies should themselves be targets that specify\\ntheir own header locations in ``INTERFACE_INCLUDE_DIRECTORIES``.\\n\\nSee the :ref:`Creating Relocatable Packages` section of the\\n``cmake-packages(7)`` manual for discussion of additional care\\nthat must be taken when specifying usage requirements while creating\\npackages for redistribution.\\n",
        "property"
    ],
    "INTERFACE_LINK_DEPENDS": [
        "INTERFACE_LINK_DEPENDS\\n----------------------\\n\\nAdditional public interface files on which a target binary depends for linking.\\n\\nThis property is supported only by Makefile and Ninja generators.  It is\\nintended to specify dependencies on \\\"linker scripts\\\" for custom Makefile link\\nrules.\\n\\nWhen target dependencies are specified using ``target_link_libraries()``,\\nCMake will read this property from all target dependencies to determine the\\nbuild properties of the consumer.\\n\\nContents of ``INTERFACE_LINK_DEPENDS`` may use \\\"generator expressions\\\"\\nwith the syntax ``$<...>``.  See the ``cmake-generator-expressions(7)``\\nmanual for available expressions.  See the ``cmake-buildsystem(7)``\\n-manual for more on defining buildsystem properties.\\n\\nLink dependency files usage requirements commonly differ between the build-tree\\nand the install-tree.  The ``BUILD_INTERFACE`` and ``INSTALL_INTERFACE``\\ngenerator expressions can be used to describe separate usage requirements\\nbased on the usage location.  Relative paths are allowed within the\\n``INSTALL_INTERFACE`` expression and are interpreted relative to the\\ninstallation prefix.  For example:\\n\\n set_property(TARGET mylib PROPERTY INTERFACE_LINK_DEPENDS\\n   $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/mylinkscript>\\n   $<INSTALL_INTERFACE:mylinkscript>  # <prefix>/mylinkscript\\n )\\n",
        "property"
    ],
    "INTERFACE_LINK_DIRECTORIES": [
        "INTERFACE_LINK_DIRECTORIES\\n--------------------------\\n\\n\\nList of public link directories requirements for a library.\\n\\nTargets may populate this property to publish the link directories\\nrequired to compile against the headers for the target.  The ``target_link_directories()``\\ncommand populates this property with values given to the ``PUBLIC`` and\\n``INTERFACE`` keywords.  Projects may also get and set the property directly.\\n\\nWhen target dependencies are specified using ``target_link_libraries()``,\\nCMake will read this property from all target dependencies to determine the\\nbuild properties of the consumer.\\n\\nContents of ``INTERFACE_LINK_DIRECTORIES`` may use \\\"generator expressions\\\"\\nwith the syntax ``$<...>``.  See the ``cmake-generator-expressions(7)``\\nmanual for available expressions.  See the ``cmake-buildsystem(7)``\\n-manual for more on defining buildsystem properties.\\n",
        "property"
    ],
    "INTERFACE_LINK_LIBRARIES": [
        "INTERFACE_LINK_LIBRARIES\\n------------------------\\n\\nList public interface libraries for a library.\\n\\nThis property contains the list of transitive link dependencies.  When\\nthe target is linked into another target using the\\n``target_link_libraries()`` command, the libraries listed (and\\nrecursively their link interface libraries) will be provided to the\\nother target also.  This property is overridden by the\\n``LINK_INTERFACE_LIBRARIES`` or\\n``LINK_INTERFACE_LIBRARIES_<CONFIG>`` property if policy\\n``CMP0022`` is ``OLD`` or unset.\\n\\nContents of ``INTERFACE_LINK_LIBRARIES`` may use \\\"generator expressions\\\"\\nwith the syntax ``$<...>``.  See the ``cmake-generator-expressions(7)``\\nmanual for available expressions.  See the ``cmake-buildsystem(7)``\\nmanual for more on defining buildsystem properties.\\n\\n.. note::\\n  A call to ``target_link_libraries(<target> ...)`` may update this\\n  property on ``<target>``.  If ``<target>`` was not created in the same\\n  directory as the call then ``target_link_libraries()`` will add a\\n  suffix of the form ``::@<directory-id>`` to each entry, where the\\n  ``::@`` is a separator and the ``<directory-id>`` is unspecified.\\n  This tells the generators that the named libraries must be looked up in\\n  the scope of the caller rather than in the scope in which the\\n  ``<target>`` was created.  Valid directory ids are stripped on export\\n  by the ``install(EXPORT)`` and ``export()`` commands.\\n\\nCreating Relocatable Packages\\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\\n\\nNote that it is not advisable to populate the\\n``INTERFACE_LINK_LIBRARIES`` of a target with absolute paths to dependencies.\\nThat would hard-code into installed packages the library file paths\\nfor dependencies **as found on the machine the package was made on**.\\n\\nSee the :ref:`Creating Relocatable Packages` section of the\\n``cmake-packages(7)`` manual for discussion of additional care\\nthat must be taken when specifying usage requirements while creating\\npackages for redistribution.\\n",
        "property"
    ],
    "INTERFACE_LINK_OPTIONS": [
        "INTERFACE_LINK_OPTIONS\\n----------------------\\n\\n\\nList of public link options requirements for a library.\\n\\nTargets may populate this property to publish the link options\\nrequired to compile against the headers for the target.  The ``target_link_options()``\\ncommand populates this property with values given to the ``PUBLIC`` and\\n``INTERFACE`` keywords.  Projects may also get and set the property directly.\\n\\nWhen target dependencies are specified using ``target_link_libraries()``,\\nCMake will read this property from all target dependencies to determine the\\nbuild properties of the consumer.\\n\\nContents of ``INTERFACE_LINK_OPTIONS`` may use \\\"generator expressions\\\"\\nwith the syntax ``$<...>``.  See the ``cmake-generator-expressions(7)``\\nmanual for available expressions.  See the ``cmake-buildsystem(7)``\\n-manual for more on defining buildsystem properties.\\n",
        "property"
    ],
    "INTERFACE_POSITION_INDEPENDENT_CODE": [
        "INTERFACE_POSITION_INDEPENDENT_CODE\\n-----------------------------------\\n\\nWhether consumers need to create a position-independent target\\n\\nThe ``INTERFACE_POSITION_INDEPENDENT_CODE`` property informs consumers of\\nthis target whether they must set their\\n``POSITION_INDEPENDENT_CODE`` property to ``ON``.  If this\\nproperty is set to ``ON``, then the ``POSITION_INDEPENDENT_CODE``\\nproperty on  all consumers will be set to ``ON``. Similarly, if this\\nproperty is set to ``OFF``, then the ``POSITION_INDEPENDENT_CODE``\\nproperty on all consumers will be set to ``OFF``.  If this property is\\nundefined, then consumers will determine their\\n``POSITION_INDEPENDENT_CODE`` property by other means.  Consumers\\nmust ensure that the targets that they link to have a consistent\\nrequirement for their ``INTERFACE_POSITION_INDEPENDENT_CODE`` property.\\n",
        "property"
    ],
    "INTERFACE_SOURCES": [
        "INTERFACE_SOURCES\\n-----------------\\n\\nList of interface sources to compile into consuming targets.\\n\\nTargets may populate this property to publish the sources\\nfor consuming targets to compile.  The ``target_sources()`` command\\npopulates this property with values given to the ``PUBLIC`` and\\n``INTERFACE`` keywords.  Projects may also get and set the property directly.\\n\\nWhen target dependencies are specified using ``target_link_libraries()``,\\nCMake will read this property from all target dependencies to determine the\\nsources of the consumer.\\n\\nContents of ``INTERFACE_SOURCES`` may use \\\"generator expressions\\\"\\nwith the syntax ``$<...>``.  See the ``cmake-generator-expressions(7)``\\nmanual for available expressions.  See the ``cmake-buildsystem(7)``\\nmanual for more on defining buildsystem properties.\\n",
        "property"
    ],
    "INTERFACE_SYSTEM_INCLUDE_DIRECTORIES": [
        "INTERFACE_SYSTEM_INCLUDE_DIRECTORIES\\n------------------------------------\\n\\nList of public system include directories for a library.\\n\\nTargets may populate this property to publish the include directories\\nwhich contain system headers, and therefore should not result in\\ncompiler warnings.  The ``target_include_directories(SYSTEM)``\\ncommand signature populates this property with values given to the\\n``PUBLIC`` and ``INTERFACE`` keywords.\\n\\nProjects may also get and set the property directly, but must be aware that\\nadding directories to this property does not make those directories used\\nduring compilation.  Adding directories to this property marks directories\\nas ``SYSTEM`` which otherwise would be used in a non-``SYSTEM`` manner.  This\\ncan appear similar to 'duplication', so prefer the\\nhigh-level ``target_include_directories(SYSTEM)`` command and avoid\\nsetting the property by low-level means.\\n\\nWhen target dependencies are specified using ``target_link_libraries()``,\\nCMake will read this property from all target dependencies to mark the\\nsame include directories as containing system headers.\\n\\nContents of ``INTERFACE_SYSTEM_INCLUDE_DIRECTORIES`` may use \\\"generator\\nexpressions\\\" with the syntax ``$<...>``.  See the\\n``cmake-generator-expressions(7)`` manual for available expressions.\\nSee the ``cmake-buildsystem(7)`` manual for more on defining\\nbuildsystem properties.\\n",
        "property"
    ],
    "INTERPROCEDURAL_OPTIMIZATION": [
        "INTERPROCEDURAL_OPTIMIZATION\\n----------------------------\\n\\nEnable interprocedural optimization for targets in a directory.\\n\\nIf set to true, enables interprocedural optimizations if they are\\nknown to be supported by the compiler.\\n\\nINTERPROCEDURAL_OPTIMIZATION\\n----------------------------\\n\\nEnable interprocedural optimization for a target.\\n\\nIf set to true, enables interprocedural optimizations if they are\\nknown to be supported by the compiler.\\n\\nThis property is initialized by the\\n``CMAKE_INTERPROCEDURAL_OPTIMIZATION`` variable if it is set when a\\ntarget is created.\\n",
        "property"
    ],
    "INTERPROCEDURAL_OPTIMIZATION_DEBUG": [
        "INTERPROCEDURAL_OPTIMIZATION_<CONFIG>\\n-------------------------------------\\n\\nPer-configuration interprocedural optimization for a directory.\\n\\nThis is a per-configuration version of INTERPROCEDURAL_OPTIMIZATION.\\nIf set, this property overrides the generic property for the named\\nconfiguration.\\n\\nINTERPROCEDURAL_OPTIMIZATION_<CONFIG>\\n-------------------------------------\\n\\nPer-configuration interprocedural optimization for a target.\\n\\nThis is a per-configuration version of INTERPROCEDURAL_OPTIMIZATION.\\nIf set, this property overrides the generic property for the named\\nconfiguration.\\n\\nThis property is initialized by the\\n``CMAKE_INTERPROCEDURAL_OPTIMIZATION_<CONFIG>`` variable if it is set\\nwhen a target is created.\\n",
        "property"
    ],
    "INTERPROCEDURAL_OPTIMIZATION_RELEASE": [
        "INTERPROCEDURAL_OPTIMIZATION_<CONFIG>\\n-------------------------------------\\n\\nPer-configuration interprocedural optimization for a directory.\\n\\nThis is a per-configuration version of INTERPROCEDURAL_OPTIMIZATION.\\nIf set, this property overrides the generic property for the named\\nconfiguration.\\n\\nINTERPROCEDURAL_OPTIMIZATION_<CONFIG>\\n-------------------------------------\\n\\nPer-configuration interprocedural optimization for a target.\\n\\nThis is a per-configuration version of INTERPROCEDURAL_OPTIMIZATION.\\nIf set, this property overrides the generic property for the named\\nconfiguration.\\n\\nThis property is initialized by the\\n``CMAKE_INTERPROCEDURAL_OPTIMIZATION_<CONFIG>`` variable if it is set\\nwhen a target is created.\\n",
        "property"
    ],
    "IN_TRY_COMPILE": [
        "IN_TRY_COMPILE\\n--------------\\n\\nRead-only property that is true during a try-compile configuration.\\n\\nTrue when building a project inside a ``try_compile()`` or\\n``try_run()`` command.\\n",
        "property"
    ],
    "IOS_INSTALL_COMBINED": [
        "IOS_INSTALL_COMBINED\\n--------------------\\n\\nBuild a combined (device and simulator) target when installing.\\n\\nWhen this property is set to set to false (which is the default) then it will\\neither be built with the device SDK or the simulator SDK depending on the SDK\\nset. But if this property is set to true then the target will at install time\\nalso be built for the corresponding SDK and combined into one library.\\n\\nThis feature requires at least Xcode version 6.\\n",
        "property"
    ],
    "JOB_POOLS": [
        "JOB_POOLS\\n---------\\n\\nNinja only: List of available pools.\\n\\nA pool is a named integer property and defines the maximum number\\nof concurrent jobs which can be started by a rule assigned to the pool.\\nThe ``JOB_POOLS`` property is a semicolon-separated list of\\npairs using the syntax NAME=integer (without a space after the equality sign).\\n\\nFor instance:\\n\\n set_property(GLOBAL PROPERTY JOB_POOLS two_jobs=2 ten_jobs=10)\\n\\nDefined pools could be used globally by setting\\n``CMAKE_JOB_POOL_COMPILE`` and ``CMAKE_JOB_POOL_LINK``\\nor per target by setting the target properties\\n``JOB_POOL_COMPILE`` and ``JOB_POOL_LINK``.\\n\\nIf not set, this property uses the value of the ``CMAKE_JOB_POOLS``\\nvariable.\\n\\nBuild targets provided by CMake that are meant for individual interactive\\nuse, such as ``install``, are placed in the ``console`` pool automatically.\\n",
        "property"
    ],
    "JOB_POOL_COMPILE": [
        "JOB_POOL_COMPILE\\n----------------\\n\\nNinja only: Pool used for compiling.\\n\\nThe number of parallel compile processes could be limited by defining\\npools with the global ``JOB_POOLS``\\nproperty and then specifying here the pool name.\\n\\nFor instance:\\n\\n set_property(TARGET myexe PROPERTY JOB_POOL_COMPILE ten_jobs)\\n\\nThis property is initialized by the value of\\n``CMAKE_JOB_POOL_COMPILE``.\\n",
        "property"
    ],
    "JOB_POOL_LINK": [
        "JOB_POOL_LINK\\n-------------\\n\\nNinja only: Pool used for linking.\\n\\nThe number of parallel link processes could be limited by defining\\npools with the global ``JOB_POOLS``\\nproperty and then specifying here the pool name.\\n\\nFor instance:\\n\\n set_property(TARGET myexe PROPERTY JOB_POOL_LINK two_jobs)\\n\\nThis property is initialized by the value of ``CMAKE_JOB_POOL_LINK``.\\n",
        "property"
    ],
    "KEEP_EXTENSION": [
        "KEEP_EXTENSION\\n--------------\\n\\nMake the output file have the same extension as the source file.\\n\\nIf this property is set then the file extension of the output file\\nwill be the same as that of the source file.  Normally the output file\\nextension is computed based on the language of the source file, for\\nexample .cxx will go to a .o extension.\\n",
        "property"
    ],
    "LABELS": [
        "LABELS\\n------\\n\\nSpecify a list of text labels associated with a directory and all of its\\nsubdirectories. This is equivalent to setting the ``LABELS`` target\\nproperty and the ``LABELS`` test property on all targets and tests in\\nthe current directory and subdirectories. Note: Launchers must enabled to\\npropagate labels to targets.\\n\\nThe ``CMAKE_DIRECTORY_LABELS`` variable can be used to initialize this\\nproperty.\\n\\nThe list is reported in dashboard submissions.\\n\\nLABELS\\n------\\n\\nSpecify a list of text labels associated with a source file.\\n\\nThis property has meaning only when the source file is listed in a\\ntarget whose LABELS property is also set.  No other semantics are\\ncurrently specified.\\n\\nLABELS\\n------\\n\\nSpecify a list of text labels associated with a test.\\n\\nThe list is reported in dashboard submissions.\\n\\nLABELS\\n------\\n\\nSpecify a list of text labels associated with a target.\\n\\nTarget label semantics are currently unspecified.\\n",
        "property"
    ],
    "LANGUAGE": [
        "LANGUAGE\\n--------\\n\\nWhat programming language is the file.\\n\\nA property that can be set to indicate what programming language the\\nsource file is.  If it is not set the language is determined based on\\nthe file extension.  Typical values are CXX C etc.  Setting this\\nproperty for a file means this file will be compiled.  Do not set this\\nfor headers or files that should not be compiled.\\n",
        "property"
    ],
    "LIBRARY_OUTPUT_DIRECTORY": [
        "LIBRARY_OUTPUT_DIRECTORY\\n------------------------\\n\\nOutput directory in which to build :ref:`LIBRARY <Library Output Artifacts>` target files.\\n\\nThis property specifies the directory into which library target files\\nshould be built.  The property value may use\\n``generator expressions``.\\nMulti-configuration generators (VS, Xcode) append a per-configuration\\nsubdirectory to the specified directory unless a generator expression\\nis used.\\n\\nThis property is initialized by the value of the variable\\nCMAKE_LIBRARY_OUTPUT_DIRECTORY if it is set when a target is created.\\n\\nSee also the ``LIBRARY_OUTPUT_DIRECTORY_<CONFIG>`` target property.\\n",
        "property"
    ],
    "LIBRARY_OUTPUT_DIRECTORY_DEBUG": [
        "LIBRARY_OUTPUT_DIRECTORY_<CONFIG>\\n---------------------------------\\n\\nPer-configuration output directory for\\n:ref:`LIBRARY <Library Output Artifacts>` target files.\\n\\nThis is a per-configuration version of the\\n``LIBRARY_OUTPUT_DIRECTORY`` target property, but\\nmulti-configuration generators (VS, Xcode) do NOT append a\\nper-configuration subdirectory to the specified directory.  This\\nproperty is initialized by the value of the\\n``CMAKE_LIBRARY_OUTPUT_DIRECTORY_<CONFIG>`` variable if\\nit is set when a target is created.\\n\\nContents of ``LIBRARY_OUTPUT_DIRECTORY_<CONFIG>`` may use\\n``generator expressions``.\\n",
        "property"
    ],
    "LIBRARY_OUTPUT_DIRECTORY_RELEASE": [
        "LIBRARY_OUTPUT_DIRECTORY_<CONFIG>\\n---------------------------------\\n\\nPer-configuration output directory for\\n:ref:`LIBRARY <Library Output Artifacts>` target files.\\n\\nThis is a per-configuration version of the\\n``LIBRARY_OUTPUT_DIRECTORY`` target property, but\\nmulti-configuration generators (VS, Xcode) do NOT append a\\nper-configuration subdirectory to the specified directory.  This\\nproperty is initialized by the value of the\\n``CMAKE_LIBRARY_OUTPUT_DIRECTORY_<CONFIG>`` variable if\\nit is set when a target is created.\\n\\nContents of ``LIBRARY_OUTPUT_DIRECTORY_<CONFIG>`` may use\\n``generator expressions``.\\n",
        "property"
    ],
    "LIBRARY_OUTPUT_NAME": [
        "LIBRARY_OUTPUT_NAME\\n-------------------\\n\\nOutput name for :ref:`LIBRARY <Library Output Artifacts>` target files.\\n\\nThis property specifies the base name for library target files.  It\\noverrides ``OUTPUT_NAME`` and ``OUTPUT_NAME_<CONFIG>``\\nproperties.\\n\\nSee also the ``LIBRARY_OUTPUT_NAME_<CONFIG>`` target property.\\n",
        "property"
    ],
    "LIBRARY_OUTPUT_NAME_DEBUG": [
        "LIBRARY_OUTPUT_NAME_<CONFIG>\\n----------------------------\\n\\nPer-configuration output name for\\n:ref:`LIBRARY <Library Output Artifacts>` target files.\\n\\nThis is the configuration-specific version of the\\n``LIBRARY_OUTPUT_NAME`` target property.\\n",
        "property"
    ],
    "LIBRARY_OUTPUT_NAME_RELEASE": [
        "LIBRARY_OUTPUT_NAME_<CONFIG>\\n----------------------------\\n\\nPer-configuration output name for\\n:ref:`LIBRARY <Library Output Artifacts>` target files.\\n\\nThis is the configuration-specific version of the\\n``LIBRARY_OUTPUT_NAME`` target property.\\n",
        "property"
    ],
    "LINKER_LANGUAGE": [
        "LINKER_LANGUAGE\\n---------------\\n\\nSpecifies language whose compiler will invoke the linker.\\n\\nFor executables, shared libraries, and modules, this sets the language\\nwhose compiler is used to link the target (such as \\\"C\\\" or \\\"CXX\\\").  A\\ntypical value for an executable is the language of the source file\\nproviding the program entry point (main).  If not set, the language\\nwith the highest linker preference value is the default.  See\\ndocumentation of CMAKE_<LANG>_LINKER_PREFERENCE variables.\\n\\nIf this property is not set by the user, it will be calculated at\\ngenerate-time by CMake.\\n",
        "property"
    ],
    "LINK_DEPENDS": [
        "LINK_DEPENDS\\n------------\\n\\nAdditional files on which a target binary depends for linking.\\n\\nSpecifies a semicolon-separated list of full-paths to files on which\\nthe link rule for this target depends.  The target binary will be\\nlinked if any of the named files is newer than it.\\n\\nThis property is supported only by Makefile and Ninja generators.  It is\\nintended to specify dependencies on \\\"linker scripts\\\" for custom Makefile link\\nrules.\\n\\nContents of ``LINK_DEPENDS`` may use \\\"generator expressions\\\" with\\nthe syntax ``$<...>``.  See the ``cmake-generator-expressions(7)``\\nmanual for available expressions.  See the ``cmake-buildsystem(7)``\\nmanual for more on defining buildsystem properties.\\n",
        "property"
    ],
    "LINK_DEPENDS_NO_SHARED": [
        "LINK_DEPENDS_NO_SHARED\\n----------------------\\n\\nDo not depend on linked shared library files.\\n\\nSet this property to true to tell CMake generators not to add\\nfile-level dependencies on the shared library files linked by this\\ntarget.  Modification to the shared libraries will not be sufficient\\nto re-link this target.  Logical target-level dependencies will not be\\naffected so the linked shared libraries will still be brought up to\\ndate before this target is built.\\n\\nThis property is initialized by the value of the variable\\nCMAKE_LINK_DEPENDS_NO_SHARED if it is set when a target is created.\\n",
        "property"
    ],
    "LINK_DIRECTORIES": [
        "LINK_DIRECTORIES\\n----------------\\n\\nList of linker search directories.\\n\\nThis property holds a :ref:`;-list <CMake Language Lists>` of directories\\nand is typically populated using the ``link_directories()`` command.\\nIt gets its initial value from its parent directory, if it has one.\\n\\nThe directory property is used to initialize the ``LINK_DIRECTORIES``\\ntarget property when a target is created.  That target property is used\\nby the generators to set the library search directories for the linker.\\n\\nContents of ``LINK_DIRECTORIES`` may use \\\"generator expressions\\\" with\\nthe syntax ``$<...>``.  See the ``cmake-generator-expressions(7)``\\nmanual for available expressions.  See the ``cmake-buildsystem(7)``\\nmanual for more on defining buildsystem properties.\\n\\nLINK_DIRECTORIES\\n----------------\\n\\nList of directories to use for the link step of shared library, module\\nand executable targets.\\n\\nThis property holds a :ref:`;-list <CMake Language Lists>` of directories\\nspecified so far for its target.  Use the ``target_link_directories()``\\ncommand to append more search directories.\\n\\nThis property is initialized by the ``LINK_DIRECTORIES`` directory\\nproperty when a target is created, and is used by the generators to set\\nthe search directories for the linker.\\n\\nContents of ``LINK_DIRECTORIES`` may use \\\"generator expressions\\\" with the\\nsyntax ``$<...>``.  See the ``cmake-generator-expressions(7)`` manual\\nfor available expressions.  See the ``cmake-buildsystem(7)`` manual\\nfor more on defining buildsystem properties.\\n",
        "property"
    ],
    "LINK_FLAGS": [
        "LINK_FLAGS\\n----------\\n\\nAdditional flags to use when linking this target if it is a shared library,\\nmodule library, or an executable. Static libraries need to use\\n``STATIC_LIBRARY_OPTIONS`` or ``STATIC_LIBRARY_FLAGS``\\nproperties.\\n\\nThe ``LINK_FLAGS`` property, managed as a string, can be used to add extra\\nflags to the link step of a target.  ``LINK_FLAGS_<CONFIG>`` will add\\nto the configuration ``<CONFIG>``, for example, ``DEBUG``, ``RELEASE``,\\n``MINSIZEREL``, ``RELWITHDEBINFO``, ...\\n\\n.. note::\\n\\n  This property has been superseded by ``LINK_OPTIONS`` property.\\n",
        "property"
    ],
    "LINK_FLAGS_DEBUG": [
        "LINK_FLAGS_<CONFIG>\\n-------------------\\n\\nPer-configuration linker flags for a shared library, module or executable\\ntarget.\\n\\nThis is the configuration-specific version of ``LINK_FLAGS``.\\n\\n.. note::\\n\\n  This property has been superseded by ``LINK_OPTIONS`` property.\\n",
        "property"
    ],
    "LINK_FLAGS_RELEASE": [
        "LINK_FLAGS_<CONFIG>\\n-------------------\\n\\nPer-configuration linker flags for a shared library, module or executable\\ntarget.\\n\\nThis is the configuration-specific version of ``LINK_FLAGS``.\\n\\n.. note::\\n\\n  This property has been superseded by ``LINK_OPTIONS`` property.\\n",
        "property"
    ],
    "LINK_INTERFACE_LIBRARIES": [
        "LINK_INTERFACE_LIBRARIES\\n------------------------\\n\\nList public interface libraries for a shared library or executable.\\n\\nBy default linking to a shared library target transitively links to\\ntargets with which the library itself was linked.  For an executable\\nwith exports (see the ``ENABLE_EXPORTS`` target property) no\\ndefault transitive link dependencies are used.  This property replaces the default\\ntransitive link dependencies with an explicit list.  When the target\\nis linked into another target using the ``target_link_libraries()``\\ncommand, the libraries listed (and recursively\\ntheir link interface libraries) will be provided to the other target\\nalso.  If the list is empty then no transitive link dependencies will\\nbe incorporated when this target is linked into another target even if\\nthe default set is non-empty.  This property is initialized by the\\nvalue of the ``CMAKE_LINK_INTERFACE_LIBRARIES`` variable if it is\\nset when a target is created.  This property is ignored for ``STATIC``\\nlibraries.\\n\\nThis property is overridden by the ``INTERFACE_LINK_LIBRARIES``\\nproperty if policy ``CMP0022`` is ``NEW``.\\n\\nThis property is deprecated.  Use ``INTERFACE_LINK_LIBRARIES``\\ninstead.\\n\\nCreating Relocatable Packages\\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\\n\\nNote that it is not advisable to populate the\\n``LINK_INTERFACE_LIBRARIES`` of a target with absolute paths to dependencies.\\nThat would hard-code into installed packages the library file paths\\nfor dependencies **as found on the machine the package was made on**.\\n\\nSee the :ref:`Creating Relocatable Packages` section of the\\n``cmake-packages(7)`` manual for discussion of additional care\\nthat must be taken when specifying usage requirements while creating\\npackages for redistribution.\\n",
        "property"
    ],
    "LINK_INTERFACE_LIBRARIES_DEBUG": [
        "LINK_INTERFACE_LIBRARIES_<CONFIG>\\n---------------------------------\\n\\nPer-configuration list of public interface libraries for a target.\\n\\nThis is the configuration-specific version of\\n``LINK_INTERFACE_LIBRARIES``.  If set, this property completely\\noverrides the generic property for the named configuration.\\n\\nThis property is overridden by the ``INTERFACE_LINK_LIBRARIES``\\nproperty if policy ``CMP0022`` is ``NEW``.\\n\\nThis property is deprecated.  Use ``INTERFACE_LINK_LIBRARIES``\\ninstead.\\n\\nCreating Relocatable Packages\\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\\n\\nNote that it is not advisable to populate the\\n``LINK_INTERFACE_LIBRARIES_<CONFIG>`` of a target with absolute paths to dependencies.\\nThat would hard-code into installed packages the library file paths\\nfor dependencies **as found on the machine the package was made on**.\\n\\nSee the :ref:`Creating Relocatable Packages` section of the\\n``cmake-packages(7)`` manual for discussion of additional care\\nthat must be taken when specifying usage requirements while creating\\npackages for redistribution.\\n",
        "property"
    ],
    "LINK_INTERFACE_LIBRARIES_RELEASE": [
        "LINK_INTERFACE_LIBRARIES_<CONFIG>\\n---------------------------------\\n\\nPer-configuration list of public interface libraries for a target.\\n\\nThis is the configuration-specific version of\\n``LINK_INTERFACE_LIBRARIES``.  If set, this property completely\\noverrides the generic property for the named configuration.\\n\\nThis property is overridden by the ``INTERFACE_LINK_LIBRARIES``\\nproperty if policy ``CMP0022`` is ``NEW``.\\n\\nThis property is deprecated.  Use ``INTERFACE_LINK_LIBRARIES``\\ninstead.\\n\\nCreating Relocatable Packages\\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\\n\\nNote that it is not advisable to populate the\\n``LINK_INTERFACE_LIBRARIES_<CONFIG>`` of a target with absolute paths to dependencies.\\nThat would hard-code into installed packages the library file paths\\nfor dependencies **as found on the machine the package was made on**.\\n\\nSee the :ref:`Creating Relocatable Packages` section of the\\n``cmake-packages(7)`` manual for discussion of additional care\\nthat must be taken when specifying usage requirements while creating\\npackages for redistribution.\\n",
        "property"
    ],
    "LINK_INTERFACE_MULTIPLICITY": [
        "LINK_INTERFACE_MULTIPLICITY\\n---------------------------\\n\\nRepetition count for STATIC libraries with cyclic dependencies.\\n\\nWhen linking to a STATIC library target with cyclic dependencies the\\nlinker may need to scan more than once through the archives in the\\nstrongly connected component of the dependency graph.  CMake by\\ndefault constructs the link line so that the linker will scan through\\nthe component at least twice.  This property specifies the minimum\\nnumber of scans if it is larger than the default.  CMake uses the\\nlargest value specified by any target in a component.\\n",
        "property"
    ],
    "LINK_INTERFACE_MULTIPLICITY_DEBUG": [
        "LINK_INTERFACE_MULTIPLICITY_<CONFIG>\\n------------------------------------\\n\\nPer-configuration repetition count for cycles of STATIC libraries.\\n\\nThis is the configuration-specific version of\\nLINK_INTERFACE_MULTIPLICITY.  If set, this property completely\\noverrides the generic property for the named configuration.\\n",
        "property"
    ],
    "LINK_INTERFACE_MULTIPLICITY_RELEASE": [
        "LINK_INTERFACE_MULTIPLICITY_<CONFIG>\\n------------------------------------\\n\\nPer-configuration repetition count for cycles of STATIC libraries.\\n\\nThis is the configuration-specific version of\\nLINK_INTERFACE_MULTIPLICITY.  If set, this property completely\\noverrides the generic property for the named configuration.\\n",
        "property"
    ],
    "LINK_LIBRARIES": [
        "LINK_LIBRARIES\\n--------------\\n\\nList of direct link dependencies.\\n\\nThis property specifies the list of libraries or targets which will be\\nused for linking.  In addition to accepting values from the\\n``target_link_libraries()`` command, values may be set directly on\\nany target using the ``set_property()`` command.\\n\\nThe value of this property is used by the generators to set the link\\nlibraries for the compiler.\\n\\nContents of ``LINK_LIBRARIES`` may use \\\"generator expressions\\\" with the\\nsyntax ``$<...>``.  See the ``cmake-generator-expressions(7)`` manual\\nfor available expressions.  See the ``cmake-buildsystem(7)`` manual\\nfor more on defining buildsystem properties.\\n\\n.. note::\\n  A call to ``target_link_libraries(<target> ...)`` may update this\\n  property on ``<target>``.  If ``<target>`` was not created in the same\\n  directory as the call then ``target_link_libraries()`` will add a\\n  suffix of the form ``::@<directory-id>`` to each entry, where the\\n  ``::@`` is a separator and the ``<directory-id>`` is unspecified.\\n  This tells the generators that the named libraries must be looked up in\\n  the scope of the caller rather than in the scope in which the\\n  ``<target>`` was created.  Valid directory ids are stripped on export\\n  by the ``install(EXPORT)`` and ``export()`` commands.\\n",
        "property"
    ],
    "LINK_OPTIONS": [
        "LINK_OPTIONS\\n------------\\n\\nList of options to use for the link step of shared library, module\\nand executable targets.\\n\\nThis property holds a :ref:`;-list <CMake Language Lists>` of options\\ngiven so far to the ``add_link_options()`` command.\\n\\nThis property is used to initialize the ``LINK_OPTIONS`` target\\nproperty when a target is created, which is used by the generators to set\\nthe options for the compiler.\\n\\nContents of ``LINK_OPTIONS`` may use \\\"generator expressions\\\" with the\\nsyntax ``$<...>``.  See the ``cmake-generator-expressions(7)`` manual\\nfor available expressions.  See the ``cmake-buildsystem(7)`` manual\\nfor more on defining buildsystem properties.\\n\\nLINK_OPTIONS\\n------------\\n\\nList of options to use for the link step of shared library, module\\nand executable targets. Targets that are static libraries need to use\\nthe ``STATIC_LIBRARY_OPTIONS`` target property.\\n\\n\\nThis property holds a :ref:`;-list <CMake Language Lists>` of options\\nspecified so far for its target.  Use the ``target_link_options()``\\ncommand to append more options.\\n\\nThis property is initialized by the ``LINK_OPTIONS`` directory\\nproperty when a target is created, and is used by the generators to set\\nthe options for the compiler.\\n\\nContents of ``LINK_OPTIONS`` may use \\\"generator expressions\\\" with the\\nsyntax ``$<...>``.  See the ``cmake-generator-expressions(7)`` manual\\nfor available expressions.  See the ``cmake-buildsystem(7)`` manual\\nfor more on defining buildsystem properties.\\n\\n.. note::\\n\\n  This property must be used in preference to ``LINK_FLAGS`` property.\\n",
        "property"
    ],
    "LINK_SEARCH_END_STATIC": [
        "LINK_SEARCH_END_STATIC\\n----------------------\\n\\nEnd a link line such that static system libraries are used.\\n\\nSome linkers support switches such as -Bstatic and -Bdynamic to\\ndetermine whether to use static or shared libraries for -lXXX options.\\nCMake uses these options to set the link type for libraries whose full\\npaths are not known or (in some cases) are in implicit link\\ndirectories for the platform.  By default CMake adds an option at the\\nend of the library list (if necessary) to set the linker search type\\nback to its starting type.  This property switches the final linker\\nsearch type to -Bstatic regardless of how it started.\\n\\nThis property is initialized by the value of the variable\\nCMAKE_LINK_SEARCH_END_STATIC if it is set when a target is created.\\n\\nSee also LINK_SEARCH_START_STATIC.\\n",
        "property"
    ],
    "LINK_SEARCH_START_STATIC": [
        "LINK_SEARCH_START_STATIC\\n------------------------\\n\\nAssume the linker looks for static libraries by default.\\n\\nSome linkers support switches such as -Bstatic and -Bdynamic to\\ndetermine whether to use static or shared libraries for -lXXX options.\\nCMake uses these options to set the link type for libraries whose full\\npaths are not known or (in some cases) are in implicit link\\ndirectories for the platform.  By default the linker search type is\\nassumed to be -Bdynamic at the beginning of the library list.  This\\nproperty switches the assumption to -Bstatic.  It is intended for use\\nwhen linking an executable statically (e.g.  with the GNU -static\\noption).\\n\\nThis property is initialized by the value of the variable\\nCMAKE_LINK_SEARCH_START_STATIC if it is set when a target is created.\\n\\nSee also LINK_SEARCH_END_STATIC.\\n",
        "property"
    ],
    "LINK_WHAT_YOU_USE": [
        "LINK_WHAT_YOU_USE\\n---------------------------\\n\\nThis is a boolean option that when set to ``TRUE`` will automatically run\\n``ldd -r -u`` on the target after it is linked. In addition, the linker flag\\n``-Wl,--no-as-needed`` will be passed to the target with the link command so\\nthat all libraries specified on the command line will be linked into the\\ntarget. This will result in the link producing a list of libraries that\\nprovide no symbols used by this target but are being linked to it.\\nThis is only applicable to executable and shared library targets and\\nwill only work when ld and ldd accept the flags used.\\n\\nThis property is initialized by the value of\\nthe ``CMAKE_LINK_WHAT_YOU_USE`` variable if it is set\\nwhen a target is created.\\n",
        "property"
    ],
    "LISTFILE_STACK": [
        "LISTFILE_STACK\\n--------------\\n\\nThe current stack of listfiles being processed.\\n\\nThis property is mainly useful when trying to debug errors in your\\nCMake scripts.  It returns a list of what list files are currently\\nbeing processed, in order.  So if one listfile does an\\n``include()`` command then that is effectively pushing the\\nincluded listfile onto the stack.\\n",
        "property"
    ],
    "LOCATION": [
        "LOCATION\\n--------\\n\\nThe full path to a source file.\\n\\nA read only property on a SOURCE FILE that contains the full path to\\nthe source file.\\n\\nLOCATION\\n--------\\n\\nRead-only location of a target on disk.\\n\\nFor an imported target, this read-only property returns the value of\\nthe LOCATION_<CONFIG> property for an unspecified configuration\\n<CONFIG> provided by the target.\\n\\nFor a non-imported target, this property is provided for compatibility\\nwith CMake 2.4 and below.  It was meant to get the location of an\\nexecutable target's output file for use in add_custom_command.  The\\npath may contain a build-system-specific portion that is replaced at\\nbuild time with the configuration getting built (such as\\n\\\"$(ConfigurationName)\\\" in VS).  In CMake 2.6 and above\\nadd_custom_command automatically recognizes a target name in its\\nCOMMAND and DEPENDS options and computes the target location.  In\\nCMake 2.8.4 and above add_custom_command recognizes generator\\nexpressions to refer to target locations anywhere in the command.\\nTherefore this property is not needed for creating custom commands.\\n\\nDo not set properties that affect the location of a target after\\nreading this property.  These include properties whose names match\\n\\\"(RUNTIME|LIBRARY|ARCHIVE)_OUTPUT_(NAME|DIRECTORY)(_<CONFIG>)?\\\",\\n``(IMPLIB_)?(PREFIX|SUFFIX)``, or \\\"LINKER_LANGUAGE\\\".  Failure to follow\\nthis rule is not diagnosed and leaves the location of the target\\nundefined.\\n",
        "property"
    ],
    "LOCATION_DEBUG": [
        "LOCATION_<CONFIG>\\n-----------------\\n\\nRead-only property providing a target location on disk.\\n\\nA read-only property that indicates where a target's main file is\\nlocated on disk for the configuration <CONFIG>.  The property is\\ndefined only for library and executable targets.  An imported target\\nmay provide a set of configurations different from that of the\\nimporting project.  By default CMake looks for an exact-match but\\notherwise uses an arbitrary available configuration.  Use the\\nMAP_IMPORTED_CONFIG_<CONFIG> property to map imported configurations\\nexplicitly.\\n\\nDo not set properties that affect the location of a target after\\nreading this property.  These include properties whose names match\\n\\\"(RUNTIME|LIBRARY|ARCHIVE)_OUTPUT_(NAME|DIRECTORY)(_<CONFIG>)?\\\",\\n``(IMPLIB_)?(PREFIX|SUFFIX)``, or \\\"LINKER_LANGUAGE\\\".  Failure to follow\\nthis rule is not diagnosed and leaves the location of the target\\nundefined.\\n",
        "property"
    ],
    "LOCATION_RELEASE": [
        "LOCATION_<CONFIG>\\n-----------------\\n\\nRead-only property providing a target location on disk.\\n\\nA read-only property that indicates where a target's main file is\\nlocated on disk for the configuration <CONFIG>.  The property is\\ndefined only for library and executable targets.  An imported target\\nmay provide a set of configurations different from that of the\\nimporting project.  By default CMake looks for an exact-match but\\notherwise uses an arbitrary available configuration.  Use the\\nMAP_IMPORTED_CONFIG_<CONFIG> property to map imported configurations\\nexplicitly.\\n\\nDo not set properties that affect the location of a target after\\nreading this property.  These include properties whose names match\\n\\\"(RUNTIME|LIBRARY|ARCHIVE)_OUTPUT_(NAME|DIRECTORY)(_<CONFIG>)?\\\",\\n``(IMPLIB_)?(PREFIX|SUFFIX)``, or \\\"LINKER_LANGUAGE\\\".  Failure to follow\\nthis rule is not diagnosed and leaves the location of the target\\nundefined.\\n",
        "property"
    ],
    "MACOSX_BUNDLE": [
        "MACOSX_BUNDLE\\n-------------\\n\\nBuild an executable as an Application Bundle on macOS or iOS.\\n\\nWhen this property is set to ``TRUE`` the executable when built on macOS\\nor iOS will be created as an application bundle.  This makes it\\na GUI executable that can be launched from the Finder.  See the\\n``MACOSX_BUNDLE_INFO_PLIST`` target property for information about\\ncreation of the ``Info.plist`` file for the application bundle.\\nThis property is initialized by the value of the variable\\n``CMAKE_MACOSX_BUNDLE`` if it is set when a target is created.\\n",
        "property"
    ],
    "MACOSX_BUNDLE_INFO_PLIST": [
        "MACOSX_BUNDLE_INFO_PLIST\\n------------------------\\n\\nSpecify a custom ``Info.plist`` template for a macOS and iOS Application Bundle.\\n\\nAn executable target with ``MACOSX_BUNDLE`` enabled will be built as an\\napplication bundle on macOS.  By default its ``Info.plist`` file is created\\nby configuring a template called ``MacOSXBundleInfo.plist.in`` located in the\\n``CMAKE_MODULE_PATH``.  This property specifies an alternative template\\nfile name which may be a full path.\\n\\nThe following target properties may be set to specify content to be\\nconfigured into the file:\\n\\n``MACOSX_BUNDLE_BUNDLE_NAME``\\n  Sets ``CFBundleName``.\\n``MACOSX_BUNDLE_BUNDLE_VERSION``\\n  Sets ``CFBundleVersion``.\\n``MACOSX_BUNDLE_COPYRIGHT``\\n  Sets ``NSHumanReadableCopyright``.\\n``MACOSX_BUNDLE_GUI_IDENTIFIER``\\n  Sets ``CFBundleIdentifier``.\\n``MACOSX_BUNDLE_ICON_FILE``\\n  Sets ``CFBundleIconFile``.\\n``MACOSX_BUNDLE_INFO_STRING``\\n  Sets ``CFBundleGetInfoString``.\\n``MACOSX_BUNDLE_LONG_VERSION_STRING``\\n  Sets ``CFBundleLongVersionString``.\\n``MACOSX_BUNDLE_SHORT_VERSION_STRING``\\n  Sets ``CFBundleShortVersionString``.\\n\\nCMake variables of the same name may be set to affect all targets in a\\ndirectory that do not have each specific property set.  If a custom\\n``Info.plist`` is specified by this property it may of course hard-code\\nall the settings instead of using the target properties.\\n",
        "property"
    ],
    "MACOSX_FRAMEWORK_INFO_PLIST": [
        "MACOSX_FRAMEWORK_INFO_PLIST\\n---------------------------\\n\\nSpecify a custom ``Info.plist`` template for a macOS and iOS Framework.\\n\\nA library target with ``FRAMEWORK`` enabled will be built as a\\nframework on macOS.  By default its ``Info.plist`` file is created by\\nconfiguring a template called ``MacOSXFrameworkInfo.plist.in`` located in the\\n``CMAKE_MODULE_PATH``.  This property specifies an alternative template\\nfile name which may be a full path.\\n\\nThe following target properties may be set to specify content to be\\nconfigured into the file:\\n\\n``MACOSX_FRAMEWORK_BUNDLE_VERSION``\\n  Sets ``CFBundleVersion``.\\n``MACOSX_FRAMEWORK_ICON_FILE``\\n  Sets ``CFBundleIconFile``.\\n``MACOSX_FRAMEWORK_IDENTIFIER``\\n  Sets ``CFBundleIdentifier``.\\n``MACOSX_FRAMEWORK_SHORT_VERSION_STRING``\\n  Sets ``CFBundleShortVersionString``.\\n\\nCMake variables of the same name may be set to affect all targets in a\\ndirectory that do not have each specific property set.  If a custom\\n``Info.plist`` is specified by this property it may of course hard-code\\nall the settings instead of using the target properties.\\n",
        "property"
    ],
    "MACOSX_PACKAGE_LOCATION": [
        "MACOSX_PACKAGE_LOCATION\\n-----------------------\\n\\nPlace a source file inside a Application Bundle\\n(``MACOSX_BUNDLE``), Core Foundation Bundle (``BUNDLE``),\\nor Framework Bundle (``FRAMEWORK``).  It is applicable for macOS\\nand iOS.\\n\\nExecutable targets with the ``MACOSX_BUNDLE`` property set are\\nbuilt as macOS or iOS application bundles on Apple platforms.  Shared\\nlibrary targets with the ``FRAMEWORK`` property set are built as\\nmacOS or iOS frameworks on Apple platforms.  Module library targets with\\nthe ``BUNDLE`` property set are built as macOS ``CFBundle`` bundles\\non Apple platforms.  Source files listed in the target with this property\\nset will be copied to a directory inside the bundle or framework content\\nfolder specified by the property value.  For macOS Application Bundles the\\ncontent folder is ``<name>.app/Contents``.  For macOS Frameworks the\\ncontent folder is ``<name>.framework/Versions/<version>``.  For macOS\\nCFBundles the content folder is ``<name>.bundle/Contents`` (unless the\\nextension is changed).  See the ``PUBLIC_HEADER``,\\n``PRIVATE_HEADER``, and ``RESOURCE`` target properties for\\nspecifying files meant for ``Headers``, ``PrivateHeaders``, or\\n``Resources`` directories.\\n\\nIf the specified location is equal to ``Resources``, the resulting location\\nwill be the same as if the ``RESOURCE`` property had been used. If\\nthe specified location is a sub-folder of ``Resources``, it will be placed\\ninto the respective sub-folder. Note: For iOS Apple uses a flat bundle layout\\nwhere no ``Resources`` folder exist. Therefore CMake strips the ``Resources``\\nfolder name from the specified location.\\n",
        "property"
    ],
    "MACOSX_RPATH": [
        "MACOSX_RPATH\\n------------\\n\\nWhether this target on macOS or iOS is located at runtime using rpaths.\\n\\nWhen this property is set to ``TRUE``, the directory portion of\\nthe ``install_name`` field of this shared library will be ``@rpath``\\nunless overridden by ``INSTALL_NAME_DIR``.  This indicates\\nthe shared library is to be found at runtime using runtime\\npaths (rpaths).\\n\\nThis property is initialized by the value of the variable\\n``CMAKE_MACOSX_RPATH`` if it is set when a target is\\ncreated.\\n\\nRuntime paths will also be embedded in binaries using this target and\\ncan be controlled by the ``INSTALL_RPATH`` target property on\\nthe target linking to this target.\\n\\nPolicy ``CMP0042`` was introduced to change the default value of\\n``MACOSX_RPATH`` to ``TRUE``.  This is because use of ``@rpath`` is a\\nmore flexible and powerful alternative to ``@executable_path`` and\\n``@loader_path``.\\n",
        "property"
    ],
    "MACROS": [
        "MACROS\\n------\\n\\nList of macro commands available in the current directory.\\n\\nThis read-only property specifies the list of CMake macros currently\\ndefined.  It is intended for debugging purposes.  See the macro\\ncommand.\\n",
        "property"
    ],
    "MANUALLY_ADDED_DEPENDENCIES": [
        "MANUALLY_ADDED_DEPENDENCIES\\n---------------------------\\n\\nGet manually added dependencies to other top-level targets.\\n\\nThis read-only property can be used to query all dependencies that\\nwere added for this target with the ``add_dependencies()``\\ncommand.\\n",
        "property"
    ],
    "MAP_IMPORTED_CONFIG_DEBUG": [
        "MAP_IMPORTED_CONFIG_<CONFIG>\\n----------------------------\\n\\nMap from project configuration to\\n:ref:`imported target <IMPORTED targets>`'s configuration.\\n\\nSet this to the list of configurations of an imported target that may\\nbe used for the current project's ``<CONFIG>`` configuration.  Targets\\nimported from another project may not provide the same set of\\nconfiguration names available in the current project.  Setting this\\nproperty tells CMake what imported configurations are suitable for use\\nwhen building the ``<CONFIG>`` configuration.  The first configuration in\\nthe list found to be provided by the imported target (i.e. via\\n``IMPORTED_LOCATION_<CONFIG>`` for the mapped-to ``<CONFIG>``)\\nis selected.  As a special case, an empty list element refers to the\\nconfiguration-less imported target location\\n(i.e. ``IMPORTED_LOCATION``).\\n\\nIf this property is set and no matching configurations are available,\\nthen the imported target is considered to be not found.  This property\\nis ignored for non-imported targets.\\n\\nThis property is initialized by the value of the\\n``CMAKE_MAP_IMPORTED_CONFIG_<CONFIG>`` variable if it is set when a\\ntarget is created.\\n\\nExample\\n^^^^^^^\\n\\nFor example creating imported C++ library ``foo``:\\n\\n add_library(foo STATIC IMPORTED)\\n\\nUse ``foo_debug`` path for ``Debug`` build type:\\n\\n set_property(\\n   TARGET foo APPEND PROPERTY IMPORTED_CONFIGURATIONS DEBUG\\n   )\\n\\n set_target_properties(foo PROPERTIES\\n   IMPORTED_LINK_INTERFACE_LANGUAGES_DEBUG \\\"CXX\\\"\\n   IMPORTED_LOCATION_DEBUG \\\"${foo_debug}\\\"\\n   )\\n\\nUse ``foo_release`` path for ``Release`` build type:\\n\\n set_property(\\n   TARGET foo APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE\\n   )\\n\\n set_target_properties(foo PROPERTIES\\n   IMPORTED_LINK_INTERFACE_LANGUAGES_RELEASE \\\"CXX\\\"\\n   IMPORTED_LOCATION_RELEASE \\\"${foo_release}\\\"\\n   )\\n\\nUse ``Release`` version of library for ``MinSizeRel`` and ``RelWithDebInfo``\\nbuild types:\\n\\n set_target_properties(foo PROPERTIES\\n   MAP_IMPORTED_CONFIG_MINSIZEREL Release\\n   MAP_IMPORTED_CONFIG_RELWITHDEBINFO Release\\n   )\\n",
        "property"
    ],
    "MAP_IMPORTED_CONFIG_RELEASE": [
        "MAP_IMPORTED_CONFIG_<CONFIG>\\n----------------------------\\n\\nMap from project configuration to\\n:ref:`imported target <IMPORTED targets>`'s configuration.\\n\\nSet this to the list of configurations of an imported target that may\\nbe used for the current project's ``<CONFIG>`` configuration.  Targets\\nimported from another project may not provide the same set of\\nconfiguration names available in the current project.  Setting this\\nproperty tells CMake what imported configurations are suitable for use\\nwhen building the ``<CONFIG>`` configuration.  The first configuration in\\nthe list found to be provided by the imported target (i.e. via\\n``IMPORTED_LOCATION_<CONFIG>`` for the mapped-to ``<CONFIG>``)\\nis selected.  As a special case, an empty list element refers to the\\nconfiguration-less imported target location\\n(i.e. ``IMPORTED_LOCATION``).\\n\\nIf this property is set and no matching configurations are available,\\nthen the imported target is considered to be not found.  This property\\nis ignored for non-imported targets.\\n\\nThis property is initialized by the value of the\\n``CMAKE_MAP_IMPORTED_CONFIG_<CONFIG>`` variable if it is set when a\\ntarget is created.\\n\\nExample\\n^^^^^^^\\n\\nFor example creating imported C++ library ``foo``:\\n\\n add_library(foo STATIC IMPORTED)\\n\\nUse ``foo_debug`` path for ``Debug`` build type:\\n\\n set_property(\\n   TARGET foo APPEND PROPERTY IMPORTED_CONFIGURATIONS DEBUG\\n   )\\n\\n set_target_properties(foo PROPERTIES\\n   IMPORTED_LINK_INTERFACE_LANGUAGES_DEBUG \\\"CXX\\\"\\n   IMPORTED_LOCATION_DEBUG \\\"${foo_debug}\\\"\\n   )\\n\\nUse ``foo_release`` path for ``Release`` build type:\\n\\n set_property(\\n   TARGET foo APPEND PROPERTY IMPORTED_CONFIGURATIONS RELEASE\\n   )\\n\\n set_target_properties(foo PROPERTIES\\n   IMPORTED_LINK_INTERFACE_LANGUAGES_RELEASE \\\"CXX\\\"\\n   IMPORTED_LOCATION_RELEASE \\\"${foo_release}\\\"\\n   )\\n\\nUse ``Release`` version of library for ``MinSizeRel`` and ``RelWithDebInfo``\\nbuild types:\\n\\n set_target_properties(foo PROPERTIES\\n   MAP_IMPORTED_CONFIG_MINSIZEREL Release\\n   MAP_IMPORTED_CONFIG_RELWITHDEBINFO Release\\n   )\\n",
        "property"
    ],
    "MEASUREMENT": [
        "MEASUREMENT\\n-----------\\n\\nSpecify a CDASH measurement and value to be reported for a test.\\n\\nIf set to a name then that name will be reported to CDASH as a named\\nmeasurement with a value of 1.  You may also specify a value by\\nsetting MEASUREMENT to \\\"measurement=value\\\".\\n",
        "property"
    ],
    "MODIFIED": [
        "MODIFIED\\n--------\\n\\nInternal management property.  Do not set or get.\\n\\nThis is an internal cache entry property managed by CMake to track\\ninteractive user modification of entries.  Ignore it.\\n",
        "property"
    ],
    "NAME": [
        "NAME\\n----\\n\\nLogical name for the target.\\n\\nRead-only logical name for the target as used by CMake.\\n",
        "property"
    ],
    "NO_SONAME": [
        "NO_SONAME\\n---------\\n\\nWhether to set \\\"soname\\\" when linking a shared library.\\n\\nEnable this boolean property if a generated shared library\\nshould not have \\\"soname\\\" set.  Default is to set \\\"soname\\\" on all\\nshared libraries as long as the platform supports it.\\nGenerally, use this property only for leaf private libraries or\\nplugins.  If you use it on normal shared libraries which other targets\\nlink against, on some platforms a linker will insert a full path to\\nthe library (as specified at link time) into the dynamic section of\\nthe dependent binary.  Therefore, once installed, dynamic loader may\\neventually fail to locate the library for the binary.\\n",
        "property"
    ],
    "NO_SYSTEM_FROM_IMPORTED": [
        "NO_SYSTEM_FROM_IMPORTED\\n-----------------------\\n\\nDo not treat include directories from the interfaces of consumed\\n:ref:`imported targets` as ``SYSTEM``.\\n\\nThe contents of the ``INTERFACE_INCLUDE_DIRECTORIES`` target property\\nof imported targets are treated as ``SYSTEM`` includes by default.  If this\\nproperty is enabled on a target, compilation of sources in that target will\\nnot treat the contents of the ``INTERFACE_INCLUDE_DIRECTORIES`` of consumed\\nimported targets as system includes.\\n\\nThis property is initialized by the value of the\\n``CMAKE_NO_SYSTEM_FROM_IMPORTED`` variable if it is set when a target\\nis created.\\n",
        "property"
    ],
    "OBJECT_DEPENDS": [
        "OBJECT_DEPENDS\\n--------------\\n\\nAdditional files on which a compiled object file depends.\\n\\nSpecifies a :ref:`;-list <CMake Language Lists>` of full-paths to\\nfiles on which any object files compiled from this source file depend.\\nOn :ref:`Makefile Generators` and the ``Ninja`` generator an\\nobject file will be recompiled if any of the named files is newer than it.\\n:ref:`Visual Studio Generators` and the ``Xcode`` generator\\ncannot implement such compilation dependencies.\\n\\nThis property need not be used to specify the dependency of a source\\nfile on a generated header file that it includes.  Although the\\nproperty was originally introduced for this purpose, it is no longer\\nnecessary.  If the generated header file is created by a custom\\ncommand in the same target as the source file, the automatic\\ndependency scanning process will recognize the dependency.  If the\\ngenerated header file is created by another target, an inter-target\\ndependency should be created with the ``add_dependencies()``\\ncommand (if one does not already exist due to linking relationships).\\n",
        "property"
    ],
    "OBJECT_OUTPUTS": [
        "OBJECT_OUTPUTS\\n--------------\\n\\nAdditional outputs for a Makefile rule.\\n\\nAdditional outputs created by compilation of this source file.  If any\\nof these outputs is missing the object will be recompiled.  This is\\nsupported only on Makefile generators and will be ignored on other\\ngenerators.\\n",
        "property"
    ],
    "OSX_ARCHITECTURES": [
        "OSX_ARCHITECTURES\\n-----------------\\n\\nTarget specific architectures for macOS.\\n\\nThe ``OSX_ARCHITECTURES`` property sets the target binary architecture for\\ntargets on macOS (``-arch``).  This property is initialized by the value of the\\nvariable ``CMAKE_OSX_ARCHITECTURES`` if it is set when a target is\\ncreated.  Use ``OSX_ARCHITECTURES_<CONFIG>`` to set the binary\\narchitectures on a per-configuration basis, where ``<CONFIG>`` is an\\nupper-case name (e.g. ``OSX_ARCHITECTURES_DEBUG``).\\n",
        "property"
    ],
    "OSX_ARCHITECTURES_DEBUG": [
        "OSX_ARCHITECTURES_<CONFIG>\\n--------------------------\\n\\nPer-configuration macOS and iOS binary architectures for a target.\\n\\nThis property is the configuration-specific version of\\n``OSX_ARCHITECTURES``.\\n",
        "property"
    ],
    "OSX_ARCHITECTURES_RELEASE": [
        "OSX_ARCHITECTURES_<CONFIG>\\n--------------------------\\n\\nPer-configuration macOS and iOS binary architectures for a target.\\n\\nThis property is the configuration-specific version of\\n``OSX_ARCHITECTURES``.\\n",
        "property"
    ],
    "OUTPUT_NAME": [
        "OUTPUT_NAME\\n-----------\\n\\nOutput name for target files.\\n\\nThis sets the base name for output files created for an executable or\\nlibrary target.  If not set, the logical target name is used by\\ndefault during generation. The value is not set by default during\\nconfiguration.\\n\\nContents of ``OUTPUT_NAME`` and the variants listed below may use\\n``generator expressions``.\\n\\nSee also the variants:\\n\\n* ``OUTPUT_NAME_<CONFIG>``\\n* ``ARCHIVE_OUTPUT_NAME_<CONFIG>``\\n* ``ARCHIVE_OUTPUT_NAME``\\n* ``LIBRARY_OUTPUT_NAME_<CONFIG>``\\n* ``LIBRARY_OUTPUT_NAME``\\n* ``RUNTIME_OUTPUT_NAME_<CONFIG>``\\n* ``RUNTIME_OUTPUT_NAME``\\n",
        "property"
    ],
    "OUTPUT_NAME_DEBUG": [
        "OUTPUT_NAME_<CONFIG>\\n--------------------\\n\\nPer-configuration target file base name.\\n\\nThis is the configuration-specific version of the ``OUTPUT_NAME``\\ntarget property.\\n",
        "property"
    ],
    "OUTPUT_NAME_RELEASE": [
        "OUTPUT_NAME_<CONFIG>\\n--------------------\\n\\nPer-configuration target file base name.\\n\\nThis is the configuration-specific version of the ``OUTPUT_NAME``\\ntarget property.\\n",
        "property"
    ],
    "PACKAGES_FOUND": [
        "PACKAGES_FOUND\\n--------------\\n\\nList of packages which were found during the CMake run.\\n\\nList of packages which were found during the CMake run.  Whether a\\npackage has been found is determined using the <NAME>_FOUND variables.\\n",
        "property"
    ],
    "PACKAGES_NOT_FOUND": [
        "PACKAGES_NOT_FOUND\\n------------------\\n\\nList of packages which were not found during the CMake run.\\n\\nList of packages which were not found during the CMake run.  Whether a\\npackage has been found is determined using the <NAME>_FOUND variables.\\n",
        "property"
    ],
    "PARENT_DIRECTORY": [
        "PARENT_DIRECTORY\\n----------------\\n\\nSource directory that added current subdirectory.\\n\\nThis read-only property specifies the source directory that added the\\ncurrent source directory as a subdirectory of the build.  In the\\ntop-level directory the value is the empty-string.\\n",
        "property"
    ],
    "PASS_REGULAR_EXPRESSION": [
        "PASS_REGULAR_EXPRESSION\\n-----------------------\\n\\nThe output must match this regular expression for the test to pass.\\n\\nIf set, the test output will be checked against the specified regular\\nexpressions and at least one of the regular expressions has to match,\\notherwise the test will fail.  Example:\\n\\n set_tests_properties(mytest PROPERTIES\\n   PASS_REGULAR_EXPRESSION \\\"TestPassed;All ok\\\"\\n )\\n\\n``PASS_REGULAR_EXPRESSION`` expects a list of regular expressions.\\n",
        "property"
    ],
    "PDB_NAME": [
        "PDB_NAME\\n--------\\n\\nOutput name for the MS debug symbol ``.pdb`` file generated by the\\nlinker for an executable or shared library target.\\n\\nThis property specifies the base name for the debug symbols file.\\nIf not set, the ``OUTPUT_NAME`` target property value or\\nlogical target name is used by default.\\n\\n.. note::\\n This property does not apply to STATIC library targets because no linker\\n is invoked to produce them so they have no linker-generated ``.pdb`` file\\n containing debug symbols.\\n\\n The linker-generated program database files are specified by the\\n ``/pdb`` linker flag and are not the same as compiler-generated\\n program database files specified by the ``/Fd`` compiler flag.\\n Use the ``COMPILE_PDB_NAME`` property to specify the latter.\\n",
        "property"
    ],
    "PDB_NAME_DEBUG": [
        "PDB_NAME_<CONFIG>\\n-----------------\\n\\nPer-configuration output name for the MS debug symbol ``.pdb`` file\\ngenerated by the linker for an executable or shared library target.\\n\\nThis is the configuration-specific version of ``PDB_NAME``.\\n\\n.. note::\\n This property does not apply to STATIC library targets because no linker\\n is invoked to produce them so they have no linker-generated ``.pdb`` file\\n containing debug symbols.\\n\\n The linker-generated program database files are specified by the\\n ``/pdb`` linker flag and are not the same as compiler-generated\\n program database files specified by the ``/Fd`` compiler flag.\\n Use the ``COMPILE_PDB_NAME_<CONFIG>`` property to specify the latter.\\n",
        "property"
    ],
    "PDB_NAME_RELEASE": [
        "PDB_NAME_<CONFIG>\\n-----------------\\n\\nPer-configuration output name for the MS debug symbol ``.pdb`` file\\ngenerated by the linker for an executable or shared library target.\\n\\nThis is the configuration-specific version of ``PDB_NAME``.\\n\\n.. note::\\n This property does not apply to STATIC library targets because no linker\\n is invoked to produce them so they have no linker-generated ``.pdb`` file\\n containing debug symbols.\\n\\n The linker-generated program database files are specified by the\\n ``/pdb`` linker flag and are not the same as compiler-generated\\n program database files specified by the ``/Fd`` compiler flag.\\n Use the ``COMPILE_PDB_NAME_<CONFIG>`` property to specify the latter.\\n",
        "property"
    ],
    "PDB_OUTPUT_DIRECTORY": [
        "PDB_OUTPUT_DIRECTORY\\n--------------------\\n\\nOutput directory for the MS debug symbols ``.pdb`` file\\ngenerated by the linker for an executable or shared library target.\\n\\nThis property specifies the directory into which the MS debug symbols\\nwill be placed by the linker. The property value may use\\n``generator expressions``.\\nMulti-configuration generators append a per-configuration\\nsubdirectory to the specified directory unless a generator expression\\nis used.\\n\\nThis property is initialized by the value of the\\n``CMAKE_PDB_OUTPUT_DIRECTORY`` variable if it is\\nset when a target is created.\\n\\n.. note::\\n This property does not apply to STATIC library targets because no linker\\n is invoked to produce them so they have no linker-generated ``.pdb`` file\\n containing debug symbols.\\n\\n The linker-generated program database files are specified by the\\n ``/pdb`` linker flag and are not the same as compiler-generated\\n program database files specified by the ``/Fd`` compiler flag.\\n Use the ``COMPILE_PDB_OUTPUT_DIRECTORY`` property to specify the latter.\\n",
        "property"
    ],
    "PDB_OUTPUT_DIRECTORY_DEBUG": [
        "PDB_OUTPUT_DIRECTORY_<CONFIG>\\n-----------------------------\\n\\nPer-configuration output directory for the MS debug symbol ``.pdb`` file\\ngenerated by the linker for an executable or shared library target.\\n\\nThis is a per-configuration version of ``PDB_OUTPUT_DIRECTORY``,\\nbut multi-configuration generators (VS, Xcode) do NOT append a\\nper-configuration subdirectory to the specified directory.  This\\nproperty is initialized by the value of the\\n``CMAKE_PDB_OUTPUT_DIRECTORY_<CONFIG>`` variable if it is\\nset when a target is created.\\n\\nContents of ``PDB_OUTPUT_DIRECTORY_<CONFIG>`` may use\\n``generator expressions``.\\n\\n.. note::\\n This property does not apply to STATIC library targets because no linker\\n is invoked to produce them so they have no linker-generated ``.pdb`` file\\n containing debug symbols.\\n\\n The linker-generated program database files are specified by the\\n ``/pdb`` linker flag and are not the same as compiler-generated\\n program database files specified by the ``/Fd`` compiler flag.\\n Use the ``COMPILE_PDB_OUTPUT_DIRECTORY_<CONFIG>`` property to specify the latter.\\n",
        "property"
    ],
    "PDB_OUTPUT_DIRECTORY_RELEASE": [
        "PDB_OUTPUT_DIRECTORY_<CONFIG>\\n-----------------------------\\n\\nPer-configuration output directory for the MS debug symbol ``.pdb`` file\\ngenerated by the linker for an executable or shared library target.\\n\\nThis is a per-configuration version of ``PDB_OUTPUT_DIRECTORY``,\\nbut multi-configuration generators (VS, Xcode) do NOT append a\\nper-configuration subdirectory to the specified directory.  This\\nproperty is initialized by the value of the\\n``CMAKE_PDB_OUTPUT_DIRECTORY_<CONFIG>`` variable if it is\\nset when a target is created.\\n\\nContents of ``PDB_OUTPUT_DIRECTORY_<CONFIG>`` may use\\n``generator expressions``.\\n\\n.. note::\\n This property does not apply to STATIC library targets because no linker\\n is invoked to produce them so they have no linker-generated ``.pdb`` file\\n containing debug symbols.\\n\\n The linker-generated program database files are specified by the\\n ``/pdb`` linker flag and are not the same as compiler-generated\\n program database files specified by the ``/Fd`` compiler flag.\\n Use the ``COMPILE_PDB_OUTPUT_DIRECTORY_<CONFIG>`` property to specify the latter.\\n",
        "property"
    ],
    "POSITION_INDEPENDENT_CODE": [
        "POSITION_INDEPENDENT_CODE\\n-------------------------\\n\\nWhether to create a position-independent target\\n\\nThe ``POSITION_INDEPENDENT_CODE`` property determines whether position\\nindependent executables or shared libraries will be created.  This\\nproperty is ``True`` by default for ``SHARED`` and ``MODULE`` library\\ntargets and ``False`` otherwise.  This property is initialized by the value\\nof the ``CMAKE_POSITION_INDEPENDENT_CODE`` variable  if it is set\\nwhen a target is created.\\n",
        "property"
    ],
    "POST_INSTALL_SCRIPT": [
        "POST_INSTALL_SCRIPT\\n-------------------\\n\\nDeprecated install support.\\n\\nThe PRE_INSTALL_SCRIPT and POST_INSTALL_SCRIPT properties are the old\\nway to specify CMake scripts to run before and after installing a\\ntarget.  They are used only when the old INSTALL_TARGETS command is\\nused to install the target.  Use the INSTALL command instead.\\n",
        "property"
    ],
    "PREDEFINED_TARGETS_FOLDER": [
        "PREDEFINED_TARGETS_FOLDER\\n-------------------------\\n\\nName of FOLDER for targets that are added automatically by CMake.\\n\\nIf not set, CMake uses \\\"CMakePredefinedTargets\\\" as a default value for\\nthis property.  Targets such as INSTALL, PACKAGE and RUN_TESTS will be\\norganized into this FOLDER.  See also the documentation for the\\n``FOLDER`` target property.\\n",
        "property"
    ],
    "PREFIX": [
        "PREFIX\\n------\\n\\nWhat comes before the library name.\\n\\nA target property that can be set to override the prefix (such as\\n\\\"lib\\\") on a library name.\\n",
        "property"
    ],
    "PRE_INSTALL_SCRIPT": [
        "PRE_INSTALL_SCRIPT\\n------------------\\n\\nDeprecated install support.\\n\\nThe PRE_INSTALL_SCRIPT and POST_INSTALL_SCRIPT properties are the old\\nway to specify CMake scripts to run before and after installing a\\ntarget.  They are used only when the old INSTALL_TARGETS command is\\nused to install the target.  Use the INSTALL command instead.\\n",
        "property"
    ],
    "PRIVATE_HEADER": [
        "PRIVATE_HEADER\\n--------------\\n\\nSpecify private header files in a ``FRAMEWORK`` shared library target.\\n\\nShared library targets marked with the ``FRAMEWORK`` property generate\\nframeworks on macOS, iOS and normal shared libraries on other platforms.\\nThis property may be set to a list of header files to be placed in the\\nPrivateHeaders directory inside the framework folder.  On non-Apple\\nplatforms these headers may be installed using the ``PRIVATE_HEADER``\\noption to the ``install(TARGETS)`` command.\\n",
        "property"
    ],
    "PROCESSORS": [
        "PROCESSORS\\n----------\\n\\nSet to specify how many process slots this test requires.\\nIf not set, the default is ``1`` processor.\\n\\nDenotes the number of processors that this test will require.  This is\\ntypically used for MPI tests, and should be used in conjunction with\\nthe ``ctest_test()`` ``PARALLEL_LEVEL`` option.\\n\\nThis will also be used to display a weighted test timing result in label and\\nsubproject summaries in the command line output of ``ctest(1)``. The wall\\nclock time for the test run will be multiplied by this property to give a\\nbetter idea of how much cpu resource CTest allocated for the test.\\n\\nSee also the ``PROCESSOR_AFFINITY`` test property.\\n",
        "property"
    ],
    "PROCESSOR_AFFINITY": [
        "PROCESSOR_AFFINITY\\n------------------\\n\\nSet to a true value to ask CTest to launch the test process with CPU affinity\\nfor a fixed set of processors.  If enabled and supported for the current\\nplatform, CTest will choose a set of processors to place in the CPU affinity\\nmask when launching the test process.  The number of processors in the set is\\ndetermined by the ``PROCESSORS`` test property or the number of\\nprocessors available to CTest, whichever is smaller.  The set of processors\\nchosen will be disjoint from the processors assigned to other concurrently\\nrunning tests that also have the ``PROCESSOR_AFFINITY`` property enabled.\\n",
        "property"
    ],
    "PROJECT_LABEL": [
        "PROJECT_LABEL\\n-------------\\n\\nChange the name of a target in an IDE.\\n\\nCan be used to change the name of the target in an IDE like Visual\\nStudio.\\n",
        "property"
    ],
    "PUBLIC_HEADER": [
        "PUBLIC_HEADER\\n-------------\\n\\nSpecify public header files in a ``FRAMEWORK`` shared library target.\\n\\nShared library targets marked with the ``FRAMEWORK`` property generate\\nframeworks on macOS, iOS and normal shared libraries on other platforms.\\nThis property may be set to a list of header files to be placed in the\\n``Headers`` directory inside the framework folder.  On non-Apple platforms\\nthese headers may be installed using the ``PUBLIC_HEADER`` option to the\\n``install(TARGETS)`` command.\\n",
        "property"
    ],
    "REPORT_UNDEFINED_PROPERTIES": [
        "REPORT_UNDEFINED_PROPERTIES\\n---------------------------\\n\\nIf set, report any undefined properties to this file.\\n\\nIf this property is set to a filename then when CMake runs it will\\nreport any properties or variables that were accessed but not defined\\ninto the filename specified in this property.\\n",
        "property"
    ],
    "REQUIRED_FILES": [
        "REQUIRED_FILES\\n--------------\\n\\nList of files required to run the test.\\n\\nIf set to a list of files, the test will not be run unless all of the\\nfiles exist.\\n",
        "property"
    ],
    "RESOURCE": [
        "RESOURCE\\n--------\\n\\nSpecify resource files in a ``FRAMEWORK`` or ``BUNDLE``.\\n\\nTarget marked with the ``FRAMEWORK`` or ``BUNDLE`` property\\ngenerate framework or application bundle (both macOS and iOS is supported)\\nor normal shared libraries on other platforms.\\nThis property may be set to a list of files to be placed in the corresponding\\ndirectory (eg. ``Resources`` directory for macOS) inside the bundle.\\nOn non-Apple platforms these files may be installed using the ``RESOURCE``\\noption to the ``install(TARGETS)`` command.\\n\\nFollowing example of Application Bundle:\\n\\n add_executable(ExecutableTarget\\n   addDemo.c\\n   resourcefile.txt\\n   appresourcedir/appres.txt\\n )\\n\\n target_link_libraries(ExecutableTarget heymath mul)\\n\\n set(RESOURCE_FILES\\n   resourcefile.txt\\n   appresourcedir/appres.txt\\n )\\n\\n set_target_properties(ExecutableTarget PROPERTIES\\n   MACOSX_BUNDLE TRUE\\n   MACOSX_FRAMEWORK_IDENTIFIER org.cmake.ExecutableTarget\\n   RESOURCE \\\"${RESOURCE_FILES}\\\"\\n )\\n\\nwill produce flat structure for iOS systems::\\n\\n ExecutableTarget.app\\n   appres.txt\\n   ExecutableTarget\\n   Info.plist\\n   resourcefile.txt\\n\\nFor macOS systems it will produce following directory structure::\\n\\n ExecutableTarget.app/\\n   Contents\\n     Info.plist\\n     MacOS\\n       ExecutableTarget\\n     Resources\\n       appres.txt\\n       resourcefile.txt\\n\\nFor Linux, such cmake script produce following files::\\n\\n ExecutableTarget\\n Resources\\n   appres.txt\\n   resourcefile.txt\\n",
        "property"
    ],
    "RESOURCE_LOCK": [
        "RESOURCE_LOCK\\n-------------\\n\\nSpecify a list of resources that are locked by this test.\\n\\nIf multiple tests specify the same resource lock, they are guaranteed\\nnot to run concurrently.\\n\\nSee also ``FIXTURES_REQUIRED`` if the resource requires any setup or\\ncleanup steps.\\n",
        "property"
    ],
    "RULE_LAUNCH_COMPILE": [
        "RULE_LAUNCH_COMPILE\\n-------------------\\n\\nSpecify a launcher for compile rules.\\n\\nSee the global property of the same name for details.  This overrides\\nthe global property for a directory.\\n\\nRULE_LAUNCH_COMPILE\\n-------------------\\n\\nSpecify a launcher for compile rules.\\n\\n:ref:`Makefile Generators` and the ``Ninja`` generator prefix\\ncompiler commands with the given launcher command line.\\nThis is intended to allow launchers to intercept build problems\\nwith high granularity.  Other generators ignore this property\\nbecause their underlying build systems provide no hook to wrap\\nindividual commands with a launcher.\\n\\nRULE_LAUNCH_COMPILE\\n-------------------\\n\\nSpecify a launcher for compile rules.\\n\\nSee the global property of the same name for details.  This overrides\\nthe global and directory property for a target.\\n",
        "property"
    ],
    "RULE_LAUNCH_CUSTOM": [
        "RULE_LAUNCH_CUSTOM\\n------------------\\n\\nSpecify a launcher for custom rules.\\n\\nSee the global property of the same name for details.  This overrides\\nthe global property for a directory.\\n\\nRULE_LAUNCH_CUSTOM\\n------------------\\n\\nSpecify a launcher for custom rules.\\n\\n:ref:`Makefile Generators` and the ``Ninja`` generator prefix\\ncustom commands with the given launcher command line.\\nThis is intended to allow launchers to intercept build problems\\nwith high granularity.  Other generators ignore this property\\nbecause their underlying build systems provide no hook to wrap\\nindividual commands with a launcher.\\n\\nRULE_LAUNCH_CUSTOM\\n------------------\\n\\nSpecify a launcher for custom rules.\\n\\nSee the global property of the same name for details.  This overrides\\nthe global and directory property for a target.\\n",
        "property"
    ],
    "RULE_LAUNCH_LINK": [
        "RULE_LAUNCH_LINK\\n----------------\\n\\nSpecify a launcher for link rules.\\n\\nSee the global property of the same name for details.  This overrides\\nthe global property for a directory.\\n\\nRULE_LAUNCH_LINK\\n----------------\\n\\nSpecify a launcher for link rules.\\n\\n:ref:`Makefile Generators` and the ``Ninja`` generator prefix\\nlink and archive commands with the given launcher command line.\\nThis is intended to allow launchers to intercept build problems\\nwith high granularity.  Other generators ignore this property\\nbecause their underlying build systems provide no hook to wrap\\nindividual commands with a launcher.\\n\\nRULE_LAUNCH_LINK\\n----------------\\n\\nSpecify a launcher for link rules.\\n\\nSee the global property of the same name for details.  This overrides\\nthe global and directory property for a target.\\n",
        "property"
    ],
    "RULE_MESSAGES": [
        "RULE_MESSAGES\\n-------------\\n\\nSpecify whether to report a message for each make rule.\\n\\nThis property specifies whether Makefile generators should add a\\nprogress message describing what each build rule does.  If the\\nproperty is not set the default is ON.  Set the property to OFF to\\ndisable granular messages and report only as each target completes.\\nThis is intended to allow scripted builds to avoid the build time cost\\nof detailed reports.  If a ``CMAKE_RULE_MESSAGES`` cache entry exists\\nits value initializes the value of this property.  Non-Makefile\\ngenerators currently ignore this property.\\n",
        "property"
    ],
    "RUNTIME_OUTPUT_DIRECTORY": [
        "RUNTIME_OUTPUT_DIRECTORY\\n------------------------\\n\\nOutput directory in which to build :ref:`RUNTIME <Runtime Output Artifacts>` target files.\\n\\nThis property specifies the directory into which runtime target files\\nshould be built.  The property value may use\\n``generator expressions``.\\nMulti-configuration generators (VS, Xcode) append a per-configuration\\nsubdirectory to the specified directory unless a generator expression\\nis used.\\n\\nThis property is initialized by the value of the variable\\nCMAKE_RUNTIME_OUTPUT_DIRECTORY if it is set when a target is created.\\n\\nSee also the ``RUNTIME_OUTPUT_DIRECTORY_<CONFIG>`` target property.\\n",
        "property"
    ],
    "RUNTIME_OUTPUT_DIRECTORY_DEBUG": [
        "RUNTIME_OUTPUT_DIRECTORY_<CONFIG>\\n---------------------------------\\n\\nPer-configuration output directory for\\n:ref:`RUNTIME <Runtime Output Artifacts>` target files.\\n\\nThis is a per-configuration version of the\\n``RUNTIME_OUTPUT_DIRECTORY`` target property, but\\nmulti-configuration generators (VS, Xcode) do NOT append a\\nper-configuration subdirectory to the specified directory.  This\\nproperty is initialized by the value of the\\n``CMAKE_RUNTIME_OUTPUT_DIRECTORY_<CONFIG>`` variable if\\nit is set when a target is created.\\n\\nContents of ``RUNTIME_OUTPUT_DIRECTORY_<CONFIG>`` may use\\n``generator expressions``.\\n",
        "property"
    ],
    "RUNTIME_OUTPUT_DIRECTORY_RELEASE": [
        "RUNTIME_OUTPUT_DIRECTORY_<CONFIG>\\n---------------------------------\\n\\nPer-configuration output directory for\\n:ref:`RUNTIME <Runtime Output Artifacts>` target files.\\n\\nThis is a per-configuration version of the\\n``RUNTIME_OUTPUT_DIRECTORY`` target property, but\\nmulti-configuration generators (VS, Xcode) do NOT append a\\nper-configuration subdirectory to the specified directory.  This\\nproperty is initialized by the value of the\\n``CMAKE_RUNTIME_OUTPUT_DIRECTORY_<CONFIG>`` variable if\\nit is set when a target is created.\\n\\nContents of ``RUNTIME_OUTPUT_DIRECTORY_<CONFIG>`` may use\\n``generator expressions``.\\n",
        "property"
    ],
    "RUNTIME_OUTPUT_NAME": [
        "RUNTIME_OUTPUT_NAME\\n-------------------\\n\\nOutput name for :ref:`RUNTIME <Runtime Output Artifacts>` target files.\\n\\nThis property specifies the base name for runtime target files.  It\\noverrides ``OUTPUT_NAME`` and ``OUTPUT_NAME_<CONFIG>``\\nproperties.\\n\\nSee also the ``RUNTIME_OUTPUT_NAME_<CONFIG>`` target property.\\n",
        "property"
    ],
    "RUNTIME_OUTPUT_NAME_DEBUG": [
        "RUNTIME_OUTPUT_NAME_<CONFIG>\\n----------------------------\\n\\nPer-configuration output name for\\n:ref:`RUNTIME <Runtime Output Artifacts>` target files.\\n\\nThis is the configuration-specific version of the\\n``RUNTIME_OUTPUT_NAME`` target property.\\n",
        "property"
    ],
    "RUNTIME_OUTPUT_NAME_RELEASE": [
        "RUNTIME_OUTPUT_NAME_<CONFIG>\\n----------------------------\\n\\nPer-configuration output name for\\n:ref:`RUNTIME <Runtime Output Artifacts>` target files.\\n\\nThis is the configuration-specific version of the\\n``RUNTIME_OUTPUT_NAME`` target property.\\n",
        "property"
    ],
    "RUN_SERIAL": [
        "RUN_SERIAL\\n----------\\n\\nDo not run this test in parallel with any other test.\\n\\nUse this option in conjunction with the ctest_test PARALLEL_LEVEL\\noption to specify that this test should not be run in parallel with\\nany other tests.\\n",
        "property"
    ],
    "SKIP_AUTOGEN": [
        "SKIP_AUTOGEN\\n------------\\n\\nExclude the source file from ``AUTOMOC``, ``AUTOUIC`` and\\n``AUTORCC`` processing (for Qt projects).\\n\\nFor finer exclusion control see ``SKIP_AUTOMOC``,\\n``SKIP_AUTOUIC`` and ``SKIP_AUTORCC``.\\n\\nEXAMPLE\\n^^^^^^^\\n\\n # ...\\n set_property(SOURCE file.h PROPERTY SKIP_AUTOGEN ON)\\n # ...\\n",
        "property"
    ],
    "SKIP_AUTOMOC": [
        "SKIP_AUTOMOC\\n------------\\n\\nExclude the source file from ``AUTOMOC`` processing (for Qt projects).\\n\\nFor broader exclusion control see ``SKIP_AUTOGEN``.\\n\\nEXAMPLE\\n^^^^^^^\\n\\n # ...\\n set_property(SOURCE file.h PROPERTY SKIP_AUTOMOC ON)\\n # ...\\n",
        "property"
    ],
    "SKIP_AUTORCC": [
        "SKIP_AUTORCC\\n------------\\n\\nExclude the source file from ``AUTORCC`` processing (for Qt projects).\\n\\nFor broader exclusion control see ``SKIP_AUTOGEN``.\\n\\nEXAMPLE\\n^^^^^^^\\n\\n # ...\\n set_property(SOURCE file.qrc PROPERTY SKIP_AUTORCC ON)\\n # ...\\n",
        "property"
    ],
    "SKIP_AUTOUIC": [
        "SKIP_AUTOUIC\\n------------\\n\\nExclude the source file from ``AUTOUIC`` processing (for Qt projects).\\n\\n``SKIP_AUTOUIC`` can be set on C++ header and source files and on\\n``.ui`` files.\\n\\nFor broader exclusion control see ``SKIP_AUTOGEN``.\\n\\nEXAMPLE\\n^^^^^^^\\n\\n # ...\\n set_property(SOURCE file.h PROPERTY SKIP_AUTOUIC ON)\\n set_property(SOURCE file.cpp PROPERTY SKIP_AUTOUIC ON)\\n set_property(SOURCE widget.ui PROPERTY SKIP_AUTOUIC ON)\\n # ...\\n",
        "property"
    ],
    "SKIP_BUILD_RPATH": [
        "SKIP_BUILD_RPATH\\n----------------\\n\\nShould rpaths be used for the build tree.\\n\\nSKIP_BUILD_RPATH is a boolean specifying whether to skip automatic\\ngeneration of an rpath allowing the target to run from the build tree.\\nThis property is initialized by the value of the variable\\nCMAKE_SKIP_BUILD_RPATH if it is set when a target is created.\\n",
        "property"
    ],
    "SKIP_RETURN_CODE": [
        "SKIP_RETURN_CODE\\n----------------\\n\\nReturn code to mark a test as skipped.\\n\\nSometimes only a test itself can determine if all requirements for the\\ntest are met. If such a situation should not be considered a hard failure\\na return code of the process can be specified that will mark the test as\\n\\\"Not Run\\\" if it is encountered.\\n",
        "property"
    ],
    "SOURCES": [
        "SOURCES\\n-------\\n\\nSource names specified for a target.\\n\\nList of sources specified for a target.\\n",
        "property"
    ],
    "SOURCE_DIR": [
        "SOURCE_DIR\\n----------\\n\\nThis read-only directory property reports absolute path to the source\\ndirectory on which it is read.\\n\\nSOURCE_DIR\\n----------\\n\\nThis read-only property reports the value of the\\n``CMAKE_CURRENT_SOURCE_DIR`` variable in the directory in which\\nthe target was defined.\\n",
        "property"
    ],
    "SOVERSION": [
        "SOVERSION\\n---------\\n\\nWhat version number is this target.\\n\\nFor shared libraries ``VERSION`` and ``SOVERSION`` can be used to\\nspecify the build version and API version respectively.  When building or\\ninstalling appropriate symlinks are created if the platform supports\\nsymlinks and the linker supports so-names.  If only one of both is\\nspecified the missing is assumed to have the same version number.\\n``SOVERSION`` is ignored if ``NO_SONAME`` property is set.\\n\\nWindows Versions\\n^^^^^^^^^^^^^^^^\\n\\nFor shared libraries and executables on Windows the ``VERSION``\\nattribute is parsed to extract a ``<major>.<minor>`` version number.\\nThese numbers are used as the image version of the binary.\\n\\nMach-O Versions\\n^^^^^^^^^^^^^^^\\n\\nFor shared libraries and executables on Mach-O systems (e.g. macOS, iOS),\\nthe ``SOVERSION`` property corresponds to *compatibility version* and\\n``VERSION`` to *current version*.  See the ``FRAMEWORK`` target\\nproperty for an example.  Versions of Mach-O binaries may be checked with the\\n``otool -L <binary>`` command.\\n",
        "property"
    ],
    "STATIC_LIBRARY_FLAGS": [
        "STATIC_LIBRARY_FLAGS\\n--------------------\\n\\nArchiver (or MSVC librarian) flags for a static library target.\\nTargets that are shared libraries, modules, or executables need to use\\nthe ``LINK_OPTIONS`` or ``LINK_FLAGS`` target properties.\\n\\nThe ``STATIC_LIBRARY_FLAGS`` property, managed as a string, can be used to add\\nextra flags to the link step of a static library target.\\n``STATIC_LIBRARY_FLAGS_<CONFIG>`` will add to the configuration\\n``<CONFIG>``, for example, ``DEBUG``, ``RELEASE``, ``MINSIZEREL``,\\n``RELWITHDEBINFO``, ...\\n\\n.. note::\\n\\n  This property has been superseded by ``STATIC_LIBRARY_OPTIONS``\\n  property.\\n",
        "property"
    ],
    "STATIC_LIBRARY_FLAGS_DEBUG": [
        "STATIC_LIBRARY_FLAGS_<CONFIG>\\n-----------------------------\\n\\nPer-configuration archiver (or MSVC librarian) flags for a static library\\ntarget.\\n\\nThis is the configuration-specific version of ``STATIC_LIBRARY_FLAGS``.\\n\\n.. note::\\n\\n  This property has been superseded by ``STATIC_LIBRARY_OPTIONS``\\n  property.\\n",
        "property"
    ],
    "STATIC_LIBRARY_FLAGS_RELEASE": [
        "STATIC_LIBRARY_FLAGS_<CONFIG>\\n-----------------------------\\n\\nPer-configuration archiver (or MSVC librarian) flags for a static library\\ntarget.\\n\\nThis is the configuration-specific version of ``STATIC_LIBRARY_FLAGS``.\\n\\n.. note::\\n\\n  This property has been superseded by ``STATIC_LIBRARY_OPTIONS``\\n  property.\\n",
        "property"
    ],
    "STATIC_LIBRARY_OPTIONS": [
        "STATIC_LIBRARY_OPTIONS\\n----------------------\\n\\nArchiver (or MSVC librarian) flags for a static library target.\\nTargets that are shared libraries, modules, or executables need to use\\nthe ``LINK_OPTIONS`` target property.\\n\\nThis property holds a :ref:`;-list <CMake Language Lists>` of options\\nspecified so far for its target.  Use ``set_target_properties()`` or\\n``set_property()`` commands to set its content.\\n\\nContents of ``STATIC_LIBRARY_OPTIONS`` may use \\\"generator expressions\\\" with the\\nsyntax ``$<...>``.  See the ``cmake-generator-expressions(7)`` manual\\nfor available expressions.  See the ``cmake-buildsystem(7)`` manual\\nfor more on defining buildsystem properties.\\n\\n.. note::\\n\\n  This property must be used in preference to ``STATIC_LIBRARY_FLAGS``\\n  property.\\n",
        "property"
    ],
    "STRINGS": [
        "STRINGS\\n-------\\n\\nEnumerate possible STRING entry values for GUI selection.\\n\\nFor cache entries with type STRING, this enumerates a set of values.\\nCMake GUIs may use this to provide a selection widget instead of a\\ngeneric string entry field.  This is for convenience only.  CMake does\\nnot enforce that the value matches one of those listed.\\n",
        "property"
    ],
    "SUBDIRECTORIES": [
        "SUBDIRECTORIES\\n--------------\\n\\nThis read-only directory property contains a\\n:ref:`;-list <CMake Language Lists>` of subdirectories processed so far by\\nthe ``add_subdirectory()`` or ``subdirs()`` commands.  Each entry is\\nthe absolute path to the source directory (containing the ``CMakeLists.txt``\\nfile).  This is suitable to pass to the ``get_property()`` command\\n``DIRECTORY`` option.\\n\\n.. note::\\n\\n  The ``subdirs()`` command does not process its arguments until\\n  after the calling directory is fully processed.  Therefore looking\\n  up this property in the current directory will not see them.\\n",
        "property"
    ],
    "SUFFIX": [
        "SUFFIX\\n------\\n\\nWhat comes after the target name.\\n\\nA target property that can be set to override the suffix (such as\\n\\\".so\\\" or \\\".exe\\\") on the name of a library, module or executable.\\n",
        "property"
    ],
    "SYMBOLIC": [
        "SYMBOLIC\\n--------\\n\\nIs this just a name for a rule.\\n\\nIf SYMBOLIC (boolean) is set to true the build system will be informed\\nthat the source file is not actually created on disk but instead used\\nas a symbolic name for a build rule.\\n",
        "property"
    ],
    "TARGET_ARCHIVES_MAY_BE_SHARED_LIBS": [
        "TARGET_ARCHIVES_MAY_BE_SHARED_LIBS\\n----------------------------------\\n\\nSet if shared libraries may be named like archives.\\n\\nOn AIX shared libraries may be named \\\"lib<name>.a\\\".  This property is\\nset to true on such platforms.\\n",
        "property"
    ],
    "TARGET_MESSAGES": [
        "TARGET_MESSAGES\\n---------------\\n\\nSpecify whether to report the completion of each target.\\n\\nThis property specifies whether :ref:`Makefile Generators` should\\nadd a progress message describing that each target has been completed.\\nIf the property is not set the default is ``ON``.  Set the property\\nto ``OFF`` to disable target completion messages.\\n\\nThis option is intended to reduce build output when little or no\\nwork needs to be done to bring the build tree up to date.\\n\\nIf a ``CMAKE_TARGET_MESSAGES`` cache entry exists its value\\ninitializes the value of this property.\\n\\nNon-Makefile generators currently ignore this property.\\n\\nSee the counterpart property ``RULE_MESSAGES`` to disable\\neverything except for target completion messages.\\n",
        "property"
    ],
    "TARGET_SUPPORTS_SHARED_LIBS": [
        "TARGET_SUPPORTS_SHARED_LIBS\\n---------------------------\\n\\nDoes the target platform support shared libraries.\\n\\nTARGET_SUPPORTS_SHARED_LIBS is a boolean specifying whether the target\\nplatform supports shared libraries.  Basically all current general\\ngeneral purpose OS do so, the exception are usually embedded systems\\nwith no or special OSs.\\n",
        "property"
    ],
    "TESTS": [
        "TESTS\\n-----\\n\\nList of tests.\\n\\nThis read-only property holds a :ref:`;-list <CMake Language Lists>` of tests\\ndefined so far, in the current directory, by the ``add_test()`` command.\\n",
        "property"
    ],
    "TEST_INCLUDE_FILE": [
        "TEST_INCLUDE_FILE\\n-----------------\\n\\nDeprecated.  Use ``TEST_INCLUDE_FILES`` instead.\\n\\nA cmake file that will be included when ctest is run.\\n\\nIf you specify ``TEST_INCLUDE_FILE``, that file will be included and\\nprocessed when ctest is run on the directory.\\n",
        "property"
    ],
    "TEST_INCLUDE_FILES": [
        "TEST_INCLUDE_FILES\\n------------------\\n\\nA list of cmake files that will be included when ctest is run.\\n\\nIf you specify ``TEST_INCLUDE_FILES``, those files will be included and\\nprocessed when ctest is run on the directory.\\n",
        "property"
    ],
    "TIMEOUT": [
        "TIMEOUT\\n-------\\n\\nHow many seconds to allow for this test.\\n\\nThis property if set will limit a test to not take more than the\\nspecified number of seconds to run.  If it exceeds that the test\\nprocess will be killed and ctest will move to the next test.  This\\nsetting takes precedence over ``CTEST_TEST_TIMEOUT``.\\n",
        "property"
    ],
    "TIMEOUT_AFTER_MATCH": [
        "TIMEOUT_AFTER_MATCH\\n-------------------\\n\\nChange a test's timeout duration after a matching line is encountered\\nin its output.\\n\\nUsage\\n^^^^^\\n\\n add_test(mytest ...)\\n set_property(TEST mytest PROPERTY TIMEOUT_AFTER_MATCH \\\"${seconds}\\\" \\\"${regex}\\\")\\n\\nDescription\\n^^^^^^^^^^^\\n\\nAllow a test ``seconds`` to complete after ``regex`` is encountered in\\nits output.\\n\\nWhen the test outputs a line that matches ``regex`` its start time is\\nreset to the current time and its timeout duration is changed to\\n``seconds``.  Prior to this, the timeout duration is determined by the\\n``TIMEOUT`` property or the ``CTEST_TEST_TIMEOUT``\\nvariable if either of these are set.  Because the test's start time is\\nreset, its execution time will not include any time that was spent\\nwaiting for the matching output.\\n\\n``TIMEOUT_AFTER_MATCH`` is useful for avoiding spurious\\ntimeouts when your test must wait for some system resource to become\\navailable before it can execute.  Set ``TIMEOUT`` to a longer\\nduration that accounts for resource acquisition and use\\n``TIMEOUT_AFTER_MATCH`` to control how long the actual test\\nis allowed to run.\\n\\nIf the required resource can be controlled by CTest you should use\\n``RESOURCE_LOCK`` instead of ``TIMEOUT_AFTER_MATCH``.\\nThis property should be used when only the test itself can determine\\nwhen its required resources are available.\\n",
        "property"
    ],
    "TYPE": [
        "TYPE\\n----\\n\\nWidget type for entry in GUIs.\\n\\nCache entry values are always strings, but CMake GUIs present widgets\\nto help users set values.  The GUIs use this property as a hint to\\ndetermine the widget type.  Valid TYPE values are:\\n\\n::\\n\\n BOOL          = Boolean ON/OFF value.\\n PATH          = Path to a directory.\\n FILEPATH      = Path to a file.\\n STRING        = Generic string value.\\n INTERNAL      = Do not present in GUI at all.\\n STATIC        = Value managed by CMake, do not change.\\n UNINITIALIZED = Type not yet specified.\\n\\nGenerally the TYPE of a cache entry should be set by the command which\\ncreates it (set, option, find_library, etc.).\\n\\nTYPE\\n----\\n\\nThe type of the target.\\n\\nThis read-only property can be used to test the type of the given\\ntarget.  It will be one of STATIC_LIBRARY, MODULE_LIBRARY,\\nSHARED_LIBRARY, OBJECT_LIBRARY, INTERFACE_LIBRARY, EXECUTABLE or one\\nof the internal target types.\\n",
        "property"
    ],
    "USE_FOLDERS": [
        "USE_FOLDERS\\n-----------\\n\\nUse the ``FOLDER`` target property to organize targets into\\nfolders.\\n\\nIf not set, CMake treats this property as OFF by default.  CMake\\ngenerators that are capable of organizing into a hierarchy of folders\\nuse the values of the ``FOLDER`` target property to name those\\nfolders. See also the documentation for the FOLDER target property.\\n",
        "property"
    ],
    "VALUE": [
        "VALUE\\n-----\\n\\nValue of a cache entry.\\n\\nThis property maps to the actual value of a cache entry.  Setting this\\nproperty always sets the value without checking, so use with care.\\n",
        "property"
    ],
    "VARIABLES": [
        "VARIABLES\\n---------\\n\\nList of variables defined in the current directory.\\n\\nThis read-only property specifies the list of CMake variables\\ncurrently defined.  It is intended for debugging purposes.\\n",
        "property"
    ],
    "VERSION": [
        "VERSION\\n-------\\n\\nWhat version number is this target.\\n\\nFor shared libraries ``VERSION`` and ``SOVERSION`` can be used\\nto specify the build version and API version respectively.  When building or\\ninstalling appropriate symlinks are created if the platform supports\\nsymlinks and the linker supports so-names.  If only one of both is\\nspecified the missing is assumed to have the same version number.  For\\nexecutables ``VERSION`` can be used to specify the build version.  When\\nbuilding or installing appropriate symlinks are created if the\\nplatform supports symlinks.\\n\\nWindows Versions\\n^^^^^^^^^^^^^^^^\\n\\nFor shared libraries and executables on Windows the ``VERSION``\\nattribute is parsed to extract a ``<major>.<minor>`` version number.\\nThese numbers are used as the image version of the binary.\\n\\nMach-O Versions\\n^^^^^^^^^^^^^^^\\n\\nFor shared libraries and executables on Mach-O systems (e.g. macOS, iOS),\\nthe ``SOVERSION`` property correspond to *compatibility version* and\\n``VERSION`` to *current version*.  See the ``FRAMEWORK`` target\\nproperty for an example.  Versions of Mach-O binaries may be checked with the\\n``otool -L <binary>`` command.\\n",
        "property"
    ],
    "VISIBILITY_INLINES_HIDDEN": [
        "VISIBILITY_INLINES_HIDDEN\\n-------------------------\\n\\nWhether to add a compile flag to hide symbols of inline functions\\n\\nThe ``VISIBILITY_INLINES_HIDDEN`` property determines whether a flag for\\nhiding symbols for inline functions, such as ``-fvisibility-inlines-hidden``,\\nshould be used when invoking the compiler.  This property affects compilation\\nin sources of all types of targets (subject to policy ``CMP0063``).\\n\\nThis property is initialized by\\nthe value of the ``CMAKE_VISIBILITY_INLINES_HIDDEN`` variable if it\\nis set when a target is created.\\n",
        "property"
    ],
    "VS_CONFIGURATION_TYPE": [
        "VS_CONFIGURATION_TYPE\\n---------------------\\n\\nVisual Studio project configuration type.\\n\\nSets the ``ConfigurationType`` attribute for a generated Visual Studio project.\\nIf this property is set, it overrides the default setting that is based on the\\ntarget type (e.g. ``StaticLibrary``, ``Application``, ...).\\n\\nSupported on :ref:`Visual Studio Generators` for VS 2010 and higher.\\n",
        "property"
    ],
    "VS_COPY_TO_OUT_DIR": [
        "VS_COPY_TO_OUT_DIR\\n------------------\\n\\nSets the ``<CopyToOutputDirectory>`` tag for a source file in a\\nVisual Studio project file. Valid values are ``Never``, ``Always``\\nand ``PreserveNewest``.\\n",
        "property"
    ],
    "VS_CSHARP_<tagname>": [
        "VS_CSHARP_<tagname>\\n-------------------\\n\\nVisual Studio and CSharp source-file-specific configuration.\\n\\nTell the Visual Studio generator to set the source file tag\\n``<tagname>`` to a given value in the generated Visual Studio CSharp\\nproject. Ignored on other generators and languages. This property\\ncan be used to define dependencies between source files or set any\\nother Visual Studio specific parameters.\\n\\nExample usage:\\n\\n set_source_files_property(<filename>\\n          PROPERTIES\\n          VS_CSHARP_DependentUpon <other file>\\n          VS_CSHARP_SubType \\\"Form\\\")\\n",
        "property"
    ],
    "VS_DEBUGGER_COMMAND": [
        "VS_DEBUGGER_COMMAND\\n-------------------\\n\\nSets the local debugger command for Visual Studio C++ targets.\\nThe property value may use\\n``generator expressions``.\\nThis is defined in ``<LocalDebuggerCommand>`` in the Visual Studio\\nproject file.\\n\\nThis property only works for Visual Studio 2010 and above;\\nit is ignored on other generators.\\n",
        "property"
    ],
    "VS_DEBUGGER_COMMAND_ARGUMENTS": [
        "VS_DEBUGGER_COMMAND_ARGUMENTS\\n-----------------------------\\n\\nSets the local debugger command line arguments for Visual Studio C++ targets.\\nThe property value may use\\n``generator expressions``.\\nThis is defined in ``<LocalDebuggerCommandArguments>`` in the Visual Studio\\nproject file.\\n\\nThis property only works for Visual Studio 2010 and above;\\nit is ignored on other generators.\\n",
        "property"
    ],
    "VS_DEBUGGER_ENVIRONMENT": [
        "VS_DEBUGGER_ENVIRONMENT\\n-----------------------\\n\\nSets the local debugger environment for Visual Studio C++ targets.\\nThe property value may use\\n``generator expressions``.\\nThis is defined in ``<LocalDebuggerEnvironment>`` in the Visual Studio\\nproject file.\\n\\nThis property only works for Visual Studio 2010 and above;\\nit is ignored on other generators.\\n",
        "property"
    ],
    "VS_DEBUGGER_WORKING_DIRECTORY": [
        "VS_DEBUGGER_WORKING_DIRECTORY\\n-----------------------------\\n\\nSets the local debugger working directory for Visual Studio C++ targets.\\nThe property value may use\\n``generator expressions``.\\nThis is defined in ``<LocalDebuggerWorkingDirectory>`` in the Visual Studio\\nproject file.\\n\\nThis property only works for Visual Studio 2010 and above;\\nit is ignored on other generators.\\n",
        "property"
    ],
    "VS_DEPLOYMENT_CONTENT": [
        "VS_DEPLOYMENT_CONTENT\\n---------------------\\n\\nMark a source file as content for deployment with a Windows Phone or\\nWindows Store application when built with a Visual Studio generator.\\nThe value must evaluate to either ``1`` or ``0`` and may use\\n``generator expressions``\\nto make the choice based on the build configuration.\\nThe ``.vcxproj`` file entry for the source file will be\\nmarked either ``DeploymentContent`` or ``ExcludedFromBuild``\\nfor values ``1`` and ``0``, respectively.\\n",
        "property"
    ],
    "VS_DEPLOYMENT_LOCATION": [
        "VS_DEPLOYMENT_LOCATION\\n----------------------\\n\\nSpecifies the deployment location for a content source file with a Windows\\nPhone or Windows Store application when built with a Visual Studio generator.\\nThis property is only applicable when using ``VS_DEPLOYMENT_CONTENT``.\\nThe value represent the path relative to the app package and applies to all\\nconfigurations.\\n",
        "property"
    ],
    "VS_DESKTOP_EXTENSIONS_VERSION": [
        "VS_DESKTOP_EXTENSIONS_VERSION\\n-----------------------------\\n\\nVisual Studio Windows 10 Desktop Extensions Version\\n\\nSpecifies the version of the Desktop Extensions that should be included in the\\ntarget. For example ``10.0.10240.0``. If the value is not specified, the Desktop\\nExtensions will not be included. To use the same version of the extensions as\\nthe Windows 10 SDK that is being used, you can use the\\n``CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION`` variable.\\n",
        "property"
    ],
    "VS_DOTNET_REFERENCEPROP_<refname>_TAG_<tagname>": [
        "VS_DOTNET_REFERENCEPROP_<refname>_TAG_<tagname>\\n-----------------------------------------------\\n\\nDefines an XML property ``<tagname>`` for a .NET reference\\n``<refname>``.\\n\\nReference properties can be set for .NET references which are\\ndefined by the target properties ``VS_DOTNET_REFERENCES``,\\n``VS_DOTNET_REFERENCE_<refname>``\\nand also for project references to other C# targets which are\\nestablished by ``target_link_libraries()``.\\n\\nThis property is only applicable to C# targets and Visual Studio\\ngenerators 2010 and later.\\n",
        "property"
    ],
    "VS_DOTNET_REFERENCES": [
        "VS_DOTNET_REFERENCES\\n--------------------\\n\\nVisual Studio managed project .NET references\\n\\nAdds one or more semicolon-delimited .NET references to a generated\\nVisual Studio project.  For example, \\\"System;System.Windows.Forms\\\".\\n",
        "property"
    ],
    "VS_DOTNET_REFERENCES_COPY_LOCAL": [
        "VS_DOTNET_REFERENCES_COPY_LOCAL\\n-------------------------------\\n\\nSets the **Copy Local** property for all .NET hint references in the target\\n\\nBoolean property to enable/disable copying of .NET hint references to\\noutput directory. The default is ``ON``.\\n",
        "property"
    ],
    "VS_DOTNET_REFERENCE_<refname>": [
        "VS_DOTNET_REFERENCE_<refname>\\n-----------------------------\\n\\nVisual Studio managed project .NET reference with name ``<refname>``\\nand hint path.\\n\\nAdds one .NET reference to generated Visual Studio project. The\\nreference will have the name ``<refname>`` and will point to the\\nassembly given as value of the property.\\n\\nSee also ``VS_DOTNET_REFERENCES`` and\\n``VS_DOTNET_REFERENCES_COPY_LOCAL``\\n",
        "property"
    ],
    "VS_DOTNET_TARGET_FRAMEWORK_VERSION": [
        "VS_DOTNET_TARGET_FRAMEWORK_VERSION\\n----------------------------------\\n\\nSpecify the .NET target framework version.\\n\\nUsed to specify the .NET target framework version for C++/CLI.  For\\nexample, \\\"v4.5\\\".\\n\\nThis property is deprecated and should not be used anymore. Use\\n``DOTNET_TARGET_FRAMEWORK_VERSION`` instead.\\n",
        "property"
    ],
    "VS_GLOBAL_<variable>": [
        "VS_GLOBAL_<variable>\\n--------------------\\n\\nVisual Studio project-specific global variable.\\n\\nTell the Visual Studio generator to set the global variable\\n'<variable>' to a given value in the generated Visual Studio project.\\nIgnored on other generators.  Qt integration works better if\\nVS_GLOBAL_QtVersion is set to the version FindQt4.cmake found.  For\\nexample, \\\"4.7.3\\\"\\n",
        "property"
    ],
    "VS_GLOBAL_KEYWORD": [
        "VS_GLOBAL_KEYWORD\\n-----------------\\n\\nVisual Studio project keyword for VS 10 (2010) and newer.\\n\\nSets the \\\"keyword\\\" attribute for a generated Visual Studio project.\\nDefaults to \\\"Win32Proj\\\".  You may wish to override this value with\\n\\\"ManagedCProj\\\", for example, in a Visual Studio managed C++ unit test\\nproject.\\n\\nUse the ``VS_KEYWORD`` target property to set the\\nkeyword for Visual Studio 9 (2008) and older.\\n",
        "property"
    ],
    "VS_GLOBAL_PROJECT_TYPES": [
        "VS_GLOBAL_PROJECT_TYPES\\n-----------------------\\n\\nVisual Studio project type(s).\\n\\nCan be set to one or more UUIDs recognized by Visual Studio to\\nindicate the type of project.  This value is copied verbatim into the\\ngenerated project file.  Example for a managed C++ unit testing\\nproject:\\n\\n::\\n\\n {3AC096D0-A1C2-E12C-1390-A8335801FDAB};{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\\n\\nUUIDs are semicolon-delimited.\\n",
        "property"
    ],
    "VS_GLOBAL_ROOTNAMESPACE": [
        "VS_GLOBAL_ROOTNAMESPACE\\n-----------------------\\n\\nVisual Studio project root namespace.\\n\\nSets the \\\"RootNamespace\\\" attribute for a generated Visual Studio\\nproject.  The attribute will be generated only if this is set.\\n",
        "property"
    ],
    "VS_GLOBAL_SECTION_POST_<section>": [
        "VS_GLOBAL_SECTION_POST_<section>\\n--------------------------------\\n\\nSpecify a postSolution global section in Visual Studio.\\n\\nSetting a property like this generates an entry of the following form\\nin the solution file:\\n\\n::\\n\\n GlobalSection(<section>) = postSolution\\n   <contents based on property value>\\n EndGlobalSection\\n\\nThe property must be set to a semicolon-separated list of key=value\\npairs.  Each such pair will be transformed into an entry in the\\nsolution global section.  Whitespace around key and value is ignored.\\nList elements which do not contain an equal sign are skipped.\\n\\nThis property only works for Visual Studio 9 and above; it is ignored\\non other generators.  The property only applies when set on a\\ndirectory whose CMakeLists.txt contains a project() command.\\n\\nNote that CMake generates postSolution sections ExtensibilityGlobals\\nand ExtensibilityAddIns by default.  If you set the corresponding\\nproperty, it will override the default section.  For example, setting\\nVS_GLOBAL_SECTION_POST_ExtensibilityGlobals will override the default\\ncontents of the ExtensibilityGlobals section, while keeping\\nExtensibilityAddIns on its default.  However, CMake will always\\nadd a ``SolutionGuid`` to the ``ExtensibilityGlobals`` section\\nif it is not specified explicitly.\\n",
        "property"
    ],
    "VS_GLOBAL_SECTION_PRE_<section>": [
        "VS_GLOBAL_SECTION_PRE_<section>\\n-------------------------------\\n\\nSpecify a preSolution global section in Visual Studio.\\n\\nSetting a property like this generates an entry of the following form\\nin the solution file:\\n\\n::\\n\\n GlobalSection(<section>) = preSolution\\n   <contents based on property value>\\n EndGlobalSection\\n\\nThe property must be set to a semicolon-separated list of key=value\\npairs.  Each such pair will be transformed into an entry in the\\nsolution global section.  Whitespace around key and value is ignored.\\nList elements which do not contain an equal sign are skipped.\\n\\nThis property only works for Visual Studio 9 and above; it is ignored\\non other generators.  The property only applies when set on a\\ndirectory whose CMakeLists.txt contains a project() command.\\n",
        "property"
    ],
    "VS_INCLUDE_IN_VSIX": [
        "VS_INCLUDE_IN_VSIX\\n------------------\\n\\nBoolean property to specify if the file should be included within a VSIX\\nextension package. This is needed for development of Visual Studio\\nextensions.\\n",
        "property"
    ],
    "VS_IOT_EXTENSIONS_VERSION": [
        "VS_IOT_EXTENSIONS_VERSION\\n-------------------------\\n\\nVisual Studio Windows 10 IoT Extensions Version\\n\\nSpecifies the version of the IoT Extensions that should be included in the\\ntarget. For example ``10.0.10240.0``. If the value is not specified, the IoT\\nExtensions will not be included. To use the same version of the extensions as\\nthe Windows 10 SDK that is being used, you can use the\\n``CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION`` variable.\\n",
        "property"
    ],
    "VS_IOT_STARTUP_TASK": [
        "VS_IOT_STARTUP_TASK\\n-------------------\\n\\nVisual Studio Windows 10 IoT Continuous Background Task\\n\\nSpecifies that the target should be compiled as a Continuous Background Task library.\\n",
        "property"
    ],
    "VS_KEYWORD": [
        "VS_KEYWORD\\n----------\\n\\nVisual Studio project keyword for VS 9 (2008) and older.\\n\\nCan be set to change the visual studio keyword, for example Qt\\nintegration works better if this is set to Qt4VSv1.0.\\n\\nUse the ``VS_GLOBAL_KEYWORD`` target property to set the\\nkeyword for Visual Studio 10 (2010) and newer.\\n",
        "property"
    ],
    "VS_MOBILE_EXTENSIONS_VERSION": [
        "VS_MOBILE_EXTENSIONS_VERSION\\n----------------------------\\n\\nVisual Studio Windows 10 Mobile Extensions Version\\n\\nSpecifies the version of the Mobile Extensions that should be included in the\\ntarget. For example ``10.0.10240.0``. If the value is not specified, the Mobile\\nExtensions will not be included. To use the same version of the extensions as\\nthe Windows 10 SDK that is being used, you can use the\\n``CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION`` variable.\\n",
        "property"
    ],
    "VS_RESOURCE_GENERATOR": [
        "VS_RESOURCE_GENERATOR\\n---------------------\\n\\nThis property allows to specify the resource generator to be used\\non this file. It defaults to ``PublicResXFileCodeGenerator`` if\\nnot set.\\n\\nThis property only applies to C# projects.\\n",
        "property"
    ],
    "VS_SCC_AUXPATH": [
        "VS_SCC_AUXPATH\\n--------------\\n\\nVisual Studio Source Code Control Aux Path.\\n\\nCan be set to change the visual studio source code control auxpath\\nproperty.\\n",
        "property"
    ],
    "VS_SCC_LOCALPATH": [
        "VS_SCC_LOCALPATH\\n----------------\\n\\nVisual Studio Source Code Control Local Path.\\n\\nCan be set to change the visual studio source code control local path\\nproperty.\\n",
        "property"
    ],
    "VS_SCC_PROJECTNAME": [
        "VS_SCC_PROJECTNAME\\n------------------\\n\\nVisual Studio Source Code Control Project.\\n\\nCan be set to change the visual studio source code control project\\nname property.\\n",
        "property"
    ],
    "VS_SCC_PROVIDER": [
        "VS_SCC_PROVIDER\\n---------------\\n\\nVisual Studio Source Code Control Provider.\\n\\nCan be set to change the visual studio source code control provider\\nproperty.\\n",
        "property"
    ],
    "VS_SDK_REFERENCES": [
        "VS_SDK_REFERENCES\\n-----------------\\n\\nVisual Studio project SDK references.\\nSpecify a :ref:`;-list <CMake Language Lists>` of SDK references\\nto be added to a generated Visual Studio project, e.g.\\n``Microsoft.AdMediatorWindows81, Version=1.0``.\\n",
        "property"
    ],
    "VS_SHADER_DISABLE_OPTIMIZATIONS": [
        "VS_SHADER_DISABLE_OPTIMIZATIONS\\n-------------------------------\\n\\nDisable compiler optimizations for an ``.hlsl`` source file.  This adds the\\n``-Od`` flag to the command line for the FxCompiler tool.  Specify the value\\n``true`` for this property to disable compiler optimizations.\\n",
        "property"
    ],
    "VS_SHADER_ENABLE_DEBUG": [
        "VS_SHADER_ENABLE_DEBUG\\n----------------------\\n\\nEnable debugging information for an ``.hlsl`` source file.  This adds the\\n``-Zi`` flag to the command line for the FxCompiler tool.  Specify the value\\n``true`` to generate debugging information for the compiled shader.\\n",
        "property"
    ],
    "VS_SHADER_ENTRYPOINT": [
        "VS_SHADER_ENTRYPOINT\\n--------------------\\n\\nSpecifies the name of the entry point for the shader of a ``.hlsl`` source\\nfile.\\n",
        "property"
    ],
    "VS_SHADER_FLAGS": [
        "VS_SHADER_FLAGS\\n---------------\\n\\nSet additional VS shader flags of a ``.hlsl`` source file.\\n",
        "property"
    ],
    "VS_SHADER_MODEL": [
        "VS_SHADER_MODEL\\n---------------\\n\\nSpecifies the shader model of a ``.hlsl`` source file. Some shader types can\\nonly be used with recent shader models\\n",
        "property"
    ],
    "VS_SHADER_OBJECT_FILE_NAME": [
        "VS_SHADER_OBJECT_FILE_NAME\\n--------------------------\\n\\nSpecifies a file name for the compiled shader object file for an ``.hlsl``\\nsource file.  This adds the ``-Fo`` flag to the command line for the FxCompiler\\ntool.\\n",
        "property"
    ],
    "VS_SHADER_OUTPUT_HEADER_FILE": [
        "VS_SHADER_OUTPUT_HEADER_FILE\\n----------------------------\\n\\nSet filename for output header file containing object code of a ``.hlsl``\\nsource file.\\n",
        "property"
    ],
    "VS_SHADER_TYPE": [
        "VS_SHADER_TYPE\\n--------------\\n\\nSet the VS shader type of a ``.hlsl`` source file.\\n",
        "property"
    ],
    "VS_SHADER_VARIABLE_NAME": [
        "VS_SHADER_VARIABLE_NAME\\n-----------------------\\n\\nSet name of variable in header file containing object code of a ``.hlsl``\\nsource file.\\n",
        "property"
    ],
    "VS_STARTUP_PROJECT": [
        "VS_STARTUP_PROJECT\\n------------------\\n\\nSpecify the default startup project in a Visual Studio solution.\\n\\nThe :ref:`Visual Studio Generators` create a ``.sln`` file for each directory\\nwhose ``CMakeLists.txt`` file calls the ``project()`` command.  Set this\\nproperty in the same directory as a ``project()`` command call (e.g. in\\nthe top-level ``CMakeLists.txt`` file) to specify the default startup project\\nfor the correpsonding solution file.\\n\\nThe property must be set to the name of an existing target.  This\\nwill cause that project to be listed first in the generated solution\\nfile causing Visual Studio to make it the startup project if the\\nsolution has never been opened before.\\n\\nIf this property is not specified, then the ``ALL_BUILD`` project\\nwill be the default.\\n",
        "property"
    ],
    "VS_TOOL_OVERRIDE": [
        "VS_TOOL_OVERRIDE\\n----------------\\n\\nOverride the default Visual Studio tool that will be applied to the source file\\nwith a new tool not based on the extension of the file.\\n",
        "property"
    ],
    "VS_USER_PROPS": [
        "VS_USER_PROPS\\n-------------\\n\\nSets the user props file to be included in the visual studio\\nC++ project file. The standard path is\\n``$(UserRootDir)\\\\\\\\Microsoft.Cpp.$(Platform).user.props``, which is\\nin most cases the same as\\n``%LOCALAPPDATA%\\\\\\\\Microsoft\\\\\\\\MSBuild\\\\\\\\v4.0\\\\\\\\Microsoft.Cpp.Win32.user.props``\\nor ``%LOCALAPPDATA%\\\\\\\\Microsoft\\\\\\\\MSBuild\\\\\\\\v4.0\\\\\\\\Microsoft.Cpp.x64.user.props``.\\n\\nThe ``*.user.props`` files can be used for Visual Studio wide\\nconfiguration which is independent from cmake.\\n",
        "property"
    ],
    "VS_WINDOWS_TARGET_PLATFORM_MIN_VERSION": [
        "VS_WINDOWS_TARGET_PLATFORM_MIN_VERSION\\n--------------------------------------\\n\\nVisual Studio Windows Target Platform Minimum Version\\n\\nFor Windows 10. Specifies the minimum version of the OS that is being\\ntargeted. For example ``10.0.10240.0``. If the value is not specified, the\\nvalue of ``CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION`` will be used on\\nWindowsStore projects otherwise the target platform minimum version will not\\nbe specified for the project.\\n",
        "property"
    ],
    "VS_WINRT_COMPONENT": [
        "VS_WINRT_COMPONENT\\n------------------\\n\\nMark a target as a Windows Runtime component for the Visual Studio generator.\\nCompile the target with ``C++/CX`` language extensions for Windows Runtime.\\nFor ``SHARED`` and ``MODULE`` libraries, this also defines the\\n``_WINRT_DLL`` preprocessor macro.\\n\\n.. note::\\n  Currently this is implemented only by Visual Studio generators.\\n  Support may be added to other generators in the future.\\n",
        "property"
    ],
    "VS_WINRT_EXTENSIONS": [
        "VS_WINRT_EXTENSIONS\\n-------------------\\n\\nDeprecated.  Use ``VS_WINRT_COMPONENT`` instead.\\nThis property was an experimental partial implementation of that one.\\n",
        "property"
    ],
    "VS_WINRT_REFERENCES": [
        "VS_WINRT_REFERENCES\\n-------------------\\n\\nVisual Studio project Windows Runtime Metadata references\\n\\nAdds one or more semicolon-delimited WinRT references to a generated\\nVisual Studio project.  For example, \\\"Windows;Windows.UI.Core\\\".\\n",
        "property"
    ],
    "VS_XAML_TYPE": [
        "VS_XAML_TYPE\\n------------\\n\\nMark a XAML source file as a different type than the default ``Page``.\\nThe most common usage would be to set the default App.xaml file as\\nApplicationDefinition.\\n",
        "property"
    ],
    "WILL_FAIL": [
        "WILL_FAIL\\n---------\\n\\nIf set to true, this will invert the pass/fail flag of the test.\\n\\nThis property can be used for tests that are expected to fail and\\nreturn a non zero return code.\\n",
        "property"
    ],
    "WIN32_EXECUTABLE": [
        "WIN32_EXECUTABLE\\n----------------\\n\\nBuild an executable with a WinMain entry point on windows.\\n\\nWhen this property is set to true the executable when linked on\\nWindows will be created with a WinMain() entry point instead of just\\nmain().  This makes it a GUI executable instead of a console\\napplication.  See the CMAKE_MFC_FLAG variable documentation to\\nconfigure use of MFC for WinMain executables.  This property is\\ninitialized by the value of the variable CMAKE_WIN32_EXECUTABLE if it\\nis set when a target is created.\\n",
        "property"
    ],
    "WINDOWS_EXPORT_ALL_SYMBOLS": [
        "WINDOWS_EXPORT_ALL_SYMBOLS\\n--------------------------\\n\\nThis property is implemented only for MS-compatible tools on Windows.\\n\\nEnable this boolean property to automatically create a module definition\\n(``.def``) file with all global symbols found in the input ``.obj`` files\\nfor a ``SHARED`` library (or executable with ``ENABLE_EXPORTS``)\\non Windows.  The module definition file will be passed to the linker\\ncausing all symbols to be exported from the ``.dll``.\\nFor global *data* symbols, ``__declspec(dllimport)`` must still be used when\\ncompiling against the code in the ``.dll``.  All other function symbols will\\nbe automatically exported and imported by callers.  This simplifies porting\\nprojects to Windows by reducing the need for explicit ``dllexport`` markup,\\neven in ``C++`` classes.\\n\\nWhen this property is enabled, zero or more ``.def`` files may also be\\nspecified as source files of the target.  The exports named by these files\\nwill be merged with those detected from the object files to generate a\\nsingle module definition file to be passed to the linker.  This can be\\nused to export symbols from a ``.dll`` that are not in any of its object\\nfiles but are added by the linker from dependencies (e.g. ``msvcrt.lib``).\\n\\nThis property is initialized by the value of\\nthe ``CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS`` variable if it is set\\nwhen a target is created.\\n",
        "property"
    ],
    "WORKING_DIRECTORY": [
        "WORKING_DIRECTORY\\n-----------------\\n\\nThe directory from which the test executable will be called.\\n\\nIf this is not set, the test will be run with the working directory set to the\\nbinary directory associated with where the test was created (i.e. the\\n``CMAKE_CURRENT_BINARY_DIR`` for where ``add_test()`` was\\ncalled).\\n",
        "property"
    ],
    "WRAP_EXCLUDE": [
        "WRAP_EXCLUDE\\n------------\\n\\nExclude this source file from any code wrapping techniques.\\n\\nSome packages can wrap source files into alternate languages to\\nprovide additional functionality.  For example, C++ code can be\\nwrapped into Java or Python etc using SWIG etc.  If WRAP_EXCLUDE is\\nset to true (1 etc) that indicates that this source file should not be\\nwrapped.\\n",
        "property"
    ],
    "XCODE_ATTRIBUTE_<an-attribute>": [
        "XCODE_ATTRIBUTE_<an-attribute>\\n------------------------------\\n\\nSet Xcode target attributes directly.\\n\\nTell the Xcode generator to set '<an-attribute>' to a given value in\\nthe generated Xcode project.  Ignored on other generators.\\n\\nSee the ``CMAKE_XCODE_ATTRIBUTE_<an-attribute>`` variable\\nto set attributes on all targets in a directory tree.\\n\\nContents of ``XCODE_ATTRIBUTE_<an-attribute>`` may use\\n\\\"generator expressions\\\" with the syntax ``$<...>``.  See the\\n``cmake-generator-expressions(7)`` manual for available\\nexpressions.  See the ``cmake-buildsystem(7)`` manual\\nfor more on defining buildsystem properties.\\n",
        "property"
    ],
    "XCODE_EMIT_EFFECTIVE_PLATFORM_NAME": [
        "XCODE_EMIT_EFFECTIVE_PLATFORM_NAME\\n----------------------------------\\n\\nControl emission of ``EFFECTIVE_PLATFORM_NAME`` by the Xcode generator.\\n\\nIt is required for building the same target with multiple SDKs. A\\ncommon use case is the parallel use of ``iphoneos`` and\\n``iphonesimulator`` SDKs.\\n\\nThree different states possible that control when the Xcode generator\\nemits the ``EFFECTIVE_PLATFORM_NAME`` variable:\\n\\n- If set to ``ON`` it will always be emitted\\n- If set to ``OFF`` it will never be emitted\\n- If unset (the default) it will only be emitted when the project was\\n  configured for an embedded Xcode SDK like iOS, tvOS, watchOS or any\\n  of the simulators.\\n\\n.. note::\\n\\n  When this behavior is enable for generated Xcode projects, the\\n  ``EFFECTIVE_PLATFORM_NAME`` variable will leak into\\n  ``Generator expressions``\\n  like ``TARGET_FILE`` and will render those mostly unusable.\\n",
        "property"
    ],
    "XCODE_EXPLICIT_FILE_TYPE": [
        "XCODE_EXPLICIT_FILE_TYPE\\n------------------------\\n\\nSet the Xcode ``explicitFileType`` attribute on its reference to a\\nsource file.  CMake computes a default based on file extension but\\ncan be told explicitly with this property.\\n\\nSee also ``XCODE_LAST_KNOWN_FILE_TYPE``.\\n\\nXCODE_EXPLICIT_FILE_TYPE\\n------------------------\\n\\nSet the Xcode ``explicitFileType`` attribute on its reference to a\\ntarget.  CMake computes a default based on target type but\\ncan be told explicitly with this property.\\n\\nSee also ``XCODE_PRODUCT_TYPE``.\\n",
        "property"
    ],
    "XCODE_FILE_ATTRIBUTES": [
        "XCODE_FILE_ATTRIBUTES\\n---------------------\\n\\nAdd values to the Xcode ``ATTRIBUTES`` setting on its reference to a\\nsource file.  Among other things, this can be used to set the role on\\na mig file::\\n\\n set_source_files_properties(defs.mig\\n     PROPERTIES\\n         XCODE_FILE_ATTRIBUTES \\\"Client;Server\\\"\\n )\\n",
        "property"
    ],
    "XCODE_LAST_KNOWN_FILE_TYPE": [
        "XCODE_LAST_KNOWN_FILE_TYPE\\n--------------------------\\n\\nSet the Xcode ``lastKnownFileType`` attribute on its reference to a\\nsource file.  CMake computes a default based on file extension but\\ncan be told explicitly with this property.\\n\\nSee also ``XCODE_EXPLICIT_FILE_TYPE``, which is preferred\\nover this property if set.\\n",
        "property"
    ],
    "XCODE_PRODUCT_TYPE": [
        "XCODE_PRODUCT_TYPE\\n------------------\\n\\nSet the Xcode ``productType`` attribute on its reference to a\\ntarget.  CMake computes a default based on target type but\\ncan be told explicitly with this property.\\n\\nSee also ``XCODE_EXPLICIT_FILE_TYPE``.\\n",
        "property"
    ],
    "XCODE_SCHEME_ADDRESS_SANITIZER": [
        "XCODE_SCHEME_ADDRESS_SANITIZER\\n------------------------------\\n\\nWhether to enable ``Address Sanitizer`` in the Diagnostics\\nsection of the generated Xcode scheme.\\n\\nThis property is initialized by the value of the variable\\n``CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER`` if it is set\\nwhen a target is created.\\n\\nPlease refer to the ``CMAKE_XCODE_GENERATE_SCHEME`` variable\\ndocumentation to see all Xcode schema related properties.\\n",
        "property"
    ],
    "XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN": [
        "XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN\\n-----------------------------------------------\\n\\nWhether to enable ``Detect use of stack after return``\\nin the Diagnostics section of the generated Xcode scheme.\\n\\nThis property is initialized by the value of the variable\\n``CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN``\\nif it is set when a target is created.\\n\\nPlease refer to the ``CMAKE_XCODE_GENERATE_SCHEME`` variable\\ndocumentation to see all Xcode schema related properties.\\n",
        "property"
    ],
    "XCODE_SCHEME_ARGUMENTS": [
        "XCODE_SCHEME_ARGUMENTS\\n----------------------\\n\\nSpecify command line arguments that should be added to the Arguments\\nsection of the generated Xcode scheme.\\n\\nIf set to a list of arguments those will be added to the scheme.\\n\\nPlease refer to the ``CMAKE_XCODE_GENERATE_SCHEME`` variable\\ndocumentation to see all Xcode schema related properties.\\n",
        "property"
    ],
    "XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER": [
        "XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER\\n----------------------------------------\\n\\nWhether to disable the ``Main Thread Checker``\\nin the Diagnostics section of the generated Xcode scheme.\\n\\nThis property is initialized by the value of the variable\\n``CMAKE_XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER``\\nif it is set when a target is created.\\n\\nPlease refer to the ``CMAKE_XCODE_GENERATE_SCHEME`` variable\\ndocumentation to see all Xcode schema related properties.\\n",
        "property"
    ],
    "XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS": [
        "XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS\\n----------------------------------\\n\\nWhether to enable ``Dynamic Library Loads``\\nin the Diagnostics section of the generated Xcode scheme.\\n\\nThis property is initialized by the value of the variable\\n``CMAKE_XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS`` if it is set\\nwhen a target is created.\\n\\nPlease refer to the ``CMAKE_XCODE_GENERATE_SCHEME`` variable\\ndocumentation to see all Xcode schema related properties.\\n",
        "property"
    ],
    "XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE": [
        "XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE\\n-------------------------------------\\n\\nWhether to enable ``Dynamic Linker API usage``\\nin the Diagnostics section of the generated Xcode scheme.\\n\\nThis property is initialized by the value of the variable\\n``CMAKE_XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE`` if it is set\\nwhen a target is created.\\n\\nPlease refer to the ``CMAKE_XCODE_GENERATE_SCHEME`` variable\\ndocumentation to see all Xcode schema related properties.\\n",
        "property"
    ],
    "XCODE_SCHEME_ENVIRONMENT": [
        "XCODE_SCHEME_ENVIRONMENT\\n------------------------\\n\\nSpecify environment variables that should be added to the Arguments\\nsection of the generated Xcode scheme.\\n\\nIf set to a list of environment variables and values of the form\\n``MYVAR=value`` those environment variables will be added to the\\nscheme.\\n\\nPlease refer to the ``CMAKE_XCODE_GENERATE_SCHEME`` variable\\ndocumentation to see all Xcode schema related properties.\\n",
        "property"
    ],
    "XCODE_SCHEME_EXECUTABLE": [
        "XCODE_SCHEME_EXECUTABLE\\n-----------------------\\n\\nSpecify path to executable in the Info section of the generated\\nXcode scheme. If not set the schema generator will select the\\ncurrent target if it is actually executable.\\n\\nPlease refer to the ``CMAKE_XCODE_GENERATE_SCHEME`` variable\\ndocumentation to see all Xcode schema related properties.\\n",
        "property"
    ],
    "XCODE_SCHEME_GUARD_MALLOC": [
        "XCODE_SCHEME_GUARD_MALLOC\\n------------------------------\\n\\nWhether to enable ``Guard Malloc``\\nin the Diagnostics section of the generated Xcode scheme.\\n\\nThis property is initialized by the value of the variable\\n``CMAKE_XCODE_SCHEME_GUARD_MALLOC`` if it is set\\nwhen a target is created.\\n\\nPlease refer to the ``CMAKE_XCODE_GENERATE_SCHEME`` variable\\ndocumentation to see all Xcode schema related properties.\\n",
        "property"
    ],
    "XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP": [
        "XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP\\n-------------------------------------\\n\\nWhether to enable the ``Main Thread Checker`` option\\n``Pause on issues``\\nin the Diagnostics section of the generated Xcode scheme.\\n\\nThis property is initialized by the value of the variable\\n``CMAKE_XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP`` if it is set\\nwhen a target is created.\\n\\nPlease refer to the ``CMAKE_XCODE_GENERATE_SCHEME`` variable\\ndocumentation to see all Xcode schema related properties.\\n",
        "property"
    ],
    "XCODE_SCHEME_MALLOC_GUARD_EDGES": [
        "XCODE_SCHEME_MALLOC_GUARD_EDGES\\n-------------------------------\\n\\nWhether to enable ``Malloc Guard Edges``\\nin the Diagnostics section of the generated Xcode scheme.\\n\\nThis property is initialized by the value of the variable\\n``CMAKE_XCODE_SCHEME_MALLOC_GUARD_EDGES`` if it is set\\nwhen a target is created.\\n\\nPlease refer to the ``CMAKE_XCODE_GENERATE_SCHEME`` variable\\ndocumentation to see all Xcode schema related properties.\\n",
        "property"
    ],
    "XCODE_SCHEME_MALLOC_SCRIBBLE": [
        "XCODE_SCHEME_MALLOC_SCRIBBLE\\n------------------------------\\n\\nWhether to enable ``Malloc Scribble``\\nin the Diagnostics section of the generated Xcode scheme.\\n\\nThis property is initialized by the value of the variable\\n``CMAKE_XCODE_SCHEME_MALLOC_SCRIBBLE`` if it is set\\nwhen a target is created.\\n\\nPlease refer to the ``CMAKE_XCODE_GENERATE_SCHEME`` variable\\ndocumentation to see all Xcode schema related properties.\\n",
        "property"
    ],
    "XCODE_SCHEME_MALLOC_STACK": [
        "XCODE_SCHEME_MALLOC_STACK\\n-------------------------\\n\\nWhether to enable ``Malloc Stack`` in the Diagnostics\\nsection of the generated Xcode scheme.\\n\\nThis property is initialized by the value of the variable\\n``CMAKE_XCODE_SCHEME_MALLOC_STACK`` if it is set\\nwhen a target is created.\\n\\nPlease refer to the ``CMAKE_XCODE_GENERATE_SCHEME`` variable\\ndocumentation to see all Xcode schema related properties.\\n",
        "property"
    ],
    "XCODE_SCHEME_THREAD_SANITIZER": [
        "XCODE_SCHEME_THREAD_SANITIZER\\n-----------------------------\\n\\nWhether to enable ``Thread Sanitizer`` in the Diagnostics\\nsection of the generated Xcode scheme.\\n\\nThis property is initialized by the value of the variable\\n``CMAKE_XCODE_SCHEME_THREAD_SANITIZER`` if it is set\\nwhen a target is created.\\n\\nPlease refer to the ``CMAKE_XCODE_GENERATE_SCHEME`` variable\\ndocumentation to see all Xcode schema related properties.\\n",
        "property"
    ],
    "XCODE_SCHEME_THREAD_SANITIZER_STOP": [
        "XCODE_SCHEME_THREAD_SANITIZER_STOP\\n----------------------------------\\n\\nWhether to enable ``Thread Sanitizer - Pause on issues``\\nin the Diagnostics section of the generated Xcode scheme.\\n\\nThis property is initialized by the value of the variable\\n``CMAKE_XCODE_SCHEME_THREAD_SANITIZER_STOP`` if it is set\\nwhen a target is created.\\n\\nPlease refer to the ``CMAKE_XCODE_GENERATE_SCHEME`` variable\\ndocumentation to see all Xcode schema related properties.\\n",
        "property"
    ],
    "XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER": [
        "XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER\\n------------------------------------------\\n\\nWhether to enable ``Undefined Behavior Sanitizer``\\nin the Diagnostics section of the generated Xcode scheme.\\n\\nThis property is initialized by the value of the variable\\n``CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER``\\nif it is set when a target is created.\\n\\nPlease refer to the ``CMAKE_XCODE_GENERATE_SCHEME`` variable\\ndocumentation to see all Xcode schema related properties.\\n",
        "property"
    ],
    "XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP": [
        "XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP\\n-----------------------------------------------\\n\\nWhether to enable ``Undefined Behavior Sanitizer`` option\\n``Pause on issues``\\nin the Diagnostics section of the generated Xcode scheme.\\n\\nThis property is initialized by the value of the variable\\n``CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP``\\nif it is set when a target is created.\\n\\nPlease refer to the ``CMAKE_XCODE_GENERATE_SCHEME`` variable\\ndocumentation to see all Xcode schema related properties.\\n",
        "property"
    ],
    "XCODE_SCHEME_ZOMBIE_OBJECTS": [
        "XCODE_SCHEME_ZOMBIE_OBJECTS\\n------------------------------\\n\\nWhether to enable ``Zombie Objects``\\nin the Diagnostics section of the generated Xcode scheme.\\n\\nThis property is initialized by the value of the variable\\n``CMAKE_XCODE_SCHEME_ZOMBIE_OBJECTS`` if it is set\\nwhen a target is created.\\n\\nPlease refer to the ``CMAKE_XCODE_GENERATE_SCHEME`` variable\\ndocumentation to see all Xcode schema related properties.\\n",
        "property"
    ],
    "XCTEST": [
        "XCTEST\\n------\\n\\nThis target is a XCTest CFBundle on the Mac.\\n\\nThis property will usually get set via the ``xctest_add_bundle()``\\nmacro in ``FindXCTest`` module.\\n\\nIf a module library target has this property set to true it will be\\nbuilt as a CFBundle when built on the Mac.  It will have the directory\\nstructure required for a CFBundle.\\n\\nThis property depends on ``BUNDLE`` to be effective.\\n",
        "property"
    ],
    "CMP0000": [
        "CMP0000\\n-------\\n\\nA minimum required CMake version must be specified.\\n\\nCMake requires that projects specify the version of CMake to which\\nthey have been written.  This policy has been put in place so users\\ntrying to build the project may be told when they need to update their\\nCMake.  Specifying a version also helps the project build with CMake\\nversions newer than that specified.  Use the cmake_minimum_required\\ncommand at the top of your main CMakeLists.txt file:\\n\\n::\\n\\n cmake_minimum_required(VERSION <major>.<minor>)\\n\\nwhere \\\"<major>.<minor>\\\" is the version of CMake you want to support\\n(such as \\\"2.6\\\").  The command will ensure that at least the given\\nversion of CMake is running and help newer versions be compatible with\\nthe project.  See documentation of cmake_minimum_required for details.\\n\\nNote that the command invocation must appear in the CMakeLists.txt\\nfile itself; a call in an included file is not sufficient.  However,\\nthe cmake_policy command may be called to set policy CMP0000 to OLD or\\nNEW behavior explicitly.  The OLD behavior is to silently ignore the\\nmissing invocation.  The NEW behavior is to issue an error instead of\\na warning.  An included file may set CMP0000 explicitly to affect how\\nthis policy is enforced for the main CMakeLists.txt file.\\n\\nThis policy was introduced in CMake version 2.6.0.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0001": [
        "CMP0001\\n-------\\n\\nCMAKE_BACKWARDS_COMPATIBILITY should no longer be used.\\n\\nThe OLD behavior is to check CMAKE_BACKWARDS_COMPATIBILITY and present\\nit to the user.  The NEW behavior is to ignore\\nCMAKE_BACKWARDS_COMPATIBILITY completely.\\n\\nIn CMake 2.4 and below the variable CMAKE_BACKWARDS_COMPATIBILITY was\\nused to request compatibility with earlier versions of CMake.  In\\nCMake 2.6 and above all compatibility issues are handled by policies\\nand the cmake_policy command.  However, CMake must still check\\nCMAKE_BACKWARDS_COMPATIBILITY for projects written for CMake 2.4 and\\nbelow.\\n\\nThis policy was introduced in CMake version 2.6.0.  CMake version\\n3.13.4 warns when the policy is not set and uses OLD behavior.  Use\\nthe cmake_policy command to set it to OLD or NEW explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0002": [
        "CMP0002\\n-------\\n\\nLogical target names must be globally unique.\\n\\nTargets names created with add_executable, add_library, or\\nadd_custom_target are logical build target names.  Logical target\\nnames must be globally unique because:\\n\\n::\\n\\n - Unique names may be referenced unambiguously both in CMake\\n   code and on make tool command lines.\\n - Logical names are used by Xcode and VS IDE generators\\n   to produce meaningful project names for the targets.\\n\\nThe logical name of executable and library targets does not have to\\ncorrespond to the physical file names built.  Consider using the\\nOUTPUT_NAME target property to create two targets with the same\\nphysical name while keeping logical names distinct.  Custom targets\\nmust simply have globally unique names (unless one uses the global\\nproperty ALLOW_DUPLICATE_CUSTOM_TARGETS with a Makefiles generator).\\n\\nThis policy was introduced in CMake version 2.6.0.  CMake version\\n3.13.4 warns when the policy is not set and uses OLD behavior.  Use\\nthe cmake_policy command to set it to OLD or NEW explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0003": [
        "CMP0003\\n-------\\n\\nLibraries linked via full path no longer produce linker search paths.\\n\\nThis policy affects how libraries whose full paths are NOT known are\\nfound at link time, but was created due to a change in how CMake deals\\nwith libraries whose full paths are known.  Consider the code\\n\\n::\\n\\n target_link_libraries(myexe /path/to/libA.so)\\n\\nCMake 2.4 and below implemented linking to libraries whose full paths\\nare known by splitting them on the link line into separate components\\nconsisting of the linker search path and the library name.  The\\nexample code might have produced something like\\n\\n::\\n\\n ... -L/path/to -lA ...\\n\\nin order to link to library A.  An analysis was performed to order\\nmultiple link directories such that the linker would find library A in\\nthe desired location, but there are cases in which this does not work.\\nCMake versions 2.6 and above use the more reliable approach of passing\\nthe full path to libraries directly to the linker in most cases.  The\\nexample code now produces something like\\n\\n::\\n\\n ... /path/to/libA.so ....\\n\\nUnfortunately this change can break code like\\n\\n::\\n\\n target_link_libraries(myexe /path/to/libA.so B)\\n\\nwhere \\\"B\\\" is meant to find \\\"/path/to/libB.so\\\".  This code is wrong\\nbecause the user is asking the linker to find library B but has not\\nprovided a linker search path (which may be added with the\\nlink_directories command).  However, with the old linking\\nimplementation the code would work accidentally because the linker\\nsearch path added for library A allowed library B to be found.\\n\\nIn order to support projects depending on linker search paths added by\\nlinking to libraries with known full paths, the OLD behavior for this\\npolicy will add the linker search paths even though they are not\\nneeded for their own libraries.  When this policy is set to OLD, CMake\\nwill produce a link line such as\\n\\n::\\n\\n ... -L/path/to /path/to/libA.so -lB ...\\n\\nwhich will allow library B to be found as it was previously.  When\\nthis policy is set to NEW, CMake will produce a link line such as\\n\\n::\\n\\n ... /path/to/libA.so -lB ...\\n\\nwhich more accurately matches what the project specified.\\n\\nThe setting for this policy used when generating the link line is that\\nin effect when the target is created by an add_executable or\\nadd_library command.  For the example described above, the code\\n\\n::\\n\\n cmake_policy(SET CMP0003 OLD) # or cmake_policy(VERSION 2.4)\\n add_executable(myexe myexe.c)\\n target_link_libraries(myexe /path/to/libA.so B)\\n\\nwill work and suppress the warning for this policy.  It may also be\\nupdated to work with the corrected linking approach:\\n\\n::\\n\\n cmake_policy(SET CMP0003 NEW) # or cmake_policy(VERSION 2.6)\\n link_directories(/path/to) # needed to find library B\\n add_executable(myexe myexe.c)\\n target_link_libraries(myexe /path/to/libA.so B)\\n\\nEven better, library B may be specified with a full path:\\n\\n::\\n\\n add_executable(myexe myexe.c)\\n target_link_libraries(myexe /path/to/libA.so /path/to/libB.so)\\n\\nWhen all items on the link line have known paths CMake does not check\\nthis policy so it has no effect.\\n\\nNote that the warning for this policy will be issued for at most one\\ntarget.  This avoids flooding users with messages for every target\\nwhen setting the policy once will probably fix all targets.\\n\\nThis policy was introduced in CMake version 2.6.0.  CMake version\\n3.13.4 warns when the policy is not set and uses OLD behavior.  Use\\nthe cmake_policy command to set it to OLD or NEW explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0004": [
        "CMP0004\\n-------\\n\\nLibraries linked may not have leading or trailing whitespace.\\n\\nCMake versions 2.4 and below silently removed leading and trailing\\nwhitespace from libraries linked with code like\\n\\n::\\n\\n target_link_libraries(myexe \\\" A \\\")\\n\\nThis could lead to subtle errors in user projects.\\n\\nThe OLD behavior for this policy is to silently remove leading and\\ntrailing whitespace.  The NEW behavior for this policy is to diagnose\\nthe existence of such whitespace as an error.  The setting for this\\npolicy used when checking the library names is that in effect when the\\ntarget is created by an add_executable or add_library command.\\n\\nThis policy was introduced in CMake version 2.6.0.  CMake version\\n3.13.4 warns when the policy is not set and uses OLD behavior.  Use\\nthe cmake_policy command to set it to OLD or NEW explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0005": [
        "CMP0005\\n-------\\n\\nPreprocessor definition values are now escaped automatically.\\n\\nThis policy determines whether or not CMake should generate escaped\\npreprocessor definition values added via add_definitions.  CMake\\nversions 2.4 and below assumed that only trivial values would be given\\nfor macros in add_definitions calls.  It did not attempt to escape\\nnon-trivial values such as string literals in generated build rules.\\nCMake versions 2.6 and above support escaping of most values, but\\ncannot assume the user has not added escapes already in an attempt to\\nwork around limitations in earlier versions.\\n\\nThe OLD behavior for this policy is to place definition values given\\nto add_definitions directly in the generated build rules without\\nattempting to escape anything.  The NEW behavior for this policy is to\\ngenerate correct escapes for all native build tools automatically.\\nSee documentation of the COMPILE_DEFINITIONS target property for\\nlimitations of the escaping implementation.\\n\\nThis policy was introduced in CMake version 2.6.0.  CMake version\\n3.13.4 warns when the policy is not set and uses OLD behavior.  Use\\nthe cmake_policy command to set it to OLD or NEW explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0006": [
        "CMP0006\\n-------\\n\\nInstalling MACOSX_BUNDLE targets requires a BUNDLE DESTINATION.\\n\\nThis policy determines whether the install(TARGETS) command must be\\ngiven a BUNDLE DESTINATION when asked to install a target with the\\nMACOSX_BUNDLE property set.  CMake 2.4 and below did not distinguish\\napplication bundles from normal executables when installing targets.\\nCMake 2.6 provides a BUNDLE option to the install(TARGETS) command\\nthat specifies rules specific to application bundles on the Mac.\\nProjects should use this option when installing a target with the\\nMACOSX_BUNDLE property set.\\n\\nThe OLD behavior for this policy is to fall back to the RUNTIME\\nDESTINATION if a BUNDLE DESTINATION is not given.  The NEW behavior\\nfor this policy is to produce an error if a bundle target is installed\\nwithout a BUNDLE DESTINATION.\\n\\nThis policy was introduced in CMake version 2.6.0.  CMake version\\n3.13.4 warns when the policy is not set and uses OLD behavior.  Use\\nthe cmake_policy command to set it to OLD or NEW explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0007": [
        "CMP0007\\n-------\\n\\nlist command no longer ignores empty elements.\\n\\nThis policy determines whether the list command will ignore empty\\nelements in the list.  CMake 2.4 and below list commands ignored all\\nempty elements in the list.  For example, a;b;;c would have length 3\\nand not 4.  The OLD behavior for this policy is to ignore empty list\\nelements.  The NEW behavior for this policy is to correctly count\\nempty elements in a list.\\n\\nThis policy was introduced in CMake version 2.6.0.  CMake version\\n3.13.4 warns when the policy is not set and uses OLD behavior.  Use\\nthe cmake_policy command to set it to OLD or NEW explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0008": [
        "CMP0008\\n-------\\n\\nLibraries linked by full-path must have a valid library file name.\\n\\nIn CMake 2.4 and below it is possible to write code like\\n\\n::\\n\\n target_link_libraries(myexe /full/path/to/somelib)\\n\\nwhere \\\"somelib\\\" is supposed to be a valid library file name such as\\n\\\"libsomelib.a\\\" or \\\"somelib.lib\\\".  For Makefile generators this\\nproduces an error at build time because the dependency on the full\\npath cannot be found.  For VS IDE and Xcode generators this used to\\nwork by accident because CMake would always split off the library\\ndirectory and ask the linker to search for the library by name\\n(-lsomelib or somelib.lib).  Despite the failure with Makefiles, some\\nprojects have code like this and build only with VS and/or Xcode.\\nThis version of CMake prefers to pass the full path directly to the\\nnative build tool, which will fail in this case because it does not\\nname a valid library file.\\n\\nThis policy determines what to do with full paths that do not appear\\nto name a valid library file.  The OLD behavior for this policy is to\\nsplit the library name from the path and ask the linker to search for\\nit.  The NEW behavior for this policy is to trust the given path and\\npass it directly to the native build tool unchanged.\\n\\nThis policy was introduced in CMake version 2.6.1.  CMake version\\n3.13.4 warns when the policy is not set and uses OLD behavior.  Use\\nthe cmake_policy command to set it to OLD or NEW explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0009": [
        "CMP0009\\n-------\\n\\nFILE GLOB_RECURSE calls should not follow symlinks by default.\\n\\nIn CMake 2.6.1 and below, FILE GLOB_RECURSE calls would follow through\\nsymlinks, sometimes coming up with unexpectedly large result sets\\nbecause of symlinks to top level directories that contain hundreds of\\nthousands of files.\\n\\nThis policy determines whether or not to follow symlinks encountered\\nduring a FILE GLOB_RECURSE call.  The OLD behavior for this policy is\\nto follow the symlinks.  The NEW behavior for this policy is not to\\nfollow the symlinks by default, but only if FOLLOW_SYMLINKS is given\\nas an additional argument to the FILE command.\\n\\nThis policy was introduced in CMake version 2.6.2.  CMake version\\n3.13.4 warns when the policy is not set and uses OLD behavior.  Use\\nthe cmake_policy command to set it to OLD or NEW explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0010": [
        "CMP0010\\n-------\\n\\nBad variable reference syntax is an error.\\n\\nIn CMake 2.6.2 and below, incorrect variable reference syntax such as\\na missing close-brace (\\\"${FOO\\\") was reported but did not stop\\nprocessing of CMake code.  This policy determines whether a bad\\nvariable reference is an error.  The OLD behavior for this policy is\\nto warn about the error, leave the string untouched, and continue.\\nThe NEW behavior for this policy is to report an error.\\n\\nIf ``CMP0053`` is set to ``NEW``, this policy has no effect\\nand is treated as always being ``NEW``.\\n\\nThis policy was introduced in CMake version 2.6.3.  CMake version\\n3.13.4 warns when the policy is not set and uses OLD behavior.  Use\\nthe cmake_policy command to set it to OLD or NEW explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0011": [
        "CMP0011\\n-------\\n\\nIncluded scripts do automatic cmake_policy PUSH and POP.\\n\\nIn CMake 2.6.2 and below, CMake Policy settings in scripts loaded by\\nthe include() and find_package() commands would affect the includer.\\nExplicit invocations of cmake_policy(PUSH) and cmake_policy(POP) were\\nrequired to isolate policy changes and protect the includer.  While\\nsome scripts intend to affect the policies of their includer, most do\\nnot.  In CMake 2.6.3 and above, include() and find_package() by\\ndefault PUSH and POP an entry on the policy stack around an included\\nscript, but provide a NO_POLICY_SCOPE option to disable it.  This\\npolicy determines whether or not to imply NO_POLICY_SCOPE for\\ncompatibility.  The OLD behavior for this policy is to imply\\nNO_POLICY_SCOPE for include() and find_package() commands.  The NEW\\nbehavior for this policy is to allow the commands to do their default\\ncmake_policy PUSH and POP.\\n\\nThis policy was introduced in CMake version 2.6.3.  CMake version\\n3.13.4 warns when the policy is not set and uses OLD behavior.  Use\\nthe cmake_policy command to set it to OLD or NEW explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0012": [
        "CMP0012\\n-------\\n\\nif() recognizes numbers and boolean constants.\\n\\nIn CMake versions 2.6.4 and lower the if() command implicitly\\ndereferenced arguments corresponding to variables, even those named\\nlike numbers or boolean constants, except for 0 and 1.  Numbers and\\nboolean constants such as true, false, yes, no, on, off, y, n,\\nnotfound, ignore (all case insensitive) were recognized in some cases\\nbut not all.  For example, the code \\\"if(TRUE)\\\" might have evaluated as\\nfalse.  Numbers such as 2 were recognized only in boolean expressions\\nlike \\\"if(NOT 2)\\\" (leading to false) but not as a single-argument like\\n\\\"if(2)\\\" (also leading to false).  Later versions of CMake prefer to\\ntreat numbers and boolean constants literally, so they should not be\\nused as variable names.\\n\\nThe OLD behavior for this policy is to implicitly dereference\\nvariables named like numbers and boolean constants.  The NEW behavior\\nfor this policy is to recognize numbers and boolean constants without\\ndereferencing variables with such names.\\n\\nThis policy was introduced in CMake version 2.8.0.  CMake version\\n3.13.4 warns when the policy is not set and uses OLD behavior.  Use\\nthe cmake_policy command to set it to OLD or NEW explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0013": [
        "CMP0013\\n-------\\n\\nDuplicate binary directories are not allowed.\\n\\nCMake 2.6.3 and below silently permitted add_subdirectory() calls to\\ncreate the same binary directory multiple times.  During build system\\ngeneration files would be written and then overwritten in the build\\ntree and could lead to strange behavior.  CMake 2.6.4 and above\\nexplicitly detect duplicate binary directories.  CMake 2.6.4 always\\nconsiders this case an error.  In CMake 2.8.0 and above this policy\\ndetermines whether or not the case is an error.  The OLD behavior for\\nthis policy is to allow duplicate binary directories.  The NEW\\nbehavior for this policy is to disallow duplicate binary directories\\nwith an error.\\n\\nThis policy was introduced in CMake version 2.8.0.  CMake version\\n3.13.4 warns when the policy is not set and uses OLD behavior.  Use\\nthe cmake_policy command to set it to OLD or NEW explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0014": [
        "CMP0014\\n-------\\n\\nInput directories must have CMakeLists.txt.\\n\\nCMake versions before 2.8 silently ignored missing CMakeLists.txt\\nfiles in directories referenced by add_subdirectory() or subdirs(),\\ntreating them as if present but empty.  In CMake 2.8.0 and above this\\npolicy determines whether or not the case is an error.  The OLD\\nbehavior for this policy is to silently ignore the problem.  The NEW\\nbehavior for this policy is to report an error.\\n\\nThis policy was introduced in CMake version 2.8.0.  CMake version\\n3.13.4 warns when the policy is not set and uses OLD behavior.  Use\\nthe cmake_policy command to set it to OLD or NEW explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0015": [
        "CMP0015\\n-------\\n\\nlink_directories() treats paths relative to the source dir.\\n\\nIn CMake 2.8.0 and lower the link_directories() command passed\\nrelative paths unchanged to the linker.  In CMake 2.8.1 and above the\\nlink_directories() command prefers to interpret relative paths with\\nrespect to CMAKE_CURRENT_SOURCE_DIR, which is consistent with\\ninclude_directories() and other commands.  The OLD behavior for this\\npolicy is to use relative paths verbatim in the linker command.  The\\nNEW behavior for this policy is to convert relative paths to absolute\\npaths by appending the relative path to CMAKE_CURRENT_SOURCE_DIR.\\n\\nThis policy was introduced in CMake version 2.8.1.  CMake version\\n3.13.4 warns when the policy is not set and uses OLD behavior.  Use\\nthe cmake_policy command to set it to OLD or NEW explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0016": [
        "CMP0016\\n-------\\n\\ntarget_link_libraries() reports error if its only argument is not a target.\\n\\nIn CMake 2.8.2 and lower the target_link_libraries() command silently\\nignored if it was called with only one argument, and this argument\\nwasn't a valid target.  In CMake 2.8.3 and above it reports an error\\nin this case.\\n\\nThis policy was introduced in CMake version 2.8.3.  CMake version\\n3.13.4 warns when the policy is not set and uses OLD behavior.  Use\\nthe cmake_policy command to set it to OLD or NEW explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0017": [
        "CMP0017\\n-------\\n\\nPrefer files from the CMake module directory when including from there.\\n\\nStarting with CMake 2.8.4, if a cmake-module shipped with CMake (i.e.\\nlocated in the CMake module directory) calls include() or\\nfind_package(), the files located in the CMake module directory are\\npreferred over the files in CMAKE_MODULE_PATH.  This makes sure that\\nthe modules belonging to CMake always get those files included which\\nthey expect, and against which they were developed and tested.  In all\\nother cases, the files found in CMAKE_MODULE_PATH still take\\nprecedence over the ones in the CMake module directory.  The OLD\\nbehavior is to always prefer files from CMAKE_MODULE_PATH over files\\nfrom the CMake modules directory.\\n\\nThis policy was introduced in CMake version 2.8.4.  CMake version\\n3.13.4 warns when the policy is not set and uses OLD behavior.  Use\\nthe cmake_policy command to set it to OLD or NEW explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0018": [
        "CMP0018\\n-------\\n\\nIgnore CMAKE_SHARED_LIBRARY_<Lang>_FLAGS variable.\\n\\nCMake 2.8.8 and lower compiled sources in SHARED and MODULE libraries\\nusing the value of the undocumented CMAKE_SHARED_LIBRARY_<Lang>_FLAGS\\nplatform variable.  The variable contained platform-specific flags\\nneeded to compile objects for shared libraries.  Typically it included\\na flag such as -fPIC for position independent code but also included\\nother flags needed on certain platforms.  CMake 2.8.9 and higher\\nprefer instead to use the POSITION_INDEPENDENT_CODE target property to\\ndetermine what targets should be position independent, and new\\nundocumented platform variables to select flags while ignoring\\nCMAKE_SHARED_LIBRARY_<Lang>_FLAGS completely.\\n\\nThe default for either approach produces identical compilation flags,\\nbut if a project modifies CMAKE_SHARED_LIBRARY_<Lang>_FLAGS from its\\noriginal value this policy determines which approach to use.\\n\\nThe OLD behavior for this policy is to ignore the\\nPOSITION_INDEPENDENT_CODE property for all targets and use the\\nmodified value of CMAKE_SHARED_LIBRARY_<Lang>_FLAGS for SHARED and\\nMODULE libraries.\\n\\nThe NEW behavior for this policy is to ignore\\nCMAKE_SHARED_LIBRARY_<Lang>_FLAGS whether it is modified or not and\\nhonor the POSITION_INDEPENDENT_CODE target property.\\n\\nThis policy was introduced in CMake version 2.8.9.  CMake version\\n3.13.4 warns when the policy is not set and uses OLD behavior.  Use\\nthe cmake_policy command to set it to OLD or NEW explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0019": [
        "CMP0019\\n-------\\n\\nDo not re-expand variables in include and link information.\\n\\nCMake 2.8.10 and lower re-evaluated values given to the\\ninclude_directories, link_directories, and link_libraries commands to\\nexpand any leftover variable references at the end of the\\nconfiguration step.  This was for strict compatibility with VERY early\\nCMake versions because all variable references are now normally\\nevaluated during CMake language processing.  CMake 2.8.11 and higher\\nprefer to skip the extra evaluation.\\n\\nThe OLD behavior for this policy is to re-evaluate the values for\\nstrict compatibility.  The NEW behavior for this policy is to leave\\nthe values untouched.\\n\\nThis policy was introduced in CMake version 2.8.11.  CMake version\\n3.13.4 warns when the policy is not set and uses OLD behavior.  Use\\nthe cmake_policy command to set it to OLD or NEW explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0020": [
        "CMP0020\\n-------\\n\\nAutomatically link Qt executables to qtmain target on Windows.\\n\\nCMake 2.8.10 and lower required users of Qt to always specify a link\\ndependency to the qtmain.lib static library manually on Windows.\\nCMake 2.8.11 gained the ability to evaluate generator expressions\\nwhile determining the link dependencies from IMPORTED targets.  This\\nallows CMake itself to automatically link executables which link to Qt\\nto the qtmain.lib library when using IMPORTED Qt targets.  For\\napplications already linking to qtmain.lib, this should have little\\nimpact.  For applications which supply their own alternative WinMain\\nimplementation and for applications which use the QAxServer library,\\nthis automatic linking will need to be disabled as per the\\ndocumentation.\\n\\nThe OLD behavior for this policy is not to link executables to\\nqtmain.lib automatically when they link to the QtCore IMPORTED target.\\nThe NEW behavior for this policy is to link executables to qtmain.lib\\nautomatically when they link to QtCore IMPORTED target.\\n\\nThis policy was introduced in CMake version 2.8.11.  CMake version\\n3.13.4 warns when the policy is not set and uses OLD behavior.  Use\\nthe cmake_policy command to set it to OLD or NEW explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0021": [
        "CMP0021\\n-------\\n\\nFatal error on relative paths in INCLUDE_DIRECTORIES target property.\\n\\nCMake 2.8.10.2 and lower allowed the INCLUDE_DIRECTORIES target\\nproperty to contain relative paths.  The base path for such relative\\nentries is not well defined.  CMake 2.8.12 issues a FATAL_ERROR if the\\nINCLUDE_DIRECTORIES property contains a relative path.\\n\\nThe OLD behavior for this policy is not to warn about relative paths\\nin the INCLUDE_DIRECTORIES target property.  The NEW behavior for this\\npolicy is to issue a FATAL_ERROR if INCLUDE_DIRECTORIES contains a\\nrelative path.\\n\\nThis policy was introduced in CMake version 2.8.12.  CMake version\\n3.13.4 warns when the policy is not set and uses OLD behavior.  Use\\nthe cmake_policy command to set it to OLD or NEW explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0022": [
        "CMP0022\\n-------\\n\\nINTERFACE_LINK_LIBRARIES defines the link interface.\\n\\nCMake 2.8.11 constructed the 'link interface' of a target from\\nproperties matching ``(IMPORTED_)?LINK_INTERFACE_LIBRARIES(_<CONFIG>)?``.\\nThe modern way to specify config-sensitive content is to use generator\\nexpressions and the ``IMPORTED_`` prefix makes uniform processing of the\\nlink interface with generator expressions impossible.  The\\nINTERFACE_LINK_LIBRARIES target property was introduced as a\\nreplacement in CMake 2.8.12.  This new property is named consistently\\nwith the INTERFACE_COMPILE_DEFINITIONS, INTERFACE_INCLUDE_DIRECTORIES\\nand INTERFACE_COMPILE_OPTIONS properties.  For in-build targets, CMake\\nwill use the INTERFACE_LINK_LIBRARIES property as the source of the\\nlink interface only if policy CMP0022 is NEW.  When exporting a target\\nwhich has this policy set to NEW, only the INTERFACE_LINK_LIBRARIES\\nproperty will be processed and generated for the IMPORTED target by\\ndefault.  A new option to the install(EXPORT) and export commands\\nallows export of the old-style properties for compatibility with\\ndownstream users of CMake versions older than 2.8.12.  The\\ntarget_link_libraries command will no longer populate the properties\\nmatching LINK_INTERFACE_LIBRARIES(_<CONFIG>)? if this policy is NEW.\\n\\nWarning-free future-compatible code which works with CMake 2.8.7 onwards\\ncan be written by using the ``LINK_PRIVATE`` and ``LINK_PUBLIC`` keywords\\nof ``target_link_libraries()``.\\n\\nThe OLD behavior for this policy is to ignore the\\nINTERFACE_LINK_LIBRARIES property for in-build targets.  The NEW\\nbehavior for this policy is to use the INTERFACE_LINK_LIBRARIES\\nproperty for in-build targets, and ignore the old properties matching\\n``(IMPORTED_)?LINK_INTERFACE_LIBRARIES(_<CONFIG>)?``.\\n\\nThis policy was introduced in CMake version 2.8.12.  CMake version\\n3.13.4 warns when the policy is not set and uses OLD behavior.  Use\\nthe cmake_policy command to set it to OLD or NEW explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0023": [
        "CMP0023\\n-------\\n\\nPlain and keyword target_link_libraries signatures cannot be mixed.\\n\\nCMake 2.8.12 introduced the target_link_libraries signature using the\\nPUBLIC, PRIVATE, and INTERFACE keywords to generalize the LINK_PUBLIC\\nand LINK_PRIVATE keywords introduced in CMake 2.8.7.  Use of\\nsignatures with any of these keywords sets the link interface of a\\ntarget explicitly, even if empty.  This produces confusing behavior\\nwhen used in combination with the historical behavior of the plain\\ntarget_link_libraries signature.  For example, consider the code:\\n\\n::\\n\\n target_link_libraries(mylib A)\\n target_link_libraries(mylib PRIVATE B)\\n\\nAfter the first line the link interface has not been set explicitly so\\nCMake would use the link implementation, A, as the link interface.\\nHowever, the second line sets the link interface to empty.  In order\\nto avoid this subtle behavior CMake now prefers to disallow mixing the\\nplain and keyword signatures of target_link_libraries for a single\\ntarget.\\n\\nThe OLD behavior for this policy is to allow keyword and plain\\ntarget_link_libraries signatures to be mixed.  The NEW behavior for\\nthis policy is to not to allow mixing of the keyword and plain\\nsignatures.\\n\\nThis policy was introduced in CMake version 2.8.12.  CMake version\\n3.13.4 warns when the policy is not set and uses OLD behavior.  Use\\nthe cmake_policy command to set it to OLD or NEW explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0024": [
        "CMP0024\\n-------\\n\\nDisallow include export result.\\n\\nCMake 2.8.12 and lower allowed use of the include() command with the\\nresult of the export() command.  This relies on the assumption that\\nthe export() command has an immediate effect at configure-time during\\na cmake run.  Certain properties of targets are not fully determined\\nuntil later at generate-time, such as the link language and complete\\nlist of link libraries.  Future refactoring will change the effect of\\nthe export() command to be executed at generate-time.  Use ALIAS\\ntargets instead in cases where the goal is to refer to targets by\\nanother name.\\n\\nThe OLD behavior for this policy is to allow including the result of\\nan export() command.  The NEW behavior for this policy is not to\\nallow including the result of an export() command.\\n\\nThis policy was introduced in CMake version 3.0.  CMake version\\n3.13.4 warns when the policy is not set and uses OLD behavior.  Use\\nthe cmake_policy command to set it to OLD or NEW explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0025": [
        "CMP0025\\n-------\\n\\nCompiler id for Apple Clang is now ``AppleClang``.\\n\\nCMake 3.0 and above recognize that Apple Clang is a different compiler\\nthan upstream Clang and that they have different version numbers.\\nCMake now prefers to present this to projects by setting the\\n``CMAKE_<LANG>_COMPILER_ID`` variable to ``AppleClang`` instead\\nof ``Clang``.  However, existing projects may assume the compiler id for\\nApple Clang is just ``Clang`` as it was in CMake versions prior to 3.0.\\nTherefore this policy determines for Apple Clang which compiler id to\\nreport in the ``CMAKE_<LANG>_COMPILER_ID`` variable after\\nlanguage ``<LANG>`` is enabled by the ``project()`` or\\n``enable_language()`` command.  The policy must be set prior\\nto the invocation of either command.\\n\\nThe OLD behavior for this policy is to use compiler id ``Clang``.  The\\nNEW behavior for this policy is to use compiler id ``AppleClang``.\\n\\nThis policy was introduced in CMake version 3.0.  Use the\\n``cmake_policy()`` command to set this policy to OLD or NEW explicitly.\\nUnlike most policies, CMake version 3.13.4 does *not* warn\\nby default when this policy is not set and simply uses OLD behavior.\\nSee documentation of the\\n``CMAKE_POLICY_WARNING_CMP0025``\\nvariable to control the warning.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0026": [
        "CMP0026\\n-------\\n\\nDisallow use of the LOCATION property for build targets.\\n\\nCMake 2.8.12 and lower allowed reading the LOCATION target\\nproperty (and configuration-specific variants) to\\ndetermine the eventual location of build targets.  This relies on the\\nassumption that all necessary information is available at\\nconfigure-time to determine the final location and filename of the\\ntarget.  However, this property is not fully determined until later at\\ngenerate-time.  At generate time, the $<TARGET_FILE> generator\\nexpression can be used to determine the eventual LOCATION of a target\\noutput.\\n\\nCode which reads the LOCATION target property can be ported to use the\\n$<TARGET_FILE> generator expression together with the file(GENERATE)\\nsubcommand to generate a file containing the target location.\\n\\nThe OLD behavior for this policy is to allow reading the LOCATION\\nproperties from build-targets.  The NEW behavior for this policy is to\\nnot to allow reading the LOCATION properties from build-targets.\\n\\nThis policy was introduced in CMake version 3.0.  CMake version\\n3.13.4 warns when the policy is not set and uses OLD behavior.  Use\\nthe cmake_policy command to set it to OLD or NEW explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0027": [
        "CMP0027\\n-------\\n\\nConditionally linked imported targets with missing include directories.\\n\\nCMake 2.8.11 introduced introduced the concept of\\nINTERFACE_INCLUDE_DIRECTORIES, and a check at cmake time that the\\nentries in the INTERFACE_INCLUDE_DIRECTORIES of an IMPORTED target\\nactually exist.  CMake 2.8.11 also introduced generator expression\\nsupport in the target_link_libraries command.  However, if an imported\\ntarget is linked as a result of a generator expression evaluation, the\\nentries in the INTERFACE_INCLUDE_DIRECTORIES of that target were not\\nchecked for existence as they should be.\\n\\nThe OLD behavior of this policy is to report a warning if an entry in\\nthe INTERFACE_INCLUDE_DIRECTORIES of a generator-expression\\nconditionally linked IMPORTED target does not exist.\\n\\nThe NEW behavior of this policy is to report an error if an entry in\\nthe INTERFACE_INCLUDE_DIRECTORIES of a generator-expression\\nconditionally linked IMPORTED target does not exist.\\n\\nThis policy was introduced in CMake version 3.0.  CMake version\\n3.13.4 warns when the policy is not set and uses OLD behavior.  Use\\nthe cmake_policy command to set it to OLD or NEW explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0028": [
        "CMP0028\\n-------\\n\\nDouble colon in target name means ALIAS or IMPORTED target.\\n\\nCMake 2.8.12 and lower allowed the use of targets and files with double\\ncolons in target_link_libraries, with some buildsystem generators.\\n\\nThe use of double-colons is a common pattern used to namespace IMPORTED\\ntargets and ALIAS targets.  When computing the link dependencies of a target,\\nthe name of each dependency could either be a target, or a file on disk.\\nPreviously, if a target was not found with a matching name, the name was\\nconsidered to refer to a file on disk.  This can lead to confusing error\\nmessages if there is a typo in what should be a target name.\\n\\nThe OLD behavior for this policy is to search for targets, then files on disk,\\neven if the search term contains double-colons.  The NEW behavior for this\\npolicy is to issue a FATAL_ERROR if a link dependency contains\\ndouble-colons but is not an IMPORTED target or an ALIAS target.\\n\\nThis policy was introduced in CMake version 3.0.  CMake version\\n3.13.4 warns when the policy is not set and uses OLD behavior.  Use\\nthe cmake_policy command to set it to OLD or NEW explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0029": [
        "CMP0029\\n-------\\n\\nThe ``subdir_depends()`` command should not be called.\\n\\nThe implementation of this command has been empty since December 2001\\nbut was kept in CMake for compatibility for a long time.\\n\\nCMake >= 3.0 prefer that this command never be called.\\nThe OLD behavior for this policy is to allow the command to be called.\\nThe NEW behavior for this policy is to issue a FATAL_ERROR when the\\ncommand is called.\\n\\nThis policy was introduced in CMake version 3.0.\\nCMake version 3.13.4 warns when the policy is not set and uses\\nOLD behavior.  Use the cmake_policy command to set it to OLD or\\nNEW explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0030": [
        "CMP0030\\n-------\\n\\nThe ``use_mangled_mesa()`` command should not be called.\\n\\nThis command was created in September 2001 to support VTK before\\nmodern CMake language and custom command capabilities.  VTK has\\nnot used it in years.\\n\\nCMake >= 3.0 prefer that this command never be called.\\nThe OLD behavior for this policy is to allow the command to be called.\\nThe NEW behavior for this policy is to issue a FATAL_ERROR when the\\ncommand is called.\\n\\nThis policy was introduced in CMake version 3.0.\\nCMake version 3.13.4 warns when the policy is not set and uses\\nOLD behavior.  Use the cmake_policy command to set it to OLD or\\nNEW explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0031": [
        "CMP0031\\n-------\\n\\nThe ``load_command()`` command should not be called.\\n\\nThis command was added in August 2002 to allow projects to add\\narbitrary commands implemented in C or C++.  However, it does\\nnot work when the toolchain in use does not match the ABI of\\nthe CMake process.  It has been mostly superseded by the\\n``macro()`` and ``function()`` commands.\\n\\nCMake >= 3.0 prefer that this command never be called.\\nThe OLD behavior for this policy is to allow the command to be called.\\nThe NEW behavior for this policy is to issue a FATAL_ERROR when the\\ncommand is called.\\n\\nThis policy was introduced in CMake version 3.0.\\nCMake version 3.13.4 warns when the policy is not set and uses\\nOLD behavior.  Use the cmake_policy command to set it to OLD or\\nNEW explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0032": [
        "CMP0032\\n-------\\n\\nThe ``output_required_files()`` command should not be called.\\n\\nThis command was added in June 2001 to expose the then-current CMake\\nimplicit dependency scanner.  CMake's real implicit dependency scanner\\nhas evolved since then but is not exposed through this command.  The\\nscanning capabilities of this command are very limited and this\\nfunctionality is better achieved through dedicated outside tools.\\n\\nCMake >= 3.0 prefer that this command never be called.\\nThe OLD behavior for this policy is to allow the command to be called.\\nThe NEW behavior for this policy is to issue a FATAL_ERROR when the\\ncommand is called.\\n\\nThis policy was introduced in CMake version 3.0.\\nCMake version 3.13.4 warns when the policy is not set and uses\\nOLD behavior.  Use the cmake_policy command to set it to OLD or\\nNEW explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0033": [
        "CMP0033\\n-------\\n\\nThe ``export_library_dependencies()`` command should not be called.\\n\\nThis command was added in January 2003 to export ``<tgt>_LIB_DEPENDS``\\ninternal CMake cache entries to a file for installation with a project.\\nThis was used at the time to allow transitive link dependencies to\\nwork for applications outside of the original build tree of a project.\\nThe functionality has been superseded by the ``export()`` and\\n``install(EXPORT)`` commands.\\n\\nCMake >= 3.0 prefer that this command never be called.\\nThe OLD behavior for this policy is to allow the command to be called.\\nThe NEW behavior for this policy is to issue a FATAL_ERROR when the\\ncommand is called.\\n\\nThis policy was introduced in CMake version 3.0.\\nCMake version 3.13.4 warns when the policy is not set and uses\\nOLD behavior.  Use the cmake_policy command to set it to OLD or\\nNEW explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0034": [
        "CMP0034\\n-------\\n\\nThe ``utility_source()`` command should not be called.\\n\\nThis command was introduced in March 2001 to help build executables used to\\ngenerate other files.  This approach has long been replaced by\\n``add_executable()`` combined with ``add_custom_command()``.\\n\\nCMake >= 3.0 prefer that this command never be called.\\nThe OLD behavior for this policy is to allow the command to be called.\\nThe NEW behavior for this policy is to issue a FATAL_ERROR when the\\ncommand is called.\\n\\nThis policy was introduced in CMake version 3.0.\\nCMake version 3.13.4 warns when the policy is not set and uses\\nOLD behavior.  Use the cmake_policy command to set it to OLD or\\nNEW explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0035": [
        "CMP0035\\n-------\\n\\nThe ``variable_requires()`` command should not be called.\\n\\nThis command was introduced in November 2001 to perform some conditional\\nlogic.  It has long been replaced by the ``if()`` command.\\n\\nCMake >= 3.0 prefer that this command never be called.\\nThe OLD behavior for this policy is to allow the command to be called.\\nThe NEW behavior for this policy is to issue a FATAL_ERROR when the\\ncommand is called.\\n\\nThis policy was introduced in CMake version 3.0.\\nCMake version 3.13.4 warns when the policy is not set and uses\\nOLD behavior.  Use the cmake_policy command to set it to OLD or\\nNEW explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0036": [
        "CMP0036\\n-------\\n\\nThe ``build_name()`` command should not be called.\\n\\nThis command was added in May 2001 to compute a name for the current\\noperating system and compiler combination.  The command has long been\\ndocumented as discouraged and replaced by the ``CMAKE_SYSTEM``\\nand ``CMAKE_<LANG>_COMPILER`` variables.\\n\\nCMake >= 3.0 prefer that this command never be called.\\nThe OLD behavior for this policy is to allow the command to be called.\\nThe NEW behavior for this policy is to issue a FATAL_ERROR when the\\ncommand is called.\\n\\nThis policy was introduced in CMake version 3.0.\\nCMake version 3.13.4 warns when the policy is not set and uses\\nOLD behavior.  Use the cmake_policy command to set it to OLD or\\nNEW explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0037": [
        "CMP0037\\n-------\\n\\nTarget names should not be reserved and should match a validity pattern.\\n\\nCMake 2.8.12 and lower allowed creating targets using ``add_library()``,\\n``add_executable()`` and ``add_custom_target()`` with unrestricted\\nchoice for the target name.  Newer cmake features such\\nas ``cmake-generator-expressions(7)`` and some\\ndiagnostics expect target names to match a restricted pattern.\\n\\nTarget names may contain upper and lower case letters, numbers, the underscore\\ncharacter (_), dot(.), plus(+) and minus(-).  As a special case, ALIAS\\ntargets and IMPORTED targets may contain two consecutive colons.\\n\\nTarget names reserved by one or more CMake generators are not allowed.\\nAmong others these include \\\"all\\\", \\\"clean\\\", \\\"help\\\", and \\\"install\\\".\\n\\nTarget names associated with optional features, such as \\\"test\\\" and \\\"package\\\",\\nmay also be reserved.  CMake 3.10 and below always reserve them.  CMake 3.11\\nand above reserve them only when the corresponding feature is enabled\\n(e.g. by including the ``CTest`` or ``CPack`` modules).\\n\\nThe OLD behavior for this policy is to allow creating targets with\\nreserved names or which do not match the validity pattern.\\nThe NEW behavior for this policy is to report an error\\nif an add_* command is used with an invalid target name.\\n\\nThis policy was introduced in CMake version 3.0.  CMake version\\n3.13.4 warns when the policy is not set and uses OLD behavior.  Use\\nthe cmake_policy command to set it to OLD or NEW explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0038": [
        "CMP0038\\n-------\\n\\nTargets may not link directly to themselves.\\n\\nCMake 2.8.12 and lower allowed a build target to link to itself directly with\\na ``target_link_libraries()`` call. This is an indicator of a bug in\\nuser code.\\n\\nThe OLD behavior for this policy is to ignore targets which list themselves\\nin their own link implementation.  The NEW behavior for this policy is to\\nreport an error if a target attempts to link to itself.\\n\\nThis policy was introduced in CMake version 3.0.  CMake version\\n3.13.4 warns when the policy is not set and uses OLD behavior.  Use\\nthe cmake_policy command to set it to OLD or NEW explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0039": [
        "CMP0039\\n-------\\n\\nUtility targets may not have link dependencies.\\n\\nCMake 2.8.12 and lower allowed using utility targets in the left hand side\\nposition of the ``target_link_libraries()`` command. This is an indicator\\nof a bug in user code.\\n\\nThe OLD behavior for this policy is to ignore attempts to set the link\\nlibraries of utility targets.  The NEW behavior for this policy is to\\nreport an error if an attempt is made to set the link libraries of a\\nutility target.\\n\\nThis policy was introduced in CMake version 3.0.  CMake version\\n3.13.4 warns when the policy is not set and uses OLD behavior.  Use\\nthe cmake_policy command to set it to OLD or NEW explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0040": [
        "CMP0040\\n-------\\n\\nThe target in the ``TARGET`` signature of ``add_custom_command()``\\nmust exist and must be defined in the current directory.\\n\\nCMake 2.8.12 and lower silently ignored a custom command created with\\nthe ``TARGET`` signature of ``add_custom_command()``\\nif the target is unknown or was defined outside the current directory.\\n\\nThe ``OLD`` behavior for this policy is to ignore custom commands\\nfor unknown targets.  The ``NEW`` behavior for this policy is to report\\nan error if the target referenced in ``add_custom_command()`` is\\nunknown or was defined outside the current directory.\\n\\nThis policy was introduced in CMake version 3.0.  CMake version\\n3.13.4 warns when the policy is not set and uses ``OLD`` behavior.\\nUse the ``cmake_policy()`` command to set it to ``OLD`` or\\n``NEW`` explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0041": [
        "CMP0041\\n-------\\n\\nError on relative include with generator expression.\\n\\nDiagnostics in CMake 2.8.12 and lower silently ignored an entry in the\\n``INTERFACE_INCLUDE_DIRECTORIES`` of a target if it contained a generator\\nexpression at any position.\\n\\nThe path entries in that target property should not be relative. High-level\\nAPI should ensure that by adding either a source directory or a install\\ndirectory prefix, as appropriate.\\n\\nAs an additional diagnostic, the ``INTERFACE_INCLUDE_DIRECTORIES`` generated\\non an ``IMPORTED`` target for the install location should not contain\\npaths in the source directory or the build directory.\\n\\nThe OLD behavior for this policy is to ignore relative path entries if they\\ncontain a generator expression. The NEW behavior for this policy is to report\\nan error if a generator expression appears in another location and the path is\\nrelative.\\n\\nThis policy was introduced in CMake version 3.0.  CMake version\\n3.13.4 warns when the policy is not set and uses OLD behavior.  Use\\nthe cmake_policy command to set it to OLD or NEW explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0042": [
        "CMP0042\\n-------\\n\\n``MACOSX_RPATH`` is enabled by default.\\n\\nCMake 2.8.12 and newer has support for using ``@rpath`` in a target's install\\nname.  This was enabled by setting the target property\\n``MACOSX_RPATH``.  The ``@rpath`` in an install name is a more\\nflexible and powerful mechanism than ``@executable_path`` or ``@loader_path``\\nfor locating shared libraries.\\n\\nCMake 3.0 and later prefer this property to be ON by default.  Projects\\nwanting ``@rpath`` in a target's install name may remove any setting of\\nthe ``INSTALL_NAME_DIR`` and ``CMAKE_INSTALL_NAME_DIR``\\nvariables.\\n\\nThis policy was introduced in CMake version 3.0.  CMake version\\n3.13.4 warns when the policy is not set and uses OLD behavior.  Use\\nthe cmake_policy command to set it to OLD or NEW explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0043": [
        "CMP0043\\n-------\\n\\nIgnore COMPILE_DEFINITIONS_<Config> properties\\n\\nCMake 2.8.12 and lower allowed setting the\\n``COMPILE_DEFINITIONS_<CONFIG>`` target property and\\n``COMPILE_DEFINITIONS_<CONFIG>`` directory property to apply\\nconfiguration-specific compile definitions.\\n\\nSince CMake 2.8.10, the ``COMPILE_DEFINITIONS`` property has supported\\n``generator expressions`` for setting\\nconfiguration-dependent content.  The continued existence of the suffixed\\nvariables is redundant, and causes a maintenance burden.  Population of the\\n``COMPILE_DEFINITIONS_DEBUG`` property\\nmay be replaced with a population of ``COMPILE_DEFINITIONS`` directly\\nor via ``target_compile_definitions()``:\\n\\n # Old Interfaces:\\n set_property(TARGET tgt APPEND PROPERTY\\n   COMPILE_DEFINITIONS_DEBUG DEBUG_MODE\\n )\\n set_property(DIRECTORY APPEND PROPERTY\\n   COMPILE_DEFINITIONS_DEBUG DIR_DEBUG_MODE\\n )\\n\\n # New Interfaces:\\n set_property(TARGET tgt APPEND PROPERTY\\n   COMPILE_DEFINITIONS $<$<CONFIG:Debug>:DEBUG_MODE>\\n )\\n target_compile_definitions(tgt PRIVATE $<$<CONFIG:Debug>:DEBUG_MODE>)\\n set_property(DIRECTORY APPEND PROPERTY\\n   COMPILE_DEFINITIONS $<$<CONFIG:Debug>:DIR_DEBUG_MODE>\\n )\\n\\nThe OLD behavior for this policy is to consume the content of the suffixed\\n``COMPILE_DEFINITIONS_<CONFIG>`` target property when generating the\\ncompilation command. The NEW behavior for this policy is to ignore the content\\nof the ``COMPILE_DEFINITIONS_<CONFIG>`` target property .\\n\\nThis policy was introduced in CMake version 3.0.  CMake version\\n3.13.4 warns when the policy is not set and uses OLD behavior.  Use\\nthe cmake_policy command to set it to OLD or NEW explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0044": [
        "CMP0044\\n-------\\n\\nCase sensitive ``<LANG>_COMPILER_ID`` generator expressions\\n\\nCMake 2.8.12 introduced the ``<LANG>_COMPILER_ID``\\n``generator expressions`` to allow\\ncomparison of the ``CMAKE_<LANG>_COMPILER_ID`` with a test value.  The\\npossible valid values are lowercase, but the comparison with the test value\\nwas performed case-insensitively.\\n\\nThe OLD behavior for this policy is to perform a case-insensitive comparison\\nwith the value in the ``<LANG>_COMPILER_ID`` expression. The NEW behavior\\nfor this policy is to perform a case-sensitive comparison with the value in\\nthe ``<LANG>_COMPILER_ID`` expression.\\n\\nThis policy was introduced in CMake version 3.0.  CMake version\\n3.13.4 warns when the policy is not set and uses OLD behavior.  Use\\nthe cmake_policy command to set it to OLD or NEW explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0045": [
        "CMP0045\\n-------\\n\\nError on non-existent target in get_target_property.\\n\\nIn CMake 2.8.12 and lower, the ``get_target_property()`` command accepted\\na non-existent target argument without issuing any error or warning.  The\\nresult variable is set to a ``-NOTFOUND`` value.\\n\\nThe OLD behavior for this policy is to issue no warning and set the result\\nvariable to a ``-NOTFOUND`` value.  The NEW behavior\\nfor this policy is to issue a ``FATAL_ERROR`` if the command is called with a\\nnon-existent target.\\n\\nThis policy was introduced in CMake version 3.0.  CMake version\\n3.13.4 warns when the policy is not set and uses OLD behavior.  Use\\nthe cmake_policy command to set it to OLD or NEW explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0046": [
        "CMP0046\\n-------\\n\\nError on non-existent dependency in add_dependencies.\\n\\nCMake 2.8.12 and lower silently ignored non-existent dependencies\\nlisted in the ``add_dependencies()`` command.\\n\\nThe OLD behavior for this policy is to silently ignore non-existent\\ndependencies. The NEW behavior for this policy is to report an error\\nif non-existent dependencies are listed in the ``add_dependencies()``\\ncommand.\\n\\nThis policy was introduced in CMake version 3.0.\\nCMake version 3.13.4 warns when the policy is not set and uses\\nOLD behavior.  Use the cmake_policy command to set it to OLD or\\nNEW explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0047": [
        "CMP0047\\n-------\\n\\nUse ``QCC`` compiler id for the qcc drivers on QNX.\\n\\nCMake 3.0 and above recognize that the QNX qcc compiler driver is\\ndifferent from the GNU compiler.\\nCMake now prefers to present this to projects by setting the\\n``CMAKE_<LANG>_COMPILER_ID`` variable to ``QCC`` instead\\nof ``GNU``.  However, existing projects may assume the compiler id for\\nQNX qcc is just ``GNU`` as it was in CMake versions prior to 3.0.\\nTherefore this policy determines for QNX qcc which compiler id to\\nreport in the ``CMAKE_<LANG>_COMPILER_ID`` variable after\\nlanguage ``<LANG>`` is enabled by the ``project()`` or\\n``enable_language()`` command.  The policy must be set prior\\nto the invocation of either command.\\n\\nThe OLD behavior for this policy is to use the ``GNU`` compiler id\\nfor the qcc and QCC compiler drivers. The NEW behavior for this policy\\nis to use the ``QCC`` compiler id for those drivers.\\n\\nThis policy was introduced in CMake version 3.0.  Use the\\n``cmake_policy()`` command to set this policy to OLD or NEW explicitly.\\nUnlike most policies, CMake version 3.13.4 does *not* warn\\nby default when this policy is not set and simply uses OLD behavior.\\nSee documentation of the\\n``CMAKE_POLICY_WARNING_CMP0047``\\nvariable to control the warning.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0048": [
        "CMP0048\\n-------\\n\\nThe ``project()`` command manages VERSION variables.\\n\\nCMake version 3.0 introduced the ``VERSION`` option of the ``project()``\\ncommand to specify a project version as well as the name.  In order to keep\\n``PROJECT_VERSION`` and related variables consistent with variable\\n``PROJECT_NAME`` it is necessary to set the VERSION variables\\nto the empty string when no ``VERSION`` is given to ``project()``.\\nHowever, this can change behavior for existing projects that set VERSION\\nvariables themselves since ``project()`` may now clear them.\\nThis policy controls the behavior for compatibility with such projects.\\n\\nThe OLD behavior for this policy is to leave VERSION variables untouched.\\nThe NEW behavior for this policy is to set VERSION as documented by the\\n``project()`` command.\\n\\nThis policy was introduced in CMake version 3.0.\\nCMake version 3.13.4 warns when the policy is not set and uses\\nOLD behavior.  Use the cmake_policy command to set it to OLD or\\nNEW explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0049": [
        "CMP0049\\n-------\\n\\nDo not expand variables in target source entries.\\n\\nCMake 2.8.12 and lower performed and extra layer of variable expansion\\nwhen evaluating source file names:\\n\\n set(a_source foo.c)\\n add_executable(foo \\\\${a_source})\\n\\nThis was undocumented behavior.\\n\\nThe OLD behavior for this policy is to expand such variables when processing\\nthe target sources.  The NEW behavior for this policy is to issue an error\\nif such variables need to be expanded.\\n\\nThis policy was introduced in CMake version 3.0.\\nCMake version 3.13.4 warns when the policy is not set and uses\\nOLD behavior.  Use the cmake_policy command to set it to OLD or\\nNEW explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0050": [
        "CMP0050\\n-------\\n\\nDisallow add_custom_command SOURCE signatures.\\n\\nCMake 2.8.12 and lower allowed a signature for ``add_custom_command()``\\nwhich specified an input to a command.  This was undocumented behavior.\\nModern use of CMake associates custom commands with their output, rather\\nthan their input.\\n\\nThe OLD behavior for this policy is to allow the use of\\n``add_custom_command()`` SOURCE signatures.  The NEW behavior for this\\npolicy is to issue an error if such a signature is used.\\n\\nThis policy was introduced in CMake version 3.0.\\nCMake version 3.13.4 warns when the policy is not set and uses\\nOLD behavior.  Use the cmake_policy command to set it to OLD or\\nNEW explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0051": [
        "CMP0051\\n-------\\n\\nList TARGET_OBJECTS in SOURCES target property.\\n\\nCMake 3.0 and lower did not include the ``TARGET_OBJECTS``\\n``generator expression`` when\\nreturning the ``SOURCES`` target property.\\n\\nConfigure-time CMake code is not able to handle generator expressions.  If\\nusing the ``SOURCES`` target property at configure time, it may be\\nnecessary to first remove generator expressions using the\\n``string(GENEX_STRIP)`` command.  Generate-time CMake code such as\\n``file(GENERATE)`` can handle the content without stripping.\\n\\nThe ``OLD`` behavior for this policy is to omit ``TARGET_OBJECTS``\\nexpressions from the ``SOURCES`` target property.  The ``NEW``\\nbehavior for this policy is to include ``TARGET_OBJECTS`` expressions\\nin the output.\\n\\nThis policy was introduced in CMake version 3.1.\\nCMake version 3.13.4 warns when the policy is not set and uses\\n``OLD`` behavior.  Use the ``cmake_policy()`` command to set it\\nto ``OLD`` or ``NEW`` explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0052": [
        "CMP0052\\n-------\\n\\nReject source and build dirs in installed INTERFACE_INCLUDE_DIRECTORIES.\\n\\nCMake 3.0 and lower allowed subdirectories of the source directory or build\\ndirectory to be in the ``INTERFACE_INCLUDE_DIRECTORIES`` of\\ninstalled and exported targets, if the directory was also a subdirectory of\\nthe installation prefix.  This makes the installation depend on the\\nexistence of the source dir or binary dir, and the installation will be\\nbroken if either are removed after installation.\\n\\nSee :ref:`Include Directories and Usage Requirements` for more on\\nspecifying include directories for targets.\\n\\nThe OLD behavior for this policy is to export the content of the\\n``INTERFACE_INCLUDE_DIRECTORIES`` with the source or binary\\ndirectory.  The NEW behavior for this\\npolicy is to issue an error if such a directory is used.\\n\\nThis policy was introduced in CMake version 3.1.\\nCMake version 3.13.4 warns when the policy is not set and uses\\n``OLD`` behavior.  Use the ``cmake_policy()`` command to set it\\nto ``OLD`` or ``NEW`` explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0053": [
        "CMP0053\\n-------\\n\\nSimplify variable reference and escape sequence evaluation.\\n\\nCMake 3.1 introduced a much faster implementation of evaluation of the\\n:ref:`Variable References` and :ref:`Escape Sequences` documented in the\\n``cmake-language(7)`` manual.  While the behavior is identical\\nto the legacy implementation in most cases, some corner cases were\\ncleaned up to simplify the behavior.  Specifically:\\n\\n* Expansion of ``@VAR@`` reference syntax defined by the\\n  ``configure_file()`` and ``string(CONFIGURE)``\\n  commands is no longer performed in other contexts.\\n\\n* Literal ``${VAR}`` reference syntax may contain only\\n  alphanumeric characters (``A-Z``, ``a-z``, ``0-9``) and\\n  the characters ``_``, ``.``, ``/``, ``-``, and ``+``.\\n  Note that ``$`` is technically allowed in the ``NEW`` behavior, but is\\n  invalid for ``OLD`` behavior.  This is due to an oversight during the\\n  implementation of ``CMP0053`` and its use as a literal variable\\n  reference is discouraged for this reason.\\n  Variables with other characters in their name may still\\n  be referenced indirectly, e.g.\\n\\n  .. code-block:: cmake\\n\\n    set(varname \\\"otherwise & disallowed $ characters\\\")\\n    message(\\\"${${varname}}\\\")\\n\\n* The setting of policy ``CMP0010`` is not considered,\\n  so improper variable reference syntax is always an error.\\n\\n* More characters are allowed to be escaped in variable names.\\n  Previously, only ``()#\\\" \\\\@^`` were valid characters to\\n  escape. Now any non-alphanumeric, non-semicolon, non-NUL\\n  character may be escaped following the ``escape_identity``\\n  production in the :ref:`Escape Sequences` section of the\\n  ``cmake-language(7)`` manual.\\n\\nThe ``OLD`` behavior for this policy is to honor the legacy behavior for\\nvariable references and escape sequences.  The ``NEW`` behavior is to\\nuse the simpler variable expansion and escape sequence evaluation rules.\\n\\nThis policy was introduced in CMake version 3.1.\\nCMake version 3.13.4 warns when the policy is not set and uses\\n``OLD`` behavior.  Use the ``cmake_policy()`` command to set\\nit to ``OLD`` or ``NEW`` explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0054": [
        "CMP0054\\n-------\\n\\nOnly interpret ``if()`` arguments as variables or keywords when unquoted.\\n\\nCMake 3.1 and above no longer implicitly dereference variables or\\ninterpret keywords in an ``if()`` command argument when\\nit is a :ref:`Quoted Argument` or a :ref:`Bracket Argument`.\\n\\nThe ``OLD`` behavior for this policy is to dereference variables and\\ninterpret keywords even if they are quoted or bracketed.\\nThe ``NEW`` behavior is to not dereference variables or interpret keywords\\nthat have been quoted or bracketed.\\n\\nGiven the following partial example:\\n\\n::\\n\\n set(A E)\\n set(E \\\"\\\")\\n\\n if(\\\"${A}\\\" STREQUAL \\\"\\\")\\n   message(\\\"Result is TRUE before CMake 3.1 or when CMP0054 is OLD\\\")\\n else()\\n   message(\\\"Result is FALSE in CMake 3.1 and above if CMP0054 is NEW\\\")\\n endif()\\n\\nAfter explicit expansion of variables this gives:\\n\\n::\\n\\n if(\\\"E\\\" STREQUAL \\\"\\\")\\n\\nWith the policy set to ``OLD`` implicit expansion reduces this semantically to:\\n\\n::\\n\\n if(\\\"\\\" STREQUAL \\\"\\\")\\n\\nWith the policy set to ``NEW`` the quoted arguments will not be\\nfurther dereferenced:\\n\\n::\\n\\n if(\\\"E\\\" STREQUAL \\\"\\\")\\n\\nThis policy was introduced in CMake version 3.1.\\nCMake version 3.13.4 warns when the policy is not set and uses\\n``OLD`` behavior.  Use the ``cmake_policy()`` command to set\\nit to ``OLD`` or ``NEW`` explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0055": [
        "CMP0055\\n-------\\n\\nStrict checking for the ``break()`` command.\\n\\nCMake 3.1 and lower allowed calls to the ``break()`` command\\noutside of a loop context and also ignored any given arguments.\\nThis was undefined behavior.\\n\\nThe OLD behavior for this policy is to allow ``break()`` to be placed\\noutside of loop contexts and ignores any arguments.  The NEW behavior for this\\npolicy is to issue an error if a misplaced break or any arguments are found.\\n\\nThis policy was introduced in CMake version 3.2.\\nCMake version 3.13.4 warns when the policy is not set and uses\\nOLD behavior.  Use the cmake_policy command to set it to OLD or\\nNEW explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0056": [
        "CMP0056\\n-------\\n\\nHonor link flags in ``try_compile()`` source-file signature.\\n\\nThe ``try_compile()`` command source-file signature generates a\\n``CMakeLists.txt`` file to build the source file into an executable.\\nIn order to compile the source the same way as it might be compiled\\nby the calling project, the generated project sets the value of the\\n``CMAKE_<LANG>_FLAGS`` variable to that in the calling project.\\nThe value of the ``CMAKE_EXE_LINKER_FLAGS`` variable may be\\nneeded in some cases too, but CMake 3.1 and lower did not set it in\\nthe generated project.  CMake 3.2 and above prefer to set it so that\\nlinker flags are honored as well as compiler flags.  This policy\\nprovides compatibility with the pre-3.2 behavior.\\n\\nThe OLD behavior for this policy is to not set the value of the\\n``CMAKE_EXE_LINKER_FLAGS`` variable in the generated test\\nproject.  The NEW behavior for this policy is to set the value of\\nthe ``CMAKE_EXE_LINKER_FLAGS`` variable in the test project\\nto the same as it is in the calling project.\\n\\nIf the project code does not set the policy explicitly, users may\\nset it on the command line by defining the\\n``CMAKE_POLICY_DEFAULT_CMP0056``\\nvariable in the cache.\\n\\nThis policy was introduced in CMake version 3.2.  Unlike most policies,\\nCMake version 3.13.4 does *not* warn by default when this policy\\nis not set and simply uses OLD behavior.  See documentation of the\\n``CMAKE_POLICY_WARNING_CMP0056``\\nvariable to control the warning.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0057": [
        "CMP0057\\n-------\\n\\nSupport new ``if()`` IN_LIST operator.\\n\\nCMake 3.3 adds support for the new IN_LIST operator.\\n\\nThe ``OLD`` behavior for this policy is to ignore the IN_LIST operator.\\nThe ``NEW`` behavior is to interpret the IN_LIST operator.\\n\\nThis policy was introduced in CMake version 3.3.\\nCMake version 3.13.4 warns when the policy is not set and uses\\n``OLD`` behavior.  Use the ``cmake_policy()`` command to set\\nit to ``OLD`` or ``NEW`` explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0058": [
        "CMP0058\\n-------\\n\\nNinja requires custom command byproducts to be explicit.\\n\\nWhen an intermediate file generated during the build is consumed\\nby an expensive operation or a large tree of dependents, one may\\nreduce the work needed for an incremental rebuild by updating the\\nfile timestamp only when its content changes.  With this approach\\nthe generation rule must have a separate output file that is always\\nupdated with a new timestamp that is newer than any dependencies of\\nthe rule so that the build tool re-runs the rule only when the input\\nchanges.  We refer to the separate output file as a rule's *witness*\\nand the generated file as a rule's *byproduct*.\\n\\nByproducts may not be listed as outputs because their timestamps are\\nallowed to be older than the inputs.  No build tools (like ``make``)\\nthat existed when CMake was designed have a way to express byproducts.\\nTherefore CMake versions prior to 3.2 had no way to specify them.\\nProjects typically left byproducts undeclared in the rules that\\ngenerate them.  For example:\\n\\n add_custom_command(\\n   OUTPUT witness.txt\\n   COMMAND ${CMAKE_COMMAND} -E copy_if_different\\n           ${CMAKE_CURRENT_SOURCE_DIR}/input.txt\\n           byproduct.txt # timestamp may not change\\n   COMMAND ${CMAKE_COMMAND} -E touch witness.txt\\n   DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/input.txt\\n   )\\n add_custom_target(Provider DEPENDS witness.txt)\\n add_custom_command(\\n   OUTPUT generated.c\\n   COMMAND expensive-task -i byproduct.txt -o generated.c\\n   DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/byproduct.txt\\n   )\\n add_library(Consumer generated.c)\\n add_dependencies(Consumer Provider)\\n\\nThis works well for all generators except ``Ninja``.\\nThe Ninja build tool sees a rule listing ``byproduct.txt``\\nas a dependency and no rule listing it as an output.  Ninja then\\ncomplains that there is no way to satisfy the dependency and\\nstops building even though there are order-only dependencies\\nthat ensure ``byproduct.txt`` will exist before its consumers\\nneed it.  See discussion of this problem in Ninja Issue 760\\nfor further details on why Ninja works this way.\\n\\nInstead of leaving byproducts undeclared in the rules that generate\\nthem, Ninja expects byproducts to be listed along with other outputs.\\nSuch rules may be marked with a ``restat`` option that tells Ninja\\nto check the timestamps of outputs after the rules run.  This\\nprevents byproducts whose timestamps do not change from causing\\ntheir dependents to re-build unnecessarily.\\n\\nSince the above approach does not tell CMake what custom command\\ngenerates ``byproduct.txt``, the Ninja generator does not have\\nenough information to add the byproduct as an output of any rule.\\nCMake 2.8.12 and above work around this problem and allow projects\\nusing the above approach to build by generating ``phony`` build\\nrules to tell Ninja to tolerate such missing files.  However, this\\nworkaround prevents Ninja from diagnosing a dependency that is\\nreally missing.  It also works poorly in in-source builds where\\nevery custom command dependency, even on source files, needs to\\nbe treated this way because CMake does not have enough information\\nto know which files are generated as byproducts of custom commands.\\n\\nCMake 3.2 introduced the ``BYPRODUCTS`` option to the\\n``add_custom_command()`` and ``add_custom_target()``\\ncommands.  This option allows byproducts to be specified explicitly:\\n\\n add_custom_command(\\n   OUTPUT witness.txt\\n   BYPRODUCTS byproduct.txt # explicit byproduct specification\\n   COMMAND ${CMAKE_COMMAND} -E copy_if_different\\n           ${CMAKE_CURRENT_SOURCE_DIR}/input.txt\\n           byproduct.txt # timestamp may not change\\n ...\\n\\nThe ``BYPRODUCTS`` option is used by the ``Ninja`` generator\\nto list byproducts among the outputs of the custom commands that\\ngenerate them, and is ignored by other generators.\\n\\nCMake 3.3 and above prefer to require projects to specify custom\\ncommand byproducts explicitly so that it can avoid using the\\n``phony`` rule workaround altogether.  Policy ``CMP0058`` was\\nintroduced to provide compatibility with existing projects that\\nstill need the workaround.\\n\\nThis policy has no effect on generators other than ``Ninja``.\\nThe ``OLD`` behavior for this policy is to generate Ninja ``phony``\\nrules for unknown dependencies in the build tree.  The ``NEW``\\nbehavior for this policy is to not generate these and instead\\nrequire projects to specify custom command ``BYPRODUCTS`` explicitly.\\n\\nThis policy was introduced in CMake version 3.3.\\nCMake version 3.13.4 warns when it sees unknown dependencies in\\nout-of-source build trees if the policy is not set and then uses\\n``OLD`` behavior.  Use the ``cmake_policy()`` command to set\\nthe policy to ``OLD`` or ``NEW`` explicitly.  The policy setting\\nmust be in scope at the end of the top-level ``CMakeLists.txt``\\nfile of the project and has global effect.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0059": [
        "CMP0059\\n-------\\n\\nDo not treat ``DEFINITIONS`` as a built-in directory property.\\n\\nCMake 3.3 and above no longer make a list of definitions available through\\nthe ``DEFINITIONS`` directory property.  The\\n``COMPILE_DEFINITIONS`` directory property may be used instead.\\n\\nThe ``OLD`` behavior for this policy is to provide the list of flags given\\nso far to the ``add_definitions()`` command.  The ``NEW`` behavior is\\nto behave as a normal user-defined directory property.\\n\\nThis policy was introduced in CMake version 3.3.\\nCMake version 3.13.4 warns when the policy is not set and uses\\n``OLD`` behavior.  Use the ``cmake_policy()`` command to set\\nit to ``OLD`` or ``NEW`` explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0060": [
        "CMP0060\\n-------\\n\\nLink libraries by full path even in implicit directories.\\n\\nPolicy ``CMP0003`` was introduced with the intention of always\\nlinking library files by full path when a full path is given to the\\n``target_link_libraries()`` command.  However, on some platforms\\n(e.g. HP-UX) the compiler front-end adds alternative library search paths\\nfor the current architecture (e.g. ``/usr/lib/<arch>`` has alternatives\\nto libraries in ``/usr/lib`` for the current architecture).\\nOn such platforms the ``find_library()`` may find a library such as\\n``/usr/lib/libfoo.so`` that does not belong to the current architecture.\\n\\nPrior to policy ``CMP0003`` projects would still build in such\\ncases because the incorrect library path would be converted to ``-lfoo``\\non the link line and the linker would find the proper library in the\\narch-specific search path provided by the compiler front-end implicitly.\\nAt the time we chose to remain compatible with such projects by always\\nconverting library files found in implicit link directories to ``-lfoo``\\nflags to ask the linker to search for them.  This approach allowed existing\\nprojects to continue to build while still linking to libraries outside\\nimplicit link directories via full path (such as those in the build tree).\\n\\nCMake does allow projects to override this behavior by using an\\n:ref:`IMPORTED library target <Imported Targets>` with its\\n``IMPORTED_LOCATION`` property set to the desired full path to\\na library file.  In fact, many :ref:`Find Modules` are learning to provide\\n:ref:`Imported Targets` instead of just the traditional ``Foo_LIBRARIES``\\nvariable listing library files.  However, this makes the link line\\ngenerated for a library found by a Find Module depend on whether it\\nis linked through an imported target or not, which is inconsistent.\\nFurthermore, this behavior has been a source of confusion because the\\ngenerated link line for a library file depends on its location.  It is\\nalso problematic for projects trying to link statically because flags\\nlike ``-Wl,-Bstatic -lfoo -Wl,-Bdynamic`` may be used to help the linker\\nselect ``libfoo.a`` instead of ``libfoo.so`` but then leak dynamic linking\\nto following libraries.  (See the ``LINK_SEARCH_END_STATIC``\\ntarget property for a solution typically used for that problem.)\\n\\nWhen the special case for libraries in implicit link directories was first\\nintroduced the list of implicit link directories was simply hard-coded\\n(e.g. ``/lib``, ``/usr/lib``, and a few others).  Since that time, CMake\\nhas learned to detect the implicit link directories used by the compiler\\nfront-end.  If necessary, the ``find_library()`` command could be\\ntaught to use this information to help find libraries of the proper\\narchitecture.\\n\\nFor these reasons, CMake 3.3 and above prefer to drop the special case\\nand link libraries by full path even when they are in implicit link\\ndirectories.  Policy ``CMP0060`` provides compatibility for existing\\nprojects.\\n\\nThe OLD behavior for this policy is to ask the linker to search for\\nlibraries whose full paths are known to be in implicit link directories.\\nThe NEW behavior for this policy is to link libraries by full path even\\nif they are in implicit link directories.\\n\\nThis policy was introduced in CMake version 3.3.  Unlike most policies,\\nCMake version 3.13.4 does *not* warn by default when this policy\\nis not set and simply uses OLD behavior.  See documentation of the\\n``CMAKE_POLICY_WARNING_CMP0060``\\nvariable to control the warning.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0061": [
        "CMP0061\\n-------\\n\\nCTest does not by default tell ``make`` to ignore errors (``-i``).\\n\\nThe ``ctest_build()`` and ``build_command()`` commands no\\nlonger generate build commands for :ref:`Makefile Generators` with\\nthe ``-i`` option.  Previously this was done to help build as much\\nof tested projects as possible.  However, this behavior is not\\nconsistent with other generators and also causes the return code\\nof the ``make`` tool to be meaningless.\\n\\nOf course users may still add this option manually by setting\\n``CTEST_BUILD_COMMAND`` or the ``MAKECOMMAND`` cache entry.\\nSee the :ref:`CTest Build Step` ``MakeCommand`` setting documentation\\nfor their effects.\\n\\nThe ``OLD`` behavior for this policy is to add ``-i`` to ``make``\\ncalls in CTest.  The ``NEW`` behavior for this policy is to not\\nadd ``-i``.\\n\\nThis policy was introduced in CMake version 3.3.  Unlike most policies,\\nCMake version 3.13.4 does *not* warn when this policy is not set and\\nsimply uses OLD behavior.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0062": [
        "CMP0062\\n-------\\n\\nDisallow install() of export() result.\\n\\nThe ``export()`` command generates a file containing\\n:ref:`Imported Targets`, which is suitable for use from the build\\ndirectory.  It is not suitable for installation because it contains absolute\\npaths to buildsystem locations, and is particular to a single build\\nconfiguration.\\n\\nThe ``install(EXPORT)`` generates and installs files which contain\\n:ref:`Imported Targets`.  These files are generated with relative paths\\n(unless the user specifies absolute paths), and are designed for\\nmulti-configuration use.  See :ref:`Creating Packages` for more.\\n\\nCMake 3.3 no longer allows the use of the ``install(FILES)`` command\\nwith the result of the ``export()`` command.\\n\\nThe ``OLD`` behavior for this policy is to allow installing the result of\\nan ``export()`` command.  The ``NEW`` behavior for this policy is\\nnot to allow installing the result of an ``export()`` command.\\n\\nThis policy was introduced in CMake version 3.3.  CMake version\\n3.13.4 warns when the policy is not set and uses ``OLD`` behavior.  Use\\nthe ``cmake_policy()`` command to set it to ``OLD`` or ``NEW``\\nexplicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0063": [
        "CMP0063\\n-------\\n\\nHonor visibility properties for all target types.\\n\\nThe ``<LANG>_VISIBILITY_PRESET`` and\\n``VISIBILITY_INLINES_HIDDEN`` target properties affect visibility\\nof symbols during dynamic linking.  When first introduced these properties\\naffected compilation of sources only in shared libraries, module libraries,\\nand executables with the ``ENABLE_EXPORTS`` property set.  This\\nwas sufficient for the basic use cases of shared libraries and executables\\nwith plugins.  However, some sources may be compiled as part of static\\nlibraries or object libraries and then linked into a shared library later.\\nCMake 3.3 and above prefer to honor these properties for sources compiled\\nin all target types.  This policy preserves compatibility for projects\\nexpecting the properties to work only for some target types.\\n\\nThe ``OLD`` behavior for this policy is to ignore the visibility properties\\nfor static libraries, object libraries, and executables without exports.\\nThe ``NEW`` behavior for this policy is to honor the visibility properties\\nfor all target types.\\n\\nThis policy was introduced in CMake version 3.3.  CMake version\\n3.13.4 warns when the policy is not set and uses ``OLD`` behavior.  Use\\nthe ``cmake_policy()`` command to set it to ``OLD`` or ``NEW``\\nexplicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0064": [
        "CMP0064\\n-------\\n\\nRecognize ``TEST`` as a operator for the ``if()`` command.\\n\\nThe ``TEST`` operator was added to the ``if()`` command to determine if a\\ngiven test name was created by the ``add_test()`` command.\\n\\nThe ``OLD`` behavior for this policy is to ignore the ``TEST`` operator.\\nThe ``NEW`` behavior is to interpret the ``TEST`` operator.\\n\\nThis policy was introduced in CMake version 3.4.  CMake version\\n3.13.4 warns when the policy is not set and uses ``OLD`` behavior.  Use\\nthe ``cmake_policy()`` command to set it to ``OLD`` or ``NEW``\\nexplicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0065": [
        "CMP0065\\n-------\\n\\nDo not add flags to export symbols from executables without\\nthe ``ENABLE_EXPORTS`` target property.\\n\\nCMake 3.3 and below, for historical reasons, always linked executables\\non some platforms with flags like ``-rdynamic`` to export symbols from\\nthe executables for use by any plugins they may load via ``dlopen``.\\nCMake 3.4 and above prefer to do this only for executables that are\\nexplicitly marked with the ``ENABLE_EXPORTS`` target property.\\n\\nThe ``OLD`` behavior of this policy is to always use the additional link\\nflags when linking executables regardless of the value of the\\n``ENABLE_EXPORTS`` target property.\\n\\nThe ``NEW`` behavior of this policy is to only use the additional link\\nflags when linking executables if the ``ENABLE_EXPORTS`` target\\nproperty is set to ``True``.\\n\\nThis policy was introduced in CMake version 3.4.  Unlike most policies,\\nCMake version 3.13.4 does *not* warn by default when this policy\\nis not set and simply uses OLD behavior.  See documentation of the\\n``CMAKE_POLICY_WARNING_CMP0065``\\nvariable to control the warning.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0066": [
        "CMP0066\\n-------\\n\\nHonor per-config flags in ``try_compile()`` source-file signature.\\n\\nThe source file signature of the ``try_compile()`` command uses the value\\nof the ``CMAKE_<LANG>_FLAGS`` variable in the test project so that the\\ntest compilation works as it would in the main project.  However, CMake 3.6 and\\nbelow do not also honor config-specific compiler flags such as those in the\\n``CMAKE_<LANG>_FLAGS_DEBUG`` variable.  CMake 3.7 and above prefer to\\nhonor config-specific compiler flags too.  This policy provides compatibility\\nfor projects that do not expect config-specific compiler flags to be used.\\n\\nThe ``OLD`` behavior of this policy is to ignore config-specific flag\\nvariables like ``CMAKE_<LANG>_FLAGS_DEBUG`` and only use CMake's\\nbuilt-in defaults for the current compiler and platform.\\n\\nThe ``NEW`` behavior of this policy is to honor config-specific flag\\nvariabldes like ``CMAKE_<LANG>_FLAGS_DEBUG``.\\n\\nThis policy was introduced in CMake version 3.7.  Unlike most policies,\\nCMake version 3.13.4 does *not* warn by default when this policy\\nis not set and simply uses OLD behavior.  See documentation of the\\n``CMAKE_POLICY_WARNING_CMP0066``\\nvariable to control the warning.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0067": [
        "CMP0067\\n-------\\n\\nHonor language standard in ``try_compile()`` source-file signature.\\n\\nThe ``try_compile()`` source file signature is intended to allow\\ncallers to check whether they will be able to compile a given source file\\nwith the current toolchain.  In order to match compiler behavior, any\\nlanguage standard mode should match.  However, CMake 3.7 and below did not\\ndo this.  CMake 3.8 and above prefer to honor the language standard settings\\nfor ``C``, ``CXX`` (C++), and ``CUDA`` using the values of the variables:\\n\\n* ``CMAKE_C_STANDARD``\\n* ``CMAKE_C_STANDARD_REQUIRED``\\n* ``CMAKE_C_EXTENSIONS``\\n* ``CMAKE_CXX_STANDARD``\\n* ``CMAKE_CXX_STANDARD_REQUIRED``\\n* ``CMAKE_CXX_EXTENSIONS``\\n* ``CMAKE_CUDA_STANDARD``\\n* ``CMAKE_CUDA_STANDARD_REQUIRED``\\n* ``CMAKE_CUDA_EXTENSIONS``\\n\\nThis policy provides compatibility for projects that do not expect\\nthe language standard settings to be used automatically.\\n\\nThe ``OLD`` behavior of this policy is to ignore language standard\\nsetting variables when generating the ``try_compile`` test project.\\nThe ``NEW`` behavior of this policy is to honor language standard\\nsetting variables.\\n\\nThis policy was introduced in CMake version 3.8.  Unlike most policies,\\nCMake version 3.13.4 does *not* warn by default when this policy\\nis not set and simply uses OLD behavior.  See documentation of the\\n``CMAKE_POLICY_WARNING_CMP0067``\\nvariable to control the warning.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0068": [
        "CMP0068\\n-------\\n\\n``RPATH`` settings on macOS do not affect ``install_name``.\\n\\nCMake 3.9 and newer remove any effect the following settings may have on the\\n``install_name`` of a target on macOS:\\n\\n* ``BUILD_WITH_INSTALL_RPATH`` target property\\n* ``SKIP_BUILD_RPATH`` target property\\n* ``CMAKE_SKIP_RPATH`` variable\\n* ``CMAKE_SKIP_INSTALL_RPATH`` variable\\n\\nPreviously, setting ``BUILD_WITH_INSTALL_RPATH`` had the effect of\\nsetting both the ``install_name`` of a target to ``INSTALL_NAME_DIR``\\nand the ``RPATH`` to ``INSTALL_RPATH``.  In CMake 3.9, it only affects\\nsetting of ``RPATH``.  However, if one wants ``INSTALL_NAME_DIR`` to\\napply to the target in the build tree, one may set\\n``BUILD_WITH_INSTALL_NAME_DIR``.\\n\\nIf ``SKIP_BUILD_RPATH``, ``CMAKE_SKIP_RPATH`` or\\n``CMAKE_SKIP_INSTALL_RPATH`` were used to strip the directory portion\\nof the ``install_name`` of a target, one may set ``INSTALL_NAME_DIR=\\\"\\\"``\\ninstead.\\n\\nThe ``OLD`` behavior of this policy is to use the ``RPATH`` settings for\\n``install_name`` on macOS.  The ``NEW`` behavior of this policy is to ignore\\nthe ``RPATH`` settings for ``install_name`` on macOS.\\n\\nThis policy was introduced in CMake version 3.9.  CMake version\\n3.13.4 warns when the policy is not set and uses ``OLD`` behavior.\\nUse the ``cmake_policy()`` command to set it to ``OLD`` or ``NEW``\\nexplicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0069": [
        "CMP0069\\n-------\\n\\n``INTERPROCEDURAL_OPTIMIZATION`` is enforced when enabled.\\n\\nCMake 3.9 and newer prefer to add IPO flags whenever the\\n``INTERPROCEDURAL_OPTIMIZATION`` target property is enabled and\\nproduce an error if flags are not known to CMake for the current compiler.\\nSince a given compiler may not support IPO flags in all environments in which\\nit is used, it is now the project's responsibility to use the\\n``CheckIPOSupported`` module to check for support before enabling the\\n``INTERPROCEDURAL_OPTIMIZATION`` target property.  This approach\\nallows a project to conditionally activate IPO when supported.  It also\\nallows an end user to set the ``CMAKE_INTERPROCEDURAL_OPTIMIZATION``\\nvariable in an environment known to support IPO even if the project does\\nnot enable the property.\\n\\nSince CMake 3.8 and lower only honored ``INTERPROCEDURAL_OPTIMIZATION``\\nfor the Intel compiler on Linux, some projects may unconditionally enable the\\ntarget property.  Policy ``CMP0069`` provides compatibility with such projects.\\n\\nThis policy takes effect whenever the IPO property is enabled.  The ``OLD``\\nbehavior for this policy is to add IPO flags only for Intel compiler on Linux.\\nThe ``NEW`` behavior for this policy is to add IPO flags for the current\\ncompiler or produce an error if CMake does not know the flags.\\n\\nThis policy was introduced in CMake version 3.9.  CMake version\\n3.13.4 warns when the policy is not set and uses ``OLD`` behavior.\\nUse the ``cmake_policy()`` command to set it to ``OLD`` or ``NEW``\\nexplicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n\\nExamples\\n^^^^^^^^\\n\\nBehave like CMake 3.8 and do not apply any IPO flags except for Intel compiler\\non Linux:\\n\\n cmake_minimum_required(VERSION 3.8)\\n project(foo)\\n\\n # ...\\n\\n set_property(TARGET ... PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE)\\n\\nUse the ``CheckIPOSupported`` module to detect whether IPO is\\nsupported by the current compiler, environment, and CMake version.\\nProduce a fatal error if support is not available:\\n\\n cmake_minimum_required(VERSION 3.9) # CMP0069 NEW\\n project(foo)\\n\\n include(CheckIPOSupported)\\n check_ipo_supported()\\n\\n # ...\\n\\n set_property(TARGET ... PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE)\\n\\nApply IPO flags only if compiler supports it:\\n\\n cmake_minimum_required(VERSION 3.9) # CMP0069 NEW\\n project(foo)\\n\\n include(CheckIPOSupported)\\n\\n # ...\\n\\n check_ipo_supported(RESULT result)\\n if(result)\\n   set_property(TARGET ... PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE)\\n endif()\\n\\nApply IPO flags without any checks.  This may lead to build errors if IPO\\nis not supported by the compiler in the current environment.  Produce an\\nerror if CMake does not know IPO flags for the current compiler:\\n\\n cmake_minimum_required(VERSION 3.9) # CMP0069 NEW\\n project(foo)\\n\\n # ...\\n\\n set_property(TARGET ... PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE)\\n",
        "policy"
    ],
    "CMP0070": [
        "CMP0070\\n-------\\n\\nDefine ``file(GENERATE)`` behavior for relative paths.\\n\\nCMake 3.10 and newer define that relative paths given to ``INPUT`` and\\n``OUTPUT`` arguments of ``file(GENERATE)`` are interpreted relative to the\\ncurrent source and binary directories, respectively.  CMake 3.9 and lower did\\nnot define any behavior for relative paths but did not diagnose them either\\nand accidentally treated them relative to the process working directory.\\nPolicy ``CMP0070`` provides compatibility with projects that used the old\\nundefined behavior.\\n\\nThis policy affects behavior of relative paths given to ``file(GENERATE)``.\\nThe ``OLD`` behavior for this policy is to treat the paths relative to the\\nworking directory of CMake.  The ``NEW`` behavior for this policy is to\\ninterpret relative paths with respect to the current source or binary\\ndirectory of the caller.\\n\\nThis policy was introduced in CMake version 3.10.  CMake version\\n3.13.4 warns when the policy is not set and uses ``OLD`` behavior.\\nUse the ``cmake_policy()`` command to set it to ``OLD`` or ``NEW``\\nexplicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0071": [
        "CMP0071\\n-------\\n\\nLet ``AUTOMOC`` and ``AUTOUIC`` process\\n``GENERATED`` files.\\n\\nSince version 3.10, CMake processes **regular** and ``GENERATED``\\nsource files in ``AUTOMOC`` and ``AUTOUIC``.\\nIn earlier CMake versions, only **regular** source files were processed.\\n``GENERATED`` source files were ignored silently.\\n\\nThis policy affects how source files that are ``GENERATED``\\nget treated in ``AUTOMOC`` and ``AUTOUIC``.\\n\\nThe ``OLD`` behavior for this policy is to ignore ``GENERATED``\\nsource files in ``AUTOMOC`` and ``AUTOUIC``.\\n\\nThe ``NEW`` behavior for this policy is to process ``GENERATED``\\nsource files in ``AUTOMOC`` and ``AUTOUIC`` just like regular\\nsource files.\\n\\n.. note::\\n\\n  To silence the CMP0071 warning source files can be excluded from\\n  ``AUTOMOC`` and ``AUTOUIC`` processing by setting the\\n  source file properties ``SKIP_AUTOMOC``, ``SKIP_AUTOUIC`` or\\n  ``SKIP_AUTOGEN``.\\n\\nSource skip example::\\n\\n # ...\\n set_property(SOURCE /path/to/file1.h PROPERTY SKIP_AUTOMOC ON)\\n set_property(SOURCE /path/to/file2.h PROPERTY SKIP_AUTOUIC ON)\\n set_property(SOURCE /path/to/file3.h PROPERTY SKIP_AUTOGEN ON)\\n # ...\\n\\nThis policy was introduced in CMake version 3.10.  CMake version\\n3.13.4 warns when the policy is not set and uses ``OLD`` behavior.\\nUse the ``cmake_policy()`` command to set it to ``OLD`` or ``NEW``\\nexplicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0072": [
        "CMP0072\\n-------\\n\\n``FindOpenGL`` prefers GLVND by default when available.\\n\\nThe ``FindOpenGL`` module provides an ``OpenGL::GL`` target and an\\n``OPENGL_LIBRARIES`` variable for projects to use for legacy GL interfaces.\\nWhen both a legacy GL library (e.g. ``libGL.so``) and GLVND libraries\\nfor OpenGL and GLX (e.g. ``libOpenGL.so`` and ``libGLX.so``) are available,\\nthe module must choose between them.  It documents an ``OpenGL_GL_PREFERENCE``\\nvariable that can be used to specify an explicit preference.  When no such\\npreference is set, the module must choose a default preference.\\n\\nCMake 3.11 and above prefer to choose GLVND libraries.  This policy provides\\ncompatibility with projects that expect the legacy GL library to be used.\\n\\nThe ``OLD`` behavior for this policy is to set ``OpenGL_GL_PREFERENCE`` to\\n``LEGACY``.  The ``NEW`` behavior for this policy is to set\\n``OpenGL_GL_PREFERENCE`` to ``GLVND``.\\n\\nThis policy was introduced in CMake version 3.11.  CMake version\\n3.13.4 warns when the policy is not set and uses ``OLD`` behavior.\\nUse the ``cmake_policy()`` command to set it to ``OLD`` or ``NEW``\\nexplicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0073": [
        "CMP0073\\n-------\\n\\nDo not produce legacy ``_LIB_DEPENDS`` cache entries.\\n\\nAncient CMake versions once used ``<tgt>_LIB_DEPENDS`` cache entries to\\npropagate library link dependencies.  This has long been done by other\\nmeans, leaving the ``export_library_dependencies()`` command as the\\nonly user of these values.  That command has long been disallowed by\\npolicy ``CMP0033``, but the ``<tgt>_LIB_DEPENDS`` cache entries\\nwere left for compatibility with possible non-standard uses by projects.\\n\\nCMake 3.12 and above now prefer to not produce these cache entries\\nat all.  This policy provides compatibility with projects that have\\nnot been updated to avoid using them.\\n\\nThe ``OLD`` behavior for this policy is to set ``<tgt>_LIB_DEPENDS`` cache\\nentries.  The ``NEW`` behavior for this policy is to not set them.\\n\\nThis policy was introduced in CMake version 3.12.  Use the\\n``cmake_policy()`` command to set it to ``OLD`` or ``NEW`` explicitly.\\nUnlike most policies, CMake version 3.13.4 does *not* warn\\nwhen this policy is not set and simply uses ``OLD`` behavior.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0074": [
        "CMP0074\\n-------\\n\\n``find_package()`` uses ``<PackageName>_ROOT`` variables.\\n\\nIn CMake 3.12 and above the ``find_package(<PackageName>)`` command now\\nsearches prefixes specified by the ``<PackageName>_ROOT`` CMake\\nvariable and the ``<PackageName>_ROOT`` environment variable.\\nPackage roots are maintained as a stack so nested calls to all ``find_*``\\ncommands inside find modules also search the roots as prefixes.  This policy\\nprovides compatibility with projects that have not been updated to avoid using\\n``<PackageName>_ROOT`` variables for other purposes.\\n\\nThe ``OLD`` behavior for this policy is to ignore ``<PackageName>_ROOT``\\nvariables.  The ``NEW`` behavior for this policy is to use\\n``<PackageName>_ROOT`` variables.\\n\\nThis policy was introduced in CMake version 3.12.  CMake version\\n3.13.4 warns when the policy is not set and uses ``OLD`` behavior.\\nUse the ``cmake_policy()`` command to set it to ``OLD`` or ``NEW``\\nexplicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0075": [
        "CMP0075\\n-------\\n\\nInclude file check macros honor ``CMAKE_REQUIRED_LIBRARIES``.\\n\\nIn CMake 3.12 and above, the\\n\\n* ``check_include_file`` macro in the ``CheckIncludeFile`` module, the\\n* ``check_include_file_cxx`` macro in the\\n  ``CheckIncludeFileCXX`` module, and the\\n* ``check_include_files`` macro in the ``CheckIncludeFiles`` module\\n\\nnow prefer to link the check executable to the libraries listed in the\\n``CMAKE_REQUIRED_LIBRARIES`` variable.  This policy provides compatibility\\nwith projects that have not been updated to expect this behavior.\\n\\nThe ``OLD`` behavior for this policy is to ignore ``CMAKE_REQUIRED_LIBRARIES``\\nin the include file check macros.  The ``NEW`` behavior of this policy is to\\nhonor ``CMAKE_REQUIRED_LIBRARIES`` in the include file check macros.\\n\\nThis policy was introduced in CMake version 3.12.  CMake version\\n3.13.4 warns when the policy is not set and uses ``OLD`` behavior.\\nUse the ``cmake_policy()`` command to set it to ``OLD`` or ``NEW``\\nexplicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0076": [
        "CMP0076\\n-------\\n\\nThe ``target_sources()`` command converts relative paths to absolute.\\n\\nIn CMake 3.13 and above, the ``target_sources()`` command now converts\\nrelative source file paths to absolute paths in the following cases:\\n\\n* Source files are added to the target's ``INTERFACE_SOURCES``\\n  property.\\n* The target's ``SOURCE_DIR`` property differs from\\n  ``CMAKE_CURRENT_SOURCE_DIR``.\\n\\nA path that begins with a generator expression is always left unmodified.\\n\\nThis policy provides compatibility with projects that have not been updated\\nto expect this behavior.  The ``OLD`` behavior for this policy is to leave\\nall relative source file paths unmodified.  The ``NEW`` behavior of this\\npolicy is to convert relative paths to absolute according to above rules.\\n\\nThis policy was introduced in CMake version 3.13.  CMake version\\n3.13.4 warns when the policy is not set and uses ``OLD`` behavior.\\nUse the ``cmake_policy()`` command to set it to ``OLD`` or ``NEW``\\nexplicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0077": [
        "CMP0077\\n-------\\n\\n``option()`` honors normal variables.\\n\\nThe ``option()`` command is typically used to create a cache entry\\nto allow users to set the option.  However, there are cases in which a\\nnormal (non-cached) variable of the same name as the option may be\\ndefined by the project prior to calling the ``option()`` command.\\nFor example, a project that embeds another project as a subdirectory\\nmay want to hard-code options of the subproject to build the way it needs.\\n\\nFor historical reasons in CMake 3.12 and below the ``option()``\\ncommand *removes* a normal (non-cached) variable of the same name when:\\n\\n* a cache entry of the specified name does not exist at all, or\\n* a cache entry of the specified name exists but has not been given\\n  a type (e.g. via ``-D<name>=ON`` on the command line).\\n\\nIn both of these cases (typically on the first run in a new build tree),\\nthe ``option()`` command gives the cache entry type ``BOOL`` and\\nremoves any normal (non-cached) variable of the same name.  In the\\nremaining case that the cache entry of the specified name already\\nexists and has a type (typically on later runs in a build tree), the\\n``option()`` command changes nothing and any normal variable of\\nthe same name remains set.\\n\\nIn CMake 3.13 and above the ``option()`` command prefers to\\ndo nothing when a normal variable of the given name already exists.\\nIt does not create or update a cache entry or remove the normal variable.\\nThe new behavior is consistent between the first and later runs in a\\nbuild tree.  This policy provides compatibility with projects that have\\nnot been updated to expect the new behavior.\\n\\nWhen the ``option()`` command sees a normal variable of the given\\nname:\\n\\n* The ``OLD`` behavior for this policy is to proceed even when a normal\\n  variable of the same name exists.  If the cache entry does not already\\n  exist and have a type then it is created and/or given a type and the\\n  normal variable is removed.\\n\\n* The ``NEW`` behavior for this policy is to do nothing when a normal\\n  variable of the same name exists.  The normal variable is not removed.\\n  The cache entry is not created or updated and is ignored if it exists.\\n\\nThis policy was introduced in CMake version 3.13.  CMake version\\n3.13.4 warns when the policy is not set and uses ``OLD`` behavior.\\nUse the ``cmake_policy()`` command to set it to ``OLD`` or ``NEW``\\nexplicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0078": [
        "CMP0078\\n-------\\n\\nStarting with CMake 3.13, ``UseSWIG`` generates now standard target\\nnames. This policy provides compatibility with projects that expect the legacy\\nbehavior.\\n\\nThe ``OLD`` behavior for this policy relies on\\n``UseSWIG_TARGET_NAME_PREFERENCE`` variable that can be used to specify an\\nexplicit preference.  The value may be one of:\\n\\n* ``LEGACY``: legacy strategy is applied. Variable\\n  ``SWIG_MODULE_<name>_REAL_NAME`` must be used to get real target name.\\n  This is the default if not specified.\\n* ``STANDARD``: target name matches specified name.\\n\\nThis policy was introduced in CMake version 3.13.  CMake version\\n3.13.4 warns when the policy is not set and uses ``OLD`` behavior.\\nUse the ``cmake_policy()`` command to set it to ``OLD`` or ``NEW``\\nexplicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0079": [
        "CMP0079\\n-------\\n\\n``target_link_libraries()`` allows use with targets in other directories.\\n\\nPrior to CMake 3.13 the ``target_link_libraries()`` command did not\\naccept targets not created in the calling directory as its first argument\\nfor calls that update the ``LINK_LIBRARIES`` of the target itself.\\nIt did accidentally accept targets from other directories on calls that\\nonly update the ``INTERFACE_LINK_LIBRARIES``, but would simply\\nadd entries to the property as if the call were made in the original\\ndirectory.  Thus link interface libraries specified this way were always\\nlooked up by generators in the scope of the original target rather than\\nin the scope that called ``target_link_libraries()``.\\n\\nCMake 3.13 now allows the ``target_link_libraries()`` command to\\nbe called from any directory to add link dependencies and link interface\\nlibraries to targets created in other directories.  The entries are added\\nto ``LINK_LIBRARIES`` and ``INTERFACE_LINK_LIBRARIES``\\nusing a special (internal) suffix to tell the generators to look up the\\nnames in the calling scope rather than the scope that created the target.\\n\\nThis policy provides compatibility with projects that already use\\n``target_link_libraries()`` with the ``INTERFACE`` keyword\\non a target in another directory to add ``INTERFACE_LINK_LIBRARIES``\\nentries to be looked up in the target's directory.  Such projects should\\nbe updated to be aware of the new scoping rules in that case.\\n\\nThe ``OLD`` behavior of this policy is to disallow\\n``target_link_libraries()`` calls naming targets from another directory\\nexcept in the previously accidentally allowed case of using the ``INTERFACE``\\nkeyword only.  The ``NEW`` behavior of this policy is to allow all such\\ncalls but use the new scoping rules.\\n\\nThis policy was introduced in CMake version 3.13.  CMake version\\n3.13.4 warns when the policy is not set and uses ``OLD`` behavior.\\nUse the ``cmake_policy()`` command to set it to ``OLD`` or ``NEW``\\nexplicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0080": [
        "CMP0080\\n-------\\n\\n``BundleUtilities`` cannot be included at configure time.\\n\\nThe macros provided by ``BundleUtilities`` are intended to be invoked\\nat install time rather than at configure time, because they depend on the\\nlisted targets already existing at the time they are invoked. If they are\\ninvoked at configure time, the targets haven't been built yet, and the\\ncommands will fail.\\n\\nThis policy restricts the inclusion of ``BundleUtilities`` to\\n``cmake -P`` style scripts and install rules. Specifically, it looks for the\\npresence of ``CMAKE_GENERATOR`` and throws a fatal error if it exists.\\n\\nThe ``OLD`` behavior of this policy is to allow ``BundleUtilities`` to\\nbe included at configure time. The ``NEW`` behavior of this policy is to\\ndisallow such inclusion.\\n\\nThis policy was introduced in CMake version 3.13.  CMake version\\n3.13.4 warns when the policy is not set and uses ``OLD`` behavior.\\nUse the ``cmake_policy()`` command to set it to ``OLD`` or ``NEW``\\nexplicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "CMP0081": [
        "CMP0081\\n-------\\n\\nRelative paths not allowed in ``LINK_DIRECTORIES`` target property.\\n\\nCMake 3.12 and lower allowed the ``LINK_DIRECTORIES`` directory\\nproperty to contain relative paths.  The base path for such relative\\nentries is not well defined.  CMake 3.13 and later will issue a\\n``FATAL_ERROR`` if the ``LINK_DIRECTORIES`` target property\\n(which is initialized by the ``LINK_DIRECTORIES`` directory property)\\ncontains a relative path.\\n\\nThe ``OLD`` behavior for this policy is not to warn about relative paths\\nin the ``LINK_DIRECTORIES`` target property.  The ``NEW`` behavior for\\nthis policy is to issue a ``FATAL_ERROR`` if ``LINK_DIRECTORIES``\\ncontains a relative path.\\n\\nThis policy was introduced in CMake version 3.13.  CMake version\\n3.13.4 warns when the policy is not set and uses ``OLD`` behavior.  Use\\nthe ``cmake_policy()`` command to set it to ``OLD`` or ``NEW`` explicitly.\\n\\n.. note::\\n  The ``OLD`` behavior of a policy is\\n  ``deprecated by definition``\\n  and may be removed in a future version of CMake.\\n",
        "policy"
    ],
    "<PROJECT-NAME>_BINARY_DIR": [
        "<PROJECT-NAME>_BINARY_DIR\\n-------------------------\\n\\nTop level binary directory for the named project.\\n\\nA variable is created with the name used in the ``project()`` command,\\nand is the binary directory for the project.  This can be useful when\\n``add_subdirectory()`` is used to connect several projects.\\n",
        "variable"
    ],
    "<PROJECT-NAME>_DESCRIPTION": [
        "<PROJECT-NAME>_DESCRIPTION\\n--------------------------\\n\\nValue given to the ``DESCRIPTION`` option of the most recent call to the\\n``project()`` command with project name ``<PROJECT-NAME>``, if any.\\n",
        "variable"
    ],
    "<PROJECT-NAME>_HOMEPAGE_URL": [
        "<PROJECT-NAME>_HOMEPAGE_URL\\n---------------------------\\n\\nValue given to the ``HOMEPAGE_URL`` option of the most recent call to the\\n``project()`` command with project name ``<PROJECT-NAME>``, if any.\\n",
        "variable"
    ],
    "<PROJECT-NAME>_SOURCE_DIR": [
        "<PROJECT-NAME>_SOURCE_DIR\\n-------------------------\\n\\nTop level source directory for the named project.\\n\\nA variable is created with the name used in the ``project()`` command,\\nand is the source directory for the project.  This can be useful when\\n``add_subdirectory()`` is used to connect several projects.\\n",
        "variable"
    ],
    "<PROJECT-NAME>_VERSION": [
        "<PROJECT-NAME>_VERSION\\n----------------------\\n\\nValue given to the ``VERSION`` option of the most recent call to the\\n``project()`` command with project name ``<PROJECT-NAME>``, if any.\\n\\nSee also the component-wise version variables\\n``<PROJECT-NAME>_VERSION_MAJOR``,\\n``<PROJECT-NAME>_VERSION_MINOR``,\\n``<PROJECT-NAME>_VERSION_PATCH``, and\\n``<PROJECT-NAME>_VERSION_TWEAK``.\\n",
        "variable"
    ],
    "<PROJECT-NAME>_VERSION_MAJOR": [
        "<PROJECT-NAME>_VERSION_MAJOR\\n----------------------------\\n\\nFirst version number component of the ``<PROJECT-NAME>_VERSION``\\nvariable as set by the ``project()`` command.\\n",
        "variable"
    ],
    "<PROJECT-NAME>_VERSION_MINOR": [
        "<PROJECT-NAME>_VERSION_MINOR\\n----------------------------\\n\\nSecond version number component of the ``<PROJECT-NAME>_VERSION``\\nvariable as set by the ``project()`` command.\\n",
        "variable"
    ],
    "<PROJECT-NAME>_VERSION_PATCH": [
        "<PROJECT-NAME>_VERSION_PATCH\\n----------------------------\\n\\nThird version number component of the ``<PROJECT-NAME>_VERSION``\\nvariable as set by the ``project()`` command.\\n",
        "variable"
    ],
    "<PROJECT-NAME>_VERSION_TWEAK": [
        "<PROJECT-NAME>_VERSION_TWEAK\\n----------------------------\\n\\nFourth version number component of the ``<PROJECT-NAME>_VERSION``\\nvariable as set by the ``project()`` command.\\n",
        "variable"
    ],
    "<PackageName>_ROOT": [
        "<PackageName>_ROOT\\n------------------\\n\\nCalls to ``find_package(<PackageName>)`` will search in prefixes\\nspecified by the ``<PackageName>_ROOT`` CMake variable, where\\n``<PackageName>`` is the name given to the ``find_package`` call\\nand ``_ROOT`` is literal.  For example, ``find_package(Foo)`` will search\\nprefixes specified in the ``Foo_ROOT`` CMake variable (if set).\\nSee policy ``CMP0074``.\\n\\nThis variable may hold a single prefix or a\\n:ref:`;-list <CMake Language Lists>` of multiple prefixes.\\n\\nSee also the ``<PackageName>_ROOT`` environment variable.\\n",
        "variable"
    ],
    "ANDROID": [
        "ANDROID\\n-------\\n\\nSet to ``1`` when the target system (``CMAKE_SYSTEM_NAME``) is\\n``Android``.\\n",
        "variable"
    ],
    "APPLE": [
        "APPLE\\n-----\\n\\nSet to ``True`` when the target system is an Apple platform\\n(macOS, iOS, tvOS or watchOS).\\n",
        "variable"
    ],
    "BORLAND": [
        "BORLAND\\n-------\\n\\n``True`` if the Borland compiler is being used.\\n\\nThis is set to ``true`` if the Borland compiler is being used.\\n",
        "variable"
    ],
    "BUILD_SHARED_LIBS": [
        "BUILD_SHARED_LIBS\\n-----------------\\n\\nGlobal flag to cause ``add_library()`` to create shared libraries if on.\\n\\nIf present and true, this will cause all libraries to be built shared\\nunless the library was explicitly added as a static library.  This\\nvariable is often added to projects as an ``option()`` so that each user\\nof a project can decide if they want to build the project using shared or\\nstatic libraries.\\n",
        "variable"
    ],
    "CACHE": [
        "CACHE\\n-----\\n\\nRead cache variables.\\n\\nUse the syntax ``$CACHE{VAR}`` to read cache entry ``VAR``.\\nSee the :ref:`cmake-language(7) variables <CMake Language Variables>`\\ndocumentation for more complete documentation of the interaction of\\nnormal variables and cache entries.\\n\\nWhen evaluating :ref:`Variable References` of the form ``${VAR}``,\\nCMake first searches for a normal variable with that name, and if not\\nfound CMake will search for a cache entry with that name.\\nThe ``$CACHE{VAR}`` syntax can be used to do direct cache lookup and\\nignore any existing normal variable.\\n\\nSee the ``set()`` command to see how to write cache variables.\\n",
        "variable"
    ],
    "CMAKE_DEBUG_POSTFIX": [
        "CMAKE_DEBUG_POSTFIX\\n-------------------\\n\\nSee variable ``CMAKE_<CONFIG>_POSTFIX``.\\n\\nThis variable is a special case of the more-general\\n``CMAKE_<CONFIG>_POSTFIX`` variable for the `DEBUG` configuration.\\n",
        "variable"
    ],
    "CMAKE_RELEASE_POSTFIX": [
        "CMAKE_<CONFIG>_POSTFIX\\n----------------------\\n\\nDefault filename postfix for libraries under configuration ``<CONFIG>``.\\n\\nWhen a non-executable target is created its ``<CONFIG>_POSTFIX``\\ntarget property is initialized with the value of this variable if it is set.\\n",
        "variable"
    ],
    "CMAKE_C_ANDROID_TOOLCHAIN_MACHINE": [
        "CMAKE_<LANG>_ANDROID_TOOLCHAIN_MACHINE\\n--------------------------------------\\n\\nWhen :ref:`Cross Compiling for Android` this variable contains the\\ntoolchain binutils machine name (e.g. ``gcc -dumpmachine``).  The\\nbinutils typically have a ``<machine>-`` prefix on their name.\\n\\nSee also ``CMAKE_<LANG>_ANDROID_TOOLCHAIN_PREFIX``\\nand ``CMAKE_<LANG>_ANDROID_TOOLCHAIN_SUFFIX``.\\n",
        "variable"
    ],
    "CMAKE_CXX_ANDROID_TOOLCHAIN_MACHINE": [
        "CMAKE_<LANG>_ANDROID_TOOLCHAIN_MACHINE\\n--------------------------------------\\n\\nWhen :ref:`Cross Compiling for Android` this variable contains the\\ntoolchain binutils machine name (e.g. ``gcc -dumpmachine``).  The\\nbinutils typically have a ``<machine>-`` prefix on their name.\\n\\nSee also ``CMAKE_<LANG>_ANDROID_TOOLCHAIN_PREFIX``\\nand ``CMAKE_<LANG>_ANDROID_TOOLCHAIN_SUFFIX``.\\n",
        "variable"
    ],
    "CMAKE_C_ANDROID_TOOLCHAIN_PREFIX": [
        "CMAKE_<LANG>_ANDROID_TOOLCHAIN_PREFIX\\n-------------------------------------\\n\\nWhen :ref:`Cross Compiling for Android` this variable contains the absolute\\npath prefixing the toolchain GNU compiler and its binutils.\\n\\nSee also ``CMAKE_<LANG>_ANDROID_TOOLCHAIN_SUFFIX``\\nand ``CMAKE_<LANG>_ANDROID_TOOLCHAIN_MACHINE``.\\n\\nFor example, the path to the linker is::\\n\\n ${CMAKE_CXX_ANDROID_TOOLCHAIN_PREFIX}ld${CMAKE_CXX_ANDROID_TOOLCHAIN_SUFFIX}\\n",
        "variable"
    ],
    "CMAKE_CXX_ANDROID_TOOLCHAIN_PREFIX": [
        "CMAKE_<LANG>_ANDROID_TOOLCHAIN_PREFIX\\n-------------------------------------\\n\\nWhen :ref:`Cross Compiling for Android` this variable contains the absolute\\npath prefixing the toolchain GNU compiler and its binutils.\\n\\nSee also ``CMAKE_<LANG>_ANDROID_TOOLCHAIN_SUFFIX``\\nand ``CMAKE_<LANG>_ANDROID_TOOLCHAIN_MACHINE``.\\n\\nFor example, the path to the linker is::\\n\\n ${CMAKE_CXX_ANDROID_TOOLCHAIN_PREFIX}ld${CMAKE_CXX_ANDROID_TOOLCHAIN_SUFFIX}\\n",
        "variable"
    ],
    "CMAKE_C_ANDROID_TOOLCHAIN_SUFFIX": [
        "CMAKE_<LANG>_ANDROID_TOOLCHAIN_SUFFIX\\n-------------------------------------\\n\\nWhen :ref:`Cross Compiling for Android` this variable contains the\\nhost platform suffix of the toolchain GNU compiler and its binutils.\\n\\nSee also ``CMAKE_<LANG>_ANDROID_TOOLCHAIN_PREFIX``\\nand ``CMAKE_<LANG>_ANDROID_TOOLCHAIN_MACHINE``.\\n",
        "variable"
    ],
    "CMAKE_CXX_ANDROID_TOOLCHAIN_SUFFIX": [
        "CMAKE_<LANG>_ANDROID_TOOLCHAIN_SUFFIX\\n-------------------------------------\\n\\nWhen :ref:`Cross Compiling for Android` this variable contains the\\nhost platform suffix of the toolchain GNU compiler and its binutils.\\n\\nSee also ``CMAKE_<LANG>_ANDROID_TOOLCHAIN_PREFIX``\\nand ``CMAKE_<LANG>_ANDROID_TOOLCHAIN_MACHINE``.\\n",
        "variable"
    ],
    "CMAKE_C_ARCHIVE_APPEND": [
        "CMAKE_<LANG>_ARCHIVE_APPEND\\n---------------------------\\n\\nRule variable to append to a static archive.\\n\\nThis is a rule variable that tells CMake how to append to a static\\narchive.  It is used in place of ``CMAKE_<LANG>_CREATE_STATIC_LIBRARY``\\non some platforms in order to support large object counts.  See also\\n``CMAKE_<LANG>_ARCHIVE_CREATE`` and\\n``CMAKE_<LANG>_ARCHIVE_FINISH``.\\n",
        "variable"
    ],
    "CMAKE_CXX_ARCHIVE_APPEND": [
        "CMAKE_<LANG>_ARCHIVE_APPEND\\n---------------------------\\n\\nRule variable to append to a static archive.\\n\\nThis is a rule variable that tells CMake how to append to a static\\narchive.  It is used in place of ``CMAKE_<LANG>_CREATE_STATIC_LIBRARY``\\non some platforms in order to support large object counts.  See also\\n``CMAKE_<LANG>_ARCHIVE_CREATE`` and\\n``CMAKE_<LANG>_ARCHIVE_FINISH``.\\n",
        "variable"
    ],
    "CMAKE_C_ARCHIVE_CREATE": [
        "CMAKE_<LANG>_ARCHIVE_CREATE\\n---------------------------\\n\\nRule variable to create a new static archive.\\n\\nThis is a rule variable that tells CMake how to create a static\\narchive.  It is used in place of ``CMAKE_<LANG>_CREATE_STATIC_LIBRARY``\\non some platforms in order to support large object counts.  See also\\n``CMAKE_<LANG>_ARCHIVE_APPEND`` and\\n``CMAKE_<LANG>_ARCHIVE_FINISH``.\\n",
        "variable"
    ],
    "CMAKE_CXX_ARCHIVE_CREATE": [
        "CMAKE_<LANG>_ARCHIVE_CREATE\\n---------------------------\\n\\nRule variable to create a new static archive.\\n\\nThis is a rule variable that tells CMake how to create a static\\narchive.  It is used in place of ``CMAKE_<LANG>_CREATE_STATIC_LIBRARY``\\non some platforms in order to support large object counts.  See also\\n``CMAKE_<LANG>_ARCHIVE_APPEND`` and\\n``CMAKE_<LANG>_ARCHIVE_FINISH``.\\n",
        "variable"
    ],
    "CMAKE_C_ARCHIVE_FINISH": [
        "CMAKE_<LANG>_ARCHIVE_FINISH\\n---------------------------\\n\\nRule variable to finish an existing static archive.\\n\\nThis is a rule variable that tells CMake how to finish a static\\narchive.  It is used in place of ``CMAKE_<LANG>_CREATE_STATIC_LIBRARY``\\non some platforms in order to support large object counts.  See also\\n``CMAKE_<LANG>_ARCHIVE_CREATE`` and\\n``CMAKE_<LANG>_ARCHIVE_APPEND``.\\n",
        "variable"
    ],
    "CMAKE_CXX_ARCHIVE_FINISH": [
        "CMAKE_<LANG>_ARCHIVE_FINISH\\n---------------------------\\n\\nRule variable to finish an existing static archive.\\n\\nThis is a rule variable that tells CMake how to finish a static\\narchive.  It is used in place of ``CMAKE_<LANG>_CREATE_STATIC_LIBRARY``\\non some platforms in order to support large object counts.  See also\\n``CMAKE_<LANG>_ARCHIVE_CREATE`` and\\n``CMAKE_<LANG>_ARCHIVE_APPEND``.\\n",
        "variable"
    ],
    "CMAKE_C_CLANG_TIDY": [
        "CMAKE_<LANG>_CLANG_TIDY\\n-----------------------\\n\\nDefault value for ``<LANG>_CLANG_TIDY`` target property\\nwhen ``<LANG>`` is ``C`` or ``CXX``.\\n\\nThis variable is used to initialize the property on each target as it is\\ncreated.  For example:\\n\\n set(CMAKE_CXX_CLANG_TIDY clang-tidy -checks=-*,readability-*)\\n add_executable(foo foo.cxx)\\n",
        "variable"
    ],
    "CMAKE_CXX_CLANG_TIDY": [
        "CMAKE_<LANG>_CLANG_TIDY\\n-----------------------\\n\\nDefault value for ``<LANG>_CLANG_TIDY`` target property\\nwhen ``<LANG>`` is ``C`` or ``CXX``.\\n\\nThis variable is used to initialize the property on each target as it is\\ncreated.  For example:\\n\\n set(CMAKE_CXX_CLANG_TIDY clang-tidy -checks=-*,readability-*)\\n add_executable(foo foo.cxx)\\n",
        "variable"
    ],
    "CMAKE_C_COMPILER": [
        "CMAKE_<LANG>_COMPILER\\n---------------------\\n\\nThe full path to the compiler for ``LANG``.\\n\\nThis is the command that will be used as the ``<LANG>`` compiler.  Once\\nset, you can not change this variable.\\n",
        "variable"
    ],
    "CMAKE_CXX_COMPILER": [
        "CMAKE_<LANG>_COMPILER\\n---------------------\\n\\nThe full path to the compiler for ``LANG``.\\n\\nThis is the command that will be used as the ``<LANG>`` compiler.  Once\\nset, you can not change this variable.\\n",
        "variable"
    ],
    "CMAKE_C_COMPILER_ABI": [
        "CMAKE_<LANG>_COMPILER_ABI\\n-------------------------\\n\\nAn internal variable subject to change.\\n\\nThis is used in determining the compiler ABI and is subject to change.\\n",
        "variable"
    ],
    "CMAKE_CXX_COMPILER_ABI": [
        "CMAKE_<LANG>_COMPILER_ABI\\n-------------------------\\n\\nAn internal variable subject to change.\\n\\nThis is used in determining the compiler ABI and is subject to change.\\n",
        "variable"
    ],
    "CMAKE_C_COMPILER_AR": [
        "CMAKE_<LANG>_COMPILER_AR\\n------------------------\\n\\nA wrapper around ``ar`` adding the appropriate ``--plugin`` option for the\\ncompiler.\\n\\nSee also ``CMAKE_AR``.\\n",
        "variable"
    ],
    "CMAKE_CXX_COMPILER_AR": [
        "CMAKE_<LANG>_COMPILER_AR\\n------------------------\\n\\nA wrapper around ``ar`` adding the appropriate ``--plugin`` option for the\\ncompiler.\\n\\nSee also ``CMAKE_AR``.\\n",
        "variable"
    ],
    "CMAKE_C_COMPILER_ARCHITECTURE_ID": [
        "CMAKE_<LANG>_COMPILER_ARCHITECTURE_ID\\n-------------------------------------\\n\\nAn internal variable subject to change.\\n\\nThis is used to identify the variant of a compiler based on its target\\narchitecture.  For some compilers this is needed to determine the correct\\nusage.\\n",
        "variable"
    ],
    "CMAKE_CXX_COMPILER_ARCHITECTURE_ID": [
        "CMAKE_<LANG>_COMPILER_ARCHITECTURE_ID\\n-------------------------------------\\n\\nAn internal variable subject to change.\\n\\nThis is used to identify the variant of a compiler based on its target\\narchitecture.  For some compilers this is needed to determine the correct\\nusage.\\n",
        "variable"
    ],
    "CMAKE_C_COMPILER_EXTERNAL_TOOLCHAIN": [
        "CMAKE_<LANG>_COMPILER_EXTERNAL_TOOLCHAIN\\n----------------------------------------\\n\\nThe external toolchain for cross-compiling, if supported.\\n\\nSome compiler toolchains do not ship their own auxiliary utilities such as\\narchivers and linkers.  The compiler driver may support a command-line argument\\nto specify the location of such tools.\\n``CMAKE_<LANG>_COMPILER_EXTERNAL_TOOLCHAIN`` may be set to a path to\\nthe external toolchain and will be passed to the compiler driver if supported.\\n\\nThis variable may only be set in a toolchain file specified by\\nthe ``CMAKE_TOOLCHAIN_FILE`` variable.\\n",
        "variable"
    ],
    "CMAKE_CXX_COMPILER_EXTERNAL_TOOLCHAIN": [
        "CMAKE_<LANG>_COMPILER_EXTERNAL_TOOLCHAIN\\n----------------------------------------\\n\\nThe external toolchain for cross-compiling, if supported.\\n\\nSome compiler toolchains do not ship their own auxiliary utilities such as\\narchivers and linkers.  The compiler driver may support a command-line argument\\nto specify the location of such tools.\\n``CMAKE_<LANG>_COMPILER_EXTERNAL_TOOLCHAIN`` may be set to a path to\\nthe external toolchain and will be passed to the compiler driver if supported.\\n\\nThis variable may only be set in a toolchain file specified by\\nthe ``CMAKE_TOOLCHAIN_FILE`` variable.\\n",
        "variable"
    ],
    "CMAKE_C_COMPILER_ID": [
        "CMAKE_<LANG>_COMPILER_ID\\n------------------------\\n\\nCompiler identification string.\\n\\nA short string unique to the compiler vendor.  Possible values\\ninclude:\\n\\n::\\n\\n Absoft = Absoft Fortran (absoft.com)\\n ADSP = Analog VisualDSP++ (analog.com)\\n AppleClang = Apple Clang (apple.com)\\n ARMCC = ARM Compiler (arm.com)\\n Bruce = Bruce C Compiler\\n CCur = Concurrent Fortran (ccur.com)\\n Clang = LLVM Clang (clang.llvm.org)\\n Cray = Cray Compiler (cray.com)\\n Embarcadero, Borland = Embarcadero (embarcadero.com)\\n G95 = G95 Fortran (g95.org)\\n GNU = GNU Compiler Collection (gcc.gnu.org)\\n HP = Hewlett-Packard Compiler (hp.com)\\n IAR = IAR Systems (iar.com)\\n Intel = Intel Compiler (intel.com)\\n MIPSpro = SGI MIPSpro (sgi.com)\\n MSVC = Microsoft Visual Studio (microsoft.com)\\n NVIDIA = NVIDIA CUDA Compiler (nvidia.com)\\n OpenWatcom = Open Watcom (openwatcom.org)\\n PGI = The Portland Group (pgroup.com)\\n Flang = Flang Fortran Compiler\\n PathScale = PathScale (pathscale.com)\\n SDCC = Small Device C Compiler (sdcc.sourceforge.net)\\n SunPro = Oracle Solaris Studio (oracle.com)\\n TI = Texas Instruments (ti.com)\\n TinyCC = Tiny C Compiler (tinycc.org)\\n XL, VisualAge, zOS = IBM XL (ibm.com)\\n\\nThis variable is not guaranteed to be defined for all compilers or\\nlanguages.\\n",
        "variable"
    ],
    "CMAKE_CXX_COMPILER_ID": [
        "CMAKE_<LANG>_COMPILER_ID\\n------------------------\\n\\nCompiler identification string.\\n\\nA short string unique to the compiler vendor.  Possible values\\ninclude:\\n\\n::\\n\\n Absoft = Absoft Fortran (absoft.com)\\n ADSP = Analog VisualDSP++ (analog.com)\\n AppleClang = Apple Clang (apple.com)\\n ARMCC = ARM Compiler (arm.com)\\n Bruce = Bruce C Compiler\\n CCur = Concurrent Fortran (ccur.com)\\n Clang = LLVM Clang (clang.llvm.org)\\n Cray = Cray Compiler (cray.com)\\n Embarcadero, Borland = Embarcadero (embarcadero.com)\\n G95 = G95 Fortran (g95.org)\\n GNU = GNU Compiler Collection (gcc.gnu.org)\\n HP = Hewlett-Packard Compiler (hp.com)\\n IAR = IAR Systems (iar.com)\\n Intel = Intel Compiler (intel.com)\\n MIPSpro = SGI MIPSpro (sgi.com)\\n MSVC = Microsoft Visual Studio (microsoft.com)\\n NVIDIA = NVIDIA CUDA Compiler (nvidia.com)\\n OpenWatcom = Open Watcom (openwatcom.org)\\n PGI = The Portland Group (pgroup.com)\\n Flang = Flang Fortran Compiler\\n PathScale = PathScale (pathscale.com)\\n SDCC = Small Device C Compiler (sdcc.sourceforge.net)\\n SunPro = Oracle Solaris Studio (oracle.com)\\n TI = Texas Instruments (ti.com)\\n TinyCC = Tiny C Compiler (tinycc.org)\\n XL, VisualAge, zOS = IBM XL (ibm.com)\\n\\nThis variable is not guaranteed to be defined for all compilers or\\nlanguages.\\n",
        "variable"
    ],
    "CMAKE_C_COMPILER_LAUNCHER": [
        "CMAKE_<LANG>_COMPILER_LAUNCHER\\n------------------------------\\n\\nDefault value for ``<LANG>_COMPILER_LAUNCHER`` target property.\\nThis variable is used to initialize the property on each target as it is\\ncreated.  This is done only when ``<LANG>`` is ``C``, ``CXX``, ``Fortran``,\\nor ``CUDA``.\\n",
        "variable"
    ],
    "CMAKE_CXX_COMPILER_LAUNCHER": [
        "CMAKE_<LANG>_COMPILER_LAUNCHER\\n------------------------------\\n\\nDefault value for ``<LANG>_COMPILER_LAUNCHER`` target property.\\nThis variable is used to initialize the property on each target as it is\\ncreated.  This is done only when ``<LANG>`` is ``C``, ``CXX``, ``Fortran``,\\nor ``CUDA``.\\n",
        "variable"
    ],
    "CMAKE_C_COMPILER_LOADED": [
        "CMAKE_<LANG>_COMPILER_LOADED\\n----------------------------\\n\\nDefined to true if the language is enabled.\\n\\nWhen language ``<LANG>`` is enabled by ``project()`` or\\n``enable_language()`` this variable is defined to ``1``.\\n",
        "variable"
    ],
    "CMAKE_CXX_COMPILER_LOADED": [
        "CMAKE_<LANG>_COMPILER_LOADED\\n----------------------------\\n\\nDefined to true if the language is enabled.\\n\\nWhen language ``<LANG>`` is enabled by ``project()`` or\\n``enable_language()`` this variable is defined to ``1``.\\n",
        "variable"
    ],
    "CMAKE_C_COMPILER_PREDEFINES_COMMAND": [
        "CMAKE_<LANG>_COMPILER_PREDEFINES_COMMAND\\n----------------------------------------\\n\\nCommand that outputs the compiler pre definitions.\\n\\nSee ``AUTOMOC`` which uses\\n``CMAKE_CXX_COMPILER_PREDEFINES_COMMAND``\\nto generate the ``AUTOMOC_COMPILER_PREDEFINES``.\\n",
        "variable"
    ],
    "CMAKE_CXX_COMPILER_PREDEFINES_COMMAND": [
        "CMAKE_<LANG>_COMPILER_PREDEFINES_COMMAND\\n----------------------------------------\\n\\nCommand that outputs the compiler pre definitions.\\n\\nSee ``AUTOMOC`` which uses\\n``CMAKE_CXX_COMPILER_PREDEFINES_COMMAND``\\nto generate the ``AUTOMOC_COMPILER_PREDEFINES``.\\n",
        "variable"
    ],
    "CMAKE_C_COMPILER_RANLIB": [
        "CMAKE_<LANG>_COMPILER_RANLIB\\n----------------------------\\n\\nA wrapper around ``ranlib`` adding the appropriate ``--plugin`` option for the\\ncompiler.\\n\\nSee also ``CMAKE_RANLIB``.\\n",
        "variable"
    ],
    "CMAKE_CXX_COMPILER_RANLIB": [
        "CMAKE_<LANG>_COMPILER_RANLIB\\n----------------------------\\n\\nA wrapper around ``ranlib`` adding the appropriate ``--plugin`` option for the\\ncompiler.\\n\\nSee also ``CMAKE_RANLIB``.\\n",
        "variable"
    ],
    "CMAKE_C_COMPILER_TARGET": [
        "CMAKE_<LANG>_COMPILER_TARGET\\n----------------------------\\n\\nThe target for cross-compiling, if supported.\\n\\nSome compiler drivers are inherently cross-compilers, such as clang and\\nQNX qcc. These compiler drivers support a command-line argument to specify\\nthe target to cross-compile for.\\n\\nThis variable may only be set in a toolchain file specified by\\nthe ``CMAKE_TOOLCHAIN_FILE`` variable.\\n",
        "variable"
    ],
    "CMAKE_CXX_COMPILER_TARGET": [
        "CMAKE_<LANG>_COMPILER_TARGET\\n----------------------------\\n\\nThe target for cross-compiling, if supported.\\n\\nSome compiler drivers are inherently cross-compilers, such as clang and\\nQNX qcc. These compiler drivers support a command-line argument to specify\\nthe target to cross-compile for.\\n\\nThis variable may only be set in a toolchain file specified by\\nthe ``CMAKE_TOOLCHAIN_FILE`` variable.\\n",
        "variable"
    ],
    "CMAKE_C_COMPILER_VERSION": [
        "CMAKE_<LANG>_COMPILER_VERSION\\n-----------------------------\\n\\nCompiler version string.\\n\\nCompiler version in major[.minor[.patch[.tweak]]] format.  This\\nvariable is not guaranteed to be defined for all compilers or\\nlanguages.\\n\\nFor example ``CMAKE_C_COMPILER_VERSION`` and\\n``CMAKE_CXX_COMPILER_VERSION`` might indicate the respective C and C++\\ncompiler version.\\n",
        "variable"
    ],
    "CMAKE_CXX_COMPILER_VERSION": [
        "CMAKE_<LANG>_COMPILER_VERSION\\n-----------------------------\\n\\nCompiler version string.\\n\\nCompiler version in major[.minor[.patch[.tweak]]] format.  This\\nvariable is not guaranteed to be defined for all compilers or\\nlanguages.\\n\\nFor example ``CMAKE_C_COMPILER_VERSION`` and\\n``CMAKE_CXX_COMPILER_VERSION`` might indicate the respective C and C++\\ncompiler version.\\n",
        "variable"
    ],
    "CMAKE_C_COMPILER_VERSION_INTERNAL": [
        "CMAKE_<LANG>_COMPILER_VERSION_INTERNAL\\n--------------------------------------\\n\\nAn internal variable subject to change.\\n\\nThis is used to identify the variant of a compiler based on an internal\\nversion number.  For some compilers this is needed to determine the\\ncorrect usage.\\n",
        "variable"
    ],
    "CMAKE_CXX_COMPILER_VERSION_INTERNAL": [
        "CMAKE_<LANG>_COMPILER_VERSION_INTERNAL\\n--------------------------------------\\n\\nAn internal variable subject to change.\\n\\nThis is used to identify the variant of a compiler based on an internal\\nversion number.  For some compilers this is needed to determine the\\ncorrect usage.\\n",
        "variable"
    ],
    "CMAKE_C_COMPILE_OBJECT": [
        "CMAKE_<LANG>_COMPILE_OBJECT\\n---------------------------\\n\\nRule variable to compile a single object file.\\n\\nThis is a rule variable that tells CMake how to compile a single\\nobject file for the language ``<LANG>``.\\n",
        "variable"
    ],
    "CMAKE_CXX_COMPILE_OBJECT": [
        "CMAKE_<LANG>_COMPILE_OBJECT\\n---------------------------\\n\\nRule variable to compile a single object file.\\n\\nThis is a rule variable that tells CMake how to compile a single\\nobject file for the language ``<LANG>``.\\n",
        "variable"
    ],
    "CMAKE_C_CPPCHECK": [
        "CMAKE_<LANG>_CPPCHECK\\n---------------------\\n\\nDefault value for ``<LANG>_CPPCHECK`` target property. This variable\\nis used to initialize the property on each target as it is created.  This\\nis done only when ``<LANG>`` is ``C`` or ``CXX``.\\n",
        "variable"
    ],
    "CMAKE_CXX_CPPCHECK": [
        "CMAKE_<LANG>_CPPCHECK\\n---------------------\\n\\nDefault value for ``<LANG>_CPPCHECK`` target property. This variable\\nis used to initialize the property on each target as it is created.  This\\nis done only when ``<LANG>`` is ``C`` or ``CXX``.\\n",
        "variable"
    ],
    "CMAKE_C_CPPLINT": [
        "CMAKE_<LANG>_CPPLINT\\n--------------------\\n\\nDefault value for ``<LANG>_CPPLINT`` target property. This variable\\nis used to initialize the property on each target as it is created.  This\\nis done only when ``<LANG>`` is ``C`` or ``CXX``.\\n",
        "variable"
    ],
    "CMAKE_CXX_CPPLINT": [
        "CMAKE_<LANG>_CPPLINT\\n--------------------\\n\\nDefault value for ``<LANG>_CPPLINT`` target property. This variable\\nis used to initialize the property on each target as it is created.  This\\nis done only when ``<LANG>`` is ``C`` or ``CXX``.\\n",
        "variable"
    ],
    "CMAKE_C_CREATE_SHARED_LIBRARY": [
        "CMAKE_<LANG>_CREATE_SHARED_LIBRARY\\n----------------------------------\\n\\nRule variable to create a shared library.\\n\\nThis is a rule variable that tells CMake how to create a shared\\nlibrary for the language ``<LANG>``.\\n",
        "variable"
    ],
    "CMAKE_CXX_CREATE_SHARED_LIBRARY": [
        "CMAKE_<LANG>_CREATE_SHARED_LIBRARY\\n----------------------------------\\n\\nRule variable to create a shared library.\\n\\nThis is a rule variable that tells CMake how to create a shared\\nlibrary for the language ``<LANG>``.\\n",
        "variable"
    ],
    "CMAKE_C_CREATE_SHARED_MODULE": [
        "CMAKE_<LANG>_CREATE_SHARED_MODULE\\n---------------------------------\\n\\nRule variable to create a shared module.\\n\\nThis is a rule variable that tells CMake how to create a shared\\nlibrary for the language ``<LANG>``.\\n",
        "variable"
    ],
    "CMAKE_CXX_CREATE_SHARED_MODULE": [
        "CMAKE_<LANG>_CREATE_SHARED_MODULE\\n---------------------------------\\n\\nRule variable to create a shared module.\\n\\nThis is a rule variable that tells CMake how to create a shared\\nlibrary for the language ``<LANG>``.\\n",
        "variable"
    ],
    "CMAKE_C_CREATE_STATIC_LIBRARY": [
        "CMAKE_<LANG>_CREATE_STATIC_LIBRARY\\n----------------------------------\\n\\nRule variable to create a static library.\\n\\nThis is a rule variable that tells CMake how to create a static\\nlibrary for the language ``<LANG>``.\\n",
        "variable"
    ],
    "CMAKE_CXX_CREATE_STATIC_LIBRARY": [
        "CMAKE_<LANG>_CREATE_STATIC_LIBRARY\\n----------------------------------\\n\\nRule variable to create a static library.\\n\\nThis is a rule variable that tells CMake how to create a static\\nlibrary for the language ``<LANG>``.\\n",
        "variable"
    ],
    "CMAKE_C_FLAGS": [
        "CMAKE_<LANG>_FLAGS\\n------------------\\n\\nFlags for all build types.\\n\\n``<LANG>`` flags used regardless of the value of ``CMAKE_BUILD_TYPE``.\\n\\nThis is initialized for each language from environment variables:\\n\\n* ``CMAKE_C_FLAGS``:\\n  Initialized by the ``CFLAGS`` environment variable.\\n* ``CMAKE_CXX_FLAGS``:\\n  Initialized by the ``CXXFLAGS`` environment variable.\\n* ``CMAKE_CUDA_FLAGS``:\\n  Initialized by the ``CUDAFLAGS`` environment variable.\\n* ``CMAKE_Fortran_FLAGS``:\\n  Initialized by the ``FFLAGS`` environment variable.\\n",
        "variable"
    ],
    "CMAKE_CXX_FLAGS": [
        "CMAKE_<LANG>_FLAGS\\n------------------\\n\\nFlags for all build types.\\n\\n``<LANG>`` flags used regardless of the value of ``CMAKE_BUILD_TYPE``.\\n\\nThis is initialized for each language from environment variables:\\n\\n* ``CMAKE_C_FLAGS``:\\n  Initialized by the ``CFLAGS`` environment variable.\\n* ``CMAKE_CXX_FLAGS``:\\n  Initialized by the ``CXXFLAGS`` environment variable.\\n* ``CMAKE_CUDA_FLAGS``:\\n  Initialized by the ``CUDAFLAGS`` environment variable.\\n* ``CMAKE_Fortran_FLAGS``:\\n  Initialized by the ``FFLAGS`` environment variable.\\n",
        "variable"
    ],
    "CMAKE_C_FLAGS_DEBUG": [
        "CMAKE_<LANG>_FLAGS_DEBUG\\n------------------------\\n\\nThis variable is the ``Debug`` variant of the\\n``CMAKE_<LANG>_FLAGS_<CONFIG>`` variable.\\n",
        "variable"
    ],
    "CMAKE_CXX_FLAGS_DEBUG": [
        "CMAKE_<LANG>_FLAGS_DEBUG\\n------------------------\\n\\nThis variable is the ``Debug`` variant of the\\n``CMAKE_<LANG>_FLAGS_<CONFIG>`` variable.\\n",
        "variable"
    ],
    "CMAKE_C_FLAGS_RELEASE": [
        "CMAKE_<LANG>_FLAGS_RELEASE\\n--------------------------\\n\\nThis variable is the ``Release`` variant of the\\n``CMAKE_<LANG>_FLAGS_<CONFIG>`` variable.\\n",
        "variable"
    ],
    "CMAKE_CXX_FLAGS_RELEASE": [
        "CMAKE_<LANG>_FLAGS_RELEASE\\n--------------------------\\n\\nThis variable is the ``Release`` variant of the\\n``CMAKE_<LANG>_FLAGS_<CONFIG>`` variable.\\n",
        "variable"
    ],
    "CMAKE_C_FLAGS_DEBUG_INIT": [
        "CMAKE_<LANG>_FLAGS_DEBUG_INIT\\n-----------------------------\\n\\nThis variable is the ``Debug`` variant of the\\n``CMAKE_<LANG>_FLAGS_<CONFIG>_INIT`` variable.\\n",
        "variable"
    ],
    "CMAKE_CXX_FLAGS_DEBUG_INIT": [
        "CMAKE_<LANG>_FLAGS_DEBUG_INIT\\n-----------------------------\\n\\nThis variable is the ``Debug`` variant of the\\n``CMAKE_<LANG>_FLAGS_<CONFIG>_INIT`` variable.\\n",
        "variable"
    ],
    "CMAKE_C_FLAGS_RELEASE_INIT": [
        "CMAKE_<LANG>_FLAGS_RELEASE_INIT\\n-------------------------------\\n\\nThis variable is the ``Release`` variant of the\\n``CMAKE_<LANG>_FLAGS_<CONFIG>_INIT`` variable.\\n",
        "variable"
    ],
    "CMAKE_CXX_FLAGS_RELEASE_INIT": [
        "CMAKE_<LANG>_FLAGS_RELEASE_INIT\\n-------------------------------\\n\\nThis variable is the ``Release`` variant of the\\n``CMAKE_<LANG>_FLAGS_<CONFIG>_INIT`` variable.\\n",
        "variable"
    ],
    "CMAKE_C_FLAGS_INIT": [
        "CMAKE_<LANG>_FLAGS_INIT\\n-----------------------\\n\\nValue used to initialize the ``CMAKE_<LANG>_FLAGS`` cache entry\\nthe first time a build tree is configured for language ``<LANG>``.\\nThis variable is meant to be set by a :variable:`toolchain file\\n<CMAKE_TOOLCHAIN_FILE>`.  CMake may prepend or append content to\\nthe value based on the environment and target platform.\\n\\nSee also the configuration-specific\\n``CMAKE_<LANG>_FLAGS_<CONFIG>_INIT`` variable.\\n",
        "variable"
    ],
    "CMAKE_CXX_FLAGS_INIT": [
        "CMAKE_<LANG>_FLAGS_INIT\\n-----------------------\\n\\nValue used to initialize the ``CMAKE_<LANG>_FLAGS`` cache entry\\nthe first time a build tree is configured for language ``<LANG>``.\\nThis variable is meant to be set by a :variable:`toolchain file\\n<CMAKE_TOOLCHAIN_FILE>`.  CMake may prepend or append content to\\nthe value based on the environment and target platform.\\n\\nSee also the configuration-specific\\n``CMAKE_<LANG>_FLAGS_<CONFIG>_INIT`` variable.\\n",
        "variable"
    ],
    "CMAKE_C_FLAGS_MINSIZEREL": [
        "CMAKE_<LANG>_FLAGS_MINSIZEREL\\n-----------------------------\\n\\nThis variable is the ``MinSizeRel`` variant of the\\n``CMAKE_<LANG>_FLAGS_<CONFIG>`` variable.\\n",
        "variable"
    ],
    "CMAKE_CXX_FLAGS_MINSIZEREL": [
        "CMAKE_<LANG>_FLAGS_MINSIZEREL\\n-----------------------------\\n\\nThis variable is the ``MinSizeRel`` variant of the\\n``CMAKE_<LANG>_FLAGS_<CONFIG>`` variable.\\n",
        "variable"
    ],
    "CMAKE_C_FLAGS_MINSIZEREL_INIT": [
        "CMAKE_<LANG>_FLAGS_MINSIZEREL_INIT\\n----------------------------------\\n\\nThis variable is the ``MinSizeRel`` variant of the\\n``CMAKE_<LANG>_FLAGS_<CONFIG>_INIT`` variable.\\n",
        "variable"
    ],
    "CMAKE_CXX_FLAGS_MINSIZEREL_INIT": [
        "CMAKE_<LANG>_FLAGS_MINSIZEREL_INIT\\n----------------------------------\\n\\nThis variable is the ``MinSizeRel`` variant of the\\n``CMAKE_<LANG>_FLAGS_<CONFIG>_INIT`` variable.\\n",
        "variable"
    ],
    "CMAKE_C_FLAGS_RELWITHDEBINFO": [
        "CMAKE_<LANG>_FLAGS_RELWITHDEBINFO\\n---------------------------------\\n\\nThis variable is the ``RelWithDebInfo`` variant of the\\n``CMAKE_<LANG>_FLAGS_<CONFIG>`` variable.\\n",
        "variable"
    ],
    "CMAKE_CXX_FLAGS_RELWITHDEBINFO": [
        "CMAKE_<LANG>_FLAGS_RELWITHDEBINFO\\n---------------------------------\\n\\nThis variable is the ``RelWithDebInfo`` variant of the\\n``CMAKE_<LANG>_FLAGS_<CONFIG>`` variable.\\n",
        "variable"
    ],
    "CMAKE_C_FLAGS_RELWITHDEBINFO_INIT": [
        "CMAKE_<LANG>_FLAGS_RELWITHDEBINFO_INIT\\n--------------------------------------\\n\\nThis variable is the ``RelWithDebInfo`` variant of the\\n``CMAKE_<LANG>_FLAGS_<CONFIG>_INIT`` variable.\\n",
        "variable"
    ],
    "CMAKE_CXX_FLAGS_RELWITHDEBINFO_INIT": [
        "CMAKE_<LANG>_FLAGS_RELWITHDEBINFO_INIT\\n--------------------------------------\\n\\nThis variable is the ``RelWithDebInfo`` variant of the\\n``CMAKE_<LANG>_FLAGS_<CONFIG>_INIT`` variable.\\n",
        "variable"
    ],
    "CMAKE_C_GHS_KERNEL_FLAGS_DEBUG": [
        "CMAKE_<LANG>_GHS_KERNEL_FLAGS_DEBUG\\n-----------------------------------\\n\\nThis variable is the ``Debug`` variant of the\\n``CMAKE_<LANG>_GHS_KERNEL_FLAGS_<CONFIG>`` variable.\\n",
        "variable"
    ],
    "CMAKE_CXX_GHS_KERNEL_FLAGS_DEBUG": [
        "CMAKE_<LANG>_GHS_KERNEL_FLAGS_DEBUG\\n-----------------------------------\\n\\nThis variable is the ``Debug`` variant of the\\n``CMAKE_<LANG>_GHS_KERNEL_FLAGS_<CONFIG>`` variable.\\n",
        "variable"
    ],
    "CMAKE_C_GHS_KERNEL_FLAGS_RELEASE": [
        "CMAKE_<LANG>_GHS_KERNEL_FLAGS_RELEASE\\n-------------------------------------\\n\\nThis variable is the ``Release`` variant of the\\n``CMAKE_<LANG>_GHS_KERNEL_FLAGS_<CONFIG>`` variable.\\n",
        "variable"
    ],
    "CMAKE_CXX_GHS_KERNEL_FLAGS_RELEASE": [
        "CMAKE_<LANG>_GHS_KERNEL_FLAGS_RELEASE\\n-------------------------------------\\n\\nThis variable is the ``Release`` variant of the\\n``CMAKE_<LANG>_GHS_KERNEL_FLAGS_<CONFIG>`` variable.\\n",
        "variable"
    ],
    "CMAKE_C_GHS_KERNEL_FLAGS_MINSIZEREL": [
        "CMAKE_<LANG>_GHS_KERNEL_FLAGS_MINSIZEREL\\n----------------------------------------\\n\\nThis variable is the ``MinSizeRel`` variant of the\\n``CMAKE_<LANG>_GHS_KERNEL_FLAGS_<CONFIG>`` variable.\\n",
        "variable"
    ],
    "CMAKE_CXX_GHS_KERNEL_FLAGS_MINSIZEREL": [
        "CMAKE_<LANG>_GHS_KERNEL_FLAGS_MINSIZEREL\\n----------------------------------------\\n\\nThis variable is the ``MinSizeRel`` variant of the\\n``CMAKE_<LANG>_GHS_KERNEL_FLAGS_<CONFIG>`` variable.\\n",
        "variable"
    ],
    "CMAKE_C_GHS_KERNEL_FLAGS_RELWITHDEBINFO": [
        "CMAKE_<LANG>_GHS_KERNEL_FLAGS_RELWITHDEBINFO\\n--------------------------------------------\\n\\nThis variable is the ``RelWithDebInfo`` variant of the\\n``CMAKE_<LANG>_GHS_KERNEL_FLAGS_<CONFIG>`` variable.\\n",
        "variable"
    ],
    "CMAKE_CXX_GHS_KERNEL_FLAGS_RELWITHDEBINFO": [
        "CMAKE_<LANG>_GHS_KERNEL_FLAGS_RELWITHDEBINFO\\n--------------------------------------------\\n\\nThis variable is the ``RelWithDebInfo`` variant of the\\n``CMAKE_<LANG>_GHS_KERNEL_FLAGS_<CONFIG>`` variable.\\n",
        "variable"
    ],
    "CMAKE_C_IGNORE_EXTENSIONS": [
        "CMAKE_<LANG>_IGNORE_EXTENSIONS\\n------------------------------\\n\\nFile extensions that should be ignored by the build.\\n\\nThis is a list of file extensions that may be part of a project for a\\ngiven language but are not compiled.\\n",
        "variable"
    ],
    "CMAKE_CXX_IGNORE_EXTENSIONS": [
        "CMAKE_<LANG>_IGNORE_EXTENSIONS\\n------------------------------\\n\\nFile extensions that should be ignored by the build.\\n\\nThis is a list of file extensions that may be part of a project for a\\ngiven language but are not compiled.\\n",
        "variable"
    ],
    "CMAKE_C_IMPLICIT_INCLUDE_DIRECTORIES": [
        "CMAKE_<LANG>_IMPLICIT_INCLUDE_DIRECTORIES\\n-----------------------------------------\\n\\nDirectories implicitly searched by the compiler for header files.\\n\\nCMake does not explicitly specify these directories on compiler\\ncommand lines for language ``<LANG>``.  This prevents system include\\ndirectories from being treated as user include directories on some\\ncompilers.\\n",
        "variable"
    ],
    "CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES": [
        "CMAKE_<LANG>_IMPLICIT_INCLUDE_DIRECTORIES\\n-----------------------------------------\\n\\nDirectories implicitly searched by the compiler for header files.\\n\\nCMake does not explicitly specify these directories on compiler\\ncommand lines for language ``<LANG>``.  This prevents system include\\ndirectories from being treated as user include directories on some\\ncompilers.\\n",
        "variable"
    ],
    "CMAKE_C_IMPLICIT_LINK_DIRECTORIES": [
        "CMAKE_<LANG>_IMPLICIT_LINK_DIRECTORIES\\n--------------------------------------\\n\\nImplicit linker search path detected for language ``<LANG>``.\\n\\nCompilers typically pass directories containing language runtime\\nlibraries and default library search paths when they invoke a linker.\\nThese paths are implicit linker search directories for the compiler's\\nlanguage.  CMake automatically detects these directories for each\\nlanguage and reports the results in this variable.\\n\\nSome toolchains read implicit directories from an environment variable such as\\n``LIBRARY_PATH``.  If using such an environment variable, keep its value\\nconsistent when operating in a given build tree because CMake saves the value\\ndetected when first creating a build tree.\\n\\nIf policy ``CMP0060`` is not set to ``NEW``, then when a library in one\\nof these directories is given by full path to ``target_link_libraries()``\\nCMake will generate the ``-l<name>`` form on link lines for historical\\npurposes.\\n",
        "variable"
    ],
    "CMAKE_CXX_IMPLICIT_LINK_DIRECTORIES": [
        "CMAKE_<LANG>_IMPLICIT_LINK_DIRECTORIES\\n--------------------------------------\\n\\nImplicit linker search path detected for language ``<LANG>``.\\n\\nCompilers typically pass directories containing language runtime\\nlibraries and default library search paths when they invoke a linker.\\nThese paths are implicit linker search directories for the compiler's\\nlanguage.  CMake automatically detects these directories for each\\nlanguage and reports the results in this variable.\\n\\nSome toolchains read implicit directories from an environment variable such as\\n``LIBRARY_PATH``.  If using such an environment variable, keep its value\\nconsistent when operating in a given build tree because CMake saves the value\\ndetected when first creating a build tree.\\n\\nIf policy ``CMP0060`` is not set to ``NEW``, then when a library in one\\nof these directories is given by full path to ``target_link_libraries()``\\nCMake will generate the ``-l<name>`` form on link lines for historical\\npurposes.\\n",
        "variable"
    ],
    "CMAKE_C_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES": [
        "CMAKE_<LANG>_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES\\n------------------------------------------------\\n\\nImplicit linker framework search path detected for language ``<LANG>``.\\n\\nThese paths are implicit linker framework search directories for the\\ncompiler's language.  CMake automatically detects these directories\\nfor each language and reports the results in this variable.\\n",
        "variable"
    ],
    "CMAKE_CXX_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES": [
        "CMAKE_<LANG>_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES\\n------------------------------------------------\\n\\nImplicit linker framework search path detected for language ``<LANG>``.\\n\\nThese paths are implicit linker framework search directories for the\\ncompiler's language.  CMake automatically detects these directories\\nfor each language and reports the results in this variable.\\n",
        "variable"
    ],
    "CMAKE_C_IMPLICIT_LINK_LIBRARIES": [
        "CMAKE_<LANG>_IMPLICIT_LINK_LIBRARIES\\n------------------------------------\\n\\nImplicit link libraries and flags detected for language ``<LANG>``.\\n\\nCompilers typically pass language runtime library names and other\\nflags when they invoke a linker.  These flags are implicit link\\noptions for the compiler's language.  CMake automatically detects\\nthese libraries and flags for each language and reports the results in\\nthis variable.\\n",
        "variable"
    ],
    "CMAKE_CXX_IMPLICIT_LINK_LIBRARIES": [
        "CMAKE_<LANG>_IMPLICIT_LINK_LIBRARIES\\n------------------------------------\\n\\nImplicit link libraries and flags detected for language ``<LANG>``.\\n\\nCompilers typically pass language runtime library names and other\\nflags when they invoke a linker.  These flags are implicit link\\noptions for the compiler's language.  CMake automatically detects\\nthese libraries and flags for each language and reports the results in\\nthis variable.\\n",
        "variable"
    ],
    "CMAKE_C_INCLUDE_WHAT_YOU_USE": [
        "CMAKE_<LANG>_INCLUDE_WHAT_YOU_USE\\n---------------------------------\\n\\nDefault value for ``<LANG>_INCLUDE_WHAT_YOU_USE`` target property.\\nThis variable is used to initialize the property on each target as it is\\ncreated.  This is done only when ``<LANG>`` is ``C`` or ``CXX``.\\n",
        "variable"
    ],
    "CMAKE_CXX_INCLUDE_WHAT_YOU_USE": [
        "CMAKE_<LANG>_INCLUDE_WHAT_YOU_USE\\n---------------------------------\\n\\nDefault value for ``<LANG>_INCLUDE_WHAT_YOU_USE`` target property.\\nThis variable is used to initialize the property on each target as it is\\ncreated.  This is done only when ``<LANG>`` is ``C`` or ``CXX``.\\n",
        "variable"
    ],
    "CMAKE_C_LIBRARY_ARCHITECTURE": [
        "CMAKE_<LANG>_LIBRARY_ARCHITECTURE\\n---------------------------------\\n\\nTarget architecture library directory name detected for ``<LANG>``.\\n\\nIf the ``<LANG>`` compiler passes to the linker an architecture-specific\\nsystem library search directory such as ``<prefix>/lib/<arch>`` this\\nvariable contains the ``<arch>`` name if/as detected by CMake.\\n",
        "variable"
    ],
    "CMAKE_CXX_LIBRARY_ARCHITECTURE": [
        "CMAKE_<LANG>_LIBRARY_ARCHITECTURE\\n---------------------------------\\n\\nTarget architecture library directory name detected for ``<LANG>``.\\n\\nIf the ``<LANG>`` compiler passes to the linker an architecture-specific\\nsystem library search directory such as ``<prefix>/lib/<arch>`` this\\nvariable contains the ``<arch>`` name if/as detected by CMake.\\n",
        "variable"
    ],
    "CMAKE_C_LINKER_PREFERENCE": [
        "CMAKE_<LANG>_LINKER_PREFERENCE\\n------------------------------\\n\\nPreference value for linker language selection.\\n\\nThe \\\"linker language\\\" for executable, shared library, and module\\ntargets is the language whose compiler will invoke the linker.  The\\n``LINKER_LANGUAGE`` target property sets the language explicitly.\\nOtherwise, the linker language is that whose linker preference value\\nis highest among languages compiled and linked into the target.  See\\nalso the ``CMAKE_<LANG>_LINKER_PREFERENCE_PROPAGATES`` variable.\\n",
        "variable"
    ],
    "CMAKE_CXX_LINKER_PREFERENCE": [
        "CMAKE_<LANG>_LINKER_PREFERENCE\\n------------------------------\\n\\nPreference value for linker language selection.\\n\\nThe \\\"linker language\\\" for executable, shared library, and module\\ntargets is the language whose compiler will invoke the linker.  The\\n``LINKER_LANGUAGE`` target property sets the language explicitly.\\nOtherwise, the linker language is that whose linker preference value\\nis highest among languages compiled and linked into the target.  See\\nalso the ``CMAKE_<LANG>_LINKER_PREFERENCE_PROPAGATES`` variable.\\n",
        "variable"
    ],
    "CMAKE_C_LINKER_PREFERENCE_PROPAGATES": [
        "CMAKE_<LANG>_LINKER_PREFERENCE_PROPAGATES\\n-----------------------------------------\\n\\nTrue if ``CMAKE_<LANG>_LINKER_PREFERENCE`` propagates across targets.\\n\\nThis is used when CMake selects a linker language for a target.\\nLanguages compiled directly into the target are always considered.  A\\nlanguage compiled into static libraries linked by the target is\\nconsidered if this variable is true.\\n",
        "variable"
    ],
    "CMAKE_CXX_LINKER_PREFERENCE_PROPAGATES": [
        "CMAKE_<LANG>_LINKER_PREFERENCE_PROPAGATES\\n-----------------------------------------\\n\\nTrue if ``CMAKE_<LANG>_LINKER_PREFERENCE`` propagates across targets.\\n\\nThis is used when CMake selects a linker language for a target.\\nLanguages compiled directly into the target are always considered.  A\\nlanguage compiled into static libraries linked by the target is\\nconsidered if this variable is true.\\n",
        "variable"
    ],
    "CMAKE_C_LINKER_WRAPPER_FLAG": [
        "CMAKE_<LANG>_LINKER_WRAPPER_FLAG\\n--------------------------------\\n\\nDefines the syntax of compiler driver option to pass options to the linker\\ntool. It will be used to translate the ``LINKER:`` prefix in the link options\\n(see ``add_link_options()`` and ``target_link_options()``).\\n\\nThis variable holds a :ref:`;-list <CMake Language Lists>` of tokens.\\nIf a space (i.e. \\\" \\\") is specified as last token, flag and ``LINKER:``\\narguments will be specified as separate arguments to the compiler driver.\\nThe ``CMAKE_<LANG>_LINKER_WRAPPER_FLAG_SEP`` variable can be specified\\nto manage concatenation of arguments.\\n\\nFor example, for ``Clang`` we have:\\n\\n set (CMAKE_C_LINKER_WRAPPER_FLAG \\\"-Xlinker\\\" \\\" \\\")\\n\\nSpecifying ``\\\"LINKER:-z,defs\\\"`` will be transformed in\\n``-Xlinker -z -Xlinker defs``.\\n\\nFor ``GNU GCC``:\\n\\n set (CMAKE_C_LINKER_WRAPPER_FLAG \\\"-Wl,\\\")\\n set (CMAKE_C_LINKER_WRAPPER_FLAG_SEP \\\",\\\")\\n\\nSpecifying ``\\\"LINKER:-z,defs\\\"`` will be transformed in ``-Wl,-z,defs``.\\n\\nAnd for ``SunPro``:\\n\\n set (CMAKE_C_LINKER_WRAPPER_FLAG \\\"-Qoption\\\" \\\"ld\\\" \\\" \\\")\\n set (CMAKE_C_LINKER_WRAPPER_FLAG_SEP \\\",\\\")\\n\\nSpecifying ``\\\"LINKER:-z,defs\\\"`` will be transformed in ``-Qoption ld -z,defs``.\\n",
        "variable"
    ],
    "CMAKE_CXX_LINKER_WRAPPER_FLAG": [
        "CMAKE_<LANG>_LINKER_WRAPPER_FLAG\\n--------------------------------\\n\\nDefines the syntax of compiler driver option to pass options to the linker\\ntool. It will be used to translate the ``LINKER:`` prefix in the link options\\n(see ``add_link_options()`` and ``target_link_options()``).\\n\\nThis variable holds a :ref:`;-list <CMake Language Lists>` of tokens.\\nIf a space (i.e. \\\" \\\") is specified as last token, flag and ``LINKER:``\\narguments will be specified as separate arguments to the compiler driver.\\nThe ``CMAKE_<LANG>_LINKER_WRAPPER_FLAG_SEP`` variable can be specified\\nto manage concatenation of arguments.\\n\\nFor example, for ``Clang`` we have:\\n\\n set (CMAKE_C_LINKER_WRAPPER_FLAG \\\"-Xlinker\\\" \\\" \\\")\\n\\nSpecifying ``\\\"LINKER:-z,defs\\\"`` will be transformed in\\n``-Xlinker -z -Xlinker defs``.\\n\\nFor ``GNU GCC``:\\n\\n set (CMAKE_C_LINKER_WRAPPER_FLAG \\\"-Wl,\\\")\\n set (CMAKE_C_LINKER_WRAPPER_FLAG_SEP \\\",\\\")\\n\\nSpecifying ``\\\"LINKER:-z,defs\\\"`` will be transformed in ``-Wl,-z,defs``.\\n\\nAnd for ``SunPro``:\\n\\n set (CMAKE_C_LINKER_WRAPPER_FLAG \\\"-Qoption\\\" \\\"ld\\\" \\\" \\\")\\n set (CMAKE_C_LINKER_WRAPPER_FLAG_SEP \\\",\\\")\\n\\nSpecifying ``\\\"LINKER:-z,defs\\\"`` will be transformed in ``-Qoption ld -z,defs``.\\n",
        "variable"
    ],
    "CMAKE_C_LINKER_WRAPPER_FLAG_SEP": [
        "CMAKE_<LANG>_LINKER_WRAPPER_FLAG_SEP\\n------------------------------------\\n\\nThis variable is used with ``CMAKE_<LANG>_LINKER_WRAPPER_FLAG``\\nvariable to format ``LINKER:`` prefix in the link options\\n(see ``add_link_options()`` and ``target_link_options()``).\\n\\nWhen specified, arguments of the ``LINKER:`` prefix will be concatenated using\\nthis value as separator.\\n",
        "variable"
    ],
    "CMAKE_CXX_LINKER_WRAPPER_FLAG_SEP": [
        "CMAKE_<LANG>_LINKER_WRAPPER_FLAG_SEP\\n------------------------------------\\n\\nThis variable is used with ``CMAKE_<LANG>_LINKER_WRAPPER_FLAG``\\nvariable to format ``LINKER:`` prefix in the link options\\n(see ``add_link_options()`` and ``target_link_options()``).\\n\\nWhen specified, arguments of the ``LINKER:`` prefix will be concatenated using\\nthis value as separator.\\n",
        "variable"
    ],
    "CMAKE_C_LINK_EXECUTABLE": [
        "CMAKE_<LANG>_LINK_EXECUTABLE\\n----------------------------\\n\\nRule variable to link an executable.\\n\\nRule variable to link an executable for the given language.\\n",
        "variable"
    ],
    "CMAKE_CXX_LINK_EXECUTABLE": [
        "CMAKE_<LANG>_LINK_EXECUTABLE\\n----------------------------\\n\\nRule variable to link an executable.\\n\\nRule variable to link an executable for the given language.\\n",
        "variable"
    ],
    "CMAKE_C_OUTPUT_EXTENSION": [
        "CMAKE_<LANG>_OUTPUT_EXTENSION\\n-----------------------------\\n\\nExtension for the output of a compile for a single file.\\n\\nThis is the extension for an object file for the given ``<LANG>``.  For\\nexample ``.obj`` for C on Windows.\\n",
        "variable"
    ],
    "CMAKE_CXX_OUTPUT_EXTENSION": [
        "CMAKE_<LANG>_OUTPUT_EXTENSION\\n-----------------------------\\n\\nExtension for the output of a compile for a single file.\\n\\nThis is the extension for an object file for the given ``<LANG>``.  For\\nexample ``.obj`` for C on Windows.\\n",
        "variable"
    ],
    "CMAKE_C_PLATFORM_ID": [
        "CMAKE_<LANG>_PLATFORM_ID\\n------------------------\\n\\nAn internal variable subject to change.\\n\\nThis is used in determining the platform and is subject to change.\\n",
        "variable"
    ],
    "CMAKE_CXX_PLATFORM_ID": [
        "CMAKE_<LANG>_PLATFORM_ID\\n------------------------\\n\\nAn internal variable subject to change.\\n\\nThis is used in determining the platform and is subject to change.\\n",
        "variable"
    ],
    "CMAKE_C_SIMULATE_ID": [
        "CMAKE_<LANG>_SIMULATE_ID\\n------------------------\\n\\nIdentification string of \\\"simulated\\\" compiler.\\n\\nSome compilers simulate other compilers to serve as drop-in\\nreplacements.  When CMake detects such a compiler it sets this\\nvariable to what would have been the ``CMAKE_<LANG>_COMPILER_ID`` for\\nthe simulated compiler.\\n",
        "variable"
    ],
    "CMAKE_CXX_SIMULATE_ID": [
        "CMAKE_<LANG>_SIMULATE_ID\\n------------------------\\n\\nIdentification string of \\\"simulated\\\" compiler.\\n\\nSome compilers simulate other compilers to serve as drop-in\\nreplacements.  When CMake detects such a compiler it sets this\\nvariable to what would have been the ``CMAKE_<LANG>_COMPILER_ID`` for\\nthe simulated compiler.\\n",
        "variable"
    ],
    "CMAKE_C_SIMULATE_VERSION": [
        "CMAKE_<LANG>_SIMULATE_VERSION\\n-----------------------------\\n\\nVersion string of \\\"simulated\\\" compiler.\\n\\nSome compilers simulate other compilers to serve as drop-in\\nreplacements.  When CMake detects such a compiler it sets this\\nvariable to what would have been the ``CMAKE_<LANG>_COMPILER_VERSION``\\nfor the simulated compiler.\\n",
        "variable"
    ],
    "CMAKE_CXX_SIMULATE_VERSION": [
        "CMAKE_<LANG>_SIMULATE_VERSION\\n-----------------------------\\n\\nVersion string of \\\"simulated\\\" compiler.\\n\\nSome compilers simulate other compilers to serve as drop-in\\nreplacements.  When CMake detects such a compiler it sets this\\nvariable to what would have been the ``CMAKE_<LANG>_COMPILER_VERSION``\\nfor the simulated compiler.\\n",
        "variable"
    ],
    "CMAKE_C_SIZEOF_DATA_PTR": [
        "CMAKE_<LANG>_SIZEOF_DATA_PTR\\n----------------------------\\n\\nSize of pointer-to-data types for language ``<LANG>``.\\n\\nThis holds the size (in bytes) of pointer-to-data types in the target\\nplatform ABI.  It is defined for languages ``C`` and ``CXX`` (C++).\\n",
        "variable"
    ],
    "CMAKE_CXX_SIZEOF_DATA_PTR": [
        "CMAKE_<LANG>_SIZEOF_DATA_PTR\\n----------------------------\\n\\nSize of pointer-to-data types for language ``<LANG>``.\\n\\nThis holds the size (in bytes) of pointer-to-data types in the target\\nplatform ABI.  It is defined for languages ``C`` and ``CXX`` (C++).\\n",
        "variable"
    ],
    "CMAKE_C_SOURCE_FILE_EXTENSIONS": [
        "CMAKE_<LANG>_SOURCE_FILE_EXTENSIONS\\n-----------------------------------\\n\\nExtensions of source files for the given language.\\n\\nThis is the list of extensions for a given language's source files.\\n",
        "variable"
    ],
    "CMAKE_CXX_SOURCE_FILE_EXTENSIONS": [
        "CMAKE_<LANG>_SOURCE_FILE_EXTENSIONS\\n-----------------------------------\\n\\nExtensions of source files for the given language.\\n\\nThis is the list of extensions for a given language's source files.\\n",
        "variable"
    ],
    "CMAKE_C_STANDARD_INCLUDE_DIRECTORIES": [
        "CMAKE_<LANG>_STANDARD_INCLUDE_DIRECTORIES\\n-----------------------------------------\\n\\nInclude directories to be used for every source file compiled with\\nthe ``<LANG>`` compiler.  This is meant for specification of system\\ninclude directories needed by the language for the current platform.\\nThe directories always appear at the end of the include path passed\\nto the compiler.\\n\\nThis variable should not be set by project code.  It is meant to be set by\\nCMake's platform information modules for the current toolchain, or by a\\ntoolchain file when used with ``CMAKE_TOOLCHAIN_FILE``.\\n\\nSee also ``CMAKE_<LANG>_STANDARD_LIBRARIES``.\\n",
        "variable"
    ],
    "CMAKE_CXX_STANDARD_INCLUDE_DIRECTORIES": [
        "CMAKE_<LANG>_STANDARD_INCLUDE_DIRECTORIES\\n-----------------------------------------\\n\\nInclude directories to be used for every source file compiled with\\nthe ``<LANG>`` compiler.  This is meant for specification of system\\ninclude directories needed by the language for the current platform.\\nThe directories always appear at the end of the include path passed\\nto the compiler.\\n\\nThis variable should not be set by project code.  It is meant to be set by\\nCMake's platform information modules for the current toolchain, or by a\\ntoolchain file when used with ``CMAKE_TOOLCHAIN_FILE``.\\n\\nSee also ``CMAKE_<LANG>_STANDARD_LIBRARIES``.\\n",
        "variable"
    ],
    "CMAKE_C_STANDARD_LIBRARIES": [
        "CMAKE_<LANG>_STANDARD_LIBRARIES\\n-------------------------------\\n\\nLibraries linked into every executable and shared library linked\\nfor language ``<LANG>``.  This is meant for specification of system\\nlibraries needed by the language for the current platform.\\n\\nThis variable should not be set by project code.  It is meant to be set by\\nCMake's platform information modules for the current toolchain, or by a\\ntoolchain file when used with ``CMAKE_TOOLCHAIN_FILE``.\\n\\nSee also ``CMAKE_<LANG>_STANDARD_INCLUDE_DIRECTORIES``.\\n",
        "variable"
    ],
    "CMAKE_CXX_STANDARD_LIBRARIES": [
        "CMAKE_<LANG>_STANDARD_LIBRARIES\\n-------------------------------\\n\\nLibraries linked into every executable and shared library linked\\nfor language ``<LANG>``.  This is meant for specification of system\\nlibraries needed by the language for the current platform.\\n\\nThis variable should not be set by project code.  It is meant to be set by\\nCMake's platform information modules for the current toolchain, or by a\\ntoolchain file when used with ``CMAKE_TOOLCHAIN_FILE``.\\n\\nSee also ``CMAKE_<LANG>_STANDARD_INCLUDE_DIRECTORIES``.\\n",
        "variable"
    ],
    "CMAKE_C_VISIBILITY_PRESET": [
        "CMAKE_<LANG>_VISIBILITY_PRESET\\n------------------------------\\n\\nDefault value for the ``<LANG>_VISIBILITY_PRESET`` target\\nproperty when a target is created.\\n",
        "variable"
    ],
    "CMAKE_CXX_VISIBILITY_PRESET": [
        "CMAKE_<LANG>_VISIBILITY_PRESET\\n------------------------------\\n\\nDefault value for the ``<LANG>_VISIBILITY_PRESET`` target\\nproperty when a target is created.\\n",
        "variable"
    ],
    "CMAKE_ABSOLUTE_DESTINATION_FILES": [
        "CMAKE_ABSOLUTE_DESTINATION_FILES\\n--------------------------------\\n\\nList of files which have been installed using an ``ABSOLUTE DESTINATION`` path.\\n\\nThis variable is defined by CMake-generated ``cmake_install.cmake``\\nscripts.  It can be used (read-only) by programs or scripts that\\nsource those install scripts.  This is used by some CPack generators\\n(e.g.  RPM).\\n",
        "variable"
    ],
    "CMAKE_ANDROID_ANT_ADDITIONAL_OPTIONS": [
        "CMAKE_ANDROID_ANT_ADDITIONAL_OPTIONS\\n------------------------------------\\n\\nDefault value for the ``ANDROID_ANT_ADDITIONAL_OPTIONS`` target property.\\nSee that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_ANDROID_API": [
        "CMAKE_ANDROID_API\\n-----------------\\n\\nWhen :ref:`Cross Compiling for Android with NVIDIA Nsight Tegra Visual Studio\\nEdition`, this variable may be set to specify the default value for the\\n``ANDROID_API`` target property.  See that target property for\\nadditional information.\\n\\nOtherwise, when :ref:`Cross Compiling for Android`, this variable provides\\nthe Android API version number targeted.  This will be the same value as\\nthe ``CMAKE_SYSTEM_VERSION`` variable for ``Android`` platforms.\\n",
        "variable"
    ],
    "CMAKE_ANDROID_API_MIN": [
        "CMAKE_ANDROID_API_MIN\\n---------------------\\n\\nDefault value for the ``ANDROID_API_MIN`` target property.\\nSee that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_ANDROID_ARCH": [
        "CMAKE_ANDROID_ARCH\\n------------------\\n\\nWhen :ref:`Cross Compiling for Android with NVIDIA Nsight Tegra Visual Studio\\nEdition`, this variable may be set to specify the default value for the\\n``ANDROID_ARCH`` target property.  See that target property for\\nadditional information.\\n\\nOtherwise, when :ref:`Cross Compiling for Android`, this variable provides\\nthe name of the Android architecture corresponding to the value of the\\n``CMAKE_ANDROID_ARCH_ABI`` variable.  The architecture name\\nmay be one of:\\n\\n* ``arm``\\n* ``arm64``\\n* ``mips``\\n* ``mips64``\\n* ``x86``\\n* ``x86_64``\\n",
        "variable"
    ],
    "CMAKE_ANDROID_ARCH_ABI": [
        "CMAKE_ANDROID_ARCH_ABI\\n----------------------\\n\\nWhen :ref:`Cross Compiling for Android`, this variable specifies the\\ntarget architecture and ABI to be used.  Valid values are:\\n\\n* ``arm64-v8a``\\n* ``armeabi-v7a``\\n* ``armeabi-v6``\\n* ``armeabi``\\n* ``mips``\\n* ``mips64``\\n* ``x86``\\n* ``x86_64``\\n\\nSee also the ``CMAKE_ANDROID_ARM_MODE`` and\\n``CMAKE_ANDROID_ARM_NEON`` variables.\\n",
        "variable"
    ],
    "CMAKE_ANDROID_ARM_MODE": [
        "CMAKE_ANDROID_ARM_MODE\\n----------------------\\n\\nWhen :ref:`Cross Compiling for Android` and ``CMAKE_ANDROID_ARCH_ABI``\\nis set to one of the ``armeabi`` architectures, set ``CMAKE_ANDROID_ARM_MODE``\\nto ``ON`` to target 32-bit ARM processors (``-marm``).  Otherwise, the\\ndefault is to target the 16-bit Thumb processors (``-mthumb``).\\n",
        "variable"
    ],
    "CMAKE_ANDROID_ARM_NEON": [
        "CMAKE_ANDROID_ARM_NEON\\n----------------------\\n\\nWhen :ref:`Cross Compiling for Android` and ``CMAKE_ANDROID_ARCH_ABI``\\nis set to ``armeabi-v7a`` set ``CMAKE_ANDROID_ARM_NEON`` to ``ON`` to target\\nARM NEON devices.\\n",
        "variable"
    ],
    "CMAKE_ANDROID_ASSETS_DIRECTORIES": [
        "CMAKE_ANDROID_ASSETS_DIRECTORIES\\n--------------------------------\\n\\nDefault value for the ``ANDROID_ASSETS_DIRECTORIES`` target property.\\nSee that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_ANDROID_GUI": [
        "CMAKE_ANDROID_GUI\\n-----------------\\n\\nDefault value for the ``ANDROID_GUI`` target property of\\nexecutables.  See that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_ANDROID_JAR_DEPENDENCIES": [
        "CMAKE_ANDROID_JAR_DEPENDENCIES\\n------------------------------\\n\\nDefault value for the ``ANDROID_JAR_DEPENDENCIES`` target property.\\nSee that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_ANDROID_JAR_DIRECTORIES": [
        "CMAKE_ANDROID_JAR_DIRECTORIES\\n-----------------------------\\n\\nDefault value for the ``ANDROID_JAR_DIRECTORIES`` target property.\\nSee that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_ANDROID_JAVA_SOURCE_DIR": [
        "CMAKE_ANDROID_JAVA_SOURCE_DIR\\n-----------------------------\\n\\nDefault value for the ``ANDROID_JAVA_SOURCE_DIR`` target property.\\nSee that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_ANDROID_NATIVE_LIB_DEPENDENCIES": [
        "CMAKE_ANDROID_NATIVE_LIB_DEPENDENCIES\\n-------------------------------------\\n\\nDefault value for the ``ANDROID_NATIVE_LIB_DEPENDENCIES`` target\\nproperty.  See that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_ANDROID_NATIVE_LIB_DIRECTORIES": [
        "CMAKE_ANDROID_NATIVE_LIB_DIRECTORIES\\n------------------------------------\\n\\nDefault value for the ``ANDROID_NATIVE_LIB_DIRECTORIES`` target\\nproperty.  See that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_ANDROID_NDK": [
        "CMAKE_ANDROID_NDK\\n-----------------\\n\\nWhen :ref:`Cross Compiling for Android with the NDK`, this variable holds\\nthe absolute path to the root directory of the NDK.  The directory must\\ncontain a ``platforms`` subdirectory holding the ``android-<api>``\\ndirectories.\\n",
        "variable"
    ],
    "CMAKE_ANDROID_NDK_DEPRECATED_HEADERS": [
        "CMAKE_ANDROID_NDK_DEPRECATED_HEADERS\\n------------------------------------\\n\\nWhen :ref:`Cross Compiling for Android with the NDK`, this variable\\nmay be set to specify whether to use the deprecated per-api-level\\nheaders instead of the unified headers.\\n\\nIf not specified, the default will be *false* if using a NDK version\\nthat provides the unified headers and *true* otherwise.\\n",
        "variable"
    ],
    "CMAKE_ANDROID_NDK_TOOLCHAIN_HOST_TAG": [
        "CMAKE_ANDROID_NDK_TOOLCHAIN_HOST_TAG\\n------------------------------------\\n\\nWhen :ref:`Cross Compiling for Android with the NDK`, this variable\\nprovides the NDK's \\\"host tag\\\" used to construct the path to prebuilt\\ntoolchains that run on the host.\\n",
        "variable"
    ],
    "CMAKE_ANDROID_NDK_TOOLCHAIN_VERSION": [
        "CMAKE_ANDROID_NDK_TOOLCHAIN_VERSION\\n-----------------------------------\\n\\nWhen :ref:`Cross Compiling for Android with the NDK`, this variable\\nmay be set to specify the version of the toolchain to be used\\nas the compiler.  The variable must be set to one of these forms:\\n\\n* ``<major>.<minor>``: GCC of specified version\\n* ``clang<major>.<minor>``: Clang of specified version\\n* ``clang``: Clang of most recent available version\\n\\nA toolchain of the requested version will be selected automatically to\\nmatch the ABI named in the ``CMAKE_ANDROID_ARCH_ABI`` variable.\\n\\nIf not specified, the default will be a value that selects the latest\\navailable GCC toolchain.\\n",
        "variable"
    ],
    "CMAKE_ANDROID_PROCESS_MAX": [
        "CMAKE_ANDROID_PROCESS_MAX\\n-------------------------\\n\\nDefault value for the ``ANDROID_PROCESS_MAX`` target property.\\nSee that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_ANDROID_PROGUARD": [
        "CMAKE_ANDROID_PROGUARD\\n----------------------\\n\\nDefault value for the ``ANDROID_PROGUARD`` target property.\\nSee that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_ANDROID_PROGUARD_CONFIG_PATH": [
        "CMAKE_ANDROID_PROGUARD_CONFIG_PATH\\n----------------------------------\\n\\nDefault value for the ``ANDROID_PROGUARD_CONFIG_PATH`` target property.\\nSee that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_ANDROID_SECURE_PROPS_PATH": [
        "CMAKE_ANDROID_SECURE_PROPS_PATH\\n-------------------------------\\n\\nDefault value for the ``ANDROID_SECURE_PROPS_PATH`` target property.\\nSee that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_ANDROID_SKIP_ANT_STEP": [
        "CMAKE_ANDROID_SKIP_ANT_STEP\\n---------------------------\\n\\nDefault value for the ``ANDROID_SKIP_ANT_STEP`` target property.\\nSee that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_ANDROID_STANDALONE_TOOLCHAIN": [
        "CMAKE_ANDROID_STANDALONE_TOOLCHAIN\\n----------------------------------\\n\\nWhen :ref:`Cross Compiling for Android with a Standalone Toolchain`, this\\nvariable holds the absolute path to the root directory of the toolchain.\\nThe specified directory must contain a ``sysroot`` subdirectory.\\n",
        "variable"
    ],
    "CMAKE_ANDROID_STL_TYPE": [
        "CMAKE_ANDROID_STL_TYPE\\n----------------------\\n\\nWhen :ref:`Cross Compiling for Android with NVIDIA Nsight Tegra Visual Studio\\nEdition`, this variable may be set to specify the default value for the\\n``ANDROID_STL_TYPE`` target property.  See that target property\\nfor additional information.\\n\\nWhen :ref:`Cross Compiling for Android with the NDK`, this variable may be\\nset to specify the STL variant to be used.  The value may be one of:\\n\\n``none``\\n  No C++ Support\\n``system``\\n  Minimal C++ without STL\\n``gabi++_static``\\n  GAbi++ Static\\n``gabi++_shared``\\n  GAbi++ Shared\\n``gnustl_static``\\n  GNU libstdc++ Static\\n``gnustl_shared``\\n  GNU libstdc++ Shared\\n``c++_static``\\n  LLVM libc++ Static\\n``c++_shared``\\n  LLVM libc++ Shared\\n``stlport_static``\\n  STLport Static\\n``stlport_shared``\\n  STLport Shared\\n\\nThe default value is ``gnustl_static`` on NDK versions that provide it\\nand otherwise ``c++_static``.  Note that this default differs from\\nthe native NDK build system because CMake may be used to build projects for\\nAndroid that are not natively implemented for it and use the C++ standard\\nlibrary.\\n",
        "variable"
    ],
    "CMAKE_APPBUNDLE_PATH": [
        "CMAKE_APPBUNDLE_PATH\\n--------------------\\n\\n:ref:`;-list <CMake Language Lists>` of directories specifying a search path\\nfor macOS application bundles used by the ``find_program()``, and\\n``find_package()`` commands.\\n",
        "variable"
    ],
    "CMAKE_AR": [
        "CMAKE_AR\\n--------\\n\\nName of archiving tool for static libraries.\\n\\nThis specifies the name of the program that creates archive or static\\nlibraries.\\n",
        "variable"
    ],
    "CMAKE_ARCHIVE_OUTPUT_DIRECTORY": [
        "CMAKE_ARCHIVE_OUTPUT_DIRECTORY\\n------------------------------\\n\\nWhere to put all the :ref:`ARCHIVE <Archive Output Artifacts>`\\ntarget files when built.\\n\\nThis variable is used to initialize the ``ARCHIVE_OUTPUT_DIRECTORY``\\nproperty on all the targets.  See that target property for additional\\ninformation.\\n",
        "variable"
    ],
    "CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG": [
        "CMAKE_ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>\\n---------------------------------------\\n\\nWhere to put all the :ref:`ARCHIVE <Archive Output Artifacts>`\\ntarget files when built for a specific configuration.\\n\\nThis variable is used to initialize the\\n``ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>`` property on all the targets.\\nSee that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE": [
        "CMAKE_ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>\\n---------------------------------------\\n\\nWhere to put all the :ref:`ARCHIVE <Archive Output Artifacts>`\\ntarget files when built for a specific configuration.\\n\\nThis variable is used to initialize the\\n``ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>`` property on all the targets.\\nSee that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_ARGC": [
        "CMAKE_ARGC\\n----------\\n\\nNumber of command line arguments passed to CMake in script mode.\\n\\nWhen run in :ref:`-P <CMake Options>` script mode, CMake sets this variable to\\nthe number of command line arguments.  See also ``CMAKE_ARGV0``,\\n``1``, ``2`` ...\\n",
        "variable"
    ],
    "CMAKE_ARGV0": [
        "CMAKE_ARGV0\\n-----------\\n\\nCommand line argument passed to CMake in script mode.\\n\\nWhen run in :ref:`-P <CMake Options>` script mode, CMake sets this variable to\\nthe first command line argument.  It then also sets ``CMAKE_ARGV1``,\\n``CMAKE_ARGV2``, ... and so on, up to the number of command line arguments\\ngiven.  See also ``CMAKE_ARGC``.\\n",
        "variable"
    ],
    "CMAKE_AUTOGEN_PARALLEL": [
        "CMAKE_AUTOGEN_PARALLEL\\n----------------------\\n\\nNumber of parallel ``moc`` or ``uic`` processes to start when using\\n``AUTOMOC`` and ``AUTOUIC``.\\n\\nThis variable is used to initialize the ``AUTOGEN_PARALLEL`` property\\non all the targets.  See that target property for additional information.\\n\\nBy default ``CMAKE_AUTOGEN_PARALLEL`` is unset.\\n",
        "variable"
    ],
    "CMAKE_AUTOGEN_VERBOSE": [
        "CMAKE_AUTOGEN_VERBOSE\\n---------------------\\n\\nSets the verbosity of ``AUTOMOC``, ``AUTOUIC`` and\\n``AUTORCC``.  A positive integer value or a true boolean value\\nlets the ``AUTO*`` generators output additional processing information.\\n\\nSetting ``CMAKE_AUTOGEN_VERBOSE`` has the same effect\\nas setting the ``VERBOSE`` environment variable during\\ngeneration (e.g. by calling ``make VERBOSE=1``).\\nThe extra verbosity is limited to the ``AUTO*`` generators though.\\n\\nBy default ``CMAKE_AUTOGEN_VERBOSE`` is unset.\\n",
        "variable"
    ],
    "CMAKE_AUTOMOC": [
        "CMAKE_AUTOMOC\\n-------------\\n\\nWhether to handle ``moc`` automatically for Qt targets.\\n\\nThis variable is used to initialize the ``AUTOMOC`` property on all the\\ntargets.  See that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_AUTOMOC_COMPILER_PREDEFINES": [
        "CMAKE_AUTOMOC_COMPILER_PREDEFINES\\n---------------------------------\\n\\nThis variable is used to initialize the ``AUTOMOC_COMPILER_PREDEFINES``\\nproperty on all the targets. See that target property for additional\\ninformation.\\n\\nBy default it is ON.\\n",
        "variable"
    ],
    "CMAKE_AUTOMOC_DEPEND_FILTERS": [
        "CMAKE_AUTOMOC_DEPEND_FILTERS\\n----------------------------\\n\\nFilter definitions used by ``CMAKE_AUTOMOC``\\nto extract file names from source code as additional dependencies\\nfor the ``moc`` file.\\n\\nThis variable is used to initialize the ``AUTOMOC_DEPEND_FILTERS``\\nproperty on all the targets. See that target property for additional\\ninformation.\\n\\nBy default it is empty.\\n",
        "variable"
    ],
    "CMAKE_AUTOMOC_MACRO_NAMES": [
        "CMAKE_AUTOMOC_MACRO_NAMES\\n----------------------------\\n\\nA :ref:`;-list <CMake Language Lists>` list of macro names used by\\n``CMAKE_AUTOMOC`` to determine if a C++ file needs to be\\nprocessed by ``moc``.\\n\\nThis variable is used to initialize the ``AUTOMOC_MACRO_NAMES``\\nproperty on all the targets. See that target property for additional\\ninformation.\\n\\nThe default value is ``Q_OBJECT;Q_GADGET;Q_NAMESPACE``.\\n\\nExample\\n^^^^^^^\\nLet CMake know that source files that contain ``CUSTOM_MACRO`` must be ``moc``\\nprocessed as well::\\n\\n set(CMAKE_AUTOMOC ON)\\n list(APPEND CMAKE_AUTOMOC_MACRO_NAMES \\\"CUSTOM_MACRO\\\")\\n",
        "variable"
    ],
    "CMAKE_AUTOMOC_MOC_OPTIONS": [
        "CMAKE_AUTOMOC_MOC_OPTIONS\\n-------------------------\\n\\nAdditional options for ``moc`` when using ``CMAKE_AUTOMOC``.\\n\\nThis variable is used to initialize the ``AUTOMOC_MOC_OPTIONS`` property\\non all the targets.  See that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_AUTOMOC_RELAXED_MODE": [
        "CMAKE_AUTOMOC_RELAXED_MODE\\n--------------------------\\n\\nSwitch between strict and relaxed automoc mode.\\n\\nBy default, ``AUTOMOC`` behaves exactly as described in the\\ndocumentation of the ``AUTOMOC`` target property.  When set to\\n``TRUE``, it accepts more input and tries to find the correct input file for\\n``moc`` even if it differs from the documented behaviour.  In this mode it\\ne.g.  also checks whether a header file is intended to be processed by moc\\nwhen a ``\\\"foo.moc\\\"`` file has been included.\\n\\nRelaxed mode has to be enabled for KDE4 compatibility.\\n",
        "variable"
    ],
    "CMAKE_AUTORCC": [
        "CMAKE_AUTORCC\\n-------------\\n\\nWhether to handle ``rcc`` automatically for Qt targets.\\n\\nThis variable is used to initialize the ``AUTORCC`` property on all\\nthe targets.  See that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_AUTORCC_OPTIONS": [
        "CMAKE_AUTORCC_OPTIONS\\n---------------------\\n\\nAdditional options for ``rcc`` when using ``CMAKE_AUTORCC``.\\n\\nThis variable is used to initialize the ``AUTORCC_OPTIONS`` property on\\nall the targets.  See that target property for additional information.\\n\\nEXAMPLE\\n^^^^^^^\\n\\n # ...\\n set(CMAKE_AUTORCC_OPTIONS \\\"--compress;9\\\")\\n # ...\\n",
        "variable"
    ],
    "CMAKE_AUTOUIC": [
        "CMAKE_AUTOUIC\\n-------------\\n\\nWhether to handle ``uic`` automatically for Qt targets.\\n\\nThis variable is used to initialize the ``AUTOUIC`` property on all\\nthe targets.  See that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_AUTOUIC_OPTIONS": [
        "CMAKE_AUTOUIC_OPTIONS\\n---------------------\\n\\nAdditional options for ``uic`` when using ``CMAKE_AUTOUIC``.\\n\\nThis variable is used to initialize the ``AUTOUIC_OPTIONS`` property on\\nall the targets.  See that target property for additional information.\\n\\nEXAMPLE\\n^^^^^^^\\n\\n # ...\\n set_property(CMAKE_AUTOUIC_OPTIONS \\\"--no-protection\\\")\\n # ...\\n",
        "variable"
    ],
    "CMAKE_AUTOUIC_SEARCH_PATHS": [
        "CMAKE_AUTOUIC_SEARCH_PATHS\\n--------------------------\\n\\nSearch path list used by ``CMAKE_AUTOUIC`` to find included\\n``.ui`` files.\\n\\nThis variable is used to initialize the ``AUTOUIC_SEARCH_PATHS``\\nproperty on all the targets. See that target property for additional\\ninformation.\\n\\nBy default it is empty.\\n",
        "variable"
    ],
    "CMAKE_BACKWARDS_COMPATIBILITY": [
        "CMAKE_BACKWARDS_COMPATIBILITY\\n-----------------------------\\n\\nDeprecated.  See CMake Policy ``CMP0001`` documentation.\\n",
        "variable"
    ],
    "CMAKE_BINARY_DIR": [
        "CMAKE_BINARY_DIR\\n----------------\\n\\nThe path to the top level of the build tree.\\n\\nThis is the full path to the top level of the current CMake build\\ntree.  For an in-source build, this would be the same as\\n``CMAKE_SOURCE_DIR``.\\n\\nWhen run in -P script mode, CMake sets the variables\\n``CMAKE_BINARY_DIR``, ``CMAKE_SOURCE_DIR``,\\n``CMAKE_CURRENT_BINARY_DIR`` and\\n``CMAKE_CURRENT_SOURCE_DIR`` to the current working directory.\\n",
        "variable"
    ],
    "CMAKE_BUILD_RPATH": [
        "CMAKE_BUILD_RPATH\\n-----------------\\n\\nA :ref:`;-list <CMake Language Lists>` specifying runtime path (``RPATH``)\\nentries to add to binaries linked in the build tree (for platforms that\\nsupport it).  The entries will *not* be used for binaries in the install\\ntree.  See also the ``CMAKE_INSTALL_RPATH`` variable.\\n\\nThis is used to initialize the ``BUILD_RPATH`` target property\\nfor all targets.\\n",
        "variable"
    ],
    "CMAKE_BUILD_TOOL": [
        "CMAKE_BUILD_TOOL\\n----------------\\n\\nThis variable exists only for backwards compatibility.\\nIt contains the same value as ``CMAKE_MAKE_PROGRAM``.\\nUse that variable instead.\\n",
        "variable"
    ],
    "CMAKE_BUILD_TYPE": [
        "CMAKE_BUILD_TYPE\\n----------------\\n\\nSpecifies the build type on single-configuration generators.\\n\\nThis statically specifies what build type (configuration) will be\\nbuilt in this build tree.  Possible values are empty, ``Debug``, ``Release``,\\n``RelWithDebInfo``, ``MinSizeRel``, ...  This variable is only meaningful to\\nsingle-configuration generators (such as :ref:`Makefile Generators` and\\n``Ninja``) i.e.  those which choose a single configuration when CMake\\nruns to generate a build tree as opposed to multi-configuration generators\\nwhich offer selection of the build configuration within the generated build\\nenvironment.  There are many per-config properties and variables\\n(usually following clean ``SOME_VAR_<CONFIG>`` order conventions), such as\\n``CMAKE_C_FLAGS_<CONFIG>``, specified as uppercase:\\n``CMAKE_C_FLAGS_[DEBUG|RELEASE|RELWITHDEBINFO|MINSIZEREL|...]``.  For example,\\nin a build tree configured to build type ``Debug``, CMake will see to\\nhaving ``CMAKE_C_FLAGS_DEBUG`` settings get\\nadded to the ``CMAKE_C_FLAGS`` settings.  See\\nalso ``CMAKE_CONFIGURATION_TYPES``.\\n",
        "variable"
    ],
    "CMAKE_BUILD_WITH_INSTALL_NAME_DIR": [
        "CMAKE_BUILD_WITH_INSTALL_NAME_DIR\\n---------------------------------\\n\\nWhether to use ``INSTALL_NAME_DIR`` on targets in the build tree.\\n\\nThis variable is used to initialize the ``BUILD_WITH_INSTALL_NAME_DIR``\\nproperty on all targets.\\n",
        "variable"
    ],
    "CMAKE_BUILD_WITH_INSTALL_RPATH": [
        "CMAKE_BUILD_WITH_INSTALL_RPATH\\n------------------------------\\n\\nUse the install path for the ``RPATH``.\\n\\nNormally CMake uses the build tree for the ``RPATH`` when building\\nexecutables etc on systems that use ``RPATH``.  When the software is\\ninstalled the executables etc are relinked by CMake to have the\\ninstall ``RPATH``.  If this variable is set to true then the software is\\nalways built with the install path for the ``RPATH`` and does not need to\\nbe relinked when installed.\\n",
        "variable"
    ],
    "CMAKE_CACHEFILE_DIR": [
        "CMAKE_CACHEFILE_DIR\\n-------------------\\n\\nThe directory with the ``CMakeCache.txt`` file.\\n\\nThis is the full path to the directory that has the ``CMakeCache.txt``\\nfile in it.  This is the same as ``CMAKE_BINARY_DIR``.\\n",
        "variable"
    ],
    "CMAKE_CACHE_MAJOR_VERSION": [
        "CMAKE_CACHE_MAJOR_VERSION\\n-------------------------\\n\\nMajor version of CMake used to create the ``CMakeCache.txt`` file\\n\\nThis stores the major version of CMake used to write a CMake cache\\nfile.  It is only different when a different version of CMake is run\\non a previously created cache file.\\n",
        "variable"
    ],
    "CMAKE_CACHE_MINOR_VERSION": [
        "CMAKE_CACHE_MINOR_VERSION\\n-------------------------\\n\\nMinor version of CMake used to create the ``CMakeCache.txt`` file\\n\\nThis stores the minor version of CMake used to write a CMake cache\\nfile.  It is only different when a different version of CMake is run\\non a previously created cache file.\\n",
        "variable"
    ],
    "CMAKE_CACHE_PATCH_VERSION": [
        "CMAKE_CACHE_PATCH_VERSION\\n-------------------------\\n\\nPatch version of CMake used to create the ``CMakeCache.txt`` file\\n\\nThis stores the patch version of CMake used to write a CMake cache\\nfile.  It is only different when a different version of CMake is run\\non a previously created cache file.\\n",
        "variable"
    ],
    "CMAKE_CFG_INTDIR": [
        "CMAKE_CFG_INTDIR\\n----------------\\n\\nBuild-time reference to per-configuration output subdirectory.\\n\\nFor native build systems supporting multiple configurations in the\\nbuild tree (such as :ref:`Visual Studio Generators` and ``Xcode``),\\nthe value is a reference to a build-time variable specifying the name\\nof the per-configuration output subdirectory.  On :ref:`Makefile Generators`\\nthis evaluates to `.` because there is only one configuration in a build tree.\\nExample values:\\n\\n::\\n\\n $(ConfigurationName) = Visual Studio 9\\n $(Configuration)     = Visual Studio 10\\n $(CONFIGURATION)     = Xcode\\n .                    = Make-based tools\\n\\nSince these values are evaluated by the native build system, this\\nvariable is suitable only for use in command lines that will be\\nevaluated at build time.  Example of intended usage:\\n\\n::\\n\\n add_executable(mytool mytool.c)\\n add_custom_command(\\n   OUTPUT out.txt\\n   COMMAND ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR}/mytool\\n           ${CMAKE_CURRENT_SOURCE_DIR}/in.txt out.txt\\n   DEPENDS mytool in.txt\\n   )\\n add_custom_target(drive ALL DEPENDS out.txt)\\n\\nNote that ``CMAKE_CFG_INTDIR`` is no longer necessary for this purpose but\\nhas been left for compatibility with existing projects.  Instead\\n``add_custom_command()`` recognizes executable target names in its\\n``COMMAND`` option, so\\n``${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR}/mytool`` can be replaced\\nby just ``mytool``.\\n\\nThis variable is read-only.  Setting it is undefined behavior.  In\\nmulti-configuration build systems the value of this variable is passed\\nas the value of preprocessor symbol ``CMAKE_INTDIR`` to the compilation\\nof all source files.\\n",
        "variable"
    ],
    "CMAKE_CL_64": [
        "CMAKE_CL_64\\n-----------\\n\\nDiscouraged.  Use ``CMAKE_SIZEOF_VOID_P`` instead.\\n\\nSet to a true value when using a Microsoft Visual Studio ``cl`` compiler that\\n*targets* a 64-bit architecture.\\n",
        "variable"
    ],
    "CMAKE_CODEBLOCKS_COMPILER_ID": [
        "CMAKE_CODEBLOCKS_COMPILER_ID\\n----------------------------\\n\\nChange the compiler id in the generated CodeBlocks project files.\\n\\nCodeBlocks uses its own compiler id string which differs from\\n``CMAKE_<LANG>_COMPILER_ID``.  If this variable is left empty,\\nCMake tries to recognize the CodeBlocks compiler id automatically.\\nOtherwise the specified string is used in the CodeBlocks project file.\\nSee the CodeBlocks documentation for valid compiler id strings.\\n\\nOther IDEs like QtCreator that also use the CodeBlocks generator may ignore\\nthis setting.\\n",
        "variable"
    ],
    "CMAKE_CODEBLOCKS_EXCLUDE_EXTERNAL_FILES": [
        "CMAKE_CODEBLOCKS_EXCLUDE_EXTERNAL_FILES\\n---------------------------------------\\n\\nChange the way the CodeBlocks generator creates project files.\\n\\nIf this variable evaluates to ``ON`` the generator excludes from\\nthe project file any files that are located outside the project root.\\n",
        "variable"
    ],
    "CMAKE_CODELITE_USE_TARGETS": [
        "CMAKE_CODELITE_USE_TARGETS\\n--------------------------\\n\\nChange the way the CodeLite generator creates projectfiles.\\n\\nIf this variable evaluates to ``ON`` at the end of the top-level\\n``CMakeLists.txt`` file, the generator creates projectfiles based on targets\\nrather than projects.\\n",
        "variable"
    ],
    "CMAKE_COLOR_MAKEFILE": [
        "CMAKE_COLOR_MAKEFILE\\n--------------------\\n\\nEnables color output when using the :ref:`Makefile Generators`.\\n\\nWhen enabled, the generated Makefiles will produce colored output.\\nDefault is ``ON``.\\n",
        "variable"
    ],
    "CMAKE_COMMAND": [
        "CMAKE_COMMAND\\n-------------\\n\\nThe full path to the ``cmake(1)`` executable.\\n\\nThis is the full path to the CMake executable ``cmake(1)`` which is\\nuseful from custom commands that want to use the ``cmake -E`` option for\\nportable system commands.  (e.g.  ``/usr/local/bin/cmake``)\\n",
        "variable"
    ],
    "CMAKE_COMPILER_2005": [
        "CMAKE_COMPILER_2005\\n-------------------\\n\\nUsing the Visual Studio 2005 compiler from Microsoft\\n\\nSet to true when using the Visual Studio 2005 compiler from Microsoft.\\n",
        "variable"
    ],
    "CMAKE_COMPILER_IS_GNUCC": [
        "CMAKE_COMPILER_IS_GNUCC\\n-----------------------\\n\\nTrue if the ``C`` compiler is GNU.\\nUse ``CMAKE_C_COMPILER_ID`` instead.\\n",
        "variable"
    ],
    "CMAKE_COMPILER_IS_GNUCXX": [
        "CMAKE_COMPILER_IS_GNUCXX\\n------------------------\\n\\nTrue if the C++ (``CXX``) compiler is GNU.\\nUse ``CMAKE_CXX_COMPILER_ID`` instead.\\n",
        "variable"
    ],
    "CMAKE_COMPILER_IS_GNUG77": [
        "CMAKE_COMPILER_IS_GNUG77\\n------------------------\\n\\nTrue if the ``Fortran`` compiler is GNU.\\nUse ``CMAKE_Fortran_COMPILER_ID`` instead.\\n",
        "variable"
    ],
    "CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY": [
        "CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY\\n----------------------------------\\n\\nOutput directory for MS debug symbol ``.pdb`` files\\ngenerated by the compiler while building source files.\\n\\nThis variable is used to initialize the\\n``COMPILE_PDB_OUTPUT_DIRECTORY`` property on all the targets.\\n",
        "variable"
    ],
    "CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY_DEBUG": [
        "CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY_<CONFIG>\\n-------------------------------------------\\n\\nPer-configuration output directory for MS debug symbol ``.pdb`` files\\ngenerated by the compiler while building source files.\\n\\nThis is a per-configuration version of\\n``CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY``.\\nThis variable is used to initialize the\\n``COMPILE_PDB_OUTPUT_DIRECTORY_<CONFIG>``\\nproperty on all the targets.\\n",
        "variable"
    ],
    "CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY_RELEASE": [
        "CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY_<CONFIG>\\n-------------------------------------------\\n\\nPer-configuration output directory for MS debug symbol ``.pdb`` files\\ngenerated by the compiler while building source files.\\n\\nThis is a per-configuration version of\\n``CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY``.\\nThis variable is used to initialize the\\n``COMPILE_PDB_OUTPUT_DIRECTORY_<CONFIG>``\\nproperty on all the targets.\\n",
        "variable"
    ],
    "CMAKE_CONFIGURATION_TYPES": [
        "CMAKE_CONFIGURATION_TYPES\\n-------------------------\\n\\nSpecifies the available build types on multi-config generators.\\n\\nThis specifies what build types (configurations) will be available\\nsuch as ``Debug``, ``Release``, ``RelWithDebInfo`` etc.  This has reasonable\\ndefaults on most platforms, but can be extended to provide other build\\ntypes.  See also ``CMAKE_BUILD_TYPE`` for details of managing\\nconfiguration data, and ``CMAKE_CFG_INTDIR``.\\n",
        "variable"
    ],
    "CMAKE_CPACK_COMMAND": [
        "CMAKE_CPACK_COMMAND\\n-------------------\\n\\nFull path to ``cpack(1)`` command installed with CMake.\\n\\nThis is the full path to the CPack executable ``cpack(1)`` which is\\nuseful from custom commands that want to use the ``cmake(1)`` ``-E``\\noption for portable system commands.\\n",
        "variable"
    ],
    "CMAKE_CROSSCOMPILING": [
        "CMAKE_CROSSCOMPILING\\n--------------------\\n\\nIntended to indicate whether CMake is cross compiling, but note limitations\\ndiscussed below.\\n\\nThis variable will be set to true by CMake if the ``CMAKE_SYSTEM_NAME``\\nvariable has been set manually (i.e. in a toolchain file or as a cache entry\\nfrom the ``cmake`` command line). In most cases, manually\\nsetting ``CMAKE_SYSTEM_NAME`` will only be done when cross compiling,\\nsince it will otherwise be given the same value as\\n``CMAKE_HOST_SYSTEM_NAME`` if not manually set, which is correct for\\nthe non-cross-compiling case. In the event that ``CMAKE_SYSTEM_NAME``\\nis manually set to the same value as ``CMAKE_HOST_SYSTEM_NAME``, then\\n``CMAKE_CROSSCOMPILING`` will still be set to true.\\n\\nAnother case to be aware of is that builds targeting Apple platforms other than\\nmacOS are handled differently to other cross compiling scenarios. Rather than\\nrelying on ``CMAKE_SYSTEM_NAME`` to select the target platform, Apple\\ndevice builds use ``CMAKE_OSX_SYSROOT`` to select the appropriate SDK,\\nwhich indirectly determines the target platform. Furthermore, when using the\\nXcode generator, developers can switch between device and simulator builds at\\nbuild time rather than having a single choice at configure time, so the concept\\nof whether the build is cross compiling or not is more complex. Therefore, the\\nuse of ``CMAKE_CROSSCOMPILING`` is not recommended for projects targeting Apple\\ndevices.\\n",
        "variable"
    ],
    "CMAKE_CROSSCOMPILING_EMULATOR": [
        "CMAKE_CROSSCOMPILING_EMULATOR\\n-----------------------------\\n\\nThis variable is only used when ``CMAKE_CROSSCOMPILING`` is on. It\\nshould point to a command on the host system that can run executable built\\nfor the target system.\\n\\nThe command will be used to run ``try_run()`` generated executables,\\nwhich avoids manual population of the TryRunResults.cmake file.\\n\\nIt is also used as the default value for the\\n``CROSSCOMPILING_EMULATOR`` target property of executables.\\n",
        "variable"
    ],
    "CMAKE_CTEST_COMMAND": [
        "CMAKE_CTEST_COMMAND\\n-------------------\\n\\nFull path to ``ctest(1)`` command installed with CMake.\\n\\nThis is the full path to the CTest executable ``ctest(1)`` which is\\nuseful from custom commands that want to use the ``cmake(1)`` ``-E``\\noption for portable system commands.\\n",
        "variable"
    ],
    "CMAKE_CUDA_EXTENSIONS": [
        "CMAKE_CUDA_EXTENSIONS\\n---------------------\\n\\nDefault value for ``CUDA_EXTENSIONS`` property of targets.\\n\\nThis variable is used to initialize the ``CUDA_EXTENSIONS``\\nproperty on all targets.  See that target property for additional\\ninformation.\\n\\nSee the ``cmake-compile-features(7)`` manual for information on\\ncompile features and a list of supported compilers.\\n",
        "variable"
    ],
    "CMAKE_CUDA_HOST_COMPILER": [
        "CMAKE_CUDA_HOST_COMPILER\\n------------------------\\n\\nExecutable to use when compiling host code when compiling ``CUDA`` language\\nfiles. Maps to the nvcc -ccbin option.  Will only be used by CMake on the first\\nconfiguration to determine a valid host compiler for ``CUDA``. After a valid\\nhost compiler has been found, this value is read-only.\\n",
        "variable"
    ],
    "CMAKE_CUDA_SEPARABLE_COMPILATION": [
        "CMAKE_CUDA_SEPARABLE_COMPILATION\\n--------------------------------\\n\\nDefault value for ``CUDA_SEPARABLE_COMPILATION`` target property.\\nThis variable is used to initialize the property on each target as it is\\ncreated.\\n",
        "variable"
    ],
    "CMAKE_CUDA_STANDARD": [
        "CMAKE_CUDA_STANDARD\\n-------------------\\n\\nDefault value for ``CUDA_STANDARD`` property of targets.\\n\\nThis variable is used to initialize the ``CUDA_STANDARD``\\nproperty on all targets.  See that target property for additional\\ninformation.\\n\\nSee the ``cmake-compile-features(7)`` manual for information on\\ncompile features and a list of supported compilers.\\n",
        "variable"
    ],
    "CMAKE_CUDA_STANDARD_REQUIRED": [
        "CMAKE_CUDA_STANDARD_REQUIRED\\n----------------------------\\n\\nDefault value for ``CUDA_STANDARD_REQUIRED`` property of targets.\\n\\nThis variable is used to initialize the ``CUDA_STANDARD_REQUIRED``\\nproperty on all targets.  See that target property for additional\\ninformation.\\n\\nSee the ``cmake-compile-features(7)`` manual for information on\\ncompile features and a list of supported compilers.\\n",
        "variable"
    ],
    "CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES": [
        "CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES\\n--------------------------------------\\n\\nWhen the ``CUDA`` language has been enabled, this provides a\\n:ref:`;-list <CMake Language Lists>` of include directories provided\\nby the CUDA Toolkit.  The value may be useful for C++ source files\\nto include CUDA headers.\\n",
        "variable"
    ],
    "CMAKE_CURRENT_BINARY_DIR": [
        "CMAKE_CURRENT_BINARY_DIR\\n------------------------\\n\\nThe path to the binary directory currently being processed.\\n\\nThis the full path to the build directory that is currently being\\nprocessed by cmake.  Each directory added by ``add_subdirectory()`` will\\ncreate a binary directory in the build tree, and as it is being\\nprocessed this variable will be set.  For in-source builds this is the\\ncurrent source directory being processed.\\n\\nWhen run in -P script mode, CMake sets the variables\\n``CMAKE_BINARY_DIR``, ``CMAKE_SOURCE_DIR``,\\n``CMAKE_CURRENT_BINARY_DIR`` and\\n``CMAKE_CURRENT_SOURCE_DIR`` to the current working directory.\\n",
        "variable"
    ],
    "CMAKE_CURRENT_LIST_DIR": [
        "CMAKE_CURRENT_LIST_DIR\\n----------------------\\n\\nFull directory of the listfile currently being processed.\\n\\nAs CMake processes the listfiles in your project this variable will\\nalways be set to the directory where the listfile which is currently\\nbeing processed (``CMAKE_CURRENT_LIST_FILE``) is located.  The value\\nhas dynamic scope.  When CMake starts processing commands in a source file\\nit sets this variable to the directory where this file is located.\\nWhen CMake finishes processing commands from the file it restores the\\nprevious value.  Therefore the value of the variable inside a macro or\\nfunction is the directory of the file invoking the bottom-most entry\\non the call stack, not the directory of the file containing the macro\\nor function definition.\\n\\nSee also ``CMAKE_CURRENT_LIST_FILE``.\\n",
        "variable"
    ],
    "CMAKE_CURRENT_LIST_FILE": [
        "CMAKE_CURRENT_LIST_FILE\\n-----------------------\\n\\nFull path to the listfile currently being processed.\\n\\nAs CMake processes the listfiles in your project this variable will\\nalways be set to the one currently being processed.  The value has\\ndynamic scope.  When CMake starts processing commands in a source file\\nit sets this variable to the location of the file.  When CMake\\nfinishes processing commands from the file it restores the previous\\nvalue.  Therefore the value of the variable inside a macro or function\\nis the file invoking the bottom-most entry on the call stack, not the\\nfile containing the macro or function definition.\\n\\nSee also ``CMAKE_PARENT_LIST_FILE``.\\n",
        "variable"
    ],
    "CMAKE_CURRENT_LIST_LINE": [
        "CMAKE_CURRENT_LIST_LINE\\n-----------------------\\n\\nThe line number of the current file being processed.\\n\\nThis is the line number of the file currently being processed by\\ncmake.\\n",
        "variable"
    ],
    "CMAKE_CURRENT_SOURCE_DIR": [
        "CMAKE_CURRENT_SOURCE_DIR\\n------------------------\\n\\nThe path to the source directory currently being processed.\\n\\nThis the full path to the source directory that is currently being\\nprocessed by cmake.\\n\\nWhen run in -P script mode, CMake sets the variables\\n``CMAKE_BINARY_DIR``, ``CMAKE_SOURCE_DIR``,\\n``CMAKE_CURRENT_BINARY_DIR`` and\\n``CMAKE_CURRENT_SOURCE_DIR`` to the current working directory.\\n",
        "variable"
    ],
    "CMAKE_CXX_COMPILE_FEATURES": [
        "CMAKE_CXX_COMPILE_FEATURES\\n--------------------------\\n\\nList of features known to the C++ compiler\\n\\nThese features are known to be available for use with the C++ compiler. This\\nlist is a subset of the features listed in the\\n``CMAKE_CXX_KNOWN_FEATURES`` global property.\\n\\nSee the ``cmake-compile-features(7)`` manual for information on\\ncompile features and a list of supported compilers.\\n",
        "variable"
    ],
    "CMAKE_CXX_EXTENSIONS": [
        "CMAKE_CXX_EXTENSIONS\\n--------------------\\n\\nDefault value for ``CXX_EXTENSIONS`` property of targets.\\n\\nThis variable is used to initialize the ``CXX_EXTENSIONS``\\nproperty on all targets.  See that target property for additional\\ninformation.\\n\\nSee the ``cmake-compile-features(7)`` manual for information on\\ncompile features and a list of supported compilers.\\n",
        "variable"
    ],
    "CMAKE_CXX_STANDARD": [
        "CMAKE_CXX_STANDARD\\n------------------\\n\\nDefault value for ``CXX_STANDARD`` property of targets.\\n\\nThis variable is used to initialize the ``CXX_STANDARD``\\nproperty on all targets.  See that target property for additional\\ninformation.\\n\\nSee the ``cmake-compile-features(7)`` manual for information on\\ncompile features and a list of supported compilers.\\n",
        "variable"
    ],
    "CMAKE_CXX_STANDARD_REQUIRED": [
        "CMAKE_CXX_STANDARD_REQUIRED\\n---------------------------\\n\\nDefault value for ``CXX_STANDARD_REQUIRED`` property of targets.\\n\\nThis variable is used to initialize the ``CXX_STANDARD_REQUIRED``\\nproperty on all targets.  See that target property for additional\\ninformation.\\n\\nSee the ``cmake-compile-features(7)`` manual for information on\\ncompile features and a list of supported compilers.\\n",
        "variable"
    ],
    "CMAKE_C_COMPILE_FEATURES": [
        "CMAKE_C_COMPILE_FEATURES\\n------------------------\\n\\nList of features known to the C compiler\\n\\nThese features are known to be available for use with the C compiler. This\\nlist is a subset of the features listed in the\\n``CMAKE_C_KNOWN_FEATURES`` global property.\\n\\nSee the ``cmake-compile-features(7)`` manual for information on\\ncompile features and a list of supported compilers.\\n",
        "variable"
    ],
    "CMAKE_C_EXTENSIONS": [
        "CMAKE_C_EXTENSIONS\\n------------------\\n\\nDefault value for ``C_EXTENSIONS`` property of targets.\\n\\nThis variable is used to initialize the ``C_EXTENSIONS``\\nproperty on all targets.  See that target property for additional\\ninformation.\\n\\nSee the ``cmake-compile-features(7)`` manual for information on\\ncompile features and a list of supported compilers.\\n",
        "variable"
    ],
    "CMAKE_C_STANDARD": [
        "CMAKE_C_STANDARD\\n----------------\\n\\nDefault value for ``C_STANDARD`` property of targets.\\n\\nThis variable is used to initialize the ``C_STANDARD``\\nproperty on all targets.  See that target property for additional\\ninformation.\\n\\nSee the ``cmake-compile-features(7)`` manual for information on\\ncompile features and a list of supported compilers.\\n",
        "variable"
    ],
    "CMAKE_C_STANDARD_REQUIRED": [
        "CMAKE_C_STANDARD_REQUIRED\\n-------------------------\\n\\nDefault value for ``C_STANDARD_REQUIRED`` property of targets.\\n\\nThis variable is used to initialize the ``C_STANDARD_REQUIRED``\\nproperty on all targets.  See that target property for additional\\ninformation.\\n\\nSee the ``cmake-compile-features(7)`` manual for information on\\ncompile features and a list of supported compilers.\\n",
        "variable"
    ],
    "CMAKE_DEBUG_TARGET_PROPERTIES": [
        "CMAKE_DEBUG_TARGET_PROPERTIES\\n-----------------------------\\n\\nEnables tracing output for target properties.\\n\\nThis variable can be populated with a list of properties to generate\\ndebug output for when evaluating target properties.  Currently it can\\nonly be used when evaluating:\\n\\n* ``AUTOUIC_OPTIONS``\\n* ``COMPILE_DEFINITIONS``\\n* ``COMPILE_FEATURES``\\n* ``COMPILE_OPTIONS``\\n* ``INCLUDE_DIRECTORIES``\\n* ``LINK_DIRECTORIES``\\n* ``LINK_OPTIONS``\\n* ``POSITION_INDEPENDENT_CODE``\\n* ``SOURCES``\\n\\ntarget properties and any other property listed in\\n``COMPATIBLE_INTERFACE_STRING`` and other\\n``COMPATIBLE_INTERFACE_`` properties.  It outputs an origin for each entry\\nin the target property.  Default is unset.\\n",
        "variable"
    ],
    "CMAKE_DEPENDS_IN_PROJECT_ONLY": [
        "CMAKE_DEPENDS_IN_PROJECT_ONLY\\n-----------------------------\\n\\nWhen set to ``TRUE`` in a directory, the build system produced by the\\n:ref:`Makefile Generators` is set up to only consider dependencies on source\\nfiles that appear either in the source or in the binary directories.  Changes\\nto source files outside of these directories will not cause rebuilds.\\n\\nThis should be used carefully in cases where some source files are picked up\\nthrough external headers during the build.\\n",
        "variable"
    ],
    "CMAKE_DIRECTORY_LABELS": [
        "CMAKE_DIRECTORY_LABELS\\n-----------------------\\n\\nSpecify labels for the current directory.\\n\\nThis is used to initialize the ``LABELS`` directory property.\\n",
        "variable"
    ],
    "CMAKE_DISABLE_FIND_PACKAGE_<PackageName>": [
        "CMAKE_DISABLE_FIND_PACKAGE_<PackageName>\\n----------------------------------------\\n\\nVariable for disabling ``find_package()`` calls.\\n\\nEvery non-``REQUIRED`` ``find_package()`` call in a project can be\\ndisabled by setting the variable\\n``CMAKE_DISABLE_FIND_PACKAGE_<PackageName>`` to ``TRUE``.\\nThis can be used to build a project without an optional package,\\nalthough that package is installed.\\n\\nThis switch should be used during the initial CMake run.  Otherwise if\\nthe package has already been found in a previous CMake run, the\\nvariables which have been stored in the cache will still be there.  In\\nthat case it is recommended to remove the cache variables for this\\npackage from the cache using the cache editor or ``cmake(1)`` ``-U``\\n",
        "variable"
    ],
    "CMAKE_DL_LIBS": [
        "CMAKE_DL_LIBS\\n-------------\\n\\nName of library containing ``dlopen`` and ``dlclose``.\\n\\nThe name of the library that has ``dlopen`` and ``dlclose`` in it, usually\\n``-ldl`` on most UNIX machines.\\n",
        "variable"
    ],
    "CMAKE_DOTNET_TARGET_FRAMEWORK_VERSION": [
        "CMAKE_DOTNET_TARGET_FRAMEWORK_VERSION\\n-------------------------------------\\n\\nDefault value for ``DOTNET_TARGET_FRAMEWORK_VERSION``\\nproperty of targets.\\n\\nThis variable is used to initialize the\\n``DOTNET_TARGET_FRAMEWORK_VERSION`` property on all\\ntargets. See that target property for additional information.\\n\\nSetting ``CMAKE_DOTNET_TARGET_FRAMEWORK_VERSION`` may be necessary\\nwhen working with ``C#`` and newer .NET framework versions to\\navoid referencing errors with the ``ALL_BUILD`` CMake target.\\n\\nThis variable is only evaluated for :ref:`Visual Studio Generators`\\nVS 2010 and above.\\n",
        "variable"
    ],
    "CMAKE_ECLIPSE_GENERATE_LINKED_RESOURCES": [
        "CMAKE_ECLIPSE_GENERATE_LINKED_RESOURCES\\n---------------------------------------\\n\\nThis cache variable is used by the Eclipse project generator.  See\\n``cmake-generators(7)``.\\n\\nThe Eclipse project generator generates so-called linked resources\\ne.g. to the subproject root dirs in the source tree or to the source files\\nof targets.\\nThis can be disabled by setting this variable to FALSE.\\n",
        "variable"
    ],
    "CMAKE_ECLIPSE_GENERATE_SOURCE_PROJECT": [
        "CMAKE_ECLIPSE_GENERATE_SOURCE_PROJECT\\n-------------------------------------\\n\\nThis cache variable is used by the Eclipse project generator.  See\\n``cmake-generators(7)``.\\n\\nIf this variable is set to TRUE, the Eclipse project generator will generate\\nan Eclipse project in ``CMAKE_SOURCE_DIR`` . This project can then\\nbe used in Eclipse e.g. for the version control functionality.\\n``CMAKE_ECLIPSE_GENERATE_SOURCE_PROJECT`` defaults to FALSE; so\\nnothing is written into the source directory.\\n",
        "variable"
    ],
    "CMAKE_ECLIPSE_MAKE_ARGUMENTS": [
        "CMAKE_ECLIPSE_MAKE_ARGUMENTS\\n----------------------------\\n\\nThis cache variable is used by the Eclipse project generator.  See\\n``cmake-generators(7)``.\\n\\nThis variable holds arguments which are used when Eclipse invokes the make\\ntool. By default it is initialized to hold flags to enable parallel builds\\n(using -j typically).\\n",
        "variable"
    ],
    "CMAKE_ECLIPSE_VERSION": [
        "CMAKE_ECLIPSE_VERSION\\n---------------------\\n\\nThis cache variable is used by the Eclipse project generator.  See\\n``cmake-generators(7)``.\\n\\nWhen using the Eclipse project generator, CMake tries to find the Eclipse\\nexecutable and detect the version of it. Depending on the version it finds,\\nsome features are enabled or disabled. If CMake doesn't find\\nEclipse, it assumes the oldest supported version, Eclipse Callisto (3.2).\\n",
        "variable"
    ],
    "CMAKE_EDIT_COMMAND": [
        "CMAKE_EDIT_COMMAND\\n------------------\\n\\nFull path to ``cmake-gui(1)`` or ``ccmake(1)``.  Defined only for\\n:ref:`Makefile Generators` when not using an \\\"extra\\\" generator for an IDE.\\n\\nThis is the full path to the CMake executable that can graphically\\nedit the cache.  For example, ``cmake-gui(1)`` or ``ccmake(1)``.\\n",
        "variable"
    ],
    "CMAKE_ENABLE_EXPORTS": [
        "CMAKE_ENABLE_EXPORTS\\n--------------------\\n\\nSpecify whether an executable exports symbols for loadable modules.\\n\\nNormally an executable does not export any symbols because it is the\\nfinal program.  It is possible for an executable to export symbols to\\nbe used by loadable modules.  When this property is set to true CMake\\nwill allow other targets to ``link`` to the executable with the\\n``TARGET_LINK_LIBRARIES()`` command.  On all platforms a target-level\\ndependency on the executable is created for targets that link to it.\\nFor DLL platforms an import library will be created for the exported\\nsymbols and then used for linking.  All Windows-based systems\\nincluding Cygwin are DLL platforms.  For non-DLL platforms that\\nrequire all symbols to be resolved at link time, such as macOS, the\\nmodule will ``link`` to the executable using a flag like\\n``-bundle_loader``.  For other non-DLL platforms the link rule is simply\\nignored since the dynamic loader will automatically bind symbols when\\nthe module is loaded.\\n\\nThis variable is used to initialize the target property\\n``ENABLE_EXPORTS`` for executable targets.\\n",
        "variable"
    ],
    "CMAKE_ERROR_DEPRECATED": [
        "CMAKE_ERROR_DEPRECATED\\n----------------------\\n\\nWhether to issue errors for deprecated functionality.\\n\\nIf ``TRUE``, use of deprecated functionality will issue fatal errors.\\nIf this variable is not set, CMake behaves as if it were set to ``FALSE``.\\n",
        "variable"
    ],
    "CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION": [
        "CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION\\n-------------------------------------------\\n\\nAsk ``cmake_install.cmake`` script to error out as soon as a file with\\nabsolute ``INSTALL DESTINATION`` is encountered.\\n\\nThe fatal error is emitted before the installation of the offending\\nfile takes place.  This variable is used by CMake-generated\\n``cmake_install.cmake`` scripts.  If one sets this variable to ``ON`` while\\nrunning the script, it may get fatal error messages from the script.\\n",
        "variable"
    ],
    "CMAKE_EXECUTABLE_SUFFIX": [
        "CMAKE_EXECUTABLE_SUFFIX\\n-----------------------\\n\\nThe suffix for executables on this platform.\\n\\nThe suffix to use for the end of an executable filename if any, ``.exe``\\non Windows.\\n\\n``CMAKE_EXECUTABLE_SUFFIX_<LANG>`` overrides this for language ``<LANG>``.\\n",
        "variable"
    ],
    "CMAKE_EXE_LINKER_FLAGS": [
        "CMAKE_EXE_LINKER_FLAGS\\n----------------------\\n\\nLinker flags to be used to create executables.\\n\\nThese flags will be used by the linker when creating an executable.\\n",
        "variable"
    ],
    "CMAKE_EXE_LINKER_FLAGS_DEBUG": [
        "CMAKE_EXE_LINKER_FLAGS_<CONFIG>\\n-------------------------------\\n\\nFlags to be used when linking an executable.\\n\\nSame as ``CMAKE_C_FLAGS_*`` but used by the linker when creating\\nexecutables.\\n",
        "variable"
    ],
    "CMAKE_EXE_LINKER_FLAGS_RELEASE": [
        "CMAKE_EXE_LINKER_FLAGS_<CONFIG>\\n-------------------------------\\n\\nFlags to be used when linking an executable.\\n\\nSame as ``CMAKE_C_FLAGS_*`` but used by the linker when creating\\nexecutables.\\n",
        "variable"
    ],
    "CMAKE_EXE_LINKER_FLAGS_DEBUG_INIT": [
        "CMAKE_EXE_LINKER_FLAGS_<CONFIG>_INIT\\n------------------------------------\\n\\nValue used to initialize the ``CMAKE_EXE_LINKER_FLAGS_<CONFIG>``\\ncache entry the first time a build tree is configured.\\nThis variable is meant to be set by a :variable:`toolchain file\\n<CMAKE_TOOLCHAIN_FILE>`.  CMake may prepend or append content to\\nthe value based on the environment and target platform.\\n\\nSee also ``CMAKE_EXE_LINKER_FLAGS_INIT``.\\n",
        "variable"
    ],
    "CMAKE_EXE_LINKER_FLAGS_RELEASE_INIT": [
        "CMAKE_EXE_LINKER_FLAGS_<CONFIG>_INIT\\n------------------------------------\\n\\nValue used to initialize the ``CMAKE_EXE_LINKER_FLAGS_<CONFIG>``\\ncache entry the first time a build tree is configured.\\nThis variable is meant to be set by a :variable:`toolchain file\\n<CMAKE_TOOLCHAIN_FILE>`.  CMake may prepend or append content to\\nthe value based on the environment and target platform.\\n\\nSee also ``CMAKE_EXE_LINKER_FLAGS_INIT``.\\n",
        "variable"
    ],
    "CMAKE_EXE_LINKER_FLAGS_INIT": [
        "CMAKE_EXE_LINKER_FLAGS_INIT\\n---------------------------\\n\\nValue used to initialize the ``CMAKE_EXE_LINKER_FLAGS``\\ncache entry the first time a build tree is configured.\\nThis variable is meant to be set by a :variable:`toolchain file\\n<CMAKE_TOOLCHAIN_FILE>`.  CMake may prepend or append content to\\nthe value based on the environment and target platform.\\n\\nSee also the configuration-specific variable\\n``CMAKE_EXE_LINKER_FLAGS_<CONFIG>_INIT``.\\n",
        "variable"
    ],
    "CMAKE_EXPORT_COMPILE_COMMANDS": [
        "CMAKE_EXPORT_COMPILE_COMMANDS\\n-----------------------------\\n\\nEnable/Disable output of compile commands during generation.\\n\\nIf enabled, generates a ``compile_commands.json`` file containing the exact\\ncompiler calls for all translation units of the project in machine-readable\\nform.  The format of the JSON file looks like:\\n\\n [\\n   {\\n     \\\"directory\\\": \\\"/home/user/development/project\\\",\\n     \\\"command\\\": \\\"/usr/bin/c++ ... -c ../foo/foo.cc\\\",\\n     \\\"file\\\": \\\"../foo/foo.cc\\\"\\n   },\\n\\n   ...\\n\\n   {\\n     \\\"directory\\\": \\\"/home/user/development/project\\\",\\n     \\\"command\\\": \\\"/usr/bin/c++ ... -c ../foo/bar.cc\\\",\\n     \\\"file\\\": \\\"../foo/bar.cc\\\"\\n   }\\n ]\\n\\n.. note::\\n  This option is implemented only by :ref:`Makefile Generators`\\n  and the ``Ninja``.  It is ignored on other generators.\\n",
        "variable"
    ],
    "CMAKE_EXPORT_NO_PACKAGE_REGISTRY": [
        "CMAKE_EXPORT_NO_PACKAGE_REGISTRY\\n--------------------------------\\n\\nDisable the ``export(PACKAGE)`` command.\\n\\nIn some cases, for example for packaging and for system wide\\ninstallations, it is not desirable to write the user package registry.\\nIf the ``CMAKE_EXPORT_NO_PACKAGE_REGISTRY`` variable is enabled,\\nthe ``export(PACKAGE)`` command will do nothing.\\n\\nSee also :ref:`Disabling the Package Registry`.\\n",
        "variable"
    ],
    "CMAKE_EXTRA_GENERATOR": [
        "CMAKE_EXTRA_GENERATOR\\n---------------------\\n\\nThe extra generator used to build the project.  See\\n``cmake-generators(7)``.\\n\\nWhen using the Eclipse, CodeBlocks, CodeLite, Kate or Sublime generators, CMake\\ngenerates Makefiles (``CMAKE_GENERATOR``) and additionally project\\nfiles for the respective IDE.  This IDE project file generator is stored in\\n``CMAKE_EXTRA_GENERATOR`` (e.g.  ``Eclipse CDT4``).\\n",
        "variable"
    ],
    "CMAKE_EXTRA_SHARED_LIBRARY_SUFFIXES": [
        "CMAKE_EXTRA_SHARED_LIBRARY_SUFFIXES\\n-----------------------------------\\n\\nAdditional suffixes for shared libraries.\\n\\nExtensions for shared libraries other than that specified by\\n``CMAKE_SHARED_LIBRARY_SUFFIX``, if any.  CMake uses this to recognize\\nexternal shared library files during analysis of libraries linked by a\\ntarget.\\n",
        "variable"
    ],
    "CMAKE_FIND_APPBUNDLE": [
        "CMAKE_FIND_APPBUNDLE\\n--------------------\\n\\nThis variable affects how ``find_*`` commands choose between\\nmacOS Application Bundles and unix-style package components.\\n\\nOn Darwin or systems supporting macOS Application Bundles, the\\n``CMAKE_FIND_APPBUNDLE`` variable can be set to empty or\\none of the following:\\n\\n``FIRST``\\n  Try to find application bundles before standard programs.\\n  This is the default on Darwin.\\n\\n``LAST``\\n  Try to find application bundles after standard programs.\\n\\n``ONLY``\\n  Only try to find application bundles.\\n\\n``NEVER``\\n  Never try to find application bundles.\\n",
        "variable"
    ],
    "CMAKE_FIND_FRAMEWORK": [
        "CMAKE_FIND_FRAMEWORK\\n--------------------\\n\\nThis variable affects how ``find_*`` commands choose between\\nmacOS Frameworks and unix-style package components.\\n\\nOn Darwin or systems supporting macOS Frameworks, the\\n``CMAKE_FIND_FRAMEWORK`` variable can be set to empty or\\none of the following:\\n\\n``FIRST``\\n  Try to find frameworks before standard libraries or headers.\\n  This is the default on Darwin.\\n\\n``LAST``\\n  Try to find frameworks after standard libraries or headers.\\n\\n``ONLY``\\n  Only try to find frameworks.\\n\\n``NEVER``\\n  Never try to find frameworks.\\n",
        "variable"
    ],
    "CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX": [
        "CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX\\n------------------------------------\\n\\nSpecify a ``<suffix>`` to tell the ``find_library()`` command to\\nsearch in a ``lib<suffix>`` directory before each ``lib`` directory that\\nwould normally be searched.\\n\\nThis overrides the behavior of related global properties:\\n\\n* ``FIND_LIBRARY_USE_LIB32_PATHS``\\n* ``FIND_LIBRARY_USE_LIB64_PATHS``\\n* ``FIND_LIBRARY_USE_LIBX32_PATHS``\\n",
        "variable"
    ],
    "CMAKE_FIND_LIBRARY_PREFIXES": [
        "CMAKE_FIND_LIBRARY_PREFIXES\\n---------------------------\\n\\nPrefixes to prepend when looking for libraries.\\n\\nThis specifies what prefixes to add to library names when the\\n``find_library()`` command looks for libraries.  On UNIX systems this is\\ntypically ``lib``, meaning that when trying to find the ``foo`` library it\\nwill look for ``libfoo``.\\n",
        "variable"
    ],
    "CMAKE_FIND_LIBRARY_SUFFIXES": [
        "CMAKE_FIND_LIBRARY_SUFFIXES\\n---------------------------\\n\\nSuffixes to append when looking for libraries.\\n\\nThis specifies what suffixes to add to library names when the\\n``find_library()`` command looks for libraries.  On Windows systems this\\nis typically ``.lib`` and ``.dll``, meaning that when trying to find the\\n``foo`` library it will look for ``foo.dll`` etc.\\n",
        "variable"
    ],
    "CMAKE_FIND_NO_INSTALL_PREFIX": [
        "CMAKE_FIND_NO_INSTALL_PREFIX\\n----------------------------\\n\\nExclude the values of the ``CMAKE_INSTALL_PREFIX`` and\\n``CMAKE_STAGING_PREFIX`` variables from\\n``CMAKE_SYSTEM_PREFIX_PATH``.  CMake adds these project-destination\\nprefixes to ``CMAKE_SYSTEM_PREFIX_PATH`` by default in order to\\nsupport building a series of dependent packages and installing them into\\na common prefix.  Set ``CMAKE_FIND_NO_INSTALL_PREFIX`` to ``TRUE``\\nto suppress this behavior.\\n\\nThe ``CMAKE_SYSTEM_PREFIX_PATH`` is initialized on the first call to a\\n``project()`` or ``enable_language()`` command.  Therefore one must\\nset ``CMAKE_FIND_NO_INSTALL_PREFIX`` before this in order to take effect.  A\\nuser may set the variable as a cache entry on the command line to achieve this.\\n\\nNote that the prefix(es) may still be searched for other reasons, such as being\\nthe same prefix as the CMake installation, or for being a built-in system\\nprefix.\\n",
        "variable"
    ],
    "CMAKE_FIND_PACKAGE_NAME": [
        "CMAKE_FIND_PACKAGE_NAME\\n-----------------------\\n\\nDefined by the ``find_package()`` command while loading\\na find module to record the caller-specified package name.\\nSee command documentation for details.\\n",
        "variable"
    ],
    "CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY": [
        "CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY\\n--------------------------------------\\n\\nSkip :ref:`User Package Registry` in ``find_package()`` calls.\\n\\nIn some cases, for example to locate only system wide installations, it\\nis not desirable to use the :ref:`User Package Registry` when searching\\nfor packages. If the ``CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY``\\nvariable is enabled, all the ``find_package()`` commands will skip\\nthe :ref:`User Package Registry` as if they were called with the\\n``NO_CMAKE_PACKAGE_REGISTRY`` argument.\\n\\nSee also :ref:`Disabling the Package Registry`.\\n",
        "variable"
    ],
    "CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY": [
        "CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY\\n---------------------------------------------\\n\\nSkip :ref:`System Package Registry` in ``find_package()`` calls.\\n\\nIn some cases, it is not desirable to use the\\n:ref:`System Package Registry` when searching for packages. If the\\n``CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY`` variable is\\nenabled, all the ``find_package()`` commands will skip\\nthe :ref:`System Package Registry` as if they were called with the\\n``NO_CMAKE_SYSTEM_PACKAGE_REGISTRY`` argument.\\n\\nSee also :ref:`Disabling the Package Registry`.\\n",
        "variable"
    ],
    "CMAKE_FIND_PACKAGE_SORT_DIRECTION": [
        "CMAKE_FIND_PACKAGE_SORT_DIRECTION\\n---------------------------------\\n\\nThe sorting direction used by ``CMAKE_FIND_PACKAGE_SORT_ORDER``.\\nIt can assume one of the following values:\\n\\n``DEC``\\n  Default.  Ordering is done in descending mode.\\n  The highest folder found will be tested first.\\n\\n``ASC``\\n  Ordering is done in ascending mode.\\n  The lowest folder found will be tested first.\\n\\nIf ``CMAKE_FIND_PACKAGE_SORT_ORDER`` is not set or is set to ``NONE``\\nthis variable has no effect.\\n",
        "variable"
    ],
    "CMAKE_FIND_PACKAGE_SORT_ORDER": [
        "CMAKE_FIND_PACKAGE_SORT_ORDER\\n-----------------------------\\n\\nThe default order for sorting packages found using ``find_package()``.\\nIt can assume one of the following values:\\n\\n``NONE``\\n  Default.  No attempt is done to sort packages.\\n  The first valid package found will be selected.\\n\\n``NAME``\\n  Sort packages lexicographically before selecting one.\\n\\n``NATURAL``\\n  Sort packages using natural order (see ``strverscmp(3)`` manual),\\n  i.e. such that contiguous digits are compared as whole numbers.\\n\\nNatural sorting can be employed to return the highest version when multiple\\nversions of the same library are found by ``find_package()``.  For\\nexample suppose that the following libraries have been found:\\n\\n* libX-1.1.0\\n* libX-1.2.9\\n* libX-1.2.10\\n\\nBy setting ``NATURAL`` order we can select the one with the highest\\nversion number ``libX-1.2.10``.\\n\\n set(CMAKE_FIND_PACKAGE_SORT_ORDER NATURAL)\\n find_package(libX CONFIG)\\n\\nThe sort direction can be controlled using the\\n``CMAKE_FIND_PACKAGE_SORT_DIRECTION`` variable\\n(by default decrescent, e.g. lib-B will be tested before lib-A).\\n",
        "variable"
    ],
    "CMAKE_FIND_PACKAGE_WARN_NO_MODULE": [
        "CMAKE_FIND_PACKAGE_WARN_NO_MODULE\\n---------------------------------\\n\\nTell ``find_package()`` to warn if called without an explicit mode.\\n\\nIf ``find_package()`` is called without an explicit mode option\\n(``MODULE``, ``CONFIG``, or ``NO_MODULE``) and no ``Find<pkg>.cmake`` module\\nis in ``CMAKE_MODULE_PATH`` then CMake implicitly assumes that the\\ncaller intends to search for a package configuration file.  If no package\\nconfiguration file is found then the wording of the failure message\\nmust account for both the case that the package is really missing and\\nthe case that the project has a bug and failed to provide the intended\\nFind module.  If instead the caller specifies an explicit mode option\\nthen the failure message can be more specific.\\n\\nSet ``CMAKE_FIND_PACKAGE_WARN_NO_MODULE`` to ``TRUE`` to tell\\n``find_package()`` to warn when it implicitly assumes Config mode.  This\\nhelps developers enforce use of an explicit mode in all calls to\\n``find_package()`` within a project.\\n",
        "variable"
    ],
    "CMAKE_FIND_ROOT_PATH": [
        "CMAKE_FIND_ROOT_PATH\\n--------------------\\n\\n:ref:`;-list <CMake Language Lists>` of root paths to search on the filesystem.\\n\\nThis variable is most useful when cross-compiling. CMake uses the paths in\\nthis list as alternative roots to find filesystem items with\\n``find_package()``, ``find_library()`` etc.\\n",
        "variable"
    ],
    "CMAKE_FIND_ROOT_PATH_MODE_INCLUDE": [
        "CMAKE_FIND_ROOT_PATH_MODE_INCLUDE\\n---------------------------------\\n\\nThis variable controls whether the ``CMAKE_FIND_ROOT_PATH`` and\\n``CMAKE_SYSROOT`` are used by ``find_file()`` and ``find_path()``.\\n\\nIf set to ``ONLY``, then only the roots in ``CMAKE_FIND_ROOT_PATH``\\nwill be searched. If set to ``NEVER``, then the roots in\\n``CMAKE_FIND_ROOT_PATH`` will be ignored and only the host system\\nroot will be used. If set to ``BOTH``, then the host system paths and the\\npaths in ``CMAKE_FIND_ROOT_PATH`` will be searched.\\n",
        "variable"
    ],
    "CMAKE_FIND_ROOT_PATH_MODE_LIBRARY": [
        "CMAKE_FIND_ROOT_PATH_MODE_LIBRARY\\n---------------------------------\\n\\nThis variable controls whether the ``CMAKE_FIND_ROOT_PATH`` and\\n``CMAKE_SYSROOT`` are used by ``find_library()``.\\n\\nIf set to ``ONLY``, then only the roots in ``CMAKE_FIND_ROOT_PATH``\\nwill be searched. If set to ``NEVER``, then the roots in\\n``CMAKE_FIND_ROOT_PATH`` will be ignored and only the host system\\nroot will be used. If set to ``BOTH``, then the host system paths and the\\npaths in ``CMAKE_FIND_ROOT_PATH`` will be searched.\\n",
        "variable"
    ],
    "CMAKE_FIND_ROOT_PATH_MODE_PACKAGE": [
        "CMAKE_FIND_ROOT_PATH_MODE_PACKAGE\\n---------------------------------\\n\\nThis variable controls whether the ``CMAKE_FIND_ROOT_PATH`` and\\n``CMAKE_SYSROOT`` are used by ``find_package()``.\\n\\nIf set to ``ONLY``, then only the roots in ``CMAKE_FIND_ROOT_PATH``\\nwill be searched. If set to ``NEVER``, then the roots in\\n``CMAKE_FIND_ROOT_PATH`` will be ignored and only the host system\\nroot will be used. If set to ``BOTH``, then the host system paths and the\\npaths in ``CMAKE_FIND_ROOT_PATH`` will be searched.\\n",
        "variable"
    ],
    "CMAKE_FIND_ROOT_PATH_MODE_PROGRAM": [
        "CMAKE_FIND_ROOT_PATH_MODE_PROGRAM\\n---------------------------------\\n\\nThis variable controls whether the ``CMAKE_FIND_ROOT_PATH`` and\\n``CMAKE_SYSROOT`` are used by ``find_program()``.\\n\\nIf set to ``ONLY``, then only the roots in ``CMAKE_FIND_ROOT_PATH``\\nwill be searched. If set to ``NEVER``, then the roots in\\n``CMAKE_FIND_ROOT_PATH`` will be ignored and only the host system\\nroot will be used. If set to ``BOTH``, then the host system paths and the\\npaths in ``CMAKE_FIND_ROOT_PATH`` will be searched.\\n",
        "variable"
    ],
    "CMAKE_FOLDER": [
        "CMAKE_FOLDER\\n------------\\n\\nSet the folder name. Use to organize targets in an IDE.\\n\\nThis variable is used to initialize the ``FOLDER`` property on all the\\ntargets.  See that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_FRAMEWORK_PATH": [
        "CMAKE_FRAMEWORK_PATH\\n--------------------\\n\\n:ref:`;-list <CMake Language Lists>` of directories specifying a search path\\nfor macOS frameworks used by the ``find_library()``,\\n``find_package()``, ``find_path()``, and ``find_file()``\\ncommands.\\n",
        "variable"
    ],
    "CMAKE_Fortran_FORMAT": [
        "CMAKE_Fortran_FORMAT\\n--------------------\\n\\nSet to ``FIXED`` or ``FREE`` to indicate the Fortran source layout.\\n\\nThis variable is used to initialize the ``Fortran_FORMAT`` property on\\nall the targets.  See that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_Fortran_MODDIR_DEFAULT": [
        "CMAKE_Fortran_MODDIR_DEFAULT\\n----------------------------\\n\\nFortran default module output directory.\\n\\nMost Fortran compilers write ``.mod`` files to the current working\\ndirectory.  For those that do not, this is set to ``.`` and used when\\nthe ``Fortran_MODULE_DIRECTORY`` target property is not set.\\n",
        "variable"
    ],
    "CMAKE_Fortran_MODDIR_FLAG": [
        "CMAKE_Fortran_MODDIR_FLAG\\n-------------------------\\n\\nFortran flag for module output directory.\\n\\nThis stores the flag needed to pass the value of the\\n``Fortran_MODULE_DIRECTORY`` target property to the compiler.\\n",
        "variable"
    ],
    "CMAKE_Fortran_MODOUT_FLAG": [
        "CMAKE_Fortran_MODOUT_FLAG\\n-------------------------\\n\\nFortran flag to enable module output.\\n\\nMost Fortran compilers write ``.mod`` files out by default.  For others,\\nthis stores the flag needed to enable module output.\\n",
        "variable"
    ],
    "CMAKE_Fortran_MODULE_DIRECTORY": [
        "CMAKE_Fortran_MODULE_DIRECTORY\\n------------------------------\\n\\nFortran module output directory.\\n\\nThis variable is used to initialize the ``Fortran_MODULE_DIRECTORY``\\nproperty on all the targets.  See that target property for additional\\ninformation.\\n",
        "variable"
    ],
    "CMAKE_GENERATOR": [
        "CMAKE_GENERATOR\\n---------------\\n\\nThe generator used to build the project.  See ``cmake-generators(7)``.\\n\\nThe name of the generator that is being used to generate the build\\nfiles.  (e.g.  ``Unix Makefiles``, ``Ninja``, etc.)\\n",
        "variable"
    ],
    "CMAKE_GENERATOR_INSTANCE": [
        "CMAKE_GENERATOR_INSTANCE\\n------------------------\\n\\nGenerator-specific instance specification provided by user.\\n\\nSome CMake generators support selection of an instance of the native build\\nsystem when multiple instances are available.  If the user specifies an\\ninstance (e.g. by setting this cache entry), or after a default instance is\\nchosen when a build tree is first configured, the value will be available in\\nthis variable.\\n\\nThe value of this variable should never be modified by project code.\\nA toolchain file specified by the ``CMAKE_TOOLCHAIN_FILE``\\nvariable may initialize ``CMAKE_GENERATOR_INSTANCE`` as a cache entry.\\nOnce a given build tree has been initialized with a particular value\\nfor this variable, changing the value has undefined behavior.\\n\\nInstance specification is supported only on specific generators:\\n\\n* For the ``Visual Studio 15 2017`` generator (and above)\\n  this specifies the absolute path to the VS installation directory\\n  of the selected VS instance.\\n\\nSee native build system documentation for allowed instance values.\\n",
        "variable"
    ],
    "CMAKE_GENERATOR_PLATFORM": [
        "CMAKE_GENERATOR_PLATFORM\\n------------------------\\n\\nGenerator-specific target platform specification provided by user.\\n\\nSome CMake generators support a target platform name to be given\\nto the native build system to choose a compiler toolchain.\\nIf the user specifies a platform name (e.g. via the ``cmake(1)`` ``-A``\\noption) the value will be available in this variable.\\n\\nThe value of this variable should never be modified by project code.\\nA toolchain file specified by the ``CMAKE_TOOLCHAIN_FILE``\\nvariable may initialize ``CMAKE_GENERATOR_PLATFORM``.  Once a given\\nbuild tree has been initialized with a particular value for this\\nvariable, changing the value has undefined behavior.\\n\\nPlatform specification is supported only on specific generators:\\n\\n* For :ref:`Visual Studio Generators` with VS 2005 and above this\\n  specifies the target architecture.\\n\\n* For ``Green Hills MULTI`` this specifies the target architecture.\\n\\nSee native build system documentation for allowed platform names.\\n\\nVisual Studio Platform Selection\\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\\nOn :ref:`Visual Studio Generators` the selected platform name\\nis provided in the ``CMAKE_VS_PLATFORM_NAME`` variable.\\n",
        "variable"
    ],
    "CMAKE_GENERATOR_TOOLSET": [
        "CMAKE_GENERATOR_TOOLSET\\n-----------------------\\n\\nNative build system toolset specification provided by user.\\n\\nSome CMake generators support a toolset specification to tell the\\nnative build system how to choose a compiler.  If the user specifies\\na toolset (e.g.  via the ``cmake(1)`` ``-T`` option) the value\\nwill be available in this variable.\\n\\nThe value of this variable should never be modified by project code.\\nA toolchain file specified by the ``CMAKE_TOOLCHAIN_FILE``\\nvariable may initialize ``CMAKE_GENERATOR_TOOLSET``.  Once a given\\nbuild tree has been initialized with a particular value for this\\nvariable, changing the value has undefined behavior.\\n\\nToolset specification is supported only on specific generators:\\n\\n* :ref:`Visual Studio Generators` for VS 2010 and above\\n* The ``Xcode`` generator for Xcode 3.0 and above\\n* The ``Green Hills MULTI`` generator\\n\\nSee native build system documentation for allowed toolset names.\\n\\nVisual Studio Toolset Selection\\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\\nThe :ref:`Visual Studio Generators` support toolset specification\\nusing one of these forms:\\n\\n* ``toolset``\\n* ``toolset[,key=value]*``\\n* ``key=value[,key=value]*``\\n\\nThe ``toolset`` specifies the toolset name.  The selected toolset name\\nis provided in the ``CMAKE_VS_PLATFORM_TOOLSET`` variable.\\n\\nThe ``key=value`` pairs form a comma-separated list of options to\\nspecify generator-specific details of the toolset selection.\\nSupported pairs are:\\n\\n``cuda=<version>``\\n  Specify the CUDA toolkit version to use.  Supported by VS 2010\\n  and above with the CUDA toolkit VS integration installed.\\n  See the ``CMAKE_VS_PLATFORM_TOOLSET_CUDA`` variable.\\n\\n``host=x64``\\n  Request use of the native ``x64`` toolchain on ``x64`` hosts.\\n  Supported by VS 2013 and above.\\n  See the ``CMAKE_VS_PLATFORM_TOOLSET_HOST_ARCHITECTURE``\\n  variable.\\n\\n``version=<version>``\\n  Specify the toolset version to use.  Supported by VS 2017\\n  and above with the specified toolset installed.\\n  See the ``CMAKE_VS_PLATFORM_TOOLSET_VERSION`` variable.\\n",
        "variable"
    ],
    "CMAKE_GNUtoMS": [
        "CMAKE_GNUtoMS\\n-------------\\n\\nConvert GNU import libraries (``.dll.a``) to MS format (``.lib``).\\n\\nThis variable is used to initialize the ``GNUtoMS`` property on\\ntargets when they are created.  See that target property for additional\\ninformation.\\n",
        "variable"
    ],
    "CMAKE_HOME_DIRECTORY": [
        "CMAKE_HOME_DIRECTORY\\n--------------------\\n\\nPath to top of source tree.\\n\\nThis is the path to the top level of the source tree.\\n",
        "variable"
    ],
    "CMAKE_HOST_APPLE": [
        "CMAKE_HOST_APPLE\\n----------------\\n\\n``True`` for Apple macOS operating systems.\\n\\nSet to ``true`` when the host system is Apple macOS.\\n",
        "variable"
    ],
    "CMAKE_HOST_SOLARIS": [
        "CMAKE_HOST_SOLARIS\\n------------------\\n\\n``True`` for Oracle Solaris operating systems.\\n\\nSet to ``true`` when the host system is Oracle Solaris.\\n",
        "variable"
    ],
    "CMAKE_HOST_SYSTEM": [
        "CMAKE_HOST_SYSTEM\\n-----------------\\n\\nComposite Name of OS CMake is being run on.\\n\\nThis variable is the composite of ``CMAKE_HOST_SYSTEM_NAME`` and\\n``CMAKE_HOST_SYSTEM_VERSION``, e.g.\\n``${CMAKE_HOST_SYSTEM_NAME}-${CMAKE_HOST_SYSTEM_VERSION}``.  If\\n``CMAKE_HOST_SYSTEM_VERSION`` is not set, then this variable is\\nthe same as ``CMAKE_HOST_SYSTEM_NAME``.\\n",
        "variable"
    ],
    "CMAKE_HOST_SYSTEM_NAME": [
        "CMAKE_HOST_SYSTEM_NAME\\n----------------------\\n\\nName of the OS CMake is running on.\\n\\nOn systems that have the uname command, this variable is set to the\\noutput of ``uname -s``.  ``Linux``, ``Windows``, and ``Darwin`` for macOS\\nare the values found on the big three operating systems.\\n",
        "variable"
    ],
    "CMAKE_HOST_SYSTEM_PROCESSOR": [
        "CMAKE_HOST_SYSTEM_PROCESSOR\\n---------------------------\\n\\nThe name of the CPU CMake is running on.\\n\\nOn systems that support ``uname``, this variable is set to the output of\\n``uname -p``.  On Windows it is set to the value of the environment variable\\n``PROCESSOR_ARCHITECTURE``.\\n",
        "variable"
    ],
    "CMAKE_HOST_SYSTEM_VERSION": [
        "CMAKE_HOST_SYSTEM_VERSION\\n-------------------------\\n\\nThe OS version CMake is running on.\\n\\nA numeric version string for the system.  On systems that support\\n``uname``, this variable is set to the output of ``uname -r``. On other\\nsystems this is set to major-minor version numbers.\\n",
        "variable"
    ],
    "CMAKE_HOST_UNIX": [
        "CMAKE_HOST_UNIX\\n---------------\\n\\n``True`` for UNIX and UNIX like operating systems.\\n\\nSet to ``true`` when the host system is UNIX or UNIX like (i.e.  APPLE and\\nCYGWIN).\\n",
        "variable"
    ],
    "CMAKE_HOST_WIN32": [
        "CMAKE_HOST_WIN32\\n----------------\\n\\n``True`` if the host system is running Windows, including Windows 64-bit and MSYS.\\n\\nSet to ``false`` on Cygwin.\\n",
        "variable"
    ],
    "CMAKE_IGNORE_PATH": [
        "CMAKE_IGNORE_PATH\\n-----------------\\n\\n:ref:`;-list <CMake Language Lists>` of directories to be *ignored* by\\nthe ``find_program()``, ``find_library()``, ``find_file()``,\\nand ``find_path()`` commands.  This is useful in cross-compiling\\nenvironments where some system directories contain incompatible but\\npossibly linkable libraries.  For example, on cross-compiled cluster\\nenvironments, this allows a user to ignore directories containing\\nlibraries meant for the front-end machine.\\n\\nBy default this is empty; it is intended to be set by the project.\\nNote that ``CMAKE_IGNORE_PATH`` takes a list of directory names, *not*\\na list of prefixes.  To ignore paths under prefixes (``bin``, ``include``,\\n``lib``, etc.), specify them explicitly.\\n\\nSee also the ``CMAKE_PREFIX_PATH``, ``CMAKE_LIBRARY_PATH``,\\n``CMAKE_INCLUDE_PATH``, and ``CMAKE_PROGRAM_PATH`` variables.\\n",
        "variable"
    ],
    "CMAKE_IMPORT_LIBRARY_PREFIX": [
        "CMAKE_IMPORT_LIBRARY_PREFIX\\n---------------------------\\n\\nThe prefix for import libraries that you link to.\\n\\nThe prefix to use for the name of an import library if used on this\\nplatform.\\n\\n``CMAKE_IMPORT_LIBRARY_PREFIX_<LANG>`` overrides this for language ``<LANG>``.\\n",
        "variable"
    ],
    "CMAKE_IMPORT_LIBRARY_SUFFIX": [
        "CMAKE_IMPORT_LIBRARY_SUFFIX\\n---------------------------\\n\\nThe suffix for import libraries that you link to.\\n\\nThe suffix to use for the end of an import library filename if used on\\nthis platform.\\n\\n``CMAKE_IMPORT_LIBRARY_SUFFIX_<LANG>`` overrides this for language ``<LANG>``.\\n",
        "variable"
    ],
    "CMAKE_INCLUDE_CURRENT_DIR": [
        "CMAKE_INCLUDE_CURRENT_DIR\\n-------------------------\\n\\nAutomatically add the current source and build directories to the include path.\\n\\nIf this variable is enabled, CMake automatically adds\\n``CMAKE_CURRENT_SOURCE_DIR`` and ``CMAKE_CURRENT_BINARY_DIR``\\nto the include path for each directory.  These additional include\\ndirectories do not propagate down to subdirectories.  This is useful\\nmainly for out-of-source builds, where files generated into the build\\ntree are included by files located in the source tree.\\n\\nBy default ``CMAKE_INCLUDE_CURRENT_DIR`` is ``OFF``.\\n",
        "variable"
    ],
    "CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE": [
        "CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE\\n--------------------------------------\\n\\nAutomatically add the current source and build directories to the\\n``INTERFACE_INCLUDE_DIRECTORIES`` target property.\\n\\nIf this variable is enabled, CMake automatically adds for each shared\\nlibrary target, static library target, module target and executable\\ntarget, ``CMAKE_CURRENT_SOURCE_DIR`` and\\n``CMAKE_CURRENT_BINARY_DIR`` to\\nthe ``INTERFACE_INCLUDE_DIRECTORIES`` target property.  By default\\n``CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE`` is ``OFF``.\\n",
        "variable"
    ],
    "CMAKE_INCLUDE_DIRECTORIES_BEFORE": [
        "CMAKE_INCLUDE_DIRECTORIES_BEFORE\\n--------------------------------\\n\\nWhether to append or prepend directories by default in\\n``include_directories()``.\\n\\nThis variable affects the default behavior of the ``include_directories()``\\ncommand.  Setting this variable to ``ON`` is equivalent to using the ``BEFORE``\\noption in all uses of that command.\\n",
        "variable"
    ],
    "CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE": [
        "CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE\\n----------------------------------------\\n\\nWhether to force prepending of project include directories.\\n\\nThis variable affects the order of include directories generated in compiler\\ncommand lines.  If set to ``ON``, it causes the ``CMAKE_SOURCE_DIR``\\nand the ``CMAKE_BINARY_DIR`` to appear first.\\n",
        "variable"
    ],
    "CMAKE_INCLUDE_PATH": [
        "CMAKE_INCLUDE_PATH\\n------------------\\n\\n:ref:`;-list <CMake Language Lists>` of directories specifying a search path\\nfor the ``find_file()`` and ``find_path()`` commands.  By default it\\nis empty, it is intended to be set by the project.  See also\\n``CMAKE_SYSTEM_INCLUDE_PATH`` and ``CMAKE_PREFIX_PATH``.\\n",
        "variable"
    ],
    "CMAKE_INSTALL_DEFAULT_COMPONENT_NAME": [
        "CMAKE_INSTALL_DEFAULT_COMPONENT_NAME\\n------------------------------------\\n\\nDefault component used in ``install()`` commands.\\n\\nIf an ``install()`` command is used without the ``COMPONENT`` argument,\\nthese files will be grouped into a default component.  The name of this\\ndefault install component will be taken from this variable.  It\\ndefaults to ``Unspecified``.\\n",
        "variable"
    ],
    "CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS": [
        "CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS\\n-------------------------------------------\\n\\nDefault permissions for directories created implicitly during installation\\nof files by ``install()`` and ``file(INSTALL)``.\\n\\nIf ``make install`` is invoked and directories are implicitly created they\\nget permissions set by ``CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS``\\nvariable or platform specific default permissions if the variable is not set.\\n\\nImplicitly created directories are created if they are not explicitly installed\\nby ``install()`` command but are needed to install a file on a certain\\npath. Example of such locations are directories created due to the setting of\\n``CMAKE_INSTALL_PREFIX``.\\n\\nExpected content of the ``CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS``\\nvariable is a list of permissions that can be used by ``install()`` command\\n`PERMISSIONS` section.\\n\\nExample usage:\\n\\n::\\n\\n set(CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS\\n      OWNER_READ\\n      OWNER_WRITE\\n      OWNER_EXECUTE\\n      GROUP_READ\\n    )\\n",
        "variable"
    ],
    "CMAKE_INSTALL_MESSAGE": [
        "CMAKE_INSTALL_MESSAGE\\n---------------------\\n\\nSpecify verbosity of installation script code generated by the\\n``install()`` command (using the ``file(INSTALL)`` command).\\nFor paths that are newly installed or updated, installation\\nmay print lines like::\\n\\n -- Installing: /some/destination/path\\n\\nFor paths that are already up to date, installation may print\\nlines like::\\n\\n -- Up-to-date: /some/destination/path\\n\\nThe ``CMAKE_INSTALL_MESSAGE`` variable may be set to control\\nwhich messages are printed:\\n\\n``ALWAYS``\\n  Print both ``Installing`` and ``Up-to-date`` messages.\\n\\n``LAZY``\\n  Print ``Installing`` but not ``Up-to-date`` messages.\\n\\n``NEVER``\\n  Print neither ``Installing`` nor ``Up-to-date`` messages.\\n\\nOther values have undefined behavior and may not be diagnosed.\\n\\nIf this variable is not set, the default behavior is ``ALWAYS``.\\n",
        "variable"
    ],
    "CMAKE_INSTALL_NAME_DIR": [
        "CMAKE_INSTALL_NAME_DIR\\n----------------------\\n\\nmacOS directory name for installed targets.\\n\\n``CMAKE_INSTALL_NAME_DIR`` is used to initialize the\\n``INSTALL_NAME_DIR`` property on all targets.  See that target\\nproperty for more information.\\n",
        "variable"
    ],
    "CMAKE_INSTALL_PREFIX": [
        "CMAKE_INSTALL_PREFIX\\n--------------------\\n\\nInstall directory used by ``install()``.\\n\\nIf ``make install`` is invoked or ``INSTALL`` is built, this directory is\\nprepended onto all install directories.  This variable defaults to\\n``/usr/local`` on UNIX and ``c:/Program Files/${PROJECT_NAME}`` on Windows.\\nSee ``CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT`` for how a\\nproject might choose its own default.\\n\\nOn UNIX one can use the ``DESTDIR`` mechanism in order to relocate the\\nwhole installation. See ``DESTDIR`` for more information.\\n\\nThe installation prefix is also added to ``CMAKE_SYSTEM_PREFIX_PATH``\\nso that ``find_package()``, ``find_program()``,\\n``find_library()``, ``find_path()``, and ``find_file()``\\nwill search the prefix for other software.\\n\\n.. note::\\n\\n  Use the ``GNUInstallDirs`` module to provide GNU-style\\n  options for the layout of directories within the installation.\\n",
        "variable"
    ],
    "CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT": [
        "CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT\\n-------------------------------------------\\n\\nCMake sets this variable to a ``TRUE`` value when the\\n``CMAKE_INSTALL_PREFIX`` has just been initialized to\\nits default value, typically on the first run of CMake within\\na new build tree.  This can be used by project code to change\\nthe default without overriding a user-provided value:\\n\\n if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\\n   set(CMAKE_INSTALL_PREFIX \\\"/my/default\\\" CACHE PATH \\\"...\\\" FORCE)\\n endif()\\n",
        "variable"
    ],
    "CMAKE_INSTALL_RPATH": [
        "CMAKE_INSTALL_RPATH\\n-------------------\\n\\nThe rpath to use for installed targets.\\n\\nA semicolon-separated list specifying the rpath to use in installed\\ntargets (for platforms that support it).  This is used to initialize\\nthe target property ``INSTALL_RPATH`` for all targets.\\n",
        "variable"
    ],
    "CMAKE_INSTALL_RPATH_USE_LINK_PATH": [
        "CMAKE_INSTALL_RPATH_USE_LINK_PATH\\n---------------------------------\\n\\nAdd paths to linker search and installed rpath.\\n\\n``CMAKE_INSTALL_RPATH_USE_LINK_PATH`` is a boolean that if set to ``true``\\nwill append directories in the linker search path and outside the\\nproject to the ``INSTALL_RPATH``.  This is used to initialize the\\ntarget property ``INSTALL_RPATH_USE_LINK_PATH`` for all targets.\\n",
        "variable"
    ],
    "CMAKE_INTERNAL_PLATFORM_ABI": [
        "CMAKE_INTERNAL_PLATFORM_ABI\\n---------------------------\\n\\nAn internal variable subject to change.\\n\\nThis is used in determining the compiler ABI and is subject to change.\\n",
        "variable"
    ],
    "CMAKE_INTERPROCEDURAL_OPTIMIZATION": [
        "CMAKE_INTERPROCEDURAL_OPTIMIZATION\\n----------------------------------\\n\\nDefault value for ``INTERPROCEDURAL_OPTIMIZATION`` of targets.\\n\\nThis variable is used to initialize the ``INTERPROCEDURAL_OPTIMIZATION``\\nproperty on all the targets.  See that target property for additional\\ninformation.\\n",
        "variable"
    ],
    "CMAKE_INTERPROCEDURAL_OPTIMIZATION_DEBUG": [
        "CMAKE_INTERPROCEDURAL_OPTIMIZATION_<CONFIG>\\n-------------------------------------------\\n\\nDefault value for ``INTERPROCEDURAL_OPTIMIZATION_<CONFIG>`` of targets.\\n\\nThis variable is used to initialize the ``INTERPROCEDURAL_OPTIMIZATION_<CONFIG>``\\nproperty on all the targets.  See that target property for additional\\ninformation.\\n",
        "variable"
    ],
    "CMAKE_INTERPROCEDURAL_OPTIMIZATION_RELEASE": [
        "CMAKE_INTERPROCEDURAL_OPTIMIZATION_<CONFIG>\\n-------------------------------------------\\n\\nDefault value for ``INTERPROCEDURAL_OPTIMIZATION_<CONFIG>`` of targets.\\n\\nThis variable is used to initialize the ``INTERPROCEDURAL_OPTIMIZATION_<CONFIG>``\\nproperty on all the targets.  See that target property for additional\\ninformation.\\n",
        "variable"
    ],
    "CMAKE_IOS_INSTALL_COMBINED": [
        "CMAKE_IOS_INSTALL_COMBINED\\n--------------------------\\n\\nDefault value for ``IOS_INSTALL_COMBINED`` of targets.\\n\\nThis variable is used to initialize the ``IOS_INSTALL_COMBINED``\\nproperty on all the targets.  See that target property for additional\\ninformation.\\n",
        "variable"
    ],
    "CMAKE_JOB_POOLS": [
        "CMAKE_JOB_POOLS\\n---------------\\n\\nIf the ``JOB_POOLS`` global property is not set, the value\\nof this variable is used in its place.  See ``JOB_POOLS``\\nfor additional information.\\n",
        "variable"
    ],
    "CMAKE_JOB_POOL_COMPILE": [
        "CMAKE_JOB_POOL_COMPILE\\n----------------------\\n\\nThis variable is used to initialize the ``JOB_POOL_COMPILE``\\nproperty on all the targets. See ``JOB_POOL_COMPILE``\\nfor additional information.\\n",
        "variable"
    ],
    "CMAKE_JOB_POOL_LINK": [
        "CMAKE_JOB_POOL_LINK\\n----------------------\\n\\nThis variable is used to initialize the ``JOB_POOL_LINK``\\nproperty on all the targets. See ``JOB_POOL_LINK``\\nfor additional information.\\n",
        "variable"
    ],
    "CMAKE_LIBRARY_ARCHITECTURE": [
        "CMAKE_LIBRARY_ARCHITECTURE\\n--------------------------\\n\\nTarget architecture library directory name, if detected.\\n\\nThis is the value of ``CMAKE_<LANG>_LIBRARY_ARCHITECTURE`` as detected\\nfor one of the enabled languages.\\n",
        "variable"
    ],
    "CMAKE_LIBRARY_ARCHITECTURE_REGEX": [
        "CMAKE_LIBRARY_ARCHITECTURE_REGEX\\n--------------------------------\\n\\nRegex matching possible target architecture library directory names.\\n\\nThis is used to detect ``CMAKE_<LANG>_LIBRARY_ARCHITECTURE`` from the\\nimplicit linker search path by matching the ``<arch>`` name.\\n",
        "variable"
    ],
    "CMAKE_LIBRARY_OUTPUT_DIRECTORY": [
        "CMAKE_LIBRARY_OUTPUT_DIRECTORY\\n------------------------------\\n\\nWhere to put all the :ref:`LIBRARY <Library Output Artifacts>`\\ntarget files when built.\\n\\nThis variable is used to initialize the ``LIBRARY_OUTPUT_DIRECTORY``\\nproperty on all the targets.  See that target property for additional\\ninformation.\\n",
        "variable"
    ],
    "CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG": [
        "CMAKE_LIBRARY_OUTPUT_DIRECTORY_<CONFIG>\\n---------------------------------------\\n\\nWhere to put all the :ref:`LIBRARY <Library Output Artifacts>`\\ntarget files when built for a specific configuration.\\n\\nThis variable is used to initialize the\\n``LIBRARY_OUTPUT_DIRECTORY_<CONFIG>`` property on all the targets.\\nSee that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE": [
        "CMAKE_LIBRARY_OUTPUT_DIRECTORY_<CONFIG>\\n---------------------------------------\\n\\nWhere to put all the :ref:`LIBRARY <Library Output Artifacts>`\\ntarget files when built for a specific configuration.\\n\\nThis variable is used to initialize the\\n``LIBRARY_OUTPUT_DIRECTORY_<CONFIG>`` property on all the targets.\\nSee that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_LIBRARY_PATH": [
        "CMAKE_LIBRARY_PATH\\n------------------\\n\\n:ref:`;-list <CMake Language Lists>` of directories specifying a search path\\nfor the ``find_library()`` command.  By default it is empty, it is\\nintended to be set by the project.  See also\\n``CMAKE_SYSTEM_LIBRARY_PATH`` and ``CMAKE_PREFIX_PATH``.\\n",
        "variable"
    ],
    "CMAKE_LIBRARY_PATH_FLAG": [
        "CMAKE_LIBRARY_PATH_FLAG\\n-----------------------\\n\\nThe flag to be used to add a library search path to a compiler.\\n\\nThe flag will be used to specify a library directory to the compiler.\\nOn most compilers this is ``-L``.\\n",
        "variable"
    ],
    "CMAKE_LINK_DEF_FILE_FLAG": [
        "CMAKE_LINK_DEF_FILE_FLAG\\n------------------------\\n\\nLinker flag to be used to specify a ``.def`` file for dll creation.\\n\\nThe flag will be used to add a ``.def`` file when creating a dll on\\nWindows; this is only defined on Windows.\\n",
        "variable"
    ],
    "CMAKE_LINK_DEPENDS_NO_SHARED": [
        "CMAKE_LINK_DEPENDS_NO_SHARED\\n----------------------------\\n\\nWhether to skip link dependencies on shared library files.\\n\\nThis variable initializes the ``LINK_DEPENDS_NO_SHARED`` property on\\ntargets when they are created.  See that target property for\\nadditional information.\\n",
        "variable"
    ],
    "CMAKE_LINK_DIRECTORIES_BEFORE": [
        "CMAKE_LINK_DIRECTORIES_BEFORE\\n-----------------------------\\n\\nWhether to append or prepend directories by default in\\n``link_directories()``.\\n\\nThis variable affects the default behavior of the ``link_directories()``\\ncommand.  Setting this variable to ``ON`` is equivalent to using the ``BEFORE``\\noption in all uses of that command.\\n",
        "variable"
    ],
    "CMAKE_LINK_INTERFACE_LIBRARIES": [
        "CMAKE_LINK_INTERFACE_LIBRARIES\\n------------------------------\\n\\nDefault value for ``LINK_INTERFACE_LIBRARIES`` of targets.\\n\\nThis variable is used to initialize the ``LINK_INTERFACE_LIBRARIES``\\nproperty on all the targets.  See that target property for additional\\ninformation.\\n",
        "variable"
    ],
    "CMAKE_LINK_LIBRARY_FILE_FLAG": [
        "CMAKE_LINK_LIBRARY_FILE_FLAG\\n----------------------------\\n\\nFlag to be used to link a library specified by a path to its file.\\n\\nThe flag will be used before a library file path is given to the\\nlinker.  This is needed only on very few platforms.\\n",
        "variable"
    ],
    "CMAKE_LINK_LIBRARY_FLAG": [
        "CMAKE_LINK_LIBRARY_FLAG\\n-----------------------\\n\\nFlag to be used to link a library into an executable.\\n\\nThe flag will be used to specify a library to link to an executable.\\nOn most compilers this is ``-l``.\\n",
        "variable"
    ],
    "CMAKE_LINK_LIBRARY_SUFFIX": [
        "CMAKE_LINK_LIBRARY_SUFFIX\\n-------------------------\\n\\nThe suffix for libraries that you link to.\\n\\nThe suffix to use for the end of a library filename, ``.lib`` on Windows.\\n",
        "variable"
    ],
    "CMAKE_LINK_SEARCH_END_STATIC": [
        "CMAKE_LINK_SEARCH_END_STATIC\\n----------------------------\\n\\nEnd a link line such that static system libraries are used.\\n\\nSome linkers support switches such as ``-Bstatic`` and ``-Bdynamic`` to\\ndetermine whether to use static or shared libraries for ``-lXXX`` options.\\nCMake uses these options to set the link type for libraries whose full\\npaths are not known or (in some cases) are in implicit link\\ndirectories for the platform.  By default CMake adds an option at the\\nend of the library list (if necessary) to set the linker search type\\nback to its starting type.  This property switches the final linker\\nsearch type to ``-Bstatic`` regardless of how it started.\\n\\nThis variable is used to initialize the target property\\n``LINK_SEARCH_END_STATIC`` for all targets. If set, it's\\nvalue is also used by the ``try_compile()`` command.\\n\\nSee also ``CMAKE_LINK_SEARCH_START_STATIC``.\\n",
        "variable"
    ],
    "CMAKE_LINK_SEARCH_START_STATIC": [
        "CMAKE_LINK_SEARCH_START_STATIC\\n------------------------------\\n\\nAssume the linker looks for static libraries by default.\\n\\nSome linkers support switches such as ``-Bstatic`` and ``-Bdynamic`` to\\ndetermine whether to use static or shared libraries for ``-lXXX`` options.\\nCMake uses these options to set the link type for libraries whose full\\npaths are not known or (in some cases) are in implicit link\\ndirectories for the platform.  By default the linker search type is\\nassumed to be ``-Bdynamic`` at the beginning of the library list.  This\\nproperty switches the assumption to ``-Bstatic``.  It is intended for use\\nwhen linking an executable statically (e.g.  with the GNU ``-static``\\noption).\\n\\nThis variable is used to initialize the target property\\n``LINK_SEARCH_START_STATIC`` for all targets.  If set, it's\\nvalue is also used by the ``try_compile()`` command.\\n\\nSee also ``CMAKE_LINK_SEARCH_END_STATIC``.\\n",
        "variable"
    ],
    "CMAKE_LINK_WHAT_YOU_USE": [
        "CMAKE_LINK_WHAT_YOU_USE\\n---------------------------------\\n\\nDefault value for ``LINK_WHAT_YOU_USE`` target property.\\nThis variable is used to initialize the property on each target as it is\\ncreated.\\n",
        "variable"
    ],
    "CMAKE_MACOSX_BUNDLE": [
        "CMAKE_MACOSX_BUNDLE\\n-------------------\\n\\nDefault value for ``MACOSX_BUNDLE`` of targets.\\n\\nThis variable is used to initialize the ``MACOSX_BUNDLE`` property on\\nall the targets.  See that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_MACOSX_RPATH": [
        "CMAKE_MACOSX_RPATH\\n-------------------\\n\\nWhether to use rpaths on macOS and iOS.\\n\\nThis variable is used to initialize the ``MACOSX_RPATH`` property on\\nall targets.\\n",
        "variable"
    ],
    "CMAKE_MAJOR_VERSION": [
        "CMAKE_MAJOR_VERSION\\n-------------------\\n\\nFirst version number component of the ``CMAKE_VERSION``\\nvariable.\\n",
        "variable"
    ],
    "CMAKE_MAKE_PROGRAM": [
        "CMAKE_MAKE_PROGRAM\\n------------------\\n\\nTool that can launch the native build system.\\nThe value may be the full path to an executable or just the tool\\nname if it is expected to be in the ``PATH``.\\n\\nThe tool selected depends on the ``CMAKE_GENERATOR`` used\\nto configure the project:\\n\\n* The :ref:`Makefile Generators` set this to ``make``, ``gmake``, or\\n  a generator-specific tool (e.g. ``nmake`` for ``NMake Makefiles``).\\n\\n  These generators store ``CMAKE_MAKE_PROGRAM`` in the CMake cache\\n  so that it may be edited by the user.\\n\\n* The ``Ninja`` generator sets this to ``ninja``.\\n\\n  This generator stores ``CMAKE_MAKE_PROGRAM`` in the CMake cache\\n  so that it may be edited by the user.\\n\\n* The ``Xcode`` generator sets this to ``xcodebuild`` (or possibly an\\n  otherwise undocumented ``cmakexbuild`` wrapper implementing some\\n  workarounds).\\n\\n  This generator prefers to lookup the build tool at build time\\n  rather than to store ``CMAKE_MAKE_PROGRAM`` in the CMake cache\\n  ahead of time.  This is because ``xcodebuild`` is easy to find,\\n  the ``cmakexbuild`` wrapper is needed only for older Xcode versions,\\n  and the path to ``cmakexbuild`` may be outdated if CMake itself moves.\\n\\n  For compatibility with versions of CMake prior to 3.2, if\\n  a user or project explicitly adds ``CMAKE_MAKE_PROGRAM`` to\\n  the CMake cache then CMake will use the specified value.\\n\\n* The :ref:`Visual Studio Generators` set this to the full path to\\n  ``MSBuild.exe`` (VS >= 10), ``devenv.com`` (VS 7,8,9), or\\n  ``VCExpress.exe`` (VS Express 8,9).\\n  (See also variables\\n  ``CMAKE_VS_MSBUILD_COMMAND`` and\\n  ``CMAKE_VS_DEVENV_COMMAND``.\\n\\n  These generators prefer to lookup the build tool at build time\\n  rather than to store ``CMAKE_MAKE_PROGRAM`` in the CMake cache\\n  ahead of time.  This is because the tools are version-specific\\n  and can be located using the Windows Registry.  It is also\\n  necessary because the proper build tool may depend on the\\n  project content (e.g. the Intel Fortran plugin to VS 10 and 11\\n  requires ``devenv.com`` to build its ``.vfproj`` project files\\n  even though ``MSBuild.exe`` is normally preferred to support\\n  the ``CMAKE_GENERATOR_TOOLSET``).\\n\\n  For compatibility with versions of CMake prior to 3.0, if\\n  a user or project explicitly adds ``CMAKE_MAKE_PROGRAM`` to\\n  the CMake cache then CMake will use the specified value if\\n  possible.\\n\\n* The ``Green Hills MULTI`` generator sets this to the full\\n  path to ``gbuild.exe`` based upon the toolset being used.\\n\\n  Once the generator has initialized a particular value for this\\n  variable, changing the value has undefined behavior.\\n\\nThe ``CMAKE_MAKE_PROGRAM`` variable is set for use by project code.\\nThe value is also used by the ``cmake(1)`` ``--build`` and\\n``ctest(1)`` ``--build-and-test`` tools to launch the native\\nbuild process.\\n",
        "variable"
    ],
    "CMAKE_MAP_IMPORTED_CONFIG_DEBUG": [
        "CMAKE_MAP_IMPORTED_CONFIG_<CONFIG>\\n----------------------------------\\n\\nDefault value for ``MAP_IMPORTED_CONFIG_<CONFIG>`` of targets.\\n\\nThis variable is used to initialize the\\n``MAP_IMPORTED_CONFIG_<CONFIG>`` property on all the targets.  See\\nthat target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_MAP_IMPORTED_CONFIG_RELEASE": [
        "CMAKE_MAP_IMPORTED_CONFIG_<CONFIG>\\n----------------------------------\\n\\nDefault value for ``MAP_IMPORTED_CONFIG_<CONFIG>`` of targets.\\n\\nThis variable is used to initialize the\\n``MAP_IMPORTED_CONFIG_<CONFIG>`` property on all the targets.  See\\nthat target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_MATCH_<n>": [
        "CMAKE_MATCH_<n>\\n---------------\\n\\nCapture group ``<n>`` matched by the last regular expression, for groups\\n0 through 9.  Group 0 is the entire match.  Groups 1 through 9 are the\\nsubexpressions captured by ``()`` syntax.\\n\\nWhen a regular expression match is used, CMake fills in ``CMAKE_MATCH_<n>``\\nvariables with the match contents.  The ``CMAKE_MATCH_COUNT``\\nvariable holds the number of match expressions when these are filled.\\n",
        "variable"
    ],
    "CMAKE_MATCH_COUNT": [
        "CMAKE_MATCH_COUNT\\n-----------------\\n\\nThe number of matches with the last regular expression.\\n\\nWhen a regular expression match is used, CMake fills in\\n``CMAKE_MATCH_<n>`` variables with the match contents.\\nThe ``CMAKE_MATCH_COUNT`` variable holds the number of match\\nexpressions when these are filled.\\n",
        "variable"
    ],
    "CMAKE_MFC_FLAG": [
        "CMAKE_MFC_FLAG\\n--------------\\n\\nTell cmake to use MFC for an executable or dll.\\n\\nThis can be set in a ``CMakeLists.txt`` file and will enable MFC in the\\napplication.  It should be set to ``1`` for the static MFC library, and ``2``\\nfor the shared MFC library.  This is used in Visual Studio\\nproject files.  The CMakeSetup dialog used MFC and the ``CMakeLists.txt``\\nlooks like this:\\n\\n::\\n\\n add_definitions(-D_AFXDLL)\\n set(CMAKE_MFC_FLAG 2)\\n add_executable(CMakeSetup WIN32 ${SRCS})\\n",
        "variable"
    ],
    "CMAKE_MINIMUM_REQUIRED_VERSION": [
        "CMAKE_MINIMUM_REQUIRED_VERSION\\n------------------------------\\n\\nThe ``<min>`` version of CMake given to the most recent call to the\\n``cmake_minimum_required(VERSION)`` command.\\n",
        "variable"
    ],
    "CMAKE_MINOR_VERSION": [
        "CMAKE_MINOR_VERSION\\n-------------------\\n\\nSecond version number component of the ``CMAKE_VERSION``\\nvariable.\\n",
        "variable"
    ],
    "CMAKE_MODULE_LINKER_FLAGS": [
        "CMAKE_MODULE_LINKER_FLAGS\\n-------------------------\\n\\nLinker flags to be used to create modules.\\n\\nThese flags will be used by the linker when creating a module.\\n",
        "variable"
    ],
    "CMAKE_MODULE_LINKER_FLAGS_DEBUG": [
        "CMAKE_MODULE_LINKER_FLAGS_<CONFIG>\\n----------------------------------\\n\\nFlags to be used when linking a module.\\n\\nSame as ``CMAKE_C_FLAGS_*`` but used by the linker when creating modules.\\n",
        "variable"
    ],
    "CMAKE_MODULE_LINKER_FLAGS_RELEASE": [
        "CMAKE_MODULE_LINKER_FLAGS_<CONFIG>\\n----------------------------------\\n\\nFlags to be used when linking a module.\\n\\nSame as ``CMAKE_C_FLAGS_*`` but used by the linker when creating modules.\\n",
        "variable"
    ],
    "CMAKE_MODULE_LINKER_FLAGS_DEBUG_INIT": [
        "CMAKE_MODULE_LINKER_FLAGS_<CONFIG>_INIT\\n---------------------------------------\\n\\nValue used to initialize the ``CMAKE_MODULE_LINKER_FLAGS_<CONFIG>``\\ncache entry the first time a build tree is configured.\\nThis variable is meant to be set by a :variable:`toolchain file\\n<CMAKE_TOOLCHAIN_FILE>`.  CMake may prepend or append content to\\nthe value based on the environment and target platform.\\n\\nSee also ``CMAKE_MODULE_LINKER_FLAGS_INIT``.\\n",
        "variable"
    ],
    "CMAKE_MODULE_LINKER_FLAGS_RELEASE_INIT": [
        "CMAKE_MODULE_LINKER_FLAGS_<CONFIG>_INIT\\n---------------------------------------\\n\\nValue used to initialize the ``CMAKE_MODULE_LINKER_FLAGS_<CONFIG>``\\ncache entry the first time a build tree is configured.\\nThis variable is meant to be set by a :variable:`toolchain file\\n<CMAKE_TOOLCHAIN_FILE>`.  CMake may prepend or append content to\\nthe value based on the environment and target platform.\\n\\nSee also ``CMAKE_MODULE_LINKER_FLAGS_INIT``.\\n",
        "variable"
    ],
    "CMAKE_MODULE_LINKER_FLAGS_INIT": [
        "CMAKE_MODULE_LINKER_FLAGS_INIT\\n------------------------------\\n\\nValue used to initialize the ``CMAKE_MODULE_LINKER_FLAGS``\\ncache entry the first time a build tree is configured.\\nThis variable is meant to be set by a :variable:`toolchain file\\n<CMAKE_TOOLCHAIN_FILE>`.  CMake may prepend or append content to\\nthe value based on the environment and target platform.\\n\\nSee also the configuration-specific variable\\n``CMAKE_MODULE_LINKER_FLAGS_<CONFIG>_INIT``.\\n",
        "variable"
    ],
    "CMAKE_MODULE_PATH": [
        "CMAKE_MODULE_PATH\\n-----------------\\n\\n:ref:`;-list <CMake Language Lists>` of directories specifying a search path\\nfor CMake modules to be loaded by the ``include()`` or\\n``find_package()`` commands before checking the default modules that come\\nwith CMake.  By default it is empty, it is intended to be set by the project.\\n",
        "variable"
    ],
    "CMAKE_MSVCIDE_RUN_PATH": [
        "CMAKE_MSVCIDE_RUN_PATH\\n----------------------\\n\\nExtra PATH locations that should be used when executing\\n``add_custom_command()`` or ``add_custom_target()`` when using the\\n``Visual Studio 9 2008`` (or above) generator. This allows\\nfor running commands and using dll's that the IDE environment is not aware of.\\n\\nIf not set explicitly the value is initialized by the ``CMAKE_MSVCIDE_RUN_PATH``\\nenvironment variable, if set, and otherwise left empty.\\n",
        "variable"
    ],
    "CMAKE_NETRC": [
        "CMAKE_NETRC\\n-----------\\n\\nThis variable is used to initialize the ``NETRC`` option for\\n``file(DOWNLOAD)`` and ``file(UPLOAD)`` commands and the\\nmodule ``ExternalProject``. See those commands for additional\\ninformation.\\n\\nThe local option takes precedence over this variable.\\n",
        "variable"
    ],
    "CMAKE_NETRC_FILE": [
        "CMAKE_NETRC_FILE\\n----------------\\n\\nThis variable is used to initialize the ``NETRC_FILE`` option for\\n``file(DOWNLOAD)`` and ``file(UPLOAD)`` commands and the\\nmodule ``ExternalProject``. See those commands for additional\\ninformation.\\n\\nThe local option takes precedence over this variable.\\n",
        "variable"
    ],
    "CMAKE_NINJA_OUTPUT_PATH_PREFIX": [
        "CMAKE_NINJA_OUTPUT_PATH_PREFIX\\n------------------------------\\n\\nSet output files path prefix for the ``Ninja`` generator.\\n\\nEvery output files listed in the generated ``build.ninja`` will be\\nprefixed by the contents of this variable (a trailing slash is\\nappended if missing).  This is useful when the generated ninja file is\\nmeant to be embedded as a ``subninja`` file into a *super* ninja\\nproject.  For example, a ninja build file generated with a command\\nlike::\\n\\n cd top-build-dir/sub &&\\n cmake -G Ninja -DCMAKE_NINJA_OUTPUT_PATH_PREFIX=sub/ path/to/source\\n\\ncan be embedded in ``top-build-dir/build.ninja`` with a directive like\\nthis::\\n\\n subninja sub/build.ninja\\n\\nThe ``auto-regeneration`` rule in ``top-build-dir/build.ninja`` must have an\\norder-only dependency on ``sub/build.ninja``.\\n\\n.. note::\\n  When ``CMAKE_NINJA_OUTPUT_PATH_PREFIX`` is set, the project generated\\n  by CMake cannot be used as a standalone project.  No default targets\\n  are specified.\\n",
        "variable"
    ],
    "CMAKE_NOT_USING_CONFIG_FLAGS": [
        "CMAKE_NOT_USING_CONFIG_FLAGS\\n----------------------------\\n\\nSkip ``_BUILD_TYPE`` flags if true.\\n\\nThis is an internal flag used by the generators in CMake to tell CMake\\nto skip the ``_BUILD_TYPE`` flags.\\n",
        "variable"
    ],
    "CMAKE_NO_BUILTIN_CHRPATH": [
        "CMAKE_NO_BUILTIN_CHRPATH\\n------------------------\\n\\nDo not use the builtin ELF editor to fix RPATHs on installation.\\n\\nWhen an ELF binary needs to have a different RPATH after installation\\nthan it does in the build tree, CMake uses a builtin editor to change\\nthe RPATH in the installed copy.  If this variable is set to true then\\nCMake will relink the binary before installation instead of using its\\nbuiltin editor.\\n",
        "variable"
    ],
    "CMAKE_NO_SYSTEM_FROM_IMPORTED": [
        "CMAKE_NO_SYSTEM_FROM_IMPORTED\\n-----------------------------\\n\\nDefault value for ``NO_SYSTEM_FROM_IMPORTED`` of targets.\\n\\nThis variable is used to initialize the ``NO_SYSTEM_FROM_IMPORTED``\\nproperty on all the targets.  See that target property for additional\\ninformation.\\n",
        "variable"
    ],
    "CMAKE_OBJECT_PATH_MAX": [
        "CMAKE_OBJECT_PATH_MAX\\n---------------------\\n\\nMaximum object file full-path length allowed by native build tools.\\n\\nCMake computes for every source file an object file name that is\\nunique to the source file and deterministic with respect to the full\\npath to the source file.  This allows multiple source files in a\\ntarget to share the same name if they lie in different directories\\nwithout rebuilding when one is added or removed.  However, it can\\nproduce long full paths in a few cases, so CMake shortens the path\\nusing a hashing scheme when the full path to an object file exceeds a\\nlimit.  CMake has a built-in limit for each platform that is\\nsufficient for common tools, but some native tools may have a lower\\nlimit.  This variable may be set to specify the limit explicitly.  The\\nvalue must be an integer no less than 128.\\n",
        "variable"
    ],
    "CMAKE_OSX_ARCHITECTURES": [
        "CMAKE_OSX_ARCHITECTURES\\n-----------------------\\n\\nTarget specific architectures for macOS and iOS.\\n\\nThis variable is used to initialize the ``OSX_ARCHITECTURES``\\nproperty on each target as it is created.  See that target property\\nfor additional information.\\n\\nThe value of this variable should be set prior to the first\\n``project()`` or ``enable_language()`` command invocation\\nbecause it may influence configuration of the toolchain and flags.\\nIt is intended to be set locally by the user creating a build tree.\\nThis variable should be set as a ``CACHE`` entry (or else CMake may\\nremove it while initializing a cache entry of the same name).\\n\\nDespite the ``OSX`` part in the variable name(s) they apply also to\\nother SDKs than macOS like iOS, tvOS, or watchOS.\\n\\nThis variable is ignored on platforms other than Apple.\\n",
        "variable"
    ],
    "CMAKE_OSX_DEPLOYMENT_TARGET": [
        "CMAKE_OSX_DEPLOYMENT_TARGET\\n---------------------------\\n\\nSpecify the minimum version of the target platform (e.g. macOS or iOS)\\non which the target binaries are to be deployed.  CMake uses this\\nvariable value for the ``-mmacosx-version-min`` flag or their respective\\ntarget platform equivalents.  For older Xcode versions that shipped\\nmultiple macOS SDKs this variable also helps to choose the SDK in case\\n``CMAKE_OSX_SYSROOT`` is unset.\\n\\nIf not set explicitly the value is initialized by the\\n``MACOSX_DEPLOYMENT_TARGET`` environment variable, if set,\\nand otherwise computed based on the host platform.\\n\\nThe value of this variable should be set prior to the first\\n``project()`` or ``enable_language()`` command invocation\\nbecause it may influence configuration of the toolchain and flags.\\nIt is intended to be set locally by the user creating a build tree.\\nThis variable should be set as a ``CACHE`` entry (or else CMake may\\nremove it while initializing a cache entry of the same name).\\n\\nDespite the ``OSX`` part in the variable name(s) they apply also to\\nother SDKs than macOS like iOS, tvOS, or watchOS.\\n\\nThis variable is ignored on platforms other than Apple.\\n",
        "variable"
    ],
    "CMAKE_OSX_SYSROOT": [
        "CMAKE_OSX_SYSROOT\\n-----------------\\n\\nSpecify the location or name of the macOS platform SDK to be used.\\nCMake uses this value to compute the value of the ``-isysroot`` flag\\nor equivalent and to help the ``find_*`` commands locate files in\\nthe SDK.\\n\\nIf not set explicitly the value is initialized by the ``SDKROOT``\\nenvironment variable, if set, and otherwise computed based on the\\n``CMAKE_OSX_DEPLOYMENT_TARGET`` or the host platform.\\n\\nThe value of this variable should be set prior to the first\\n``project()`` or ``enable_language()`` command invocation\\nbecause it may influence configuration of the toolchain and flags.\\nIt is intended to be set locally by the user creating a build tree.\\nThis variable should be set as a ``CACHE`` entry (or else CMake may\\nremove it while initializing a cache entry of the same name).\\n\\nDespite the ``OSX`` part in the variable name(s) they apply also to\\nother SDKs than macOS like iOS, tvOS, or watchOS.\\n\\nThis variable is ignored on platforms other than Apple.\\n",
        "variable"
    ],
    "CMAKE_PARENT_LIST_FILE": [
        "CMAKE_PARENT_LIST_FILE\\n----------------------\\n\\nFull path to the CMake file that included the current one.\\n\\nWhile processing a CMake file loaded by ``include()`` or\\n``find_package()`` this variable contains the full path to the file\\nincluding it.  The top of the include stack is always the ``CMakeLists.txt``\\nfor the current directory.  See also ``CMAKE_CURRENT_LIST_FILE``.\\n",
        "variable"
    ],
    "CMAKE_PATCH_VERSION": [
        "CMAKE_PATCH_VERSION\\n-------------------\\n\\nThird version number component of the ``CMAKE_VERSION``\\nvariable.\\n",
        "variable"
    ],
    "CMAKE_PDB_OUTPUT_DIRECTORY": [
        "CMAKE_PDB_OUTPUT_DIRECTORY\\n--------------------------\\n\\nOutput directory for MS debug symbol ``.pdb`` files generated by the\\nlinker for executable and shared library targets.\\n\\nThis variable is used to initialize the ``PDB_OUTPUT_DIRECTORY``\\nproperty on all the targets.  See that target property for additional\\ninformation.\\n",
        "variable"
    ],
    "CMAKE_PDB_OUTPUT_DIRECTORY_DEBUG": [
        "CMAKE_PDB_OUTPUT_DIRECTORY_<CONFIG>\\n-----------------------------------\\n\\nPer-configuration output directory for MS debug symbol ``.pdb`` files\\ngenerated by the linker for executable and shared library targets.\\n\\nThis is a per-configuration version of ``CMAKE_PDB_OUTPUT_DIRECTORY``.\\nThis variable is used to initialize the\\n``PDB_OUTPUT_DIRECTORY_<CONFIG>``\\nproperty on all the targets.  See that target property for additional\\ninformation.\\n",
        "variable"
    ],
    "CMAKE_PDB_OUTPUT_DIRECTORY_RELEASE": [
        "CMAKE_PDB_OUTPUT_DIRECTORY_<CONFIG>\\n-----------------------------------\\n\\nPer-configuration output directory for MS debug symbol ``.pdb`` files\\ngenerated by the linker for executable and shared library targets.\\n\\nThis is a per-configuration version of ``CMAKE_PDB_OUTPUT_DIRECTORY``.\\nThis variable is used to initialize the\\n``PDB_OUTPUT_DIRECTORY_<CONFIG>``\\nproperty on all the targets.  See that target property for additional\\ninformation.\\n",
        "variable"
    ],
    "CMAKE_POLICY_DEFAULT_CMP<NNNN>": [
        "CMAKE_POLICY_DEFAULT_CMP<NNNN>\\n------------------------------\\n\\nDefault for CMake Policy ``CMP<NNNN>`` when it is otherwise left unset.\\n\\nCommands ``cmake_minimum_required(VERSION)`` and\\n``cmake_policy(VERSION)`` by default leave policies introduced after\\nthe given version unset.  Set ``CMAKE_POLICY_DEFAULT_CMP<NNNN>`` to ``OLD``\\nor ``NEW`` to specify the default for policy ``CMP<NNNN>``, where ``<NNNN>``\\nis the policy number.\\n\\nThis variable should not be set by a project in CMake code; use\\n``cmake_policy(SET)`` instead.  Users running CMake may set this\\nvariable in the cache (e.g. ``-DCMAKE_POLICY_DEFAULT_CMP<NNNN>=<OLD|NEW>``)\\nto set a policy not otherwise set by the project.  Set to ``OLD`` to quiet a\\npolicy warning while using old behavior or to ``NEW`` to try building the\\nproject with new behavior.\\n",
        "variable"
    ],
    "CMAKE_POLICY_WARNING_CMP<NNNN>": [
        "CMAKE_POLICY_WARNING_CMP<NNNN>\\n------------------------------\\n\\nExplicitly enable or disable the warning when CMake Policy ``CMP<NNNN>``\\nis not set.  This is meaningful only for the few policies that do not\\nwarn by default:\\n\\n* ``CMAKE_POLICY_WARNING_CMP0025`` controls the warning for\\n  policy ``CMP0025``.\\n* ``CMAKE_POLICY_WARNING_CMP0047`` controls the warning for\\n  policy ``CMP0047``.\\n* ``CMAKE_POLICY_WARNING_CMP0056`` controls the warning for\\n  policy ``CMP0056``.\\n* ``CMAKE_POLICY_WARNING_CMP0060`` controls the warning for\\n  policy ``CMP0060``.\\n* ``CMAKE_POLICY_WARNING_CMP0065`` controls the warning for\\n  policy ``CMP0065``.\\n* ``CMAKE_POLICY_WARNING_CMP0066`` controls the warning for\\n  policy ``CMP0066``.\\n* ``CMAKE_POLICY_WARNING_CMP0067`` controls the warning for\\n  policy ``CMP0067``.\\n\\nThis variable should not be set by a project in CMake code.  Project\\ndevelopers running CMake may set this variable in their cache to\\nenable the warning (e.g. ``-DCMAKE_POLICY_WARNING_CMP<NNNN>=ON``).\\nAlternatively, running ``cmake(1)`` with the ``--debug-output``,\\n``--trace``, or ``--trace-expand`` option will also enable the warning.\\n",
        "variable"
    ],
    "CMAKE_POSITION_INDEPENDENT_CODE": [
        "CMAKE_POSITION_INDEPENDENT_CODE\\n-------------------------------\\n\\nDefault value for ``POSITION_INDEPENDENT_CODE`` of targets.\\n\\nThis variable is used to initialize the\\n``POSITION_INDEPENDENT_CODE`` property on all the targets.\\nSee that target property for additional information.  If set, it's\\nvalue is also used by the ``try_compile()`` command.\\n",
        "variable"
    ],
    "CMAKE_PREFIX_PATH": [
        "CMAKE_PREFIX_PATH\\n-----------------\\n\\n:ref:`;-list <CMake Language Lists>` of directories specifying installation\\n*prefixes* to be searched by the ``find_package()``,\\n``find_program()``, ``find_library()``, ``find_file()``, and\\n``find_path()`` commands.  Each command will add appropriate\\nsubdirectories (like ``bin``, ``lib``, or ``include``) as specified in its own\\ndocumentation.\\n\\nBy default this is empty.  It is intended to be set by the project.\\n\\nSee also ``CMAKE_SYSTEM_PREFIX_PATH``, ``CMAKE_INCLUDE_PATH``,\\n``CMAKE_LIBRARY_PATH``, ``CMAKE_PROGRAM_PATH``, and\\n``CMAKE_IGNORE_PATH``.\\n",
        "variable"
    ],
    "CMAKE_PROGRAM_PATH": [
        "CMAKE_PROGRAM_PATH\\n------------------\\n\\n:ref:`;-list <CMake Language Lists>` of directories specifying a search path\\nfor the ``find_program()`` command.  By default it is empty, it is\\nintended to be set by the project.  See also\\n``CMAKE_SYSTEM_PROGRAM_PATH`` and ``CMAKE_PREFIX_PATH``.\\n",
        "variable"
    ],
    "CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE": [
        "CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE\\n------------------------------------\\n\\nA CMake language file or module to be included by the ``project()``\\ncommand.  This is intended for injecting custom code into project\\nbuilds without modifying their source.\\n",
        "variable"
    ],
    "CMAKE_PROJECT_DESCRIPTION": [
        "CMAKE_PROJECT_DESCRIPTION\\n-------------------------\\n\\nThe description of the top level project.\\n\\nThis variable holds the description of the project as specified in the top\\nlevel CMakeLists.txt file by a ``project()`` command.  In the event that\\nthe top level CMakeLists.txt contains multiple ``project()`` calls,\\nthe most recently called one from that top level CMakeLists.txt will determine\\nthe value that ``CMAKE_PROJECT_DESCRIPTION`` contains.  For example, consider\\nthe following top level CMakeLists.txt:\\n\\n cmake_minimum_required(VERSION 3.0)\\n project(First DESCRIPTION \\\"I am First\\\")\\n project(Second DESCRIPTION \\\"I am Second\\\")\\n add_subdirectory(sub)\\n project(Third DESCRIPTION \\\"I am Third\\\")\\n\\nAnd ``sub/CMakeLists.txt`` with the following contents:\\n\\n project(SubProj DESCRIPTION \\\"I am SubProj\\\")\\n message(\\\"CMAKE_PROJECT_DESCRIPTION = ${CMAKE_PROJECT_DESCRIPTION}\\\")\\n\\nThe most recently seen ``project()`` command from the top level\\nCMakeLists.txt would be ``project(Second ...)``, so this will print::\\n\\n CMAKE_PROJECT_DESCRIPTION = I am Second\\n\\nTo obtain the description from the most recent call to ``project()`` in\\nthe current directory scope or above, see the ``PROJECT_DESCRIPTION``\\nvariable.\\n",
        "variable"
    ],
    "CMAKE_PROJECT_HOMEPAGE_URL": [
        "CMAKE_PROJECT_HOMEPAGE_URL\\n--------------------------\\n\\nThe homepage URL of the top level project.\\n\\nThis variable holds the homepage URL of the project as specified in the top\\nlevel CMakeLists.txt file by a ``project()`` command.  In the event that\\nthe top level CMakeLists.txt contains multiple ``project()`` calls,\\nthe most recently called one from that top level CMakeLists.txt will determine\\nthe value that ``CMAKE_PROJECT_HOMEPAGE_URL`` contains.  For example, consider\\nthe following top level CMakeLists.txt:\\n\\n cmake_minimum_required(VERSION 3.0)\\n project(First HOMEPAGE_URL \\\"http://first.example.com\\\")\\n project(Second HOMEPAGE_URL \\\"http://second.example.com\\\")\\n add_subdirectory(sub)\\n project(Third HOMEPAGE_URL \\\"http://third.example.com\\\")\\n\\nAnd ``sub/CMakeLists.txt`` with the following contents:\\n\\n project(SubProj HOMEPAGE_URL \\\"http://subproj.example.com\\\")\\n message(\\\"CMAKE_PROJECT_HOMEPAGE_URL = ${CMAKE_PROJECT_HOMEPAGE_URL}\\\")\\n\\nThe most recently seen ``project()`` command from the top level\\nCMakeLists.txt would be ``project(Second ...)``, so this will print::\\n\\n CMAKE_PROJECT_HOMEPAGE_URL = http://second.example.com\\n\\nTo obtain the homepage URL from the most recent call to ``project()`` in\\nthe current directory scope or above, see the ``PROJECT_HOMEPAGE_URL``\\nvariable.\\n",
        "variable"
    ],
    "CMAKE_PROJECT_NAME": [
        "CMAKE_PROJECT_NAME\\n------------------\\n\\nThe name of the top level project.\\n\\nThis variable holds the name of the project as specified in the top\\nlevel CMakeLists.txt file by a ``project()`` command.  In the event that\\nthe top level CMakeLists.txt contains multiple ``project()`` calls,\\nthe most recently called one from that top level CMakeLists.txt will determine\\nthe name that ``CMAKE_PROJECT_NAME`` contains.  For example, consider\\nthe following top level CMakeLists.txt:\\n\\n cmake_minimum_required(VERSION 3.0)\\n project(First)\\n project(Second)\\n add_subdirectory(sub)\\n project(Third)\\n\\nAnd ``sub/CMakeLists.txt`` with the following contents:\\n\\n project(SubProj)\\n message(\\\"CMAKE_PROJECT_NAME = ${CMAKE_PROJECT_NAME}\\\")\\n\\nThe most recently seen ``project()`` command from the top level\\nCMakeLists.txt would be ``project(Second)``, so this will print::\\n\\n CMAKE_PROJECT_NAME = Second\\n\\nTo obtain the name from the most recent call to ``project()`` in\\nthe current directory scope or above, see the ``PROJECT_NAME``\\nvariable.\\n",
        "variable"
    ],
    "CMAKE_PROJECT_VERSION": [
        "CMAKE_PROJECT_VERSION\\n---------------------\\n\\nThe version of the top level project.\\n\\nThis variable holds the version of the project as specified in the top\\nlevel CMakeLists.txt file by a ``project()`` command.  In the event that\\nthe top level CMakeLists.txt contains multiple ``project()`` calls,\\nthe most recently called one from that top level CMakeLists.txt will determine\\nthe value that ``CMAKE_PROJECT_VERSION`` contains.  For example, consider\\nthe following top level CMakeLists.txt:\\n\\n cmake_minimum_required(VERSION 3.0)\\n project(First VERSION 1.2.3)\\n project(Second VERSION 3.4.5)\\n add_subdirectory(sub)\\n project(Third VERSION 6.7.8)\\n\\nAnd ``sub/CMakeLists.txt`` with the following contents:\\n\\n project(SubProj VERSION 1)\\n message(\\\"CMAKE_PROJECT_VERSION = ${CMAKE_PROJECT_VERSION}\\\")\\n\\nThe most recently seen ``project()`` command from the top level\\nCMakeLists.txt would be ``project(Second ...)``, so this will print::\\n\\n CMAKE_PROJECT_VERSION = 3.4.5\\n\\nTo obtain the version from the most recent call to ``project()`` in\\nthe current directory scope or above, see the ``PROJECT_VERSION``\\nvariable.\\n",
        "variable"
    ],
    "CMAKE_PROJECT_VERSION_MAJOR": [
        "CMAKE_PROJECT_VERSION_MAJOR\\n---------------------------\\n\\nThe major version of the top level project.\\n\\nThis variable holds the major version of the project as specified in the top\\nlevel CMakeLists.txt file by a ``project()`` command. Please see\\n``CMAKE_PROJECT_VERSION`` documentation for the behavior when\\nmultiple ``project()`` commands are used in the sources.\\n",
        "variable"
    ],
    "CMAKE_PROJECT_VERSION_MINOR": [
        "CMAKE_PROJECT_VERSION_MINOR\\n---------------------------\\n\\nThe minor version of the top level project.\\n\\nThis variable holds the minor version of the project as specified in the top\\nlevel CMakeLists.txt file by a ``project()`` command. Please see\\n``CMAKE_PROJECT_VERSION`` documentation for the behavior when\\nmultiple ``project()`` commands are used in the sources.\\n",
        "variable"
    ],
    "CMAKE_PROJECT_VERSION_PATCH": [
        "CMAKE_PROJECT_VERSION_PATCH\\n---------------------------\\n\\nThe patch version of the top level project.\\n\\nThis variable holds the patch version of the project as specified in the top\\nlevel CMakeLists.txt file by a ``project()`` command. Please see\\n``CMAKE_PROJECT_VERSION`` documentation for the behavior when\\nmultiple ``project()`` commands are used in the sources.\\n",
        "variable"
    ],
    "CMAKE_PROJECT_VERSION_TWEAK": [
        "CMAKE_PROJECT_VERSION_TWEAK\\n---------------------------\\n\\nThe tweak version of the top level project.\\n\\nThis variable holds the tweak version of the project as specified in the top\\nlevel CMakeLists.txt file by a ``project()`` command. Please see\\n``CMAKE_PROJECT_VERSION`` documentation for the behavior when\\nmultiple ``project()`` commands are used in the sources.\\n",
        "variable"
    ],
    "CMAKE_RANLIB": [
        "CMAKE_RANLIB\\n------------\\n\\nName of randomizing tool for static libraries.\\n\\nThis specifies name of the program that randomizes libraries on UNIX,\\nnot used on Windows, but may be present.\\n",
        "variable"
    ],
    "CMAKE_ROOT": [
        "CMAKE_ROOT\\n----------\\n\\nInstall directory for running cmake.\\n\\nThis is the install root for the running CMake and the ``Modules``\\ndirectory can be found here.  This is commonly used in this format:\\n``${CMAKE_ROOT}/Modules``\\n",
        "variable"
    ],
    "CMAKE_RULE_MESSAGES": [
        "CMAKE_RULE_MESSAGES\\n-------------------\\n\\nSpecify whether to report a message for each make rule.\\n\\nIf set in the cache it is used to initialize the value of the ``RULE_MESSAGES`` property.\\nUsers may disable the option in their local build tree to disable granular messages\\nand report only as each target completes in Makefile builds.\\n",
        "variable"
    ],
    "CMAKE_RUNTIME_OUTPUT_DIRECTORY": [
        "CMAKE_RUNTIME_OUTPUT_DIRECTORY\\n------------------------------\\n\\nWhere to put all the :ref:`RUNTIME <Runtime Output Artifacts>`\\ntarget files when built.\\n\\nThis variable is used to initialize the ``RUNTIME_OUTPUT_DIRECTORY``\\nproperty on all the targets.  See that target property for additional\\ninformation.\\n",
        "variable"
    ],
    "CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG": [
        "CMAKE_RUNTIME_OUTPUT_DIRECTORY_<CONFIG>\\n---------------------------------------\\n\\nWhere to put all the :ref:`RUNTIME <Runtime Output Artifacts>`\\ntarget files when built for a specific configuration.\\n\\nThis variable is used to initialize the\\n``RUNTIME_OUTPUT_DIRECTORY_<CONFIG>`` property on all the targets.\\nSee that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE": [
        "CMAKE_RUNTIME_OUTPUT_DIRECTORY_<CONFIG>\\n---------------------------------------\\n\\nWhere to put all the :ref:`RUNTIME <Runtime Output Artifacts>`\\ntarget files when built for a specific configuration.\\n\\nThis variable is used to initialize the\\n``RUNTIME_OUTPUT_DIRECTORY_<CONFIG>`` property on all the targets.\\nSee that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_SCRIPT_MODE_FILE": [
        "CMAKE_SCRIPT_MODE_FILE\\n----------------------\\n\\nFull path to the ``cmake(1)`` ``-P`` script file currently being\\nprocessed.\\n\\nWhen run in ``cmake(1)`` ``-P`` script mode, CMake sets this variable to\\nthe full path of the script file.  When run to configure a ``CMakeLists.txt``\\nfile, this variable is not set.\\n",
        "variable"
    ],
    "CMAKE_SHARED_LIBRARY_PREFIX": [
        "CMAKE_SHARED_LIBRARY_PREFIX\\n---------------------------\\n\\nThe prefix for shared libraries that you link to.\\n\\nThe prefix to use for the name of a shared library, ``lib`` on UNIX.\\n\\n``CMAKE_SHARED_LIBRARY_PREFIX_<LANG>`` overrides this for language ``<LANG>``.\\n",
        "variable"
    ],
    "CMAKE_SHARED_LIBRARY_SUFFIX": [
        "CMAKE_SHARED_LIBRARY_SUFFIX\\n---------------------------\\n\\nThe suffix for shared libraries that you link to.\\n\\nThe suffix to use for the end of a shared library filename, ``.dll`` on\\nWindows.\\n\\n``CMAKE_SHARED_LIBRARY_SUFFIX_<LANG>`` overrides this for language ``<LANG>``.\\n",
        "variable"
    ],
    "CMAKE_SHARED_LINKER_FLAGS": [
        "CMAKE_SHARED_LINKER_FLAGS\\n-------------------------\\n\\nLinker flags to be used to create shared libraries.\\n\\nThese flags will be used by the linker when creating a shared library.\\n",
        "variable"
    ],
    "CMAKE_SHARED_LINKER_FLAGS_DEBUG": [
        "CMAKE_SHARED_LINKER_FLAGS_<CONFIG>\\n----------------------------------\\n\\nFlags to be used when linking a shared library.\\n\\nSame as ``CMAKE_C_FLAGS_*`` but used by the linker when creating shared\\nlibraries.\\n",
        "variable"
    ],
    "CMAKE_SHARED_LINKER_FLAGS_RELEASE": [
        "CMAKE_SHARED_LINKER_FLAGS_<CONFIG>\\n----------------------------------\\n\\nFlags to be used when linking a shared library.\\n\\nSame as ``CMAKE_C_FLAGS_*`` but used by the linker when creating shared\\nlibraries.\\n",
        "variable"
    ],
    "CMAKE_SHARED_LINKER_FLAGS_DEBUG_INIT": [
        "CMAKE_SHARED_LINKER_FLAGS_<CONFIG>_INIT\\n---------------------------------------\\n\\nValue used to initialize the ``CMAKE_SHARED_LINKER_FLAGS_<CONFIG>``\\ncache entry the first time a build tree is configured.\\nThis variable is meant to be set by a :variable:`toolchain file\\n<CMAKE_TOOLCHAIN_FILE>`.  CMake may prepend or append content to\\nthe value based on the environment and target platform.\\n\\nSee also ``CMAKE_SHARED_LINKER_FLAGS_INIT``.\\n",
        "variable"
    ],
    "CMAKE_SHARED_LINKER_FLAGS_RELEASE_INIT": [
        "CMAKE_SHARED_LINKER_FLAGS_<CONFIG>_INIT\\n---------------------------------------\\n\\nValue used to initialize the ``CMAKE_SHARED_LINKER_FLAGS_<CONFIG>``\\ncache entry the first time a build tree is configured.\\nThis variable is meant to be set by a :variable:`toolchain file\\n<CMAKE_TOOLCHAIN_FILE>`.  CMake may prepend or append content to\\nthe value based on the environment and target platform.\\n\\nSee also ``CMAKE_SHARED_LINKER_FLAGS_INIT``.\\n",
        "variable"
    ],
    "CMAKE_SHARED_LINKER_FLAGS_INIT": [
        "CMAKE_SHARED_LINKER_FLAGS_INIT\\n------------------------------\\n\\nValue used to initialize the ``CMAKE_SHARED_LINKER_FLAGS``\\ncache entry the first time a build tree is configured.\\nThis variable is meant to be set by a :variable:`toolchain file\\n<CMAKE_TOOLCHAIN_FILE>`.  CMake may prepend or append content to\\nthe value based on the environment and target platform.\\n\\nSee also the configuration-specific variable\\n``CMAKE_SHARED_LINKER_FLAGS_<CONFIG>_INIT``.\\n",
        "variable"
    ],
    "CMAKE_SHARED_MODULE_PREFIX": [
        "CMAKE_SHARED_MODULE_PREFIX\\n--------------------------\\n\\nThe prefix for loadable modules that you link to.\\n\\nThe prefix to use for the name of a loadable module on this platform.\\n\\n``CMAKE_SHARED_MODULE_PREFIX_<LANG>`` overrides this for language ``<LANG>``.\\n",
        "variable"
    ],
    "CMAKE_SHARED_MODULE_SUFFIX": [
        "CMAKE_SHARED_MODULE_SUFFIX\\n--------------------------\\n\\nThe suffix for shared libraries that you link to.\\n\\nThe suffix to use for the end of a loadable module filename on this\\nplatform\\n\\n``CMAKE_SHARED_MODULE_SUFFIX_<LANG>`` overrides this for language ``<LANG>``.\\n",
        "variable"
    ],
    "CMAKE_SIZEOF_VOID_P": [
        "CMAKE_SIZEOF_VOID_P\\n-------------------\\n\\nSize of a ``void`` pointer.\\n\\nThis is set to the size of a pointer on the target machine, and is determined\\nby a try compile.  If a 64-bit size is found, then the library search\\npath is modified to look for 64-bit libraries first.\\n",
        "variable"
    ],
    "CMAKE_SKIP_BUILD_RPATH": [
        "CMAKE_SKIP_BUILD_RPATH\\n----------------------\\n\\nDo not include RPATHs in the build tree.\\n\\nNormally CMake uses the build tree for the RPATH when building\\nexecutables etc on systems that use RPATH.  When the software is\\ninstalled the executables etc are relinked by CMake to have the\\ninstall RPATH.  If this variable is set to true then the software is\\nalways built with no RPATH.\\n",
        "variable"
    ],
    "CMAKE_SKIP_INSTALL_ALL_DEPENDENCY": [
        "CMAKE_SKIP_INSTALL_ALL_DEPENDENCY\\n---------------------------------\\n\\nDon't make the ``install`` target depend on the ``all`` target.\\n\\nBy default, the ``install`` target depends on the ``all`` target.  This\\nhas the effect, that when ``make install`` is invoked or ``INSTALL`` is\\nbuilt, first the ``all`` target is built, then the installation starts.\\nIf ``CMAKE_SKIP_INSTALL_ALL_DEPENDENCY`` is set to ``TRUE``, this\\ndependency is not created, so the installation process will start immediately,\\nindependent from whether the project has been completely built or not.\\n",
        "variable"
    ],
    "CMAKE_SKIP_INSTALL_RPATH": [
        "CMAKE_SKIP_INSTALL_RPATH\\n------------------------\\n\\nDo not include RPATHs in the install tree.\\n\\nNormally CMake uses the build tree for the RPATH when building\\nexecutables etc on systems that use RPATH.  When the software is\\ninstalled the executables etc are relinked by CMake to have the\\ninstall RPATH.  If this variable is set to true then the software is\\nalways installed without RPATH, even if RPATH is enabled when\\nbuilding.  This can be useful for example to allow running tests from\\nthe build directory with RPATH enabled before the installation step.\\nTo omit RPATH in both the build and install steps, use\\n``CMAKE_SKIP_RPATH`` instead.\\n",
        "variable"
    ],
    "CMAKE_SKIP_INSTALL_RULES": [
        "CMAKE_SKIP_INSTALL_RULES\\n------------------------\\n\\nWhether to disable generation of installation rules.\\n\\nIf ``TRUE``, cmake will neither generate installaton rules nor\\nwill it generate ``cmake_install.cmake`` files. This variable is ``FALSE`` by\\ndefault.\\n",
        "variable"
    ],
    "CMAKE_SKIP_RPATH": [
        "CMAKE_SKIP_RPATH\\n----------------\\n\\nIf true, do not add run time path information.\\n\\nIf this is set to ``TRUE``, then the rpath information is not added to\\ncompiled executables.  The default is to add rpath information if the\\nplatform supports it.  This allows for easy running from the build\\ntree.  To omit RPATH in the install step, but not the build step, use\\n``CMAKE_SKIP_INSTALL_RPATH`` instead.\\n",
        "variable"
    ],
    "CMAKE_SOURCE_DIR": [
        "CMAKE_SOURCE_DIR\\n----------------\\n\\nThe path to the top level of the source tree.\\n\\nThis is the full path to the top level of the current CMake source\\ntree.  For an in-source build, this would be the same as\\n``CMAKE_BINARY_DIR``.\\n\\nWhen run in -P script mode, CMake sets the variables\\n``CMAKE_BINARY_DIR``, ``CMAKE_SOURCE_DIR``,\\n``CMAKE_CURRENT_BINARY_DIR`` and\\n``CMAKE_CURRENT_SOURCE_DIR`` to the current working directory.\\n",
        "variable"
    ],
    "CMAKE_STAGING_PREFIX": [
        "CMAKE_STAGING_PREFIX\\n--------------------\\n\\nThis variable may be set to a path to install to when cross-compiling. This can\\nbe useful if the path in ``CMAKE_SYSROOT`` is read-only, or otherwise\\nshould remain pristine.\\n\\nThe ``CMAKE_STAGING_PREFIX`` location is also used as a search prefix by the\\n``find_*`` commands. This can be controlled by setting the\\n``CMAKE_FIND_NO_INSTALL_PREFIX`` variable.\\n\\nIf any RPATH/RUNPATH entries passed to the linker contain the\\n``CMAKE_STAGING_PREFIX``, the matching path fragments are replaced with the\\n``CMAKE_INSTALL_PREFIX``.\\n",
        "variable"
    ],
    "CMAKE_STATIC_LIBRARY_PREFIX": [
        "CMAKE_STATIC_LIBRARY_PREFIX\\n---------------------------\\n\\nThe prefix for static libraries that you link to.\\n\\nThe prefix to use for the name of a static library, ``lib`` on UNIX.\\n\\n``CMAKE_STATIC_LIBRARY_PREFIX_<LANG>`` overrides this for language ``<LANG>``.\\n",
        "variable"
    ],
    "CMAKE_STATIC_LIBRARY_SUFFIX": [
        "CMAKE_STATIC_LIBRARY_SUFFIX\\n---------------------------\\n\\nThe suffix for static libraries that you link to.\\n\\nThe suffix to use for the end of a static library filename, ``.lib`` on\\nWindows.\\n\\n``CMAKE_STATIC_LIBRARY_SUFFIX_<LANG>`` overrides this for language ``<LANG>``.\\n",
        "variable"
    ],
    "CMAKE_STATIC_LINKER_FLAGS": [
        "CMAKE_STATIC_LINKER_FLAGS\\n-------------------------\\n\\nLinker flags to be used to create static libraries.\\n\\nThese flags will be used by the linker when creating a static library.\\n",
        "variable"
    ],
    "CMAKE_STATIC_LINKER_FLAGS_DEBUG": [
        "CMAKE_STATIC_LINKER_FLAGS_<CONFIG>\\n----------------------------------\\n\\nFlags to be used when linking a static library.\\n\\nSame as ``CMAKE_C_FLAGS_*`` but used by the linker when creating static\\nlibraries.\\n",
        "variable"
    ],
    "CMAKE_STATIC_LINKER_FLAGS_RELEASE": [
        "CMAKE_STATIC_LINKER_FLAGS_<CONFIG>\\n----------------------------------\\n\\nFlags to be used when linking a static library.\\n\\nSame as ``CMAKE_C_FLAGS_*`` but used by the linker when creating static\\nlibraries.\\n",
        "variable"
    ],
    "CMAKE_STATIC_LINKER_FLAGS_DEBUG_INIT": [
        "CMAKE_STATIC_LINKER_FLAGS_<CONFIG>_INIT\\n---------------------------------------\\n\\nValue used to initialize the ``CMAKE_STATIC_LINKER_FLAGS_<CONFIG>``\\ncache entry the first time a build tree is configured.\\nThis variable is meant to be set by a :variable:`toolchain file\\n<CMAKE_TOOLCHAIN_FILE>`.  CMake may prepend or append content to\\nthe value based on the environment and target platform.\\n\\nSee also ``CMAKE_STATIC_LINKER_FLAGS_INIT``.\\n",
        "variable"
    ],
    "CMAKE_STATIC_LINKER_FLAGS_RELEASE_INIT": [
        "CMAKE_STATIC_LINKER_FLAGS_<CONFIG>_INIT\\n---------------------------------------\\n\\nValue used to initialize the ``CMAKE_STATIC_LINKER_FLAGS_<CONFIG>``\\ncache entry the first time a build tree is configured.\\nThis variable is meant to be set by a :variable:`toolchain file\\n<CMAKE_TOOLCHAIN_FILE>`.  CMake may prepend or append content to\\nthe value based on the environment and target platform.\\n\\nSee also ``CMAKE_STATIC_LINKER_FLAGS_INIT``.\\n",
        "variable"
    ],
    "CMAKE_STATIC_LINKER_FLAGS_INIT": [
        "CMAKE_STATIC_LINKER_FLAGS_INIT\\n------------------------------\\n\\nValue used to initialize the ``CMAKE_STATIC_LINKER_FLAGS``\\ncache entry the first time a build tree is configured.\\nThis variable is meant to be set by a :variable:`toolchain file\\n<CMAKE_TOOLCHAIN_FILE>`.  CMake may prepend or append content to\\nthe value based on the environment and target platform.\\n\\nSee also the configuration-specific variable\\n``CMAKE_STATIC_LINKER_FLAGS_<CONFIG>_INIT``.\\n",
        "variable"
    ],
    "CMAKE_SUBLIME_TEXT_2_ENV_SETTINGS": [
        "CMAKE_SUBLIME_TEXT_2_ENV_SETTINGS\\n---------------------------------\\n\\nThis variable contains a list of env vars as a list of tokens with the\\nsyntax ``var=value``.\\n\\nExample:\\n\\n set(CMAKE_SUBLIME_TEXT_2_ENV_SETTINGS\\n    \\\"FOO=FOO1\\\\;FOO2\\\\;FOON\\\"\\n    \\\"BAR=BAR1\\\\;BAR2\\\\;BARN\\\"\\n    \\\"BAZ=BAZ1\\\\;BAZ2\\\\;BAZN\\\"\\n    \\\"FOOBAR=FOOBAR1\\\\;FOOBAR2\\\\;FOOBARN\\\"\\n    \\\"VALID=\\\"\\n    )\\n\\nIn case of malformed variables CMake will fail:\\n\\n set(CMAKE_SUBLIME_TEXT_2_ENV_SETTINGS\\n     \\\"THIS_IS_NOT_VALID\\\"\\n     )\\n",
        "variable"
    ],
    "CMAKE_SUBLIME_TEXT_2_EXCLUDE_BUILD_TREE": [
        "CMAKE_SUBLIME_TEXT_2_EXCLUDE_BUILD_TREE\\n---------------------------------------\\n\\nIf this variable evaluates to ``ON`` at the end of the top-level\\n``CMakeLists.txt`` file, the ``Sublime Text 2`` extra generator\\nexcludes the build tree from the ``.sublime-project`` if it is inside the\\nsource tree.\\n",
        "variable"
    ],
    "CMAKE_SUPPRESS_REGENERATION": [
        "CMAKE_SUPPRESS_REGENERATION\\n---------------------------\\n\\nIf CMAKE_SUPPRESS_REGENERATION is ``OFF``, which is default, then CMake adds a\\nspecial target on which all other targets depend that checks the build system\\nand optionally re-runs CMake to regenerate the build system when the target\\nspecification source changes.\\n\\nIf this variable evaluates to ``ON`` at the end of the top-level\\n``CMakeLists.txt`` file, CMake will not add the regeneration target to the\\nbuild system or perform any build system checks.\\n",
        "variable"
    ],
    "CMAKE_SYSROOT": [
        "CMAKE_SYSROOT\\n-------------\\n\\nPath to pass to the compiler in the ``--sysroot`` flag.\\n\\nThe ``CMAKE_SYSROOT`` content is passed to the compiler in the ``--sysroot``\\nflag, if supported.  The path is also stripped from the RPATH/RUNPATH if\\nnecessary on installation.  The ``CMAKE_SYSROOT`` is also used to prefix\\npaths searched by the ``find_*`` commands.\\n\\nThis variable may only be set in a toolchain file specified by\\nthe ``CMAKE_TOOLCHAIN_FILE`` variable.\\n\\nSee also the ``CMAKE_SYSROOT_COMPILE`` and\\n``CMAKE_SYSROOT_LINK`` variables.\\n",
        "variable"
    ],
    "CMAKE_SYSROOT_COMPILE": [
        "CMAKE_SYSROOT_COMPILE\\n---------------------\\n\\nPath to pass to the compiler in the ``--sysroot`` flag when compiling source\\nfiles.  This is the same as ``CMAKE_SYSROOT`` but is used only for\\ncompiling sources and not linking.\\n\\nThis variable may only be set in a toolchain file specified by\\nthe ``CMAKE_TOOLCHAIN_FILE`` variable.\\n",
        "variable"
    ],
    "CMAKE_SYSROOT_LINK": [
        "CMAKE_SYSROOT_LINK\\n------------------\\n\\nPath to pass to the compiler in the ``--sysroot`` flag when linking.  This is\\nthe same as ``CMAKE_SYSROOT`` but is used only for linking and not\\ncompiling sources.\\n\\nThis variable may only be set in a toolchain file specified by\\nthe ``CMAKE_TOOLCHAIN_FILE`` variable.\\n",
        "variable"
    ],
    "CMAKE_SYSTEM": [
        "CMAKE_SYSTEM\\n------------\\n\\nComposite name of operating system CMake is compiling for.\\n\\nThis variable is the composite of ``CMAKE_SYSTEM_NAME`` and\\n``CMAKE_SYSTEM_VERSION``, e.g.\\n``${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_VERSION}``.  If\\n``CMAKE_SYSTEM_VERSION`` is not set, then this variable is\\nthe same as ``CMAKE_SYSTEM_NAME``.\\n",
        "variable"
    ],
    "CMAKE_SYSTEM_APPBUNDLE_PATH": [
        "CMAKE_SYSTEM_APPBUNDLE_PATH\\n---------------------------\\n\\nSearch path for macOS application bundles used by the ``find_program()``,\\nand ``find_package()`` commands.  By default it contains the standard\\ndirectories for the current system.  It is *not* intended to be modified by\\nthe project, use ``CMAKE_APPBUNDLE_PATH`` for this.\\n",
        "variable"
    ],
    "CMAKE_SYSTEM_FRAMEWORK_PATH": [
        "CMAKE_SYSTEM_FRAMEWORK_PATH\\n---------------------------\\n\\nSearch path for macOS frameworks used by the ``find_library()``,\\n``find_package()``, ``find_path()``, and ``find_file()``\\ncommands.  By default it contains the standard directories for the\\ncurrent system.  It is *not* intended to be modified by the project,\\nuse ``CMAKE_FRAMEWORK_PATH`` for this.\\n",
        "variable"
    ],
    "CMAKE_SYSTEM_IGNORE_PATH": [
        "CMAKE_SYSTEM_IGNORE_PATH\\n------------------------\\n\\n:ref:`;-list <CMake Language Lists>` of directories to be *ignored* by\\nthe ``find_program()``, ``find_library()``, ``find_file()``,\\nand ``find_path()`` commands.  This is useful in cross-compiling\\nenvironments where some system directories contain incompatible but\\npossibly linkable libraries.  For example, on cross-compiled cluster\\nenvironments, this allows a user to ignore directories containing\\nlibraries meant for the front-end machine.\\n\\nBy default this contains a list of directories containing incompatible\\nbinaries for the host system.  See the ``CMAKE_IGNORE_PATH`` variable\\nthat is intended to be set by the project.\\n\\nSee also the ``CMAKE_SYSTEM_PREFIX_PATH``,\\n``CMAKE_SYSTEM_LIBRARY_PATH``, ``CMAKE_SYSTEM_INCLUDE_PATH``,\\nand ``CMAKE_SYSTEM_PROGRAM_PATH`` variables.\\n",
        "variable"
    ],
    "CMAKE_SYSTEM_INCLUDE_PATH": [
        "CMAKE_SYSTEM_INCLUDE_PATH\\n-------------------------\\n\\n:ref:`;-list <CMake Language Lists>` of directories specifying a search path\\nfor the ``find_file()`` and ``find_path()`` commands.  By default\\nthis contains the standard directories for the current system.  It is *not*\\nintended to be modified by the project; use ``CMAKE_INCLUDE_PATH`` for\\nthis.  See also ``CMAKE_SYSTEM_PREFIX_PATH``.\\n",
        "variable"
    ],
    "CMAKE_SYSTEM_LIBRARY_PATH": [
        "CMAKE_SYSTEM_LIBRARY_PATH\\n-------------------------\\n\\n:ref:`;-list <CMake Language Lists>` of directories specifying a search path\\nfor the ``find_library()`` command.  By default this contains the\\nstandard directories for the current system.  It is *not* intended to be\\nmodified by the project; use ``CMAKE_LIBRARY_PATH`` for this.\\nSee also ``CMAKE_SYSTEM_PREFIX_PATH``.\\n",
        "variable"
    ],
    "CMAKE_SYSTEM_NAME": [
        "CMAKE_SYSTEM_NAME\\n-----------------\\n\\nThe name of the operating system for which CMake is to build.\\nSee the ``CMAKE_SYSTEM_VERSION`` variable for the OS version.\\n\\nNote that ``CMAKE_SYSTEM_NAME`` is not set to anything by default when running\\nin script mode, since it's not building anything.\\n\\nSystem Name for Host Builds\\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\\n``CMAKE_SYSTEM_NAME`` is by default set to the same value as the\\n``CMAKE_HOST_SYSTEM_NAME`` variable so that the build\\ntargets the host system.\\n\\nSystem Name for Cross Compiling\\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\\n``CMAKE_SYSTEM_NAME`` may be set explicitly when first configuring a new build\\ntree in order to enable :ref:`cross compiling <Cross Compiling Toolchain>`.\\nIn this case the ``CMAKE_SYSTEM_VERSION`` variable must also be\\nset explicitly.\\n",
        "variable"
    ],
    "CMAKE_SYSTEM_PREFIX_PATH": [
        "CMAKE_SYSTEM_PREFIX_PATH\\n------------------------\\n\\n:ref:`;-list <CMake Language Lists>` of directories specifying installation\\n*prefixes* to be searched by the ``find_package()``,\\n``find_program()``, ``find_library()``, ``find_file()``, and\\n``find_path()`` commands.  Each command will add appropriate\\nsubdirectories (like ``bin``, ``lib``, or ``include``) as specified in its own\\ndocumentation.\\n\\nBy default this contains the standard directories for the current system, the\\n``CMAKE_INSTALL_PREFIX``, and the ``CMAKE_STAGING_PREFIX``.\\nThe installation and staging prefixes may be excluded by setting\\nthe ``CMAKE_FIND_NO_INSTALL_PREFIX`` variable.\\n\\n``CMAKE_SYSTEM_PREFIX_PATH`` is *not* intended to be modified by the project;\\nuse ``CMAKE_PREFIX_PATH`` for this.\\n\\nSee also ``CMAKE_SYSTEM_INCLUDE_PATH``,\\n``CMAKE_SYSTEM_LIBRARY_PATH``, ``CMAKE_SYSTEM_PROGRAM_PATH``,\\nand ``CMAKE_SYSTEM_IGNORE_PATH``.\\n",
        "variable"
    ],
    "CMAKE_SYSTEM_PROCESSOR": [
        "CMAKE_SYSTEM_PROCESSOR\\n----------------------\\n\\nThe name of the CPU CMake is building for.\\n\\nThis variable is the same as ``CMAKE_HOST_SYSTEM_PROCESSOR`` if\\nyou build for the host system instead of the target system when\\ncross compiling.\\n",
        "variable"
    ],
    "CMAKE_SYSTEM_PROGRAM_PATH": [
        "CMAKE_SYSTEM_PROGRAM_PATH\\n-------------------------\\n\\n:ref:`;-list <CMake Language Lists>` of directories specifying a search path\\nfor the ``find_program()`` command.  By default this contains the\\nstandard directories for the current system.  It is *not* intended to be\\nmodified by the project; use ``CMAKE_PROGRAM_PATH`` for this.\\nSee also ``CMAKE_SYSTEM_PREFIX_PATH``.\\n",
        "variable"
    ],
    "CMAKE_SYSTEM_VERSION": [
        "CMAKE_SYSTEM_VERSION\\n--------------------\\n\\nThe version of the operating system for which CMake is to build.\\nSee the ``CMAKE_SYSTEM_NAME`` variable for the OS name.\\n\\nSystem Version for Host Builds\\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\\nWhen the ``CMAKE_SYSTEM_NAME`` variable takes its default value\\nthen ``CMAKE_SYSTEM_VERSION`` is by default set to the same value as the\\n``CMAKE_HOST_SYSTEM_VERSION`` variable so that the build targets\\nthe host system version.\\n\\nIn the case of a host build then ``CMAKE_SYSTEM_VERSION`` may be set\\nexplicitly when first configuring a new build tree in order to enable\\ntargeting the build for a different version of the host operating system\\nthan is actually running on the host.  This is allowed and not considered\\ncross compiling so long as the binaries built for the specified OS version\\ncan still run on the host.\\n\\nSystem Version for Cross Compiling\\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\\nWhen the ``CMAKE_SYSTEM_NAME`` variable is set explicitly to\\nenable :ref:`cross compiling <Cross Compiling Toolchain>` then the\\nvalue of ``CMAKE_SYSTEM_VERSION`` must also be set explicitly to specify\\nthe target system version.\\n",
        "variable"
    ],
    "CMAKE_Swift_LANGUAGE_VERSION": [
        "CMAKE_Swift_LANGUAGE_VERSION\\n----------------------------\\n\\nSet to the Swift language version number.  If not set, the legacy \\\"2.3\\\"\\nversion is assumed.\\n",
        "variable"
    ],
    "CMAKE_TOOLCHAIN_FILE": [
        "CMAKE_TOOLCHAIN_FILE\\n--------------------\\n\\nPath to toolchain file supplied to ``cmake(1)``.\\n\\nThis variable is specified on the command line when cross-compiling with CMake.\\nIt is the path to a file which is read early in the CMake run and which\\nspecifies locations for compilers and toolchain utilities, and other target\\nplatform and compiler related information.\\n",
        "variable"
    ],
    "CMAKE_TRY_COMPILE_CONFIGURATION": [
        "CMAKE_TRY_COMPILE_CONFIGURATION\\n-------------------------------\\n\\nBuild configuration used for ``try_compile()`` and ``try_run()``\\nprojects.\\n\\nProjects built by ``try_compile()`` and ``try_run()`` are built\\nsynchronously during the CMake configuration step.  Therefore a specific build\\nconfiguration must be chosen even if the generated build system\\nsupports multiple configurations.\\n",
        "variable"
    ],
    "CMAKE_TRY_COMPILE_PLATFORM_VARIABLES": [
        "CMAKE_TRY_COMPILE_PLATFORM_VARIABLES\\n------------------------------------\\n\\nList of variables that the ``try_compile()`` command source file signature\\nmust propagate into the test project in order to target the same platform as\\nthe host project.\\n\\nThis variable should not be set by project code.  It is meant to be set by\\nCMake's platform information modules for the current toolchain, or by a\\ntoolchain file when used with ``CMAKE_TOOLCHAIN_FILE``.\\n\\nVariables meaningful to CMake, such as ``CMAKE_<LANG>_FLAGS``, are\\npropagated automatically.  The ``CMAKE_TRY_COMPILE_PLATFORM_VARIABLES``\\nvariable may be set to pass custom variables meaningful to a toolchain file.\\nFor example, a toolchain file may contain:\\n\\n set(CMAKE_SYSTEM_NAME ...)\\n set(CMAKE_TRY_COMPILE_PLATFORM_VARIABLES MY_CUSTOM_VARIABLE)\\n # ... use MY_CUSTOM_VARIABLE ...\\n\\nIf a user passes ``-DMY_CUSTOM_VARIABLE=SomeValue`` to CMake then this\\nsetting will be made visible to the toolchain file both for the main\\nproject and for test projects generated by the ``try_compile()``\\ncommand source file signature.\\n",
        "variable"
    ],
    "CMAKE_TRY_COMPILE_TARGET_TYPE": [
        "CMAKE_TRY_COMPILE_TARGET_TYPE\\n-----------------------------\\n\\nType of target generated for ``try_compile()`` calls using the\\nsource file signature.  Valid values are:\\n\\n``EXECUTABLE``\\n  Use ``add_executable()`` to name the source file in the\\n  generated project.  This is the default if no value is given.\\n\\n``STATIC_LIBRARY``\\n  Use ``add_library()`` with the ``STATIC`` option to name the\\n  source file in the generated project.  This avoids running the\\n  linker and is intended for use with cross-compiling toolchains\\n  that cannot link without custom flags or linker scripts.\\n",
        "variable"
    ],
    "CMAKE_TWEAK_VERSION": [
        "CMAKE_TWEAK_VERSION\\n-------------------\\n\\nDefined to ``0`` for compatibility with code written for older\\nCMake versions that may have defined higher values.\\n\\n.. note::\\n\\n  In CMake versions 2.8.2 through 2.8.12, this variable holds\\n  the fourth version number component of the\\n  ``CMAKE_VERSION`` variable.\\n",
        "variable"
    ],
    "CMAKE_USER_MAKE_RULES_OVERRIDE": [
        "CMAKE_USER_MAKE_RULES_OVERRIDE\\n------------------------------\\n\\nSpecify a CMake file that overrides platform information.\\n\\nCMake loads the specified file while enabling support for each\\nlanguage from either the ``project()`` or ``enable_language()``\\ncommands.  It is loaded after CMake's builtin compiler and platform information\\nmodules have been loaded but before the information is used.  The file\\nmay set platform information variables to override CMake's defaults.\\n\\nThis feature is intended for use only in overriding information\\nvariables that must be set before CMake builds its first test project\\nto check that the compiler for a language works.  It should not be\\nused to load a file in cases that a normal ``include()`` will work.  Use\\nit only as a last resort for behavior that cannot be achieved any\\nother way.  For example, one may set the\\n``CMAKE_C_FLAGS_INIT`` variable\\nto change the default value used to initialize the\\n``CMAKE_C_FLAGS`` variable\\nbefore it is cached.  The override file should NOT be used to set anything\\nthat could be set after languages are enabled, such as variables like\\n``CMAKE_RUNTIME_OUTPUT_DIRECTORY`` that affect the placement of\\nbinaries.  Information set in the file will be used for ``try_compile()``\\nand ``try_run()`` builds too.\\n",
        "variable"
    ],
    "CMAKE_USER_MAKE_RULES_OVERRIDE_C": [
        "CMAKE_USER_MAKE_RULES_OVERRIDE_<LANG>\\n-------------------------------------\\n\\nSpecify a CMake file that overrides platform information for ``<LANG>``.\\n\\nThis is a language-specific version of\\n``CMAKE_USER_MAKE_RULES_OVERRIDE`` loaded only when enabling language\\n``<LANG>``.\\n",
        "variable"
    ],
    "CMAKE_USER_MAKE_RULES_OVERRIDE_CXX": [
        "CMAKE_USER_MAKE_RULES_OVERRIDE_<LANG>\\n-------------------------------------\\n\\nSpecify a CMake file that overrides platform information for ``<LANG>``.\\n\\nThis is a language-specific version of\\n``CMAKE_USER_MAKE_RULES_OVERRIDE`` loaded only when enabling language\\n``<LANG>``.\\n",
        "variable"
    ],
    "CMAKE_USE_RELATIVE_PATHS": [
        "CMAKE_USE_RELATIVE_PATHS\\n------------------------\\n\\nThis variable has no effect.  The partially implemented effect it\\nhad in previous releases was removed in CMake 3.4.\\n",
        "variable"
    ],
    "CMAKE_VERBOSE_MAKEFILE": [
        "CMAKE_VERBOSE_MAKEFILE\\n----------------------\\n\\nEnable verbose output from Makefile builds.\\n\\nThis variable is a cache entry initialized (to ``FALSE``) by\\nthe ``project()`` command.  Users may enable the option\\nin their local build tree to get more verbose output from\\nMakefile builds and show each command line as it is launched.\\n",
        "variable"
    ],
    "CMAKE_VERSION": [
        "CMAKE_VERSION\\n-------------\\n\\nThe CMake version string as three non-negative integer components\\nseparated by ``.`` and possibly followed by ``-`` and other information.\\nThe first two components represent the feature level and the third\\ncomponent represents either a bug-fix level or development date.\\n\\nRelease versions and release candidate versions of CMake use the format::\\n\\n <major>.<minor>.<patch>[-rc<n>]\\n\\nwhere the ``<patch>`` component is less than ``20000000``.  Development\\nversions of CMake use the format::\\n\\n <major>.<minor>.<date>[-<id>]\\n\\nwhere the ``<date>`` component is of format ``CCYYMMDD`` and ``<id>``\\nmay contain arbitrary text.  This represents development as of a\\nparticular date following the ``<major>.<minor>`` feature release.\\n\\nIndividual component values are also available in variables:\\n\\n* ``CMAKE_MAJOR_VERSION``\\n* ``CMAKE_MINOR_VERSION``\\n* ``CMAKE_PATCH_VERSION``\\n* ``CMAKE_TWEAK_VERSION``\\n\\nUse the ``if()`` command ``VERSION_LESS``, ``VERSION_GREATER``,\\n``VERSION_EQUAL``, ``VERSION_LESS_EQUAL``, or ``VERSION_GREATER_EQUAL``\\noperators to compare version string values against ``CMAKE_VERSION`` using a\\ncomponent-wise test.  Version component values may be 10 or larger so do not\\nattempt to compare version strings as floating-point numbers.\\n\\n.. note::\\n\\n  CMake versions 2.8.2 through 2.8.12 used three components for the\\n  feature level.  Release versions represented the bug-fix level in a\\n  fourth component, i.e. ``<major>.<minor>.<patch>[.<tweak>][-rc<n>]``.\\n  Development versions represented the development date in the fourth\\n  component, i.e. ``<major>.<minor>.<patch>.<date>[-<id>]``.\\n\\n  CMake versions prior to 2.8.2 used three components for the\\n  feature level and had no bug-fix component.  Release versions\\n  used an even-valued second component, i.e.\\n  ``<major>.<even-minor>.<patch>[-rc<n>]``.  Development versions\\n  used an odd-valued second component with the development date as\\n  the third component, i.e. ``<major>.<odd-minor>.<date>``.\\n\\n  The ``CMAKE_VERSION`` variable is defined by CMake 2.6.3 and higher.\\n  Earlier versions defined only the individual component variables.\\n",
        "variable"
    ],
    "CMAKE_VISIBILITY_INLINES_HIDDEN": [
        "CMAKE_VISIBILITY_INLINES_HIDDEN\\n-------------------------------\\n\\nDefault value for the ``VISIBILITY_INLINES_HIDDEN`` target\\nproperty when a target is created.\\n",
        "variable"
    ],
    "CMAKE_VS_DEVENV_COMMAND": [
        "CMAKE_VS_DEVENV_COMMAND\\n-----------------------\\n\\nThe generators for ``Visual Studio 9 2008`` and above set this\\nvariable to the ``devenv.com`` command installed with the corresponding\\nVisual Studio version.  Note that this variable may be empty on\\nVisual Studio Express editions because they do not provide this tool.\\n\\nThis variable is not defined by other generators even if ``devenv.com``\\nis installed on the computer.\\n\\nThe ``CMAKE_VS_MSBUILD_COMMAND`` is also provided for\\n``Visual Studio 10 2010`` and above.\\nSee also the ``CMAKE_MAKE_PROGRAM`` variable.\\n",
        "variable"
    ],
    "CMAKE_VS_GLOBALS": [
        "CMAKE_VS_GLOBALS\\n----------------\\n\\nList of ``Key=Value`` records to be set per target as target properties\\n``VS_GLOBAL_<variable>`` with ``variable=Key`` and value ``Value``.\\n\\nFor example:\\n\\n set(CMAKE_VS_GLOBALS\\n   \\\"DefaultLanguage=en-US\\\"\\n   \\\"MinimumVisualStudioVersion=14.0\\\"\\n   )\\n\\nwill set properties ``VS_GLOBAL_DefaultLanguage`` to ``en-US`` and\\n``VS_GLOBAL_MinimumVisualStudioVersion`` to ``14.0`` for all targets\\n(except for ``INTERFACE`` libraries).\\n\\nThis variable is meant to be set by a\\n``toolchain file``.\\n",
        "variable"
    ],
    "CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD": [
        "CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD\\n-----------------------------------------\\n\\nInclude ``INSTALL`` target to default build.\\n\\nIn Visual Studio solution, by default the ``INSTALL`` target will not be part\\nof the default build. Setting this variable will enable the ``INSTALL`` target\\nto be part of the default build.\\n",
        "variable"
    ],
    "CMAKE_VS_INCLUDE_PACKAGE_TO_DEFAULT_BUILD": [
        "CMAKE_VS_INCLUDE_PACKAGE_TO_DEFAULT_BUILD\\n-----------------------------------------\\n\\nInclude ``PACKAGE`` target to default build.\\n\\nIn Visual Studio solution, by default the ``PACKAGE`` target will not be part\\nof the default build. Setting this variable will enable the ``PACKAGE`` target\\nto be part of the default build.\\n",
        "variable"
    ],
    "CMAKE_VS_INTEL_Fortran_PROJECT_VERSION": [
        "CMAKE_VS_INTEL_Fortran_PROJECT_VERSION\\n--------------------------------------\\n\\nWhen generating for ``Visual Studio 9 2008`` or greater with the Intel\\nFortran plugin installed, this specifies the ``.vfproj`` project file format\\nversion.  This is intended for internal use by CMake and should not be\\nused by project code.\\n",
        "variable"
    ],
    "CMAKE_VS_MSBUILD_COMMAND": [
        "CMAKE_VS_MSBUILD_COMMAND\\n------------------------\\n\\nThe generators for ``Visual Studio 10 2010`` and above set this\\nvariable to the ``MSBuild.exe`` command installed with the corresponding\\nVisual Studio version.\\n\\nThis variable is not defined by other generators even if ``MSBuild.exe``\\nis installed on the computer.\\n\\nThe ``CMAKE_VS_DEVENV_COMMAND`` is also provided for the\\nnon-Express editions of Visual Studio.\\nSee also the ``CMAKE_MAKE_PROGRAM`` variable.\\n",
        "variable"
    ],
    "CMAKE_VS_NsightTegra_VERSION": [
        "CMAKE_VS_NsightTegra_VERSION\\n----------------------------\\n\\nWhen using a Visual Studio generator with the\\n``CMAKE_SYSTEM_NAME`` variable set to ``Android``,\\nthis variable contains the version number of the\\ninstalled NVIDIA Nsight Tegra Visual Studio Edition.\\n",
        "variable"
    ],
    "CMAKE_VS_PLATFORM_NAME": [
        "CMAKE_VS_PLATFORM_NAME\\n----------------------\\n\\nVisual Studio target platform name.\\n\\nVS 8 and above allow project files to specify a target platform.\\nCMake provides the name of the chosen platform in this variable.\\nSee the ``CMAKE_GENERATOR_PLATFORM`` variable for details.\\n",
        "variable"
    ],
    "CMAKE_VS_PLATFORM_TOOLSET": [
        "CMAKE_VS_PLATFORM_TOOLSET\\n-------------------------\\n\\nVisual Studio Platform Toolset name.\\n\\nVS 10 and above use MSBuild under the hood and support multiple\\ncompiler toolchains.  CMake may specify a toolset explicitly, such as\\n``v110`` for VS 11 or ``Windows7.1SDK`` for 64-bit support in VS 10\\nExpress.  CMake provides the name of the chosen toolset in this\\nvariable.\\n\\nSee the ``CMAKE_GENERATOR_TOOLSET`` variable for details.\\n",
        "variable"
    ],
    "CMAKE_VS_PLATFORM_TOOLSET_CUDA": [
        "CMAKE_VS_PLATFORM_TOOLSET_CUDA\\n------------------------------\\n\\nNVIDIA CUDA Toolkit version whose Visual Studio toolset to use.\\n\\nThe :ref:`Visual Studio Generators` for VS 2010 and above support using\\na CUDA toolset provided by a CUDA Toolkit.  The toolset version number\\nmay be specified by a field in ``CMAKE_GENERATOR_TOOLSET`` of\\nthe form ``cuda=8.0``.  If none is specified CMake will choose a default\\nversion.  CMake provides the selected CUDA toolset version in this variable.\\nThe value may be empty if no CUDA Toolkit with Visual Studio integration\\nis installed.\\n",
        "variable"
    ],
    "CMAKE_VS_PLATFORM_TOOLSET_HOST_ARCHITECTURE": [
        "CMAKE_VS_PLATFORM_TOOLSET_HOST_ARCHITECTURE\\n-------------------------------------------\\n\\nVisual Studio preferred tool architecture.\\n\\nThe :ref:`Visual Studio Generators` for VS 2013 and above support optional\\nselection of a 64-bit toolchain on 64-bit hosts by specifying a ``host=x64``\\nvalue in the ``CMAKE_GENERATOR_TOOLSET`` option.  CMake provides\\nthe selected toolchain architecture preference in this variable (either\\n``x64`` or empty).\\n",
        "variable"
    ],
    "CMAKE_VS_PLATFORM_TOOLSET_VERSION": [
        "CMAKE_VS_PLATFORM_TOOLSET_VERSION\\n---------------------------------\\n\\nVisual Studio Platform Toolset version.\\n\\nThe :ref:`Visual Studio Generators` for VS 2017 and above allow to\\nselect minor versions of the same toolset. The toolset version number\\nmay be specified by a field in ``CMAKE_GENERATOR_TOOLSET`` of\\nthe form ``version=14.11``. If none is specified CMake will choose a default\\ntoolset. The value may be empty if no minor version was selected and the\\ndefault is used.\\n",
        "variable"
    ],
    "CMAKE_VS_SDK_EXCLUDE_DIRECTORIES": [
        "CMAKE_VS_SDK_EXCLUDE_DIRECTORIES\\n--------------------------------\\n\\nThis variable allows to override Visual Studio default Exclude Directories.\\n",
        "variable"
    ],
    "CMAKE_VS_SDK_EXECUTABLE_DIRECTORIES": [
        "CMAKE_VS_SDK_EXECUTABLE_DIRECTORIES\\n-----------------------------------\\n\\nThis variable allows to override Visual Studio default Executable Directories.\\n",
        "variable"
    ],
    "CMAKE_VS_SDK_INCLUDE_DIRECTORIES": [
        "CMAKE_VS_SDK_INCLUDE_DIRECTORIES\\n--------------------------------\\n\\nThis variable allows to override Visual Studio default Include Directories.\\n",
        "variable"
    ],
    "CMAKE_VS_SDK_LIBRARY_DIRECTORIES": [
        "CMAKE_VS_SDK_LIBRARY_DIRECTORIES\\n--------------------------------\\n\\nThis variable allows to override Visual Studio default Library Directories.\\n",
        "variable"
    ],
    "CMAKE_VS_SDK_LIBRARY_WINRT_DIRECTORIES": [
        "CMAKE_VS_SDK_LIBRARY_WINRT_DIRECTORIES\\n--------------------------------------\\n\\nThis variable allows to override Visual Studio default Library WinRT\\nDirectories.\\n",
        "variable"
    ],
    "CMAKE_VS_SDK_REFERENCE_DIRECTORIES": [
        "CMAKE_VS_SDK_REFERENCE_DIRECTORIES\\n----------------------------------\\n\\nThis variable allows to override Visual Studio default Reference Directories.\\n",
        "variable"
    ],
    "CMAKE_VS_SDK_SOURCE_DIRECTORIES": [
        "CMAKE_VS_SDK_SOURCE_DIRECTORIES\\n-------------------------------\\n\\nThis variable allows to override Visual Studio default Source Directories.\\n",
        "variable"
    ],
    "CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION": [
        "CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION\\n----------------------------------------\\n\\nVisual Studio Windows Target Platform Version.\\n\\nWhen targeting Windows 10 and above Visual Studio 2015 and above support\\nspecification of a target Windows version to select a corresponding SDK.\\nThe ``CMAKE_SYSTEM_VERSION`` variable may be set to specify a\\nversion.  Otherwise CMake computes a default version based on the Windows\\nSDK versions available.  The chosen Windows target version number is provided\\nin ``CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION``.  If no Windows 10 SDK\\nis available this value will be empty.\\n\\nOne may set a ``CMAKE_WINDOWS_KITS_10_DIR`` *environment variable*\\nto an absolute path to tell CMake to look for Windows 10 SDKs in\\na custom location.  The specified directory is expected to contain\\n``Include/10.0.*`` directories.\\n",
        "variable"
    ],
    "CMAKE_VS_WINRT_BY_DEFAULT": [
        "CMAKE_VS_WINRT_BY_DEFAULT\\n-------------------------\\n\\nTell :ref:`Visual Studio Generators` for VS 2010 and above that the\\ntarget platform compiles as WinRT by default (compiles with ``/ZW``).\\n\\nThis variable is meant to be set by a\\n``toolchain file`` for such platforms.\\n",
        "variable"
    ],
    "CMAKE_WARN_DEPRECATED": [
        "CMAKE_WARN_DEPRECATED\\n---------------------\\n\\nWhether to issue warnings for deprecated functionality.\\n\\nIf not ``FALSE``, use of deprecated functionality will issue warnings.\\nIf this variable is not set, CMake behaves as if it were set to ``TRUE``.\\n\\nWhen running ``cmake(1)``, this option can be enabled with the\\n``-Wdeprecated`` option, or disabled with the ``-Wno-deprecated`` option.\\n",
        "variable"
    ],
    "CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION": [
        "CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION\\n------------------------------------------\\n\\nAsk ``cmake_install.cmake`` script to warn each time a file with absolute\\n``INSTALL DESTINATION`` is encountered.\\n\\nThis variable is used by CMake-generated ``cmake_install.cmake`` scripts.\\nIf one sets this variable to ``ON`` while running the script, it may get\\nwarning messages from the script.\\n",
        "variable"
    ],
    "CMAKE_WIN32_EXECUTABLE": [
        "CMAKE_WIN32_EXECUTABLE\\n----------------------\\n\\nDefault value for ``WIN32_EXECUTABLE`` of targets.\\n\\nThis variable is used to initialize the ``WIN32_EXECUTABLE`` property\\non all the targets.  See that target property for additional information.\\n",
        "variable"
    ],
    "CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS": [
        "CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS\\n--------------------------------\\n\\nDefault value for ``WINDOWS_EXPORT_ALL_SYMBOLS`` target property.\\nThis variable is used to initialize the property on each target as it is\\ncreated.\\n",
        "variable"
    ],
    "CMAKE_XCODE_ATTRIBUTE_<an-attribute>": [
        "CMAKE_XCODE_ATTRIBUTE_<an-attribute>\\n------------------------------------\\n\\nSet Xcode target attributes directly.\\n\\nTell the ``Xcode`` generator to set '<an-attribute>' to a given value\\nin the generated Xcode project.  Ignored on other generators.\\n\\nSee the ``XCODE_ATTRIBUTE_<an-attribute>`` target property\\nto set attributes on a specific target.\\n\\nContents of ``CMAKE_XCODE_ATTRIBUTE_<an-attribute>`` may use\\n\\\"generator expressions\\\" with the syntax ``$<...>``.  See the\\n``cmake-generator-expressions(7)`` manual for available\\nexpressions.  See the ``cmake-buildsystem(7)`` manual\\nfor more on defining buildsystem properties.\\n",
        "variable"
    ],
    "CMAKE_XCODE_GENERATE_SCHEME": [
        "CMAKE_XCODE_GENERATE_SCHEME\\n---------------------------\\n\\nIf enabled, the Xcode generator will generate schema files. Those are\\nare useful to invoke analyze, archive, build-for-testing and test\\nactions from the command line.\\n\\n.. note::\\n\\n  The Xcode Schema Generator is still experimental and subject to\\n  change.\\n\\nThe following target properties overwrite the default of the\\ncorresponding settings on the \\\"Diagnostic\\\" tab for each schema file.\\nEach of those is initialized by the respective ``CMAKE_`` variable\\nat target creation time.\\n\\n- ``XCODE_SCHEME_ADDRESS_SANITIZER``\\n- ``XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN``\\n- ``XCODE_SCHEME_THREAD_SANITIZER``\\n- ``XCODE_SCHEME_THREAD_SANITIZER_STOP``\\n- ``XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER``\\n- ``XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP``\\n- ``XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER``\\n- ``XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP``\\n- ``XCODE_SCHEME_MALLOC_SCRIBBLE``\\n- ``XCODE_SCHEME_MALLOC_GUARD_EDGES``\\n- ``XCODE_SCHEME_GUARD_MALLOC``\\n- ``XCODE_SCHEME_ZOMBIE_OBJECTS``\\n- ``XCODE_SCHEME_MALLOC_STACK``\\n- ``XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE``\\n- ``XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS``\\n\\nThe following target properties will be applied on the\\n\\\"Info\\\" and \\\"Arguments\\\" tab:\\n\\n- ``XCODE_SCHEME_EXECUTABLE``\\n- ``XCODE_SCHEME_ARGUMENTS``\\n- ``XCODE_SCHEME_ENVIRONMENT``\\n",
        "variable"
    ],
    "CMAKE_XCODE_GENERATE_TOP_LEVEL_PROJECT_ONLY": [
        "CMAKE_XCODE_GENERATE_TOP_LEVEL_PROJECT_ONLY\\n-------------------------------------------\\n\\nIf enabled, the ``Xcode`` generator will generate only a\\nsingle Xcode project file for the topmost ``project()`` command\\ninstead of generating one for every ``project()`` command.\\n\\nThis could be useful to speed up the CMake generation step for\\nlarge projects and to work-around a bug in the ``ZERO_CHECK`` logic.\\n",
        "variable"
    ],
    "CMAKE_XCODE_PLATFORM_TOOLSET": [
        "CMAKE_XCODE_PLATFORM_TOOLSET\\n----------------------------\\n\\nXcode compiler selection.\\n\\n``Xcode`` supports selection of a compiler from one of the installed\\ntoolsets.  CMake provides the name of the chosen toolset in this\\nvariable, if any is explicitly selected (e.g.  via the ``cmake(1)``\\n``-T`` option).\\n",
        "variable"
    ],
    "CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER": [
        "CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER\\n------------------------------------\\n\\nWhether to enable ``Address Sanitizer`` in the Diagnostics\\nsection of the generated Xcode scheme.\\n\\nThis variable initializes the\\n``XCODE_SCHEME_ADDRESS_SANITIZER``\\nproperty on all targets.\\n\\nPlease refer to the ``CMAKE_XCODE_GENERATE_SCHEME`` variable\\ndocumentation to see all Xcode schema related properties.\\n",
        "variable"
    ],
    "CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN": [
        "CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN\\n-----------------------------------------------------\\n\\nWhether to enable ``Detect use of stack after return``\\nin the Diagnostics section of the generated Xcode scheme.\\n\\nThis variable initializes the\\n``XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN``\\nproperty on all targets.\\n\\nPlease refer to the ``CMAKE_XCODE_GENERATE_SCHEME`` variable\\ndocumentation to see all Xcode schema related properties.\\n",
        "variable"
    ],
    "CMAKE_XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER": [
        "CMAKE_XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER\\n----------------------------------------------\\n\\nWhether to disable the ``Main Thread Checker``\\nin the Diagnostics section of the generated Xcode scheme.\\n\\nThis variable initializes the\\n``XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER``\\nproperty on all targets.\\n\\nPlease refer to the ``CMAKE_XCODE_GENERATE_SCHEME`` variable\\ndocumentation to see all Xcode schema related properties.\\n",
        "variable"
    ],
    "CMAKE_XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS": [
        "CMAKE_XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS\\n----------------------------------------\\n\\nWhether to enable ``Dynamic Library Loads``\\nin the Diagnostics section of the generated Xcode scheme.\\n\\nThis variable initializes the\\n``XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS``\\nproperty on all targets.\\n\\nPlease refer to the ``CMAKE_XCODE_GENERATE_SCHEME`` variable\\ndocumentation to see all Xcode schema related properties.\\n",
        "variable"
    ],
    "CMAKE_XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE": [
        "CMAKE_XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE\\n-------------------------------------------\\n\\nWhether to enable ``Dynamic Linker API usage``\\nin the Diagnostics section of the generated Xcode scheme.\\n\\nThis variable initializes the\\n``XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE``\\nproperty on all targets.\\n\\nPlease refer to the ``CMAKE_XCODE_GENERATE_SCHEME`` variable\\ndocumentation to see all Xcode schema related properties.\\n",
        "variable"
    ],
    "CMAKE_XCODE_SCHEME_GUARD_MALLOC": [
        "CMAKE_XCODE_SCHEME_GUARD_MALLOC\\n-------------------------------\\n\\nWhether to enable ``Guard Malloc``\\nin the Diagnostics section of the generated Xcode scheme.\\n\\nThis variable initializes the\\n``XCODE_SCHEME_GUARD_MALLOC``\\nproperty on all targets.\\n\\nPlease refer to the ``CMAKE_XCODE_GENERATE_SCHEME`` variable\\ndocumentation to see all Xcode schema related properties.\\n",
        "variable"
    ],
    "CMAKE_XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP": [
        "CMAKE_XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP\\n-------------------------------------------\\n\\nWhether to enable the ``Main Thread Checker`` option\\n``Pause on issues``\\nin the Diagnostics section of the generated Xcode scheme.\\n\\nThis variable initializes the\\n``XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP``\\nproperty on all targets.\\n\\nPlease refer to the ``CMAKE_XCODE_GENERATE_SCHEME`` variable\\ndocumentation to see all Xcode schema related properties.\\n",
        "variable"
    ],
    "CMAKE_XCODE_SCHEME_MALLOC_GUARD_EDGES": [
        "CMAKE_XCODE_SCHEME_MALLOC_GUARD_EDGES\\n-------------------------------------\\n\\nWhether to enable ``Malloc Guard Edges``\\nin the Diagnostics section of the generated Xcode scheme.\\n\\nThis variable initializes the\\n``XCODE_SCHEME_MALLOC_GUARD_EDGES``\\nproperty on all targets.\\n\\nPlease refer to the ``CMAKE_XCODE_GENERATE_SCHEME`` variable\\ndocumentation to see all Xcode schema related properties.\\n",
        "variable"
    ],
    "CMAKE_XCODE_SCHEME_MALLOC_SCRIBBLE": [
        "CMAKE_XCODE_SCHEME_MALLOC_SCRIBBLE\\n----------------------------------\\n\\nWhether to enable ``Malloc Scribble``\\nin the Diagnostics section of the generated Xcode scheme.\\n\\nThis variable initializes the\\n``XCODE_SCHEME_MALLOC_SCRIBBLE``\\nproperty on all targets.\\n\\nPlease refer to the ``CMAKE_XCODE_GENERATE_SCHEME`` variable\\ndocumentation to see all Xcode schema related properties.\\n",
        "variable"
    ],
    "CMAKE_XCODE_SCHEME_MALLOC_STACK": [
        "CMAKE_XCODE_SCHEME_MALLOC_STACK\\n-------------------------------\\n\\nWhether to enable ``Malloc Stack`` in the Diagnostics\\nsection of the generated Xcode scheme.\\n\\nThis variable initializes the\\n``XCODE_SCHEME_MALLOC_STACK``\\nproperty on all targets.\\n\\nPlease refer to the ``CMAKE_XCODE_GENERATE_SCHEME`` variable\\ndocumentation to see all Xcode schema related properties.\\n",
        "variable"
    ],
    "CMAKE_XCODE_SCHEME_THREAD_SANITIZER": [
        "CMAKE_XCODE_SCHEME_THREAD_SANITIZER\\n-----------------------------------\\n\\nWhether to enable ``Thread Sanitizer`` in the Diagnostics\\nsection of the generated Xcode scheme.\\n\\nThis variable initializes the\\n``XCODE_SCHEME_THREAD_SANITIZER``\\nproperty on all targets.\\n\\nPlease refer to the ``CMAKE_XCODE_GENERATE_SCHEME`` variable\\ndocumentation to see all Xcode schema related properties.\\n",
        "variable"
    ],
    "CMAKE_XCODE_SCHEME_THREAD_SANITIZER_STOP": [
        "CMAKE_XCODE_SCHEME_THREAD_SANITIZER_STOP\\n----------------------------------------\\n\\nWhether to enable ``Thread Sanitizer - Pause on issues``\\nin the Diagnostics section of the generated Xcode scheme.\\n\\nThis variable initializes the\\n``XCODE_SCHEME_THREAD_SANITIZER_STOP``\\nproperty on all targets.\\n\\nPlease refer to the ``CMAKE_XCODE_GENERATE_SCHEME`` variable\\ndocumentation to see all Xcode schema related properties.\\n",
        "variable"
    ],
    "CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER": [
        "CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER\\n------------------------------------------------\\n\\nWhether to enable ``Undefined Behavior Sanitizer``\\nin the Diagnostics section of the generated Xcode scheme.\\n\\nThis variable initializes the\\n``XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER``\\nproperty on all targets.\\n\\nPlease refer to the ``CMAKE_XCODE_GENERATE_SCHEME`` variable\\ndocumentation to see all Xcode schema related properties.\\n",
        "variable"
    ],
    "CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP": [
        "CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP\\n-----------------------------------------------------\\n\\nWhether to enable ``Undefined Behavior Sanitizer`` option\\n``Pause on issues``\\nin the Diagnostics section of the generated Xcode scheme.\\n\\nThis variable initializes the\\n``XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP``\\nproperty on all targets.\\n\\nPlease refer to the ``CMAKE_XCODE_GENERATE_SCHEME`` variable\\ndocumentation to see all Xcode schema related properties.\\n",
        "variable"
    ],
    "CMAKE_XCODE_SCHEME_ZOMBIE_OBJECTS": [
        "CMAKE_XCODE_SCHEME_ZOMBIE_OBJECTS\\n---------------------------------\\n\\nWhether to enable ``Zombie Objects``\\nin the Diagnostics section of the generated Xcode scheme.\\n\\nThis variable initializes the\\n``XCODE_SCHEME_ZOMBIE_OBJECTS``\\nproperty on all targets.\\n\\nPlease refer to the ``CMAKE_XCODE_GENERATE_SCHEME`` variable\\ndocumentation to see all Xcode schema related properties.\\n",
        "variable"
    ],
    "CPACK_ABSOLUTE_DESTINATION_FILES": [
        "CPACK_ABSOLUTE_DESTINATION_FILES\\n--------------------------------\\n\\nList of files which have been installed using an ``ABSOLUTE DESTINATION`` path.\\n\\nThis variable is a Read-Only variable which is set internally by CPack\\nduring installation and before packaging using\\n``CMAKE_ABSOLUTE_DESTINATION_FILES`` defined in ``cmake_install.cmake``\\nscripts.  The value can be used within CPack project configuration\\nfile and/or ``CPack<GEN>.cmake`` file of ``<GEN>`` generator.\\n",
        "variable"
    ],
    "CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY": [
        "CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY\\n------------------------------------------\\n\\nBoolean toggle to include/exclude top level directory (component case).\\n\\nSimilar usage as ``CPACK_INCLUDE_TOPLEVEL_DIRECTORY`` but for the\\ncomponent case.  See ``CPACK_INCLUDE_TOPLEVEL_DIRECTORY``\\ndocumentation for the detail.\\n",
        "variable"
    ],
    "CPACK_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION": [
        "CPACK_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION\\n-------------------------------------------\\n\\nAsk CPack to error out as soon as a file with absolute ``INSTALL DESTINATION``\\nis encountered.\\n\\nThe fatal error is emitted before the installation of the offending\\nfile takes place.  Some CPack generators, like NSIS, enforce this\\ninternally.  This variable triggers the definition\\nof ``CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION`` when CPack\\nruns.\\n",
        "variable"
    ],
    "CPACK_INCLUDE_TOPLEVEL_DIRECTORY": [
        "CPACK_INCLUDE_TOPLEVEL_DIRECTORY\\n--------------------------------\\n\\nBoolean toggle to include/exclude top level directory.\\n\\nWhen preparing a package CPack installs the item under the so-called\\ntop level directory.  The purpose of is to include (set to ``1`` or ``ON`` or\\n``TRUE``) the top level directory in the package or not (set to ``0`` or\\n``OFF`` or ``FALSE``).\\n\\nEach CPack generator has a built-in default value for this variable.\\nE.g.  Archive generators (ZIP, TGZ, ...) includes the top level\\nwhereas RPM or DEB don't.  The user may override the default value by\\nsetting this variable.\\n\\nThere is a similar variable\\n``CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY`` which may be used\\nto override the behavior for the component packaging\\ncase which may have different default value for historical (now\\nbackward compatibility) reason.\\n",
        "variable"
    ],
    "CPACK_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS": [
        "CPACK_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS\\n-------------------------------------------\\n\\nDefault permissions for implicitly created directories during packaging.\\n\\nThis variable serves the same purpose during packaging as the\\n``CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS`` variable\\nserves during installation (e.g. ``make install``).\\n\\nIf `include(CPack)` is used then by default this variable is set to the content\\nof ``CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS``.\\n",
        "variable"
    ],
    "CPACK_INSTALL_SCRIPT": [
        "CPACK_INSTALL_SCRIPT\\n--------------------\\n\\nExtra CMake script provided by the user.\\n\\nIf set this CMake script will be executed by CPack during its local\\n[CPack-private] installation which is done right before packaging the\\nfiles.  The script is not called by e.g.: ``make install``.\\n",
        "variable"
    ],
    "CPACK_PACKAGING_INSTALL_PREFIX": [
        "CPACK_PACKAGING_INSTALL_PREFIX\\n------------------------------\\n\\nThe prefix used in the built package.\\n\\nEach CPack generator has a default value (like ``/usr``).  This default\\nvalue may be overwritten from the ``CMakeLists.txt`` or the ``cpack(1)``\\ncommand line by setting an alternative value.  Example:\\n\\n::\\n\\n set(CPACK_PACKAGING_INSTALL_PREFIX \\\"/opt\\\")\\n\\nThis is not the same purpose as ``CMAKE_INSTALL_PREFIX`` which is used\\nwhen installing from the build tree without building a package.\\n",
        "variable"
    ],
    "CPACK_SET_DESTDIR": [
        "CPACK_SET_DESTDIR\\n-----------------\\n\\nBoolean toggle to make CPack use ``DESTDIR`` mechanism when packaging.\\n\\n``DESTDIR`` means DESTination DIRectory.  It is commonly used by makefile\\nusers in order to install software at non-default location.  It is a\\nbasic relocation mechanism that should not be used on Windows (see\\n``CMAKE_INSTALL_PREFIX`` documentation).  It is usually invoked like\\nthis:\\n\\n::\\n\\n make DESTDIR=/home/john install\\n\\nwhich will install the concerned software using the installation\\nprefix, e.g. ``/usr/local`` prepended with the ``DESTDIR`` value which\\nfinally gives ``/home/john/usr/local``.  When preparing a package, CPack\\nfirst installs the items to be packaged in a local (to the build tree)\\ndirectory by using the same ``DESTDIR`` mechanism.  Nevertheless, if\\n``CPACK_SET_DESTDIR`` is set then CPack will set ``DESTDIR`` before doing the\\nlocal install.  The most noticeable difference is that without\\n``CPACK_SET_DESTDIR``, CPack uses ``CPACK_PACKAGING_INSTALL_PREFIX``\\nas a prefix whereas with ``CPACK_SET_DESTDIR`` set, CPack will use\\n``CMAKE_INSTALL_PREFIX`` as a prefix.\\n\\nManually setting ``CPACK_SET_DESTDIR`` may help (or simply be necessary)\\nif some install rules uses absolute ``DESTINATION`` (see CMake\\n``install()`` command).  However, starting with CPack/CMake 2.8.3 RPM\\nand DEB installers tries to handle ``DESTDIR`` automatically so that it is\\nseldom necessary for the user to set it.\\n",
        "variable"
    ],
    "CPACK_WARN_ON_ABSOLUTE_INSTALL_DESTINATION": [
        "CPACK_WARN_ON_ABSOLUTE_INSTALL_DESTINATION\\n------------------------------------------\\n\\nAsk CPack to warn each time a file with absolute ``INSTALL DESTINATION`` is\\nencountered.\\n\\nThis variable triggers the definition of\\n``CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION`` when CPack runs\\n``cmake_install.cmake`` scripts.\\n",
        "variable"
    ],
    "CTEST_BINARY_DIRECTORY": [
        "CTEST_BINARY_DIRECTORY\\n----------------------\\n\\nSpecify the CTest ``BuildDirectory`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_BUILD_COMMAND": [
        "CTEST_BUILD_COMMAND\\n-------------------\\n\\nSpecify the CTest ``MakeCommand`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_BUILD_NAME": [
        "CTEST_BUILD_NAME\\n----------------\\n\\nSpecify the CTest ``BuildName`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_BZR_COMMAND": [
        "CTEST_BZR_COMMAND\\n-----------------\\n\\nSpecify the CTest ``BZRCommand`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_BZR_UPDATE_OPTIONS": [
        "CTEST_BZR_UPDATE_OPTIONS\\n------------------------\\n\\nSpecify the CTest ``BZRUpdateOptions`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_CHANGE_ID": [
        "CTEST_CHANGE_ID\\n---------------\\n\\nSpecify the CTest ``ChangeId`` setting\\nin a ``ctest(1)`` dashboard client script.\\n\\nThis setting allows CTest to pass arbitrary information about this\\nbuild up to CDash.  One use of this feature is to allow CDash to\\npost comments on your pull request if anything goes wrong with your build.\\n",
        "variable"
    ],
    "CTEST_CHECKOUT_COMMAND": [
        "CTEST_CHECKOUT_COMMAND\\n----------------------\\n\\nTell the ``ctest_start()`` command how to checkout or initialize\\nthe source directory in a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_CONFIGURATION_TYPE": [
        "CTEST_CONFIGURATION_TYPE\\n------------------------\\n\\nSpecify the CTest ``DefaultCTestConfigurationType`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_CONFIGURE_COMMAND": [
        "CTEST_CONFIGURE_COMMAND\\n-----------------------\\n\\nSpecify the CTest ``ConfigureCommand`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_COVERAGE_COMMAND": [
        "CTEST_COVERAGE_COMMAND\\n----------------------\\n\\nSpecify the CTest ``CoverageCommand`` setting\\nin a ``ctest(1)`` dashboard client script.\\n\\nCobertura\\n'''''''''\\n\\nUsing Cobertura as the coverage generation within your multi-module\\nJava project can generate a series of XML files.\\n\\nThe Cobertura Coverage parser expects to read the coverage data from a\\nsingle XML file which contains the coverage data for all modules.\\nCobertura has a program with the ability to merge given ``cobertura.ser`` files\\nand then another program to generate a combined XML file from the previous\\nmerged file.  For command line testing, this can be done by hand prior to\\nCTest looking for the coverage files. For script builds,\\nset the ``CTEST_COVERAGE_COMMAND`` variable to point to a file which will\\nperform these same steps, such as a ``.sh`` or ``.bat`` file.\\n\\n set(CTEST_COVERAGE_COMMAND .../run-coverage-and-consolidate.sh)\\n\\nwhere the ``run-coverage-and-consolidate.sh`` script is perhaps created by\\nthe ``configure_file()`` command and might contain the following code:\\n\\n #!/usr/bin/env bash\\n CoberturaFiles=\\\"$(find \\\"/path/to/source\\\" -name \\\"cobertura.ser\\\")\\\"\\n SourceDirs=\\\"$(find \\\"/path/to/source\\\" -name \\\"java\\\" -type d)\\\"\\n cobertura-merge --datafile coberturamerge.ser $CoberturaFiles\\n cobertura-report --datafile coberturamerge.ser --destination . \\\\\\n                  --format xml $SourceDirs\\n\\nThe script uses ``find`` to capture the paths to all of the ``cobertura.ser``\\nfiles found below the project's source directory.  It keeps the list of files\\nand supplies it as an argument to the ``cobertura-merge`` program. The\\n``--datafile`` argument signifies where the result of the merge will be kept.\\n\\nThe combined ``coberturamerge.ser`` file is then used to generate the XML report\\nusing the ``cobertura-report`` program.  The call to the cobertura-report\\nprogram requires some named arguments.\\n\\n``--datafila``\\n  path to the merged ``.ser`` file\\n\\n``--destination``\\n  path to put the output files(s)\\n\\n``--format``\\n  file format to write output in: xml or html\\n\\nThe rest of the supplied arguments consist of the full paths to the\\n``/src/main/java`` directories of each module within the source tree. These\\ndirectories are needed and should not be forgotten.\\n\\n",
        "variable"
    ],
    "CTEST_COVERAGE_EXTRA_FLAGS": [
        "CTEST_COVERAGE_EXTRA_FLAGS\\n--------------------------\\n\\nSpecify the CTest ``CoverageExtraFlags`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_CURL_OPTIONS": [
        "CTEST_CURL_OPTIONS\\n------------------\\n\\nSpecify the CTest ``CurlOptions`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_CUSTOM_COVERAGE_EXCLUDE": [
        "CTEST_CUSTOM_COVERAGE_EXCLUDE\\n-----------------------------\\n\\nA list of regular expressions which will be used to exclude files by their\\npath from coverage output by the ``ctest_coverage()`` command.\\n\\nIt is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``\\nfile. See ``ctest_read_custom_files()`` documentation.\\n",
        "variable"
    ],
    "CTEST_CUSTOM_ERROR_EXCEPTION": [
        "CTEST_CUSTOM_ERROR_EXCEPTION\\n----------------------------\\n\\nA list of regular expressions which will be used to exclude when detecting\\nerror messages in build outputs by the ``ctest_test()`` command.\\n\\nIt is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``\\nfile. See ``ctest_read_custom_files()`` documentation.\\n",
        "variable"
    ],
    "CTEST_CUSTOM_ERROR_MATCH": [
        "CTEST_CUSTOM_ERROR_MATCH\\n------------------------\\n\\nA list of regular expressions which will be used to detect error messages in\\nbuild outputs by the ``ctest_test()`` command.\\n\\nIt is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``\\nfile. See ``ctest_read_custom_files()`` documentation.\\n",
        "variable"
    ],
    "CTEST_CUSTOM_ERROR_POST_CONTEXT": [
        "CTEST_CUSTOM_ERROR_POST_CONTEXT\\n-------------------------------\\n\\nThe number of lines to include as context which follow an error message by the\\n``ctest_test()`` command. The default is 10.\\n\\nIt is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``\\nfile. See ``ctest_read_custom_files()`` documentation.\\n",
        "variable"
    ],
    "CTEST_CUSTOM_ERROR_PRE_CONTEXT": [
        "CTEST_CUSTOM_ERROR_PRE_CONTEXT\\n------------------------------\\n\\nThe number of lines to include as context which precede an error message by\\nthe ``ctest_test()`` command. The default is 10.\\n\\nIt is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``\\nfile. See ``ctest_read_custom_files()`` documentation.\\n",
        "variable"
    ],
    "CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE": [
        "CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE\\n--------------------------------------------\\n\\nWhen saving a failing test's output, this is the maximum size, in bytes, that\\nwill be collected by the ``ctest_test()`` command. Defaults to 307200\\n(300 KiB).\\n\\nIt is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``\\nfile. See ``ctest_read_custom_files()`` documentation.\\n",
        "variable"
    ],
    "CTEST_CUSTOM_MAXIMUM_NUMBER_OF_ERRORS": [
        "CTEST_CUSTOM_MAXIMUM_NUMBER_OF_ERRORS\\n-------------------------------------\\n\\nThe maximum number of errors in a single build step which will be detected.\\nAfter this, the ``ctest_test()`` command will truncate the output.\\nDefaults to 50.\\n\\nIt is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``\\nfile. See ``ctest_read_custom_files()`` documentation.\\n",
        "variable"
    ],
    "CTEST_CUSTOM_MAXIMUM_NUMBER_OF_WARNINGS": [
        "CTEST_CUSTOM_MAXIMUM_NUMBER_OF_WARNINGS\\n---------------------------------------\\n\\nThe maximum number of warnings in a single build step which will be detected.\\nAfter this, the ``ctest_test()`` command will truncate the output.\\nDefaults to 50.\\n\\nIt is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``\\nfile. See ``ctest_read_custom_files()`` documentation.\\n",
        "variable"
    ],
    "CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE": [
        "CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE\\n--------------------------------------------\\n\\nWhen saving a passing test's output, this is the maximum size, in bytes, that\\nwill be collected by the ``ctest_test()`` command. Defaults to 1024\\n(1 KiB).\\n\\nIt is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``\\nfile. See ``ctest_read_custom_files()`` documentation.\\n",
        "variable"
    ],
    "CTEST_CUSTOM_MEMCHECK_IGNORE": [
        "CTEST_CUSTOM_MEMCHECK_IGNORE\\n----------------------------\\n\\nA list of regular expressions to use to exclude tests during the\\n``ctest_memcheck()`` command.\\n\\nIt is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``\\nfile. See ``ctest_read_custom_files()`` documentation.\\n",
        "variable"
    ],
    "CTEST_CUSTOM_POST_MEMCHECK": [
        "CTEST_CUSTOM_POST_MEMCHECK\\n--------------------------\\n\\nA list of commands to run at the end of the ``ctest_memcheck()`` command.\\n\\nIt is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``\\nfile. See ``ctest_read_custom_files()`` documentation.\\n",
        "variable"
    ],
    "CTEST_CUSTOM_POST_TEST": [
        "CTEST_CUSTOM_POST_TEST\\n----------------------\\n\\nA list of commands to run at the end of the ``ctest_test()`` command.\\n\\nIt is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``\\nfile. See ``ctest_read_custom_files()`` documentation.\\n",
        "variable"
    ],
    "CTEST_CUSTOM_PRE_MEMCHECK": [
        "CTEST_CUSTOM_PRE_MEMCHECK\\n-------------------------\\n\\nA list of commands to run at the start of the ``ctest_memcheck()``\\ncommand.\\n\\nIt is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``\\nfile. See ``ctest_read_custom_files()`` documentation.\\n",
        "variable"
    ],
    "CTEST_CUSTOM_PRE_TEST": [
        "CTEST_CUSTOM_PRE_TEST\\n----------------------\\n\\nA list of commands to run at the start of the ``ctest_test()`` command.\\n\\nIt is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``\\nfile. See ``ctest_read_custom_files()`` documentation.\\n",
        "variable"
    ],
    "CTEST_CUSTOM_TEST_IGNORE": [
        "CTEST_CUSTOM_TEST_IGNORE\\n------------------------\\n\\nA list of regular expressions to use to exclude tests during the\\n``ctest_test()`` command.\\n\\nIt is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``\\nfile. See ``ctest_read_custom_files()`` documentation.\\n",
        "variable"
    ],
    "CTEST_CUSTOM_WARNING_EXCEPTION": [
        "CTEST_CUSTOM_WARNING_EXCEPTION\\n------------------------------\\n\\nA list of regular expressions which will be used to exclude when detecting\\nwarning messages in build outputs by the ``ctest_test()`` command.\\n\\nIt is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``\\nfile. See ``ctest_read_custom_files()`` documentation.\\n",
        "variable"
    ],
    "CTEST_CUSTOM_WARNING_MATCH": [
        "CTEST_CUSTOM_WARNING_MATCH\\n--------------------------\\n\\nA list of regular expressions which will be used to detect warning messages in\\nbuild outputs by the ``ctest_test()`` command.\\n\\nIt is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``\\nfile. See ``ctest_read_custom_files()`` documentation.\\n",
        "variable"
    ],
    "CTEST_CVS_CHECKOUT": [
        "CTEST_CVS_CHECKOUT\\n------------------\\n\\nDeprecated.  Use ``CTEST_CHECKOUT_COMMAND`` instead.\\n",
        "variable"
    ],
    "CTEST_CVS_COMMAND": [
        "CTEST_CVS_COMMAND\\n-----------------\\n\\nSpecify the CTest ``CVSCommand`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_CVS_UPDATE_OPTIONS": [
        "CTEST_CVS_UPDATE_OPTIONS\\n------------------------\\n\\nSpecify the CTest ``CVSUpdateOptions`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_DROP_LOCATION": [
        "CTEST_DROP_LOCATION\\n-------------------\\n\\nSpecify the CTest ``DropLocation`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_DROP_METHOD": [
        "CTEST_DROP_METHOD\\n-----------------\\n\\nSpecify the CTest ``DropMethod`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_DROP_SITE": [
        "CTEST_DROP_SITE\\n---------------\\n\\nSpecify the CTest ``DropSite`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_DROP_SITE_CDASH": [
        "CTEST_DROP_SITE_CDASH\\n---------------------\\n\\nSpecify the CTest ``IsCDash`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_DROP_SITE_PASSWORD": [
        "CTEST_DROP_SITE_PASSWORD\\n------------------------\\n\\nSpecify the CTest ``DropSitePassword`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_DROP_SITE_USER": [
        "CTEST_DROP_SITE_USER\\n--------------------\\n\\nSpecify the CTest ``DropSiteUser`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_EXTRA_COVERAGE_GLOB": [
        "CTEST_EXTRA_COVERAGE_GLOB\\n-------------------------\\n\\nA list of regular expressions which will be used to find files which should be\\ncovered by the ``ctest_coverage()`` command.\\n\\nIt is initialized by ``ctest(1)``, but may be edited in a ``CTestCustom``\\nfile. See ``ctest_read_custom_files()`` documentation.\\n",
        "variable"
    ],
    "CTEST_GIT_COMMAND": [
        "CTEST_GIT_COMMAND\\n-----------------\\n\\nSpecify the CTest ``GITCommand`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_GIT_INIT_SUBMODULES": [
        "CTEST_GIT_INIT_SUBMODULES\\n-------------------------\\n\\nSpecify the CTest ``GITInitSubmodules`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_GIT_UPDATE_CUSTOM": [
        "CTEST_GIT_UPDATE_CUSTOM\\n-----------------------\\n\\nSpecify the CTest ``GITUpdateCustom`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_GIT_UPDATE_OPTIONS": [
        "CTEST_GIT_UPDATE_OPTIONS\\n------------------------\\n\\nSpecify the CTest ``GITUpdateOptions`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_HG_COMMAND": [
        "CTEST_HG_COMMAND\\n----------------\\n\\nSpecify the CTest ``HGCommand`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_HG_UPDATE_OPTIONS": [
        "CTEST_HG_UPDATE_OPTIONS\\n-----------------------\\n\\nSpecify the CTest ``HGUpdateOptions`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_LABELS_FOR_SUBPROJECTS": [
        "CTEST_LABELS_FOR_SUBPROJECTS\\n----------------------------\\n\\nSpecify the CTest ``LabelsForSubprojects`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_MEMORYCHECK_COMMAND": [
        "CTEST_MEMORYCHECK_COMMAND\\n-------------------------\\n\\nSpecify the CTest ``MemoryCheckCommand`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_MEMORYCHECK_COMMAND_OPTIONS": [
        "CTEST_MEMORYCHECK_COMMAND_OPTIONS\\n---------------------------------\\n\\nSpecify the CTest ``MemoryCheckCommandOptions`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_MEMORYCHECK_SANITIZER_OPTIONS": [
        "CTEST_MEMORYCHECK_SANITIZER_OPTIONS\\n-----------------------------------\\n\\nSpecify the CTest ``MemoryCheckSanitizerOptions`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_MEMORYCHECK_SUPPRESSIONS_FILE": [
        "CTEST_MEMORYCHECK_SUPPRESSIONS_FILE\\n-----------------------------------\\n\\nSpecify the CTest ``MemoryCheckSuppressionFile`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_MEMORYCHECK_TYPE": [
        "CTEST_MEMORYCHECK_TYPE\\n----------------------\\n\\nSpecify the CTest ``MemoryCheckType`` setting\\nin a ``ctest(1)`` dashboard client script.\\nValid values are ``Valgrind``, ``Purify``, ``BoundsChecker``, and\\n``ThreadSanitizer``, ``AddressSanitizer``, ``LeakSanitizer``, ``MemorySanitizer``, and\\n``UndefinedBehaviorSanitizer``.\\n",
        "variable"
    ],
    "CTEST_NIGHTLY_START_TIME": [
        "CTEST_NIGHTLY_START_TIME\\n------------------------\\n\\nSpecify the CTest ``NightlyStartTime`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_P4_CLIENT": [
        "CTEST_P4_CLIENT\\n---------------\\n\\nSpecify the CTest ``P4Client`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_P4_COMMAND": [
        "CTEST_P4_COMMAND\\n----------------\\n\\nSpecify the CTest ``P4Command`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_P4_OPTIONS": [
        "CTEST_P4_OPTIONS\\n----------------\\n\\nSpecify the CTest ``P4Options`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_P4_UPDATE_OPTIONS": [
        "CTEST_P4_UPDATE_OPTIONS\\n-----------------------\\n\\nSpecify the CTest ``P4UpdateOptions`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_RUN_CURRENT_SCRIPT": [
        "CTEST_RUN_CURRENT_SCRIPT\\n------------------------\\n\\nSetting this to 0 prevents ``ctest(1)`` from being run again when it\\nreaches the end of a script run by calling ``ctest -S``.\\n",
        "variable"
    ],
    "CTEST_SCP_COMMAND": [
        "CTEST_SCP_COMMAND\\n-----------------\\n\\nSpecify the CTest ``SCPCommand`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_SITE": [
        "CTEST_SITE\\n----------\\n\\nSpecify the CTest ``Site`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_SOURCE_DIRECTORY": [
        "CTEST_SOURCE_DIRECTORY\\n----------------------\\n\\nSpecify the CTest ``SourceDirectory`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_SVN_COMMAND": [
        "CTEST_SVN_COMMAND\\n-----------------\\n\\nSpecify the CTest ``SVNCommand`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_SVN_OPTIONS": [
        "CTEST_SVN_OPTIONS\\n-----------------\\n\\nSpecify the CTest ``SVNOptions`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_SVN_UPDATE_OPTIONS": [
        "CTEST_SVN_UPDATE_OPTIONS\\n------------------------\\n\\nSpecify the CTest ``SVNUpdateOptions`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_TEST_LOAD": [
        "CTEST_TEST_LOAD\\n---------------\\n\\nSpecify the ``TestLoad`` setting in the :ref:`CTest Test Step`\\nof a ``ctest(1)`` dashboard client script.  This sets the\\ndefault value for the ``TEST_LOAD`` option of the ``ctest_test()``\\ncommand.\\n",
        "variable"
    ],
    "CTEST_TEST_TIMEOUT": [
        "CTEST_TEST_TIMEOUT\\n------------------\\n\\nSpecify the CTest ``TimeOut`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_TRIGGER_SITE": [
        "CTEST_TRIGGER_SITE\\n------------------\\n\\nSpecify the CTest ``TriggerSite`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_UPDATE_COMMAND": [
        "CTEST_UPDATE_COMMAND\\n--------------------\\n\\nSpecify the CTest ``UpdateCommand`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_UPDATE_OPTIONS": [
        "CTEST_UPDATE_OPTIONS\\n--------------------\\n\\nSpecify the CTest ``UpdateOptions`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_UPDATE_VERSION_ONLY": [
        "CTEST_UPDATE_VERSION_ONLY\\n-------------------------\\n\\nSpecify the CTest ``UpdateVersionOnly`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CTEST_USE_LAUNCHERS": [
        "CTEST_USE_LAUNCHERS\\n-------------------\\n\\nSpecify the CTest ``UseLaunchers`` setting\\nin a ``ctest(1)`` dashboard client script.\\n",
        "variable"
    ],
    "CYGWIN": [
        "CYGWIN\\n------\\n\\n``True`` for Cygwin.\\n\\nSet to ``true`` when using Cygwin.\\n",
        "variable"
    ],
    "ENV": [
        "ENV\\n---\\n\\nRead environment variables.\\n\\nUse the syntax ``$ENV{VAR}`` to read environment variable ``VAR``.\\n\\nSee the ``set()`` command to see how to write environment variables.\\n",
        "variable"
    ],
    "EXECUTABLE_OUTPUT_PATH": [
        "EXECUTABLE_OUTPUT_PATH\\n----------------------\\n\\nOld executable location variable.\\n\\nThe target property ``RUNTIME_OUTPUT_DIRECTORY`` supercedes this\\nvariable for a target if it is set.  Executable targets are otherwise placed in\\nthis directory.\\n",
        "variable"
    ],
    "GHS-MULTI": [
        "GHS-MULTI\\n---------\\n\\nTrue when using Green Hills MULTI\\n",
        "variable"
    ],
    "LIBRARY_OUTPUT_PATH": [
        "LIBRARY_OUTPUT_PATH\\n-------------------\\n\\nOld library location variable.\\n\\nThe target properties ``ARCHIVE_OUTPUT_DIRECTORY``,\\n``LIBRARY_OUTPUT_DIRECTORY``, and ``RUNTIME_OUTPUT_DIRECTORY``\\nsupersede this variable for a target if they are set.  Library targets are\\notherwise placed in this directory.\\n",
        "variable"
    ],
    "MINGW": [
        "MINGW\\n-----\\n\\n``True`` when using MinGW\\n\\nSet to ``true`` when the compiler is some version of MinGW.\\n",
        "variable"
    ],
    "MSVC": [
        "MSVC\\n----\\n\\nSet to ``true`` when the compiler is some version of Microsoft Visual\\nC++ or another compiler simulating Visual C++.  Any compiler defining\\n``_MSC_VER`` is considered simulating Visual C++.\\n\\nSee also the ``MSVC_VERSION`` variable.\\n",
        "variable"
    ],
    "MSVC10": [
        "MSVC10\\n------\\n\\nDiscouraged.  Use the ``MSVC_VERSION`` variable instead.\\n\\n``True`` when using the Microsoft Visual Studio ``v100`` toolset\\n(``cl`` version 16) or another compiler that simulates it.\\n",
        "variable"
    ],
    "MSVC11": [
        "MSVC11\\n------\\n\\nDiscouraged.  Use the ``MSVC_VERSION`` variable instead.\\n\\n``True`` when using the Microsoft Visual Studio ``v110`` toolset\\n(``cl`` version 17) or another compiler that simulates it.\\n",
        "variable"
    ],
    "MSVC12": [
        "MSVC12\\n------\\n\\nDiscouraged.  Use the ``MSVC_VERSION`` variable instead.\\n\\n``True`` when using the Microsoft Visual Studio ``v120`` toolset\\n(``cl`` version 18) or another compiler that simulates it.\\n",
        "variable"
    ],
    "MSVC14": [
        "MSVC14\\n------\\n\\nDiscouraged.  Use the ``MSVC_VERSION`` variable instead.\\n\\n``True`` when using the Microsoft Visual Studio ``v140`` or ``v141``\\ntoolset (``cl`` version 19) or another compiler that simulates it.\\n",
        "variable"
    ],
    "MSVC60": [
        "MSVC60\\n------\\n\\nDiscouraged.  Use the ``MSVC_VERSION`` variable instead.\\n\\n``True`` when using Microsoft Visual C++ 6.0.\\n\\nSet to ``true`` when the compiler is version 6.0 of Microsoft Visual C++.\\n",
        "variable"
    ],
    "MSVC70": [
        "MSVC70\\n------\\n\\nDiscouraged.  Use the ``MSVC_VERSION`` variable instead.\\n\\n``True`` when using Microsoft Visual C++ 7.0.\\n\\nSet to ``true`` when the compiler is version 7.0 of Microsoft Visual C++.\\n",
        "variable"
    ],
    "MSVC71": [
        "MSVC71\\n------\\n\\nDiscouraged.  Use the ``MSVC_VERSION`` variable instead.\\n\\n``True`` when using Microsoft Visual C++ 7.1.\\n\\nSet to ``true`` when the compiler is version 7.1 of Microsoft Visual C++.\\n",
        "variable"
    ],
    "MSVC80": [
        "MSVC80\\n------\\n\\nDiscouraged.  Use the ``MSVC_VERSION`` variable instead.\\n\\n``True`` when using the Microsoft Visual Studio ``v80`` toolset\\n(``cl`` version 14) or another compiler that simulates it.\\n",
        "variable"
    ],
    "MSVC90": [
        "MSVC90\\n------\\n\\nDiscouraged.  Use the ``MSVC_VERSION`` variable instead.\\n\\n``True`` when using the Microsoft Visual Studio ``v90`` toolset\\n(``cl`` version 15) or another compiler that simulates it.\\n",
        "variable"
    ],
    "MSVC_IDE": [
        "MSVC_IDE\\n--------\\n\\n``True`` when using the Microsoft Visual C++ IDE.\\n\\nSet to ``true`` when the target platform is the Microsoft Visual C++ IDE, as\\nopposed to the command line compiler.\\n",
        "variable"
    ],
    "MSVC_TOOLSET_VERSION": [
        "MSVC_TOOLSET_VERSION\\n--------------------\\n\\nThe toolset version of Microsoft Visual C/C++ being used if any.\\nIf MSVC-like is being used, this variable is set based on the version\\nof the compiler as given by the ``MSVC_VERSION`` variable.\\n\\nKnown toolset version numbers are::\\n\\n 80        = VS 2005 (8.0)\\n 90        = VS 2008 (9.0)\\n 100       = VS 2010 (10.0)\\n 110       = VS 2012 (11.0)\\n 120       = VS 2013 (12.0)\\n 140       = VS 2015 (14.0)\\n 141       = VS 2017 (15.0)\\n\\nCompiler versions newer than those known to CMake will be reported\\nas the latest known toolset version.\\n\\nSee also the ``MSVC_VERSION`` variable.\\n",
        "variable"
    ],
    "MSVC_VERSION": [
        "MSVC_VERSION\\n------------\\n\\nThe version of Microsoft Visual C/C++ being used if any.\\nIf a compiler simulating Visual C++ is being used, this variable is set\\nto the toolset version simulated as given by the ``_MSC_VER``\\npreprocessor definition.\\n\\nKnown version numbers are::\\n\\n 1200      = VS  6.0\\n 1300      = VS  7.0\\n 1310      = VS  7.1\\n 1400      = VS  8.0 (v80 toolset)\\n 1500      = VS  9.0 (v90 toolset)\\n 1600      = VS 10.0 (v100 toolset)\\n 1700      = VS 11.0 (v110 toolset)\\n 1800      = VS 12.0 (v120 toolset)\\n 1900      = VS 14.0 (v140 toolset)\\n 1910-1919 = VS 15.0 (v141 toolset)\\n\\nSee also the  ``CMAKE_<LANG>_COMPILER_VERSION`` and\\n``MSVC_TOOLSET_VERSION`` variable.\\n",
        "variable"
    ],
    "PROJECT_BINARY_DIR": [
        "PROJECT_BINARY_DIR\\n------------------\\n\\nFull path to build directory for project.\\n\\nThis is the binary directory of the most recent ``project()`` command.\\n",
        "variable"
    ],
    "PROJECT_DESCRIPTION": [
        "PROJECT_DESCRIPTION\\n-------------------\\n\\nShort project description given to the project command.\\n\\nThis is the description given to the most recently called ``project()``\\ncommand in the current directory scope or above.  To obtain the description\\nof the top level project, see the ``CMAKE_PROJECT_DESCRIPTION``\\nvariable.\\n",
        "variable"
    ],
    "PROJECT_HOMEPAGE_URL": [
        "PROJECT_HOMEPAGE_URL\\n--------------------\\n\\nThe homepage URL of the project.\\n\\nThis is the homepage URL given to the most recently called ``project()``\\ncommand in the current directory scope or above.  To obtain the homepage URL\\nof the top level project, see the ``CMAKE_PROJECT_HOMEPAGE_URL``\\nvariable.\\n",
        "variable"
    ],
    "PROJECT_NAME": [
        "PROJECT_NAME\\n------------\\n\\nName of the project given to the project command.\\n\\nThis is the name given to the most recently called ``project()``\\ncommand in the current directory scope or above.  To obtain the name of\\nthe top level project, see the ``CMAKE_PROJECT_NAME`` variable.\\n",
        "variable"
    ],
    "PROJECT_SOURCE_DIR": [
        "PROJECT_SOURCE_DIR\\n------------------\\n\\nTop level source directory for the current project.\\n\\nThis is the source directory of the most recent ``project()`` command.\\n",
        "variable"
    ],
    "PROJECT_VERSION": [
        "PROJECT_VERSION\\n---------------\\n\\nValue given to the ``VERSION`` option of the most recent call to the\\n``project()`` command, if any.\\n\\nSee also the component-wise version variables\\n``PROJECT_VERSION_MAJOR``,\\n``PROJECT_VERSION_MINOR``,\\n``PROJECT_VERSION_PATCH``, and\\n``PROJECT_VERSION_TWEAK``.\\n",
        "variable"
    ],
    "PROJECT_VERSION_MAJOR": [
        "PROJECT_VERSION_MAJOR\\n---------------------\\n\\nFirst version number component of the ``PROJECT_VERSION``\\nvariable as set by the ``project()`` command.\\n",
        "variable"
    ],
    "PROJECT_VERSION_MINOR": [
        "PROJECT_VERSION_MINOR\\n---------------------\\n\\nSecond version number component of the ``PROJECT_VERSION``\\nvariable as set by the ``project()`` command.\\n",
        "variable"
    ],
    "PROJECT_VERSION_PATCH": [
        "PROJECT_VERSION_PATCH\\n---------------------\\n\\nThird version number component of the ``PROJECT_VERSION``\\nvariable as set by the ``project()`` command.\\n",
        "variable"
    ],
    "PROJECT_VERSION_TWEAK": [
        "PROJECT_VERSION_TWEAK\\n---------------------\\n\\nFourth version number component of the ``PROJECT_VERSION``\\nvariable as set by the ``project()`` command.\\n",
        "variable"
    ],
    "UNIX": [
        "UNIX\\n----\\n\\nSet to ``True`` when the target system is UNIX or UNIX-like\\n(e.g. ``APPLE`` and ``CYGWIN``).  The\\n``CMAKE_SYSTEM_NAME`` variable should be queried if\\na more specific understanding of the target system is required.\\n",
        "variable"
    ],
    "WIN32": [
        "WIN32\\n-----\\n\\nSet to ``True`` when the target system is Windows, including Win64.\\n",
        "variable"
    ],
    "WINCE": [
        "WINCE\\n-----\\n\\nTrue when the ``CMAKE_SYSTEM_NAME`` variable is set\\nto ``WindowsCE``.\\n",
        "variable"
    ],
    "WINDOWS_PHONE": [
        "WINDOWS_PHONE\\n-------------\\n\\nTrue when the ``CMAKE_SYSTEM_NAME`` variable is set\\nto ``WindowsPhone``.\\n",
        "variable"
    ],
    "WINDOWS_STORE": [
        "WINDOWS_STORE\\n-------------\\n\\nTrue when the ``CMAKE_SYSTEM_NAME`` variable is set\\nto ``WindowsStore``.\\n",
        "variable"
    ],
    "XCODE": [
        "XCODE\\n-----\\n\\n``True`` when using ``Xcode`` generator.\\n",
        "variable"
    ],
    "XCODE_VERSION": [
        "XCODE_VERSION\\n-------------\\n\\nVersion of Xcode (``Xcode`` generator only).\\n\\nUnder the Xcode generator, this is the version of Xcode as specified\\nin ``Xcode.app/Contents/version.plist`` (such as ``3.1.2``).\\n",
        "variable"
    ]
}